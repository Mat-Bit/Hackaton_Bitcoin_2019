/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isTypeof } from '../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Portinari.
 */
var PoTimePipe = /** @class */ (function () {
    function PoTimePipe() {
    }
    /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    PoTimePipe.prototype.transform = /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    function (time, format) {
        /** @type {?} */
        var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            /** @type {?} */
            var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            /** @type {?} */
            var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            /** @type {?} */
            var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    };
    /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    PoTimePipe.prototype.addDotMiliseconds = /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    function (miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    };
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    PoTimePipe.prototype.formatValue = /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    function (time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            /** @type {?} */
            var hour = time.substring(0, 2);
            /** @type {?} */
            var minutes = time.substring(3, 5);
            /** @type {?} */
            var seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace("." + formatMiliseconds, miliseconds);
            return format;
        }
        else {
            return time;
        }
    };
    /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    PoTimePipe.prototype.getFormatMiliseconds = /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    function (amountOfF) {
        /** @type {?} */
        var formatMiliseconds = '';
        for (var i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    };
    PoTimePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'po_time'
                },] }
    ];
    return PoTimePipe;
}());
export { PoTimePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGltZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvcG8tdGltZS9wby10aW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7Ozs7Ozs7QUFTNUM7SUFBQTtJQXVEQSxDQUFDOzs7Ozs7SUFsREMsOEJBQVM7Ozs7O0lBQVQsVUFBVSxJQUFZLEVBQUUsTUFBZTs7WUFFL0IsU0FBUyxHQUFHLG9FQUFvRTtRQUV0RixJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTs7Z0JBRTlDLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O2dCQUUxRSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUM7O2dCQUNqRixpQkFBaUIsR0FBVyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDO1lBRXRFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7Ozs7O0lBRU8sc0NBQWlCOzs7Ozs7SUFBekIsVUFBMEIsV0FBbUIsRUFBRSxTQUFpQjtRQUM5RCxJQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUU7WUFDNUIsV0FBVyxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUM7U0FDakM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOzs7Ozs7Ozs7SUFFTyxnQ0FBVzs7Ozs7Ozs7SUFBbkIsVUFBb0IsSUFBWSxFQUFFLE1BQWMsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtRQUM5RixJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7O2dCQUNaLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7O2dCQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDOztnQkFDOUIsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVwQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFJLGlCQUFtQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBRTlELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDOzs7Ozs7SUFFTyx5Q0FBb0I7Ozs7O0lBQTVCLFVBQTZCLFNBQWlCOztZQUN4QyxpQkFBaUIsR0FBVyxFQUFFO1FBRWxDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbEMsaUJBQWlCLElBQUksR0FBRyxDQUFDO1NBQzFCO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDOztnQkFyREYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxTQUFTO2lCQUNoQjs7SUFxREQsaUJBQUM7Q0FBQSxBQXZERCxJQXVEQztTQXBEWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFBpcGUgcmVzcG9uc8OhdmVsIHBvciBhcHJlc2VudGFyIHVtIGhvcsOhcmlvIGJhc2VhZG8gbm8gZm9ybWF0byBkZSBlbnRyYWRhIGRlZmluaWRvIG5hIEFQSSBkYSBQb3J0aW5hcmkuXG4gKi9cbkBQaXBlKHtcbiAgbmFtZTogJ3BvX3RpbWUnXG59KVxuZXhwb3J0IGNsYXNzIFBvVGltZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICB0cmFuc2Zvcm0odGltZTogc3RyaW5nLCBmb3JtYXQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuXG4gICAgY29uc3QgaG91clJlZ2V4ID0gL14oKFswLTFdWzAtOV0pfCgyWzAtM10pKTpbMC01XVswLTldOlswLTVdWzAtOV1bXFwuXT8oWzAtOV17MSw2fSk/JC9nO1xuXG4gICAgaWYgKGlzVHlwZW9mKHRpbWUsICdzdHJpbmcnKSAmJiBob3VyUmVnZXgudGVzdCh0aW1lKSkge1xuXG4gICAgICBjb25zdCBhbW91bnRPZkYgPSBmb3JtYXQgPyBmb3JtYXQubGFzdEluZGV4T2YoJ2YnKSAtIGZvcm1hdC5pbmRleE9mKCdmJykgKyAxIDogMDtcblxuICAgICAgY29uc3QgbWlsaXNlY29uZHMgPSB0aGlzLmFkZERvdE1pbGlzZWNvbmRzKHRpbWUuc3Vic3RyaW5nKDksIDkgKyBhbW91bnRPZkYpLCBhbW91bnRPZkYpO1xuICAgICAgY29uc3QgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZyA9IHRoaXMuZ2V0Rm9ybWF0TWlsaXNlY29uZHMoYW1vdW50T2ZGKTtcblxuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0VmFsdWUodGltZSwgZm9ybWF0LCBmb3JtYXRNaWxpc2Vjb25kcywgbWlsaXNlY29uZHMpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgYWRkRG90TWlsaXNlY29uZHMobWlsaXNlY29uZHM6IHN0cmluZywgYW1vdW50T2ZGOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmIChtaWxpc2Vjb25kcyAmJiBhbW91bnRPZkYpIHtcbiAgICAgIG1pbGlzZWNvbmRzID0gJy4nICsgbWlsaXNlY29uZHM7XG4gICAgfVxuICAgIHJldHVybiBtaWxpc2Vjb25kcztcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0VmFsdWUodGltZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZywgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZywgbWlsaXNlY29uZHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHRpbWUgJiYgZm9ybWF0KSB7XG4gICAgICBjb25zdCBob3VyID0gdGltZS5zdWJzdHJpbmcoMCwgMik7XG4gICAgICBjb25zdCBtaW51dGVzID0gdGltZS5zdWJzdHJpbmcoMywgNSk7XG4gICAgICBjb25zdCBzZWNvbmRzID0gdGltZS5zdWJzdHJpbmcoNiwgOCk7XG5cbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCdISCcsIGhvdXIpO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ21tJywgbWludXRlcyk7XG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnc3MnLCBzZWNvbmRzKTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGAuJHtmb3JtYXRNaWxpc2Vjb25kc31gLCBtaWxpc2Vjb25kcyk7XG5cbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rm9ybWF0TWlsaXNlY29uZHMoYW1vdW50T2ZGOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGxldCBmb3JtYXRNaWxpc2Vjb25kczogc3RyaW5nID0gJyc7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mRjsgaSsrKSB7XG4gICAgICBmb3JtYXRNaWxpc2Vjb25kcyArPSAnZic7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdE1pbGlzZWNvbmRzO1xuICB9XG5cbn1cbiJdfQ==