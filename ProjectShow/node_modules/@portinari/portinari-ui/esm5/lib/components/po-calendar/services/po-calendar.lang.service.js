/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var PoCalendarLangService = /** @class */ (function () {
    function PoCalendarLangService() {
        this.language = 'pt';
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.monthLabel = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.yearLabel = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
    }
    /**
     * @param {?} month
     * @return {?}
     */
    PoCalendarLangService.prototype.getMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        return this.months[month][this.language];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getMonthLabel = /**
     * @return {?}
     */
    function () {
        return this.monthLabel[this.language];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getMonthsArray = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrMonths = Array();
        for (var i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.language]);
        }
        return arrMonths;
    };
    /**
     * @param {?} day
     * @return {?}
     */
    PoCalendarLangService.prototype.getWeekDays = /**
     * @param {?} day
     * @return {?}
     */
    function (day) {
        return this.shortWeekDays[day][this.language];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getWeekDaysArray = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrWeekDays = Array();
        for (var i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.language]);
        }
        return arrWeekDays;
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getYearLabel = /**
     * @return {?}
     */
    function () {
        return this.yearLabel[this.language];
    };
    /**
     * @param {?} language
     * @return {?}
     */
    PoCalendarLangService.prototype.setLanguage = /**
     * @param {?} language
     * @return {?}
     */
    function (language) {
        if (language && language.length >= 2) {
            language = language.toLowerCase().slice(0, 2);
            this.language = (language === 'pt' || language === 'en' || language === 'es') ? language : 'pt';
        }
    };
    PoCalendarLangService.decorators = [
        { type: Injectable }
    ];
    return PoCalendarLangService;
}());
export { PoCalendarLangService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.language;
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.months;
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.shortWeekDays;
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.monthLabel;
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.yearLabel;
}
//# sourceMappingURL=data:application/json;base64,