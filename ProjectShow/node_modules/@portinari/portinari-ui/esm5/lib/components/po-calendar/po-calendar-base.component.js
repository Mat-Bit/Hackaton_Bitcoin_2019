/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
/** @type {?} */
var poCalendarLocales = ['pt', 'en', 'es'];
/** @type {?} */
var poCalendarLocaleDefault = 'pt';
/**
 * \@description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
var PoCalendarBaseComponent = /** @class */ (function () {
    function PoCalendarBaseComponent(poDate, poCalendarLangService) {
        this.poDate = poDate;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.monthVisible = false;
        this.yearVisible = false;
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        /**
         * Evento disparado ao selecionar um dia do calendário.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoCalendarBaseComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * @default `pt`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * \@default `pt`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarBaseComponent.prototype, "maxDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} maxDate
         * @return {?}
         */
        function (maxDate) {
            this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarBaseComponent.prototype, "minDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} minDate
         * @return {?}
         */
        function (minDate) {
            this._minDate = this.poDate.getDateForDateRange(minDate, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoCalendarBaseComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.poCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
    };
    PoCalendarBaseComponent.propDecorators = {
        locale: [{ type: Input, args: ['p-locale',] }],
        maxDate: [{ type: Input, args: ['p-max-date',] }],
        minDate: [{ type: Input, args: ['p-min-date',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoCalendarBaseComponent;
}());
export { PoCalendarBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCalendarBaseComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    PoCalendarBaseComponent.prototype._maxDate;
    /**
     * @type {?}
     * @private
     */
    PoCalendarBaseComponent.prototype._minDate;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.currentYear;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.dayVisible;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayDays;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayDecade;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayFinalDecade;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayMonth;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayMonthNumber;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayMonths;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayStartDecade;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayWeekDays;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayYear;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.monthVisible;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.yearVisible;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.currentMonthNumber;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.date;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.dateIso;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.lastDisplay;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.today;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.validatorChange;
    /**
     * Evento disparado ao selecionar um dia do calendário.
     * @type {?}
     */
    PoCalendarBaseComponent.prototype.change;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.poDate;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.poCalendarLangService;
}
//# sourceMappingURL=data:application/json;base64,