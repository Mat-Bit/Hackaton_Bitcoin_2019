/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
var poCalendarServiceFirstWeekDayDefault = 0;
var PoCalendarService = /** @class */ (function () {
    function PoCalendarService() {
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    PoCalendarService.prototype.monthDates = /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        var weeks = [];
        /** @type {?} */
        var week = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarService.prototype.monthDays = /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var getDayOrZero = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date.getMonth() === month ? date : 0;
        });
        return this.monthDates(year, month, getDayOrZero);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarService.prototype.weekStartDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var startDate = new Date(date.getTime());
        while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    PoCalendarService.decorators = [
        { type: Injectable }
    ];
    return PoCalendarService;
}());
export { PoCalendarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2FsZW5kYXIvc2VydmljZXMvcG8tY2FsZW5kYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUFFckMsb0NBQW9DLEdBQVcsQ0FBQztBQUV0RDtJQUFBO0lBOENBLENBQUM7Ozs7Ozs7O0lBM0NDLHNDQUFVOzs7Ozs7O0lBQVYsVUFBVyxJQUFTLEVBQUUsS0FBVSxFQUFFLFlBQXdCLEVBQUUsYUFBeUI7UUFBbkQsNkJBQUEsRUFBQSxtQkFBd0I7UUFBRSw4QkFBQSxFQUFBLG9CQUF5QjtRQUNuRixJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUU7WUFDOUQsTUFBTSxLQUFLLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7O1lBRUssS0FBSyxHQUFlLEVBQUU7O1lBQ3hCLElBQUksR0FBZSxFQUFFOztZQUNyQixDQUFDLEdBQUcsQ0FBQzs7WUFDTCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFFbkMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUVELElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhDLEdBQUc7WUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BELElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbEM7WUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtRQUN0RSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVELHFDQUFTOzs7OztJQUFULFVBQVUsSUFBUyxFQUFFLEtBQVU7O1lBQ3ZCLFlBQVk7Ozs7UUFBRyxVQUFTLElBQVM7WUFDckMsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUE7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUVELHlDQUFhOzs7O0lBQWIsVUFBYyxJQUFTOztZQUNmLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUMsT0FBTyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssb0NBQW9DLEVBQUU7WUFDbEUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOztnQkE1Q0YsVUFBVTs7SUE4Q1gsd0JBQUM7Q0FBQSxBQTlDRCxJQThDQztTQTdDWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IHBvQ2FsZW5kYXJTZXJ2aWNlRmlyc3RXZWVrRGF5RGVmYXVsdDogbnVtYmVyID0gMDtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQ2FsZW5kYXJTZXJ2aWNlIHtcblxuICBtb250aERhdGVzKHllYXI6IGFueSwgbW9udGg6IGFueSwgZGF5Rm9ybWF0dGVyOiBhbnkgPSBudWxsLCB3ZWVrRm9ybWF0dGVyOiBhbnkgPSBudWxsKSB7XG4gICAgaWYgKCh0eXBlb2YgbW9udGggIT09ICdudW1iZXInKSB8fCAobW9udGggPCAwKSB8fCAobW9udGggPiAxMSkpIHtcbiAgICAgIHRocm93IEVycm9yKCgnbW9udGggbXVzdCBiZSBhIG51bWJlciAoSmFuIGlzIDApJykpO1xuICAgIH1cblxuICAgIGNvbnN0IHdlZWtzOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IHdlZWs6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XG5cbiAgICBpZiAoeWVhciA+PSAwICYmIHllYXIgPCAxMDApIHtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhcik7XG4gICAgfVxuXG4gICAgZGF0ZSA9IHRoaXMud2Vla1N0YXJ0RGF0ZShkYXRlKTtcblxuICAgIGRvIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgd2Vlay5wdXNoKGRheUZvcm1hdHRlciA/IGRheUZvcm1hdHRlcihkYXRlKSA6IGRhdGUpO1xuICAgICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICAgIH1cbiAgICAgIHdlZWtzLnB1c2god2Vla0Zvcm1hdHRlciA/IHdlZWtGb3JtYXR0ZXIod2VlaykgOiB3ZWVrKTtcbiAgICAgIHdlZWsgPSBbXTtcbiAgICB9IHdoaWxlICgoZGF0ZS5nZXRNb250aCgpIDw9IG1vbnRoKSAmJiAoZGF0ZS5nZXRGdWxsWWVhcigpID09PSB5ZWFyKSk7XG4gICAgcmV0dXJuIHdlZWtzO1xuICB9XG5cbiAgbW9udGhEYXlzKHllYXI6IGFueSwgbW9udGg6IGFueSkge1xuICAgIGNvbnN0IGdldERheU9yWmVybyA9IGZ1bmN0aW9uKGRhdGU6IGFueSkge1xuICAgICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSA9PT0gbW9udGggPyBkYXRlIDogMDtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm1vbnRoRGF0ZXMoeWVhciwgbW9udGgsIGdldERheU9yWmVybyk7XG4gIH1cblxuICB3ZWVrU3RhcnREYXRlKGRhdGU6IGFueSkge1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICB3aGlsZSAoc3RhcnREYXRlLmdldERheSgpICE9PSBwb0NhbGVuZGFyU2VydmljZUZpcnN0V2Vla0RheURlZmF1bHQpIHtcbiAgICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0RGF0ZTtcbiAgfVxuXG59XG4iXX0=