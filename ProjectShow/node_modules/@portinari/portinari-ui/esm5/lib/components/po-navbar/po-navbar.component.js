/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { PoNavbarBaseComponent } from './po-navbar-base.component';
import { PoNavbarItemsComponent } from './po-navbar-items/po-navbar-items.component';
/** @type {?} */
var poNavbarNavigationWidth = 88;
/** @type {?} */
var poNavbarMenuMedia = 768;
/** @type {?} */
var poNavbarMatchMedia = "(max-width: " + poNavbarMenuMedia + "px)";
/** @type {?} */
var poNavbarTiming = '250ms ease';
/**
 * \@docsExtends PoNavbarBaseComponent
 */
var PoNavbarComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoNavbarComponent, _super);
    function PoNavbarComponent(renderer, builder, changeDetector) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.builder = builder;
        _this.changeDetector = changeDetector;
        _this.showItemsNavigation = false;
        _this.offset = 0;
        _this.onMediaQueryChange = (/**
         * @param {?} changed
         * @return {?}
         */
        function (changed) {
            _this.changeNavbarMenuItems(changed.matches, _this.menuItems, _this.items, _this.literals.navbarLinks);
        });
        _this.windowResizeListener = _this.renderer.listen(window, 'resize', _this.displayItemsNavigation.bind(_this));
        return _this;
    }
    Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return this.offset === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableRight", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disableRight && this.offset !== 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoNavbarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.displayItemsNavigation();
        if (this.menu) {
            this.initNavbarMenu();
        }
    };
    /**
     * @return {?}
     */
    PoNavbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
    };
    /**
     * @param {?} orientation
     * @return {?}
     */
    PoNavbarComponent.prototype.navigateItems = /**
     * @param {?} orientation
     * @return {?}
     */
    function (orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.allNavbarItemsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.navbarItems.allNavbarItems.reduce((/**
         * @param {?} previous
         * @param {?} current
         * @return {?}
         */
        function (previous, current) { return previous + current.nativeElement.offsetWidth; }), 0);
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    PoNavbarComponent.prototype.animate = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        /** @type {?} */
        var animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    PoNavbarComponent.prototype.buildTransitionAnimation = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        return this.builder.build([
            animate(poNavbarTiming, keyframes([style({ transform: "translateX(" + -offset + "px)" })]))
        ]);
    };
    /**
     * @private
     * @param {?} isCollapsedMedia
     * @param {?} menuItems
     * @param {?} navbarItems
     * @param {?} label
     * @return {?}
     */
    PoNavbarComponent.prototype.changeNavbarMenuItems = /**
     * @private
     * @param {?} isCollapsedMedia
     * @param {?} menuItems
     * @param {?} navbarItems
     * @param {?} label
     * @return {?}
     */
    function (isCollapsedMedia, menuItems, navbarItems, label) {
        if (isCollapsedMedia) {
            /** @type {?} */
            var subItems = [{ label: label, subItems: navbarItems }];
            this.menu.menus = tslib_1.__spread(subItems, menuItems);
        }
        else {
            this.menu.menus = menuItems;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.calculateLeftNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var calculatedOffset;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        function (navbarItem) {
            /** @type {?} */
            var navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            /** @type {?} */
            var navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= _this.offset) {
                calculatedOffset = navbarItemOffset - (_this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        }));
        return calculatedOffset;
    };
    /**
     * @private
     * @param {?} itemBreakPoint
     * @return {?}
     */
    PoNavbarComponent.prototype.calculateRightNavigation = /**
     * @private
     * @param {?} itemBreakPoint
     * @return {?}
     */
    function (itemBreakPoint) {
        /** @type {?} */
        var calculatedOffset;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        function (navbarItem) {
            /** @type {?} */
            var offsetLeft = navbarItem.nativeElement.offsetLeft;
            /** @type {?} */
            var finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        }));
        return calculatedOffset;
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.displayItemsNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.initNavbarMenu = /**
     * @private
     * @return {?}
     */
    function () {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        this.menuItems = this.menu.menus;
        if (window.innerWidth < poNavbarMenuMedia) {
            this.changeNavbarMenuItems(true, this.menuItems, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.navbarItemsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.navigateLeft = /**
     * @private
     * @return {?}
     */
    function () {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.navigateRight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        /** @type {?} */
        var itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.setOffsetToZero = /**
     * @private
     * @return {?}
     */
    function () {
        this.offset = 0;
    };
    /**
     * @private
     * @param {?} maxAllowedOffset
     * @return {?}
     */
    PoNavbarComponent.prototype.validateMaxOffset = /**
     * @private
     * @param {?} maxAllowedOffset
     * @return {?}
     */
    function (maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    PoNavbarComponent.prototype.validateMenuLogo = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.menu.logo && this.logo) {
            this.menu.logo = undefined;
            this.menu.changeDetector.detectChanges();
        }
    };
    PoNavbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar',
                    template: "<header class=\"po-navbar\"\n  [ngClass]=\"{'po-navbar-shadow' : shadow}\">\n\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{'po-navbar-logo-menu' : !!menu, 'po-navbar-no-logo' : !logo }\"\n    [p-logo]=\"logo\">\n  </po-navbar-logo>\n\n  <po-navbar-items\n    class=\"po-navbar-items\"\n    [p-items]=\"items\">\n  </po-navbar-items>\n\n  <po-navbar-item-navigation *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\">\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions\n    class=\"po-navbar-actions\"\n    [p-icon-actions]=\"iconActions\">\n  </po-navbar-actions>\n\n</header>\n\n<po-menu *ngIf=\"!menu\"\n  [p-menus]=\"items\">\n</po-menu>"
                }] }
    ];
    /** @nocollapse */
    PoNavbarComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: AnimationBuilder },
        { type: ChangeDetectorRef }
    ]; };
    PoNavbarComponent.propDecorators = {
        navbarItemsElement: [{ type: ViewChild, args: [PoNavbarItemsComponent, { read: ElementRef, static: true },] }],
        navbarItems: [{ type: ViewChild, args: [PoNavbarItemsComponent, { static: true },] }]
    };
    return PoNavbarComponent;
}(PoNavbarBaseComponent));
export { PoNavbarComponent };
if (false) {
    /** @type {?} */
    PoNavbarComponent.prototype.disableRight;
    /** @type {?} */
    PoNavbarComponent.prototype.showItemsNavigation;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.mediaQuery;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.offset;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.menuItems;
    /**
     * @type {?}
     * @protected
     */
    PoNavbarComponent.prototype.windowResizeListener;
    /** @type {?} */
    PoNavbarComponent.prototype.navbarItemsElement;
    /** @type {?} */
    PoNavbarComponent.prototype.navbarItems;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.onMediaQueryChange;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.builder;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,