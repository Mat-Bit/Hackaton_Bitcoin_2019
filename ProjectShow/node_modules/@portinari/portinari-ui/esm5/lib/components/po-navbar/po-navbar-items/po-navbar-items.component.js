/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { NavigationCancel, NavigationEnd, Router } from '@angular/router';
import { PoNavbarItemComponent } from './po-navbar-item/po-navbar-item.component';
var PoNavbarItemsComponent = /** @class */ (function () {
    function PoNavbarItemsComponent(router) {
        this.router = router;
    }
    /**
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.routeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscribeToRoute();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.selectItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.selectedItem = item;
    };
    /**
     * @private
     * @param {?} urlRouter
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.checkActiveItemByUrl = /**
     * @private
     * @param {?} urlRouter
     * @return {?}
     */
    function (urlRouter) {
        this.selectedItem = this.items.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.link === urlRouter; }));
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.checkRouterChildrenFragments = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? "/" + childrenPrimary.segments.map((/**
         * @param {?} it
         * @return {?}
         */
        function (it) { return it.path; })).join('/') : '';
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.subscribeToRoute = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                /** @type {?} */
                var urlRouter = _this.checkRouterChildrenFragments();
                _this.checkActiveItemByUrl(urlRouter);
            }
        }));
    };
    PoNavbarItemsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-items',
                    template: "<nav>\n  <ul class=\"po-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\"\n      class=\"po-navbar-item\"\n      [class.po-navbar-item-selected]=\"selectedItem === item\">\n      <po-navbar-item\n        [p-action]=\"item.action\"\n        [p-clickable]=\"selectedItem !== item\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        (p-click)=\"selectItem(item)\">\n      </po-navbar-item>\n    </li>\n  </ul>\n</nav>\n"
                }] }
    ];
    /** @nocollapse */
    PoNavbarItemsComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    PoNavbarItemsComponent.propDecorators = {
        navbarItemsContainer: [{ type: ViewChild, args: ['navbarItemsContainer', { read: ElementRef, static: true },] }],
        allNavbarItems: [{ type: ViewChildren, args: [PoNavbarItemComponent, { read: ElementRef },] }],
        items: [{ type: Input, args: ['p-items',] }]
    };
    return PoNavbarItemsComponent;
}());
export { PoNavbarItemsComponent };
if (false) {
    /** @type {?} */
    PoNavbarItemsComponent.prototype.selectedItem;
    /**
     * @type {?}
     * @private
     */
    PoNavbarItemsComponent.prototype.routeSubscription;
    /** @type {?} */
    PoNavbarItemsComponent.prototype.navbarItemsContainer;
    /** @type {?} */
    PoNavbarItemsComponent.prototype.allNavbarItems;
    /** @type {?} */
    PoNavbarItemsComponent.prototype.items;
    /**
     * @type {?}
     * @private
     */
    PoNavbarItemsComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLWl0ZW1zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tbmF2YmFyL3BvLW5hdmJhci1pdGVtcy9wby1uYXZiYXItaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFbEY7SUFnQkUsZ0NBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUksQ0FBQzs7OztJQUV2Qyw0Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkMsQ0FBQzs7OztJQUVELHlDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsMkNBQVU7Ozs7SUFBVixVQUFXLElBQWtCO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7Ozs7OztJQUVPLHFEQUFvQjs7Ozs7SUFBNUIsVUFBNkIsU0FBaUI7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUF2QixDQUF1QixFQUFDLENBQUM7SUFDdkUsQ0FBQzs7Ozs7SUFFTyw2REFBNEI7Ozs7SUFBcEM7O1lBQ1EsZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFFdEYsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLE1BQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsSUFBSSxFQUFQLENBQU8sRUFBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzVGLENBQUM7Ozs7O0lBRU8saURBQWdCOzs7O0lBQXhCO1FBQUEsaUJBT0M7UUFOQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsR0FBRztZQUN2RCxJQUFJLEdBQUcsWUFBWSxhQUFhLElBQUksR0FBRyxZQUFZLGdCQUFnQixFQUFFOztvQkFDN0QsU0FBUyxHQUFHLEtBQUksQ0FBQyw0QkFBNEIsRUFBRTtnQkFDckQsS0FBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3RDO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOztnQkEvQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLHllQUErQztpQkFDaEQ7Ozs7Z0JBVnlDLE1BQU07Ozt1Q0FpQjdDLFNBQVMsU0FBQyxzQkFBc0IsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtpQ0FFcEUsWUFBWSxTQUFDLHFCQUFxQixFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTt3QkFFeEQsS0FBSyxTQUFDLFNBQVM7O0lBbUNsQiw2QkFBQztDQUFBLEFBakRELElBaURDO1NBN0NZLHNCQUFzQjs7O0lBRWpDLDhDQUEyQjs7Ozs7SUFFM0IsbURBQXdDOztJQUV4QyxzREFBd0c7O0lBRXhHLGdEQUEyRjs7SUFFM0YsdUNBQTZDOzs7OztJQUVqQyx3Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgUXVlcnlMaXN0LCBWaWV3Q2hpbGQsIFZpZXdDaGlsZHJlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVuZCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBvTmF2YmFySXRlbSB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbmF2YmFyLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTmF2YmFySXRlbUNvbXBvbmVudCB9IGZyb20gJy4vcG8tbmF2YmFyLWl0ZW0vcG8tbmF2YmFyLWl0ZW0uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tbmF2YmFyLWl0ZW1zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLW5hdmJhci1pdGVtcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9OYXZiYXJJdGVtc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBzZWxlY3RlZEl0ZW06IFBvTmF2YmFySXRlbTtcblxuICBwcml2YXRlIHJvdXRlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgQFZpZXdDaGlsZCgnbmF2YmFySXRlbXNDb250YWluZXInLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSBuYXZiYXJJdGVtc0NvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICBAVmlld0NoaWxkcmVuKFBvTmF2YmFySXRlbUNvbXBvbmVudCwgeyByZWFkOiBFbGVtZW50UmVmIH0pIGFsbE5hdmJhckl0ZW1zOiAgUXVlcnlMaXN0PGFueT47XG5cbiAgQElucHV0KCdwLWl0ZW1zJykgaXRlbXM6IEFycmF5PFBvTmF2YmFySXRlbT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikgeyB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5yb3V0ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVUb1JvdXRlKCk7XG4gIH1cblxuICBzZWxlY3RJdGVtKGl0ZW06IFBvTmF2YmFySXRlbSkge1xuICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gaXRlbTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tBY3RpdmVJdGVtQnlVcmwodXJsUm91dGVyOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IHRoaXMuaXRlbXMuZmluZChpdGVtID0+IGl0ZW0ubGluayA9PT0gdXJsUm91dGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tSb3V0ZXJDaGlsZHJlbkZyYWdtZW50cygpIHtcbiAgICBjb25zdCBjaGlsZHJlblByaW1hcnkgPSB0aGlzLnJvdXRlci5wYXJzZVVybCh0aGlzLnJvdXRlci51cmwpLnJvb3QuY2hpbGRyZW5bJ3ByaW1hcnknXTtcblxuICAgIHJldHVybiBjaGlsZHJlblByaW1hcnkgPyBgLyR7Y2hpbGRyZW5QcmltYXJ5LnNlZ21lbnRzLm1hcChpdCA9PiBpdC5wYXRoKS5qb2luKCcvJyl9YCA6ICcnO1xuICB9XG5cbiAgcHJpdmF0ZSBzdWJzY3JpYmVUb1JvdXRlKCkge1xuICAgIHRoaXMucm91dGVTdWJzY3JpcHRpb24gPSB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKHZhbCA9PiB7XG4gICAgICBpZiAodmFsIGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCB8fCB2YWwgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uQ2FuY2VsKSB7XG4gICAgICAgIGNvbnN0IHVybFJvdXRlciA9IHRoaXMuY2hlY2tSb3V0ZXJDaGlsZHJlbkZyYWdtZW50cygpO1xuICAgICAgICB0aGlzLmNoZWNrQWN0aXZlSXRlbUJ5VXJsKHVybFJvdXRlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuIl19