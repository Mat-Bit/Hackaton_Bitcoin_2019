/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { browserLanguage, convertToBoolean, poLocaleDefault } from '../../utils/util';
import { PoMenuComponent } from '../po-menu';
/** @type {?} */
export var poNavbarLiteralsDefault = {
    en: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    })),
    es: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    })),
    pt: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    })),
    ru: (/** @type {?} */ ({
        navbarLinks: 'Navbar связи'
    }))
};
/**
 * \@description
 *
 * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 * @abstract
 */
var PoNavbarBaseComponent = /** @class */ (function () {
    function PoNavbarBaseComponent() {
        this._iconActions = [];
        this._items = [];
        this._shadow = false;
    }
    Object.defineProperty(PoNavbarBaseComponent.prototype, "iconActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconActions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._iconActions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de items do `po-navbar`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de items do `po-navbar`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poNavbarLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com a literal usada na propriedade `p-literals`.
         *
         * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
         *
         * ```
         *  const customLiterals: PoNavbarLiterals = {
         *    navbarLinks: 'Itens de navegação'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-navbar
         *   [p-literals]="customLiterals">
         * </po-navbar>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com a literal usada na propriedade `p-literals`.
         *
         * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
         *
         * ```
         *  const customLiterals: PoNavbarLiterals = {
         *    navbarLinks: 'Itens de navegação'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-navbar
         *   [p-literals]="customLiterals">
         * </po-navbar>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poNavbarLiteralsDefault[poLocaleDefault], poNavbarLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poNavbarLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarBaseComponent.prototype, "logo", {
        get: /**
         * @return {?}
         */
        function () {
            return this._logo;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a logo apresentada `po-navbar`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a logo apresentada `po-navbar`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._logo = value;
            if (this.menu) {
                this.validateMenuLogo();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarBaseComponent.prototype, "shadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._shadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica uma sombra na parte inferior do `po-navbar`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica uma sombra na parte inferior do `po-navbar`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._shadow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoNavbarBaseComponent.propDecorators = {
        iconActions: [{ type: Input, args: ['p-icon-actions',] }],
        items: [{ type: Input, args: ['p-items',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        logo: [{ type: Input, args: ['p-logo',] }],
        menu: [{ type: Input, args: ['p-menu',] }],
        shadow: [{ type: Input, args: ['p-shadow',] }]
    };
    return PoNavbarBaseComponent;
}());
export { PoNavbarBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._iconActions;
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._logo;
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._shadow;
    /**
     * \@optional
     *
     * \@description
     *
     * Caso já possua um menu na aplicação o mesmo deve ser repassado para essa propriedade para que quando entre em modo
     * responsivo os items do `po-navbar` possam ser adicionados no primeiro item do menu definido.
     *
     * > Ao utilizar menu e navbar com logo mantém apenas a logo do navbar.
     *
     * Exemplo:
     *
     * ```
     * <po-navbar
     *  [p-items]="items"
     *  [p-icon-actions]="iconActions"
     *  [p-menu]="userMenu">
     * </po-navbar>
     * <div class="po-wrapper">
     *  <po-menu #userMenu
     *   [p-menus]="[{ label: 'Item 1', link: '/' }]">
     *  </po-menu>
     * </div>
     * ```
     * @type {?}
     */
    PoNavbarBaseComponent.prototype.menu;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoNavbarBaseComponent.prototype.validateMenuLogo = function () { };
}
//# sourceMappingURL=data:application/json;base64,