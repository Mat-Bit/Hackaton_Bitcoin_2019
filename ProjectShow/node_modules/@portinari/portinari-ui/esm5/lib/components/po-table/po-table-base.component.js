/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToBoolean, isTypeof, sortValues, poLocaleDefault } from '../../utils/util';
import { PoTableColumnSortType } from './enums/po-table-column-sort-type.enum';
/** @type {?} */
export var poTableContainer = ['border', 'shadow'];
/** @type {?} */
export var poTableContainerDefault = 'border';
/** @type {?} */
export var poTableLiteralsDefault = {
    en: (/** @type {?} */ ({
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        noVisibleColumn: 'No visible column',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle',
        columnsManager: 'Columns manager'
    })),
    es: (/** @type {?} */ ({
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        noVisibleColumn: 'Sin columnas visibles',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo',
        columnsManager: 'Gerente de columna'
    })),
    pt: (/** @type {?} */ ({
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        noVisibleColumn: 'Nenhuma coluna visível',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa',
        columnsManager: 'Gerenciador de colunas'
    })),
    ru: (/** @type {?} */ ({
        noColumns: 'Нет определения столбца',
        noData: 'Данные не найдены',
        noVisibleColumn: 'нет видимых столбцов',
        loadingData: 'погрузка',
        loadMoreData: 'загрузка',
        seeCompleteSubtitle: 'Посмотреть полный субтитр',
        completeSubtitle: 'Полный заголовок',
        columnsManager: 'менеджер колонок'
    }))
};
/**
 * \@description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 * @abstract
 */
var PoTableBaseComponent = /** @class */ (function () {
    function PoTableBaseComponent(poDate) {
        this.poDate = poDate;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._hideTextOverflow = false;
        this._loading = false;
        /**
         * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allSelected = new EventEmitter();
        /**
         * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allUnselected = new EventEmitter();
        /**
         * Ação executada ao selecionar uma linha do `po-table`.
         */
        this.selected = new EventEmitter();
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que está ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação executada ao ordenar colunas da tabela.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.sortBy = new EventEmitter();
        /**
         * Ação executada ao desmarcar a seleção de uma linha do `po-table`.
         */
        this.unselected = new EventEmitter();
        this.selectAll = false;
        this.sortedColumn = { property: (/** @type {?} */ (null)), ascending: true };
    }
    Object.defineProperty(PoTableBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         */
        set: /**
         * \@description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = Array.isArray(items) ? items : [];
            // when haven't items, selectAll should be unchecked.
            if (!this.hasItems()) {
                this.selectAll = false;
            }
            else if (!this.hasColumns) {
                this.columns = this.getDefaultColumns(items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            this._columns = columns || [];
            if (this._columns.length) {
                this.setColumnLink();
                this.calculateWidthHeaders();
            }
            else if (this.hasItems()) {
                this._columns = this.getDefaultColumns(this.items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "container", {
        get: /**
         * @return {?}
         */
        function () {
            return this._container;
        },
        /**
         * @optional
         *
         * @description
         *
         * Adiciona um contorno arredondado ao `po-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * @default `border`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Adiciona um contorno arredondado ao `po-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * \@default `border`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
            this.showContainer(this._container);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "hideTextOverflow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideTextOverflow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
         * @param {?} hideTextOverflow
         * @return {?}
         */
        function (hideTextOverflow) {
            this._hideTextOverflow = convertToBoolean(hideTextOverflow);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
            this.calculateHeightTableContainer(height);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "hideDetail", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideDetail;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * \@default `false`
         * @param {?} hideDetail
         * @return {?}
         */
        function (hideDetail) {
            this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poTableLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-table
         *   [p-literals]="customLiterals">
         * </po-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-table
         *   [p-literals]="customLiterals">
         * </po-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poTableLiteralsDefault[poLocaleDefault], poTableLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poTableLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * \@default `false`
         * @param {?} loading
         * @return {?}
         */
        function (loading) {
            this._loading = convertToBoolean(loading);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "checkbox", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checkbox;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * \@default `false`
         * @param {?} checkbox
         * @return {?}
         */
        function (checkbox) {
            this._checkbox = (/** @type {?} */ (checkbox)) === '' ? true : convertToBoolean(checkbox);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            this._actions = actions;
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setSort", {
        set: /**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this.sort = sort === '' ? false : convertToBoolean(sort);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setShowMoreDisabled", {
        set: /**
         * @param {?} showMoreDisabled
         * @return {?}
         */
        function (showMoreDisabled) {
            this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setStriped", {
        set: /**
         * @param {?} striped
         * @return {?}
         */
        function (striped) {
            this.striped = striped === '' ? false : convertToBoolean(striped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setHideSelectAll", {
        set: /**
         * @param {?} hideSelectAll
         * @return {?}
         */
        function (hideSelectAll) {
            this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setSingleSelect", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.singleSelect = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "sortType", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.sortedColumn.ascending ? PoTableColumnSortType.Ascending : PoTableColumnSortType.Descending;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
    };
    Object.defineProperty(PoTableBaseComponent.prototype, "hasColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.columns && this.columns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.selectAllRows = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.$selected = _this.selectAll;
            }));
            this.emitSelectAllEvents(this.selectAll, this.items);
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.selectRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.selectDetailRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.emitSelectEvents(row);
    };
    // Retorna a coluna da lista de colunas que é do tipo detail
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.getColumnMasterDetail = 
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    function () {
        return this.columns.find((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return col.type === 'detail'; }));
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    PoTableBaseComponent.prototype.getClassColor = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        return column.color ? "po-text-" + this.getColumnColor(row, column) : '';
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    PoTableBaseComponent.prototype.getColumnColor = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        /** @type {?} */
        var columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    };
    // Retorna as colunas com status
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.getSubtitleColumns = 
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    function () {
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return col.type === 'subtitle'; }));
    };
    // Retorna as colunas com ícones
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.getIconColumns = 
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    function () {
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return col.type === 'icon'; }));
    };
    // Retorna o nome da coluna do tipo detail
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.getNameColumnDetail = 
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var detail = this.getColumnMasterDetail();
        return detail ? detail.property : null;
    };
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     * @return {?}
     */
    PoTableBaseComponent.prototype.getSelectedRows = /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     * @return {?}
     */
    function () {
        return this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected; }));
    };
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     * @return {?}
     */
    PoTableBaseComponent.prototype.getUnselectedRows = /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     * @return {?}
     */
    function () {
        return this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !item.$selected; }));
    };
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.toggleRowAction = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var toggleShowAction = row.$showAction;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.$showAction) {
                item.$showAction = false;
            }
        }));
        row.$showAction = !toggleShowAction;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PoTableBaseComponent.prototype.sortColumn = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (!this.sort || column.type === 'detail') {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortBy.emit({ column: column, type: this.sortType });
        this.sortedColumn.property = column;
    };
    /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    PoTableBaseComponent.prototype.sortArray = /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    function (column, ascending) {
        var _this = this;
        this.items.sort((/**
         * @param {?} leftSide
         * @param {?} rightSide
         * @return {?}
         */
        function (leftSide, rightSide) {
            if (column.type === 'date' || column.type === 'dateTime') {
                return _this.poDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
            }
            else {
                return sortValues(leftSide[column.property], rightSide[column.property], ascending);
            }
        }));
    };
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
        this.showMore.emit(sort);
    };
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    PoTableBaseComponent.prototype.getDefaultColumns = /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var keys = Object.keys(item);
        return keys.filter((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return (typeof item[key] !== 'object'); })).map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return { label: capitalizeFirstLetter(key), property: key };
        }));
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.configAfterSelectRow = /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    function (rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    };
    /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    PoTableBaseComponent.prototype.emitSelectAllEvents = /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    function (selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    };
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.emitSelectEvents = /**
     * @private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    PoTableBaseComponent.prototype.isEverySelected = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var someCheckedOrIndeterminate = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected || item.$selected === null; });
        /** @type {?} */
        var everyChecked = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected; });
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    PoTableBaseComponent.prototype.setColumnLink = /**
     * @private
     * @return {?}
     */
    function () {
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        }));
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.unselectOtherRows = /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    function (rows, row) {
        rows.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item !== row) {
                item.$selected = false;
            }
        }));
    };
    PoTableBaseComponent.propDecorators = {
        items: [{ type: Input, args: ['p-items',] }],
        columns: [{ type: Input, args: ['p-columns',] }],
        container: [{ type: Input, args: ['p-container',] }],
        hideTextOverflow: [{ type: Input, args: ['p-hide-text-overflow',] }],
        height: [{ type: Input, args: ['p-height',] }],
        hideDetail: [{ type: Input, args: ['p-hide-detail',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        loading: [{ type: Input, args: ['p-loading',] }],
        checkbox: [{ type: Input, args: ['p-checkbox',] }],
        actions: [{ type: Input, args: ['p-actions',] }],
        setSort: [{ type: Input, args: ['p-sort',] }],
        setShowMoreDisabled: [{ type: Input, args: ['p-show-more-disabled',] }],
        setStriped: [{ type: Input, args: ['p-striped',] }],
        setHideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
        setSingleSelect: [{ type: Input, args: ['p-single-select',] }],
        maxColumns: [{ type: Input, args: ['p-max-columns',] }],
        allSelected: [{ type: Output, args: ['p-all-selected',] }],
        allUnselected: [{ type: Output, args: ['p-all-unselected',] }],
        selected: [{ type: Output, args: ['p-selected',] }],
        showMore: [{ type: Output, args: ['p-show-more',] }],
        sortBy: [{ type: Output, args: ['p-sort-by',] }],
        unselected: [{ type: Output, args: ['p-unselected',] }]
    };
    return PoTableBaseComponent;
}());
export { PoTableBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._checkbox;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._container;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._hideDetail;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._hideTextOverflow;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._loading;
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.sort;
    /**
     * \@description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.showMoreDisabled;
    /**
     * \@description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.striped;
    /**
     * \@description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.hideSelectAll;
    /**
     * \@description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     * @type {?}
     */
    PoTableBaseComponent.prototype.singleSelect;
    /**
     * \@optional
     *
     * \@description
     *
     * Define uma quantidade máxima de colunas que serão exibidas na tabela.
     *
     * Quando chegar no valor informado, as colunas que não estiverem selecionadas ficarão
     * desabilitadas e caso houver mais colunas visíveis do que o permitido, as excedentes
     * serão ignoradas por ordem de posição.
     * @type {?}
     */
    PoTableBaseComponent.prototype.maxColumns;
    /**
     * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    PoTableBaseComponent.prototype.allSelected;
    /**
     * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    PoTableBaseComponent.prototype.allUnselected;
    /**
     * Ação executada ao selecionar uma linha do `po-table`.
     * @type {?}
     */
    PoTableBaseComponent.prototype.selected;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que está ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     * @type {?}
     */
    PoTableBaseComponent.prototype.showMore;
    /**
     * Ação executada ao ordenar colunas da tabela.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     * @type {?}
     */
    PoTableBaseComponent.prototype.sortBy;
    /**
     * Ação executada ao desmarcar a seleção de uma linha do `po-table`.
     * @type {?}
     */
    PoTableBaseComponent.prototype.unselected;
    /** @type {?} */
    PoTableBaseComponent.prototype.selectAll;
    /** @type {?} */
    PoTableBaseComponent.prototype.sortedColumn;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype.poDate;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    PoTableBaseComponent.prototype.calculateHeightTableContainer = function (height) { };
    /**
     * @abstract
     * @return {?}
     */
    PoTableBaseComponent.prototype.calculateWidthHeaders = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} container
     * @return {?}
     */
    PoTableBaseComponent.prototype.showContainer = function (container) { };
}
//# sourceMappingURL=data:application/json;base64,