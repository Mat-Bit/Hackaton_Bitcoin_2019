/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <div *p-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <po-table
 *        [p-columns]="columns"
 *        [p-items]="items">
 *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
var PoTableRowTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoTableRowTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoTableRowTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-table-row-template]'
                },] }
    ];
    /** @nocollapse */
    PoTableRowTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    PoTableRowTemplateDirective.propDecorators = {
        poTableRowTemplateShow: [{ type: Input, args: ['p-table-row-template-show',] }]
    };
    return PoTableRowTemplateDirective;
}());
export { PoTableRowTemplateDirective };
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor booleano, informando se apresentará o template da linha.
     * Serão passados o objeto da linha e o indice da mesma por parâmetro, para que seja possível
     * tomar uma decisão a partir do objeto da linha corrente.
     *
     * Caso não ser utilizado esta propriedade, serão apresentados todos os detalhes das linhas.
     *
     * \@default `true`
     * @type {?}
     */
    PoTableRowTemplateDirective.prototype.poTableRowTemplateShow;
    /** @type {?} */
    PoTableRowTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtcm93LXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtcm93LXRlbXBsYXRlL3BvLXRhYmxlLXJvdy10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwRjlEO0lBb0JFLHNFQUFzRTtJQUN0RSxxQ0FBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUksQ0FBQzs7Z0JBckJ0RCxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtpQkFDbkM7Ozs7Z0JBNUYwQixXQUFXOzs7eUNBNEduQyxLQUFLLFNBQUMsMkJBQTJCOztJQUtwQyxrQ0FBQztDQUFBLEFBdkJELElBdUJDO1NBcEJZLDJCQUEyQjs7Ozs7Ozs7Ozs7Ozs7OztJQWV0Qyw2REFBaUc7O0lBR3JGLGtEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb1RhYmxlQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphIGFwcmVzZW50YWRhIGluZm9ybWHDp8O1ZXMgYWRpY2lvbmFpcyBhIHJlc3BlaXRvIGRlIHVtYSBkZXRlcm1pbmFkYSBsaW5oYSBkZVxuICogZGFkb3MsIGRlIGZvcm1hIHF1ZSBwb3NzYW0gc2VyIGV4aWJpZGFzIGUgb2N1bHRhZGFzIGF0cmF2w6lzIGRvIGJvdMOjbyBkZSBhY2lvbmFtZW50by5cbiAqXG4gKiA+IFF1YW5kbyB1dGlsaXphZGEsIHNvYnJlcMO1ZSBhcyBmdW5jaW9uYWxpZGFkZSBiw6FzaWNhcyBkbyAqbWFzdGVyLWRldGFpbCouXG4gKlxuICogRW0gc2V1IHVzbywgZGV2ZS1zZSB1dGlsaXphciBjb21vIHBhcsOibWV0cm8gYSByZWZlcsOqbmNpYSBkYSBfbGluaGFfIGUvb3UgX8OtbmRpY2VfLCBzZW5kbyBwb3IgcGFkcsOjbyBsaW5oYS4gQ2FzbyBuw6NvIHNlamEgZGVjbGFyYWRvLFxuICogbyBjb21wb25lbnRlIG7Do28gZXhpYmlyw6EgY29udGXDumRvLlxuICogIC0gTGluaGE6IGByb3dgIGRldGVybWluYSBvIGl0ZW0gZGEgbGluaGEgY29ycmVudGUuXG4gKiAgLSDDjW5kaWNlOiBgcm93SW5kZXhgIGRldGVybWluYSBvIMOtbmRpY2UgZGEgbGluaGEgY29ycmVudGUuXG4gKlxuICogRXN0YSBkaXJldGl2YSBjb21ww7VlLXNlIGRlIGRvaXMgbWVpb3MgcGFyYSB1c28sIGRlIGZvcm1hIGV4cGzDrWNpdGEgdGFsIGNvbW8gZW0gKnN5bnRheCBzdWdhciouIFZlamEgYSBzZWd1aXIgYW1ib3MsIHJlc3BlY3RpdmFtZW50ZTpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLXRhYmxlXG4gKiAgIFtwLWNvbHVtbnNdPVwiY29sdW1uc1wiXG4gKiAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICAgPG5nLXRlbXBsYXRlIHAtdGFibGUtcm93LXRlbXBsYXRlIGxldC1yb3dJdGVtIGxldC1pPVwicm93SW5kZXhcIiBbcC10YWJsZS1yb3ctdGVtcGxhdGUtc2hvd109XCJpc1Nob3dcIj5cbiAqICAgICAgIDxkZXRhaWwtcm93IFtyb3ddPVwicm93SXRlbVwiPjwvZGV0YWlsLXJvdz5cbiAqICAgICA8L25nLXRlbXBsYXRlPlxuICogLi4uXG4gKiBgYGBcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLXRhYmxlXG4gKiAgIFtwLWNvbHVtbnNdPVwiY29sdW1uc1wiXG4gKiAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICAgPGRpdiAqcC10YWJsZS1yb3ctdGVtcGxhdGU9XCJsZXQgcm93SXRlbSwgbGV0IGk9cm93SW5kZXhcIj5cbiAqICAgICAgIDxkZXRhaWwtcm93IFtyb3ddPVwicm93SXRlbVwiPjwvZGV0YWlsLXJvdz5cbiAqICAgICA8L2Rpdj5cbiAqIC4uLlxuICpcbiAqIGBgYFxuICpcbiAqIEEgZGlyZXRpdmEgKipwLXRhYmxlLXJvdy10ZW1wbGF0ZSoqLCBwb3NzaWJpbGl0YSB0YW1iw6ltIHF1ZSBkZXRlcm1pbmFkYSBsaW5oYSBhcHJlc2VudGUgb3UgbsOjbyBzZXUgX3RlbXBsYXRlXy4gUGFyYSBpc3RvLFxuICogw6kgbmVjZXNzw6FyaW8gYXRyaWJ1aXIgYSByZWZlcsOqbmNpYSBkYSBmdW7Dp8OjbyBxdWUgZmF6IGVzdGEgdmVyaWZpY2HDp8Ojbywgw6AgcHJvcHJpZWRhZGUgYHAtdGFibGUtcm93LXRlbXBsYXRlLXNob3dgLFxuICogYSBtZXNtYSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGRvIHRpcG8gKmJvb2xlYW4qLiBWZWphIG8gZXhlbXBsbyBhIHNlZ3VpcjpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogQENvbXBvbmVudCh7XG4gKiAgICBzZWxlY3RvcjogJ2FwcC1yb290JyxcbiAqICAgIHRlbXBsYXRlVXJsOiBgXG4gKiAgICAgIC4uLlxuICogICAgICA8cG8tdGFibGVcbiAqICAgICAgICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxuICogICAgICAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICAgICAgICA8bmctdGVtcGxhdGUgcC10YWJsZS1yb3ctdGVtcGxhdGUgbGV0LXJvd0l0ZW0gbGV0LWk9XCJyb3dJbmRleFwiIFtwLXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93XT1cImlzVW5kZWxpdmVyZWRcIj5cbiAqICAgICAgICAgICAgPGRldGFpbC1yb3cgW3Jvd109XCJyb3dJdGVtXCI+IDwvZGV0YWlsLXJvdz5cbiAqICAgICAgICAgIDwvZGl2PlxuICogICAgICAuLi5cbiAqICAgIGBcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgIHB1YmxpYyBkYXRhVGFibGUgPSBbe1xuICogICAgICBjb2RlOiAxMjAwLFxuICogICAgICBwcm9kdWN0OiAnUmljZScsXG4gKiAgICAgIGNvc3R1bWVyOiAnU3VwZXJtYXJrZXQgMScsXG4gKiAgICAgIHF1YW50aXR5OiAzLFxuICogICAgICBzdGF0dXM6ICdkZWxpdmVyZWQnLFxuICogICAgICBsaWNlbnNlX3BsYXRlOiAnTURKRDkxOTEnLFxuICogICAgICBiYXRjaF9wcm9kdWN0OiAxODA0MTgyMixcbiAqICAgICAgZHJpdmVyOiAnSm9zw6kgT2xpdmVpcmEnXG4gKiAgICB9LCB7XG4gKiAgICAgIGNvZGU6IDEzNTUsXG4gKiAgICAgIHByb2R1Y3Q6ICdCZWFuJyxcbiAqICAgICAgY29zdHVtZXI6ICdTdXBlcm1hcmtldCAyJyxcbiAqICAgICAgcXVhbnRpdHk6IDEsXG4gKiAgICAgIHN0YXR1czogJ3RyYW5zcG9ydCcsXG4gKiAgICAgIGxpY2Vuc2VfcGxhdGU6ICdYWEE1NDU0JyxcbiAqICAgICAgYmF0Y2hfcHJvZHVjdDogMTgwNDE4MjEsXG4gKiAgICAgIGRyaXZlcjogJ0ZyYW5jaXNjbyBQZXJlaXJhJ1xuICogICAgfV07XG4gKlxuICogICAgaXNVbmRlbGl2ZXJlZChyb3csIGluZGV4OiBudW1iZXIpIHtcbiAqICAgICAgcmV0dXJuIHJvdy5zdGF0dXMgIT09ICdkZWxpdmVyZWQnO1xuICogICAgfVxuICogfVxuICogYGBgXG4gKiA+IE5vIGV4ZW1wbG8gYWNpbWEsIHNvbWVudGUgc2Vyw6EgZGlzcG9uaWJpbGl6YWRvIG9zIGRldGFsaGVzIGRlIGluZm9ybWHDp8O1ZXMgbmFzIGxpbmhhcyBjdWpvIG8gdmFsb3IgZGUgYHN0YXR1c2BcbiAqIG7Do28gY29ycmVzcG9uZGFtIMOgICpkZWxpdmVyZWQqLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcC10YWJsZS1yb3ctdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RhYmxlUm93VGVtcGxhdGVEaXJlY3RpdmUge1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIHF1ZSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGJvb2xlYW5vLCBpbmZvcm1hbmRvIHNlIGFwcmVzZW50YXLDoSBvIHRlbXBsYXRlIGRhIGxpbmhhLlxuICAgKiBTZXLDo28gcGFzc2Fkb3MgbyBvYmpldG8gZGEgbGluaGEgZSBvIGluZGljZSBkYSBtZXNtYSBwb3IgcGFyw6JtZXRybywgcGFyYSBxdWUgc2VqYSBwb3Nzw612ZWxcbiAgICogdG9tYXIgdW1hIGRlY2lzw6NvIGEgcGFydGlyIGRvIG9iamV0byBkYSBsaW5oYSBjb3JyZW50ZS5cbiAgICpcbiAgICogQ2FzbyBuw6NvIHNlciB1dGlsaXphZG8gZXN0YSBwcm9wcmllZGFkZSwgc2Vyw6NvIGFwcmVzZW50YWRvcyB0b2RvcyBvcyBkZXRhbGhlcyBkYXMgbGluaGFzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgdHJ1ZWBcbiAgICovXG4gIEBJbnB1dCgncC10YWJsZS1yb3ctdGVtcGxhdGUtc2hvdycpIHBvVGFibGVSb3dUZW1wbGF0ZVNob3c6IChyb3c6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbjtcblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxuXG59XG4iXX0=