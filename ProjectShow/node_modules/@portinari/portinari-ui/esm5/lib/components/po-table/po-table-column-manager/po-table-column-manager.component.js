/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToInt, poLocaleDefault } from '../../../utils/util';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
/** @type {?} */
var PoTableColumnManagerMaxColumnsDefault = 99999;
/** @type {?} */
export var poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
var PoTableColumnManagerComponent = /** @class */ (function () {
    function PoTableColumnManagerComponent(renderer) {
        this.renderer = renderer;
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.columnsOptions = [];
        this.literals = tslib_1.__assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault], poTableColumnManagerLiteralsDefault[browserLanguage()]);
        this.visibleColumns = [];
        this.defaultColumns = [];
        this.columns = [];
        this.visibleColumnsChange = new EventEmitter();
    }
    Object.defineProperty(PoTableColumnManagerComponent.prototype, "maxColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxColumns;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateColumnsOptions(this.columns);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var columns = changes.columns, maxColumns = changes.maxColumns, target = changes.target;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateColumnsOptions(this.columns);
        }
    };
    /**
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @param {?} checkedColumns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.onChangeVisibleColumns = /**
     * @param {?} checkedColumns
     * @return {?}
     */
    function (checkedColumns) {
        this.disableColumnsOptions(this.columnsOptions);
        /** @type {?} */
        var visibleTableColumns = this.getVisibleTableColumns(checkedColumns);
        this.visibleColumnsChange.emit(visibleTableColumns);
    };
    /**
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.restore = /**
     * @return {?}
     */
    function () {
        this.updateColumnsOptions(this.defaultColumns);
    };
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.disableColumnsOptions = 
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    function (columns) {
        var _this = this;
        if (columns === void 0) { columns = []; }
        // necessario timeout para que seja possivel atualizar os columnsOptions apos a mudança do model
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.columnsOptions = columns.map((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return (tslib_1.__assign({}, column, { disabled: _this.isDisableColumn(column.value) })); }));
        }));
    };
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.getColumnTitleLabel = /**
     * @private
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.label || capitalizeFirstLetter(column.property);
    };
    /** Retorna um Array de column.property das colunas que são visiveis. */
    /**
     * Retorna um Array de column.property das colunas que são visiveis.
     * @private
     * @param {?} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.getVisibleColumns = /**
     * Retorna um Array de column.property das colunas que são visiveis.
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        var _this = this;
        /** @type {?} */
        var visibleColumns = [];
        columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (column.visible !== false && visibleColumns.length < _this.maxColumns && column.type !== 'detail') {
                visibleColumns.push(column.property);
            }
        }));
        return visibleColumns;
    };
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    /**
     * Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas.
     * @private
     * @param {?} visibleColumns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.getVisibleTableColumns = /**
     * Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas.
     * @private
     * @param {?} visibleColumns
     * @return {?}
     */
    function (visibleColumns) {
        return this.columns.map((/**
         * @param {?} column
         * @return {?}
         */
        function (column) { return (tslib_1.__assign({}, column, { visible: visibleColumns.includes(column.property) || column.type === 'detail' })); }));
    };
    /**
     * @private
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            if (_this.popover) {
                _this.popover.close();
            }
        }));
    };
    /**
     * @private
     * @param {?} property
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.isDisableColumn = /**
     * @private
     * @param {?} property
     * @return {?}
     */
    function (property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    };
    /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.mapTableColumnsToCheckboxOptions = /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    function (columns) {
        var _this = this;
        if (columns === void 0) { columns = []; }
        /** @type {?} */
        var columnsOptions = [];
        columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: _this.getColumnTitleLabel(column),
                    disabled: _this.isDisableColumn(column.property)
                });
            }
        }));
        return columnsOptions;
    };
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.onChangeColumns = /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        var firstChange = columns.firstChange, _a = columns.currentValue, currentValue = _a === void 0 ? [] : _a, _b = columns.previousValue, previousValue = _b === void 0 ? [] : _b;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (firstChange || (this.defaultColumns.length !== currentValue.length)) {
            this.defaultColumns = currentValue;
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (previousValue.length !== currentValue.length) {
            this.updateColumnsOptions(currentValue);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.updateColumnsOptions = /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        this.visibleColumns = this.getVisibleColumns(columns);
        this.columnsOptions = this.mapTableColumnsToCheckboxOptions(columns);
        this.onChangeVisibleColumns(this.visibleColumns);
    };
    PoTableColumnManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-column-manager',
                    template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\">\n\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\" (click)=\"popover.close()\">\n      </button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-checkbox-group\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"onChangeVisibleColumns($event)\">\n    </po-checkbox-group>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-small\n      p-type=\"link\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\">\n    </po-button>\n  </div>\n</po-popover>\n"
                }] }
    ];
    /** @nocollapse */
    PoTableColumnManagerComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    PoTableColumnManagerComponent.propDecorators = {
        columns: [{ type: Input, args: ['p-columns',] }],
        maxColumns: [{ type: Input, args: ['p-max-columns',] }],
        target: [{ type: Input, args: ['p-target',] }],
        visibleColumnsChange: [{ type: Output, args: ['p-visible-columns-change',] }],
        popover: [{ type: ViewChild, args: [PoPopoverComponent, { static: false },] }]
    };
    return PoTableColumnManagerComponent;
}());
export { PoTableColumnManagerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype._maxColumns;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.columnsOptions;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.literals;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.visibleColumns;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.defaultColumns;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.resizeListener;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.columns;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.target;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.visibleColumnsChange;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.popover;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,