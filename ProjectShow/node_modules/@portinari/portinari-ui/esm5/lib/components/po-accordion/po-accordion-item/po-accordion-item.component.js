/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, ViewChild } from '@angular/core';
import { PoAccordionService } from '../services/po-accordion.service';
/**
 * \@description
 *
 * Componente utilizado para renderizar os itens do `po-accordion`.
 *
 * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
 * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="Portinari Accordion 1" #item1>
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="Portinari Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `\@ViewChild`:
 *
 * ```
 * \@ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapse()
 *    this.item1.expand();
 *  }
 * ```
 */
var PoAccordionItemComponent = /** @class */ (function () {
    function PoAccordionItemComponent(accordionService) {
        this.accordionService = accordionService;
    }
    /**
     * Método para colapsar o `po-accordion-item`.
     */
    /**
     * Método para colapsar o `po-accordion-item`.
     * @return {?}
     */
    PoAccordionItemComponent.prototype.collapse = /**
     * Método para colapsar o `po-accordion-item`.
     * @return {?}
     */
    function () {
        this.expanded = false;
        this.accordionService.sendToParentAccordionItemClicked(this);
    };
    /**
     * Método para expandir o `po-accordion-item`.
     */
    /**
     * Método para expandir o `po-accordion-item`.
     * @return {?}
     */
    PoAccordionItemComponent.prototype.expand = /**
     * Método para expandir o `po-accordion-item`.
     * @return {?}
     */
    function () {
        this.expanded = true;
        this.accordionService.sendToParentAccordionItemClicked(this);
    };
    PoAccordionItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-accordion-item',
                    template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    PoAccordionItemComponent.ctorParameters = function () { return [
        { type: PoAccordionService }
    ]; };
    PoAccordionItemComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        templateRef: [{ type: ViewChild, args: [TemplateRef, { static: true },] }]
    };
    return PoAccordionItemComponent;
}());
export { PoAccordionItemComponent };
if (false) {
    /** @type {?} */
    PoAccordionItemComponent.prototype.expanded;
    /**
     * Título do item.
     * @type {?}
     */
    PoAccordionItemComponent.prototype.label;
    /** @type {?} */
    PoAccordionItemComponent.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    PoAccordionItemComponent.prototype.accordionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1hY2NvcmRpb24vcG8tYWNjb3JkaW9uLWl0ZW0vcG8tYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlDdEU7SUFhRSxrQ0FBb0IsZ0JBQW9DO1FBQXBDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBb0I7SUFBRyxDQUFDO0lBRTVEOztPQUVHOzs7OztJQUNILDJDQUFROzs7O0lBQVI7UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUV0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILHlDQUFNOzs7O0lBQU47UUFDRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUVyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Z0JBL0JGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3Qix3RUFBK0M7aUJBQ2hEOzs7O2dCQXBDUSxrQkFBa0I7Ozt3QkEwQ3hCLEtBQUssU0FBQyxTQUFTOzhCQUVmLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOztJQXFCMUMsK0JBQUM7Q0FBQSxBQWhDRCxJQWdDQztTQTVCWSx3QkFBd0I7OztJQUVuQyw0Q0FBa0I7Ozs7O0lBR2xCLHlDQUFnQzs7SUFFaEMsK0NBQXdFOzs7OztJQUU1RCxvREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQWNjb3JkaW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3BvLWFjY29yZGlvbi5zZXJ2aWNlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHV0aWxpemFkbyBwYXJhIHJlbmRlcml6YXIgb3MgaXRlbnMgZG8gYHBvLWFjY29yZGlvbmAuXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1hY2NvcmRpb25gIGrDoSBmYXogbyBjb250cm9sZSBkZSBhYmVydHVyYSBlIGZlY2hhbWVudG8gZG9zIGl0ZW5zIGF1dG9tYXRpY2FtZW50ZSxcbiAqIG1hcyBjYXNvIGhvdXZlciBhIG5lY2Vzc2lkYWRlIGRlIGFicmlyIGFsZ3VtIGRvcyBgcG8tYWNjb3JkaW9uLWl0ZW1gIHZpYSBUeXBlc2NyaXB0LCBwb2RlIHNlciBmZWl0YSBkYSBzZWd1aW50ZSBmb3JtYTpcbiAqXG4gKiBgYGBcbiAqIDxwby1hY2NvcmRpb24+XG4gKiAgIDxwby1hY2NvcmRpb24taXRlbSBwLWxhYmVsPVwiUG9ydGluYXJpIEFjY29yZGlvbiAxXCIgI2l0ZW0xPlxuICogICAgICBBY2NvcmRpb24gMVxuICogICA8L3BvLWFjY29yZGlvbi1pdGVtPlxuICpcbiAqICAgPHBvLWFjY29yZGlvbi1pdGVtIHAtbGFiZWw9XCJQb3J0aW5hcmkgQWNjb3JkaW9uIDJcIj5cbiAqICAgICAgQWNjb3JkaW9uIDJcbiAqICAgPC9wby1hY2NvcmRpb24taXRlbT5cbiAqIDwvcG8tYWNjb3JkaW9uPlxuICogYGBgXG4gKlxuICogZSBubyB0eXBlc2NyaXB0IHBvZGUtc2UgdXRpbGl6YXIgbyBgQFZpZXdDaGlsZGA6XG4gKlxuICogYGBgXG4gKiAgQFZpZXdDaGlsZChQb0FjY29yZGlvbkl0ZW1Db21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIGl0ZW0xOiBQb0FjY29yZGlvbkl0ZW1Db21wb25lbnQ7XG4gKlxuICogIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAqICAgIC8vIG91IHV0aWxpemFyIG8gbcOpdG9kbyBjb2xsYXBzZSgpXG4gKiAgICB0aGlzLml0ZW0xLmV4cGFuZCgpO1xuICogIH1cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1hY2NvcmRpb24taXRlbScsXG4gIHRlbXBsYXRlVXJsOiAncG8tYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvQWNjb3JkaW9uSXRlbUNvbXBvbmVudCB7XG5cbiAgZXhwYW5kZWQ6IGJvb2xlYW47XG5cbiAgLyoqIFTDrXR1bG8gZG8gaXRlbS4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICBAVmlld0NoaWxkKFRlbXBsYXRlUmVmLCB7IHN0YXRpYzogdHJ1ZSB9KSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjY29yZGlvblNlcnZpY2U6IFBvQWNjb3JkaW9uU2VydmljZSkge31cblxuICAvKipcbiAgICogTcOpdG9kbyBwYXJhIGNvbGFwc2FyIG8gYHBvLWFjY29yZGlvbi1pdGVtYC5cbiAgICovXG4gIGNvbGxhcHNlKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuYWNjb3JkaW9uU2VydmljZS5zZW5kVG9QYXJlbnRBY2NvcmRpb25JdGVtQ2xpY2tlZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNw6l0b2RvIHBhcmEgZXhwYW5kaXIgbyBgcG8tYWNjb3JkaW9uLWl0ZW1gLlxuICAgKi9cbiAgZXhwYW5kKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5hY2NvcmRpb25TZXJ2aWNlLnNlbmRUb1BhcmVudEFjY29yZGlvbkl0ZW1DbGlja2VkKHRoaXMpO1xuICB9XG59XG4iXX0=