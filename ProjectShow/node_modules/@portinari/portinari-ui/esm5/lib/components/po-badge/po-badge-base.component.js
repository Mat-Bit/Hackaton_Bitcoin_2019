/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToInt } from '../../utils/util';
/** @type {?} */
var PO_BADGE_COLORS = [
    'color-01',
    'color-02',
    'color-03',
    'color-04',
    'color-05',
    'color-06',
    'color-07',
    'color-08',
    'color-09',
    'color-10',
    'color-11',
    'color-12',
];
/** @type {?} */
var PO_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * \@description
 *
 * \@docsPrivate
 *
 * Componente utilizado no `po-menu` para exibir por exemplo a quantidade de tarefas pendentes.
 */
var PoBadgeBaseComponent = /** @class */ (function () {
    function PoBadgeBaseComponent() {
    }
    Object.defineProperty(PoBadgeBaseComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a cor de fundo do componente e aceita os valores:
         *
         * <span class="dot po-color-01"></span> `color-01`
         *
         * <span class="dot po-color-02"></span> `color-02`
         *
         * <span class="dot po-color-03"></span> `color-03`
         *
         * <span class="dot po-color-04"></span> `color-04`
         *
         * <span class="dot po-color-05"></span> `color-05`
         *
         * <span class="dot po-color-06"></span> `color-06`
         *
         * <span class="dot po-color-07"></span> `color-07`
         *
         * <span class="dot po-color-08"></span> `color-08`
         *
         * <span class="dot po-color-09"></span> `color-09`
         *
         * <span class="dot po-color-10"></span> `color-10`
         *
         * <span class="dot po-color-11"></span> `color-11`
         *
         * <span class="dot po-color-12"></span> `color-12`
         *
         * @default `color-07`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a cor de fundo do componente e aceita os valores:
         *
         * <span class="dot po-color-01"></span> `color-01`
         *
         * <span class="dot po-color-02"></span> `color-02`
         *
         * <span class="dot po-color-03"></span> `color-03`
         *
         * <span class="dot po-color-04"></span> `color-04`
         *
         * <span class="dot po-color-05"></span> `color-05`
         *
         * <span class="dot po-color-06"></span> `color-06`
         *
         * <span class="dot po-color-07"></span> `color-07`
         *
         * <span class="dot po-color-08"></span> `color-08`
         *
         * <span class="dot po-color-09"></span> `color-09`
         *
         * <span class="dot po-color-10"></span> `color-10`
         *
         * <span class="dot po-color-11"></span> `color-11`
         *
         * <span class="dot po-color-12"></span> `color-12`
         *
         * \@default `color-07`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._color = PO_BADGE_COLORS.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoBadgeBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /**
         * @description
         *
         * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
         */
        set: /**
         * \@description
         *
         * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = convertToInt(value);
            this.setBadgeValue(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoBadgeBaseComponent.prototype.setBadgeValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var validRangeValue = (value || value === 0) && (value >= 0 && value < 100);
        this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
    };
    PoBadgeBaseComponent.propDecorators = {
        color: [{ type: Input, args: ['p-color',] }],
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoBadgeBaseComponent;
}());
export { PoBadgeBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoBadgeBaseComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    PoBadgeBaseComponent.prototype._value;
    /** @type {?} */
    PoBadgeBaseComponent.prototype.badgeValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYmFkZ2UtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWJhZGdlL3BvLWJhZGdlLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7SUFFMUMsZUFBZSxHQUFHO0lBQ3RCLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtDQUNYOztJQUNLLHNCQUFzQixHQUFHLFVBQVU7Ozs7Ozs7O0FBU3pDO0lBQUE7SUFtRUEsQ0FBQztJQTNCQyxzQkFBc0IsdUNBQUs7Ozs7UUFJM0I7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQztRQXZDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FnQ0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUNILFVBQTRCLEtBQWE7WUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO1FBQ2pGLENBQUM7OztPQUFBO0lBV0Qsc0JBQXNCLHVDQUFLOzs7O1FBSzNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7UUFaRDs7OztXQUlHOzs7Ozs7OztRQUNILFVBQTRCLEtBQWE7WUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsQ0FBQzs7O09BQUE7Ozs7OztJQU1PLDRDQUFhOzs7OztJQUFyQixVQUFzQixLQUFhOztZQUMzQixlQUFlLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQzdFLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3hGLENBQUM7O3dCQXpCQSxLQUFLLFNBQUMsU0FBUzt3QkFhZixLQUFLLFNBQUMsU0FBUzs7SUFjbEIsMkJBQUM7Q0FBQSxBQW5FRCxJQW1FQztTQW5FWSxvQkFBb0I7Ozs7OztJQUUvQixzQ0FBdUI7Ozs7O0lBQ3ZCLHNDQUF1Qjs7SUFFdkIsMENBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvSW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmNvbnN0IFBPX0JBREdFX0NPTE9SUyA9IFtcbiAgJ2NvbG9yLTAxJyxcbiAgJ2NvbG9yLTAyJyxcbiAgJ2NvbG9yLTAzJyxcbiAgJ2NvbG9yLTA0JyxcbiAgJ2NvbG9yLTA1JyxcbiAgJ2NvbG9yLTA2JyxcbiAgJ2NvbG9yLTA3JyxcbiAgJ2NvbG9yLTA4JyxcbiAgJ2NvbG9yLTA5JyxcbiAgJ2NvbG9yLTEwJyxcbiAgJ2NvbG9yLTExJyxcbiAgJ2NvbG9yLTEyJyxcbl07XG5jb25zdCBQT19CQURHRV9DT0xPUl9ERUZBVUxUID0gJ2NvbG9yLTA3JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBDb21wb25lbnRlIHV0aWxpemFkbyBubyBgcG8tbWVudWAgcGFyYSBleGliaXIgcG9yIGV4ZW1wbG8gYSBxdWFudGlkYWRlIGRlIHRhcmVmYXMgcGVuZGVudGVzLlxuICovXG5leHBvcnQgY2xhc3MgUG9CYWRnZUJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2NvbG9yOiBzdHJpbmc7XG4gIHByaXZhdGUgX3ZhbHVlOiBudW1iZXI7XG5cbiAgYmFkZ2VWYWx1ZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGNvciBkZSBmdW5kbyBkbyBjb21wb25lbnRlIGUgYWNlaXRhIG9zIHZhbG9yZXM6XG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTAxXCI+PC9zcGFuPiBgY29sb3ItMDFgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTAyXCI+PC9zcGFuPiBgY29sb3ItMDJgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTAzXCI+PC9zcGFuPiBgY29sb3ItMDNgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA0XCI+PC9zcGFuPiBgY29sb3ItMDRgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA1XCI+PC9zcGFuPiBgY29sb3ItMDVgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA2XCI+PC9zcGFuPiBgY29sb3ItMDZgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA3XCI+PC9zcGFuPiBgY29sb3ItMDdgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA4XCI+PC9zcGFuPiBgY29sb3ItMDhgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA5XCI+PC9zcGFuPiBgY29sb3ItMDlgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTEwXCI+PC9zcGFuPiBgY29sb3ItMTBgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTExXCI+PC9zcGFuPiBgY29sb3ItMTFgXG4gICAqXG4gICAqIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTEyXCI+PC9zcGFuPiBgY29sb3ItMTJgXG4gICAqXG4gICAqIEBkZWZhdWx0IGBjb2xvci0wN2BcbiAgICovXG4gIEBJbnB1dCgncC1jb2xvcicpIHNldCBjb2xvcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fY29sb3IgPSBQT19CQURHRV9DT0xPUlMuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19CQURHRV9DT0xPUl9ERUZBVUxUO1xuICB9XG5cbiAgZ2V0IGNvbG9yKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBOw7ptZXJvIGV4aWJpZG8gbm8gY29tcG9uZW50ZSwgY2FzbyBvIG1lc21vIHNlamEgbWFpb3IgcXVlIDk5IG8gdmFsb3IgZXhpYmlkbyBzZXLDoSA5OSsuXG4gICAqL1xuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX3ZhbHVlID0gY29udmVydFRvSW50KHZhbHVlKTtcbiAgICB0aGlzLnNldEJhZGdlVmFsdWUodGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRCYWRnZVZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICBjb25zdCB2YWxpZFJhbmdlVmFsdWUgPSAodmFsdWUgfHwgdmFsdWUgPT09IDApICYmICh2YWx1ZSA+PSAwICYmIHZhbHVlIDwgMTAwKTtcbiAgICB0aGlzLmJhZGdlVmFsdWUgPSB2YWxpZFJhbmdlVmFsdWUgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWUgPiA5OSA/ICc5OSsnIDogdW5kZWZpbmVkO1xuICB9XG5cbn1cbiJdfQ==