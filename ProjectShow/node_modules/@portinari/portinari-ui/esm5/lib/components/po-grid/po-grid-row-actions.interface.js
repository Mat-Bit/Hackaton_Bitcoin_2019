/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoGridComponent
 *
 * \@description
 *
 * Ações executadas durante a manipulação das linhas do grid.
 * @record
 */
export function PoGridRowActions() { }
if (false) {
    /**
     * Método executado após uma linha do grid ser removida.
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.afterRemove;
    /**
     * \@description
     *
     * Método executado após uma linha do grid ser salva, ao ser executado, o método irá receber um objeto com os dados atualizados.
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.afterSave;
    /**
     * \@description
     *
     * Método executado antes de uma nova linha ser inserida no grid, se o método retornar algo diferente de `true` a ação
     * será cancelada e a linha não será inserida.
     *
     * Ao ser executado o método irá receber a referência do objeto que será inserido, dessa forma é possível informar valores
     * para esse objeto.
     *
     * ```
     *  rowActions: PoGridRowActions = {
     *    beforeInsert: this.onBeforeInsert.bind(this);
     *    ...
     *  };
     *
     *  // Inicia a linha já com as propriedades `name` e `created` preenchidas.
     *  onBeforeInsert(row: any) {
     *    row.name = 'Fulano';
     *    row.created = '2018-20-12';
     *    ...
     *
     *    return true;
     *  }
     * ```
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.beforeInsert;
    /**
     * \@description
     *
     * Método executado antes de uma linha ser removida do grid, ao ser executado, o método irá receber uma cópia do objeto
     * com os dados da linha que será removida, se o método retornar algo diferente de `true` a ação será cancelada e a linha
     * não será removida.
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.beforeRemove;
    /**
     * \@description
     *
     * Método executado antes de uma linha ser atualizada, ao ser executado, o método irá receber um objeto com os dados atualizados
     * e um objeto com uma cópia dos dados originais, se o método retornar algo diferente de `true` a ação será cancelada e
     * a linha não será atualizada permanecendo em edição / inserção.
     *
     * > Caso não seja permitido a atualização da linha, a sugestão é que seja apresentada uma mensagem ao usuário informando
     * > o motivo.
     *
     * ```
     *  rowActions: PoGridRowActions = {
     *    beforeSave: this.onBeforeSave.bind(this);
     *    ...
     *  };
     *
     *  onBeforeSave(updatedRow: any, originalRow: any) {
     *    // Verifica se a propriedade `name` foi alterada.
     *    if (updatedRow.name !== originalRow.name) {
     *      return false;
     *    }
     *
     *    // Verifica se é menor de idade
     *    if (updatedRow.age < 18) {
     *      return false;
     *    }
     *    ...
     *
     *    updatedRow.updated = '2018-20-12';
     *
     *    return true;
     *  }
     * ```
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.beforeSave;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZ3JpZC1yb3ctYWN0aW9ucy5pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWdyaWQvcG8tZ3JpZC1yb3ctYWN0aW9ucy5pbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBT0Esc0NBb0ZDOzs7Ozs7SUFqRkMsdUNBQXlCOzs7Ozs7O0lBT3pCLHFDQUErQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBMkIvQix3Q0FBcUM7Ozs7Ozs7OztJQVNyQyx3Q0FBcUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW9DckMsc0NBQTREIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdXNlZEJ5IFBvR3JpZENvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEHDp8O1ZXMgZXhlY3V0YWRhcyBkdXJhbnRlIGEgbWFuaXB1bGHDp8OjbyBkYXMgbGluaGFzIGRvIGdyaWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUG9HcmlkUm93QWN0aW9ucyB7XG5cbiAgLyoqIE3DqXRvZG8gZXhlY3V0YWRvIGFww7NzIHVtYSBsaW5oYSBkbyBncmlkIHNlciByZW1vdmlkYS4gKi9cbiAgYWZ0ZXJSZW1vdmU/OiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyBleGVjdXRhZG8gYXDDs3MgdW1hIGxpbmhhIGRvIGdyaWQgc2VyIHNhbHZhLCBhbyBzZXIgZXhlY3V0YWRvLCBvIG3DqXRvZG8gaXLDoSByZWNlYmVyIHVtIG9iamV0byBjb20gb3MgZGFkb3MgYXR1YWxpemFkb3MuXG4gICAqL1xuICBhZnRlclNhdmU/OiAocm93OiBhbnkpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIGV4ZWN1dGFkbyBhbnRlcyBkZSB1bWEgbm92YSBsaW5oYSBzZXIgaW5zZXJpZGEgbm8gZ3JpZCwgc2UgbyBtw6l0b2RvIHJldG9ybmFyIGFsZ28gZGlmZXJlbnRlIGRlIGB0cnVlYCBhIGHDp8Ojb1xuICAgKiBzZXLDoSBjYW5jZWxhZGEgZSBhIGxpbmhhIG7Do28gc2Vyw6EgaW5zZXJpZGEuXG4gICAqXG4gICAqIEFvIHNlciBleGVjdXRhZG8gbyBtw6l0b2RvIGlyw6EgcmVjZWJlciBhIHJlZmVyw6puY2lhIGRvIG9iamV0byBxdWUgc2Vyw6EgaW5zZXJpZG8sIGRlc3NhIGZvcm1hIMOpIHBvc3PDrXZlbCBpbmZvcm1hciB2YWxvcmVzXG4gICAqIHBhcmEgZXNzZSBvYmpldG8uXG4gICAqXG4gICAqIGBgYFxuICAgKiAgcm93QWN0aW9uczogUG9HcmlkUm93QWN0aW9ucyA9IHtcbiAgICogICAgYmVmb3JlSW5zZXJ0OiB0aGlzLm9uQmVmb3JlSW5zZXJ0LmJpbmQodGhpcyk7XG4gICAqICAgIC4uLlxuICAgKiAgfTtcbiAgICpcbiAgICogIC8vIEluaWNpYSBhIGxpbmhhIGrDoSBjb20gYXMgcHJvcHJpZWRhZGVzIGBuYW1lYCBlIGBjcmVhdGVkYCBwcmVlbmNoaWRhcy5cbiAgICogIG9uQmVmb3JlSW5zZXJ0KHJvdzogYW55KSB7XG4gICAqICAgIHJvdy5uYW1lID0gJ0Z1bGFubyc7XG4gICAqICAgIHJvdy5jcmVhdGVkID0gJzIwMTgtMjAtMTInO1xuICAgKiAgICAuLi5cbiAgICpcbiAgICogICAgcmV0dXJuIHRydWU7XG4gICAqICB9XG4gICAqIGBgYFxuICAgKi9cbiAgYmVmb3JlSW5zZXJ0PzogKHJvdzogYW55KSA9PiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyBleGVjdXRhZG8gYW50ZXMgZGUgdW1hIGxpbmhhIHNlciByZW1vdmlkYSBkbyBncmlkLCBhbyBzZXIgZXhlY3V0YWRvLCBvIG3DqXRvZG8gaXLDoSByZWNlYmVyIHVtYSBjw7NwaWEgZG8gb2JqZXRvXG4gICAqIGNvbSBvcyBkYWRvcyBkYSBsaW5oYSBxdWUgc2Vyw6EgcmVtb3ZpZGEsIHNlIG8gbcOpdG9kbyByZXRvcm5hciBhbGdvIGRpZmVyZW50ZSBkZSBgdHJ1ZWAgYSBhw6fDo28gc2Vyw6EgY2FuY2VsYWRhIGUgYSBsaW5oYVxuICAgKiBuw6NvIHNlcsOhIHJlbW92aWRhLlxuICAgKi9cbiAgYmVmb3JlUmVtb3ZlPzogKHJvdzogYW55KSA9PiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyBleGVjdXRhZG8gYW50ZXMgZGUgdW1hIGxpbmhhIHNlciBhdHVhbGl6YWRhLCBhbyBzZXIgZXhlY3V0YWRvLCBvIG3DqXRvZG8gaXLDoSByZWNlYmVyIHVtIG9iamV0byBjb20gb3MgZGFkb3MgYXR1YWxpemFkb3NcbiAgICogZSB1bSBvYmpldG8gY29tIHVtYSBjw7NwaWEgZG9zIGRhZG9zIG9yaWdpbmFpcywgc2UgbyBtw6l0b2RvIHJldG9ybmFyIGFsZ28gZGlmZXJlbnRlIGRlIGB0cnVlYCBhIGHDp8OjbyBzZXLDoSBjYW5jZWxhZGEgZVxuICAgKiBhIGxpbmhhIG7Do28gc2Vyw6EgYXR1YWxpemFkYSBwZXJtYW5lY2VuZG8gZW0gZWRpw6fDo28gLyBpbnNlcsOnw6NvLlxuICAgKlxuICAgKiA+IENhc28gbsOjbyBzZWphIHBlcm1pdGlkbyBhIGF0dWFsaXphw6fDo28gZGEgbGluaGEsIGEgc3VnZXN0w6NvIMOpIHF1ZSBzZWphIGFwcmVzZW50YWRhIHVtYSBtZW5zYWdlbSBhbyB1c3XDoXJpbyBpbmZvcm1hbmRvXG4gICAqID4gbyBtb3Rpdm8uXG4gICAqXG4gICAqIGBgYFxuICAgKiAgcm93QWN0aW9uczogUG9HcmlkUm93QWN0aW9ucyA9IHtcbiAgICogICAgYmVmb3JlU2F2ZTogdGhpcy5vbkJlZm9yZVNhdmUuYmluZCh0aGlzKTtcbiAgICogICAgLi4uXG4gICAqICB9O1xuICAgKlxuICAgKiAgb25CZWZvcmVTYXZlKHVwZGF0ZWRSb3c6IGFueSwgb3JpZ2luYWxSb3c6IGFueSkge1xuICAgKiAgICAvLyBWZXJpZmljYSBzZSBhIHByb3ByaWVkYWRlIGBuYW1lYCBmb2kgYWx0ZXJhZGEuXG4gICAqICAgIGlmICh1cGRhdGVkUm93Lm5hbWUgIT09IG9yaWdpbmFsUm93Lm5hbWUpIHtcbiAgICogICAgICByZXR1cm4gZmFsc2U7XG4gICAqICAgIH1cbiAgICpcbiAgICogICAgLy8gVmVyaWZpY2Egc2Ugw6kgbWVub3IgZGUgaWRhZGVcbiAgICogICAgaWYgKHVwZGF0ZWRSb3cuYWdlIDwgMTgpIHtcbiAgICogICAgICByZXR1cm4gZmFsc2U7XG4gICAqICAgIH1cbiAgICogICAgLi4uXG4gICAqXG4gICAqICAgIHVwZGF0ZWRSb3cudXBkYXRlZCA9ICcyMDE4LTIwLTEyJztcbiAgICpcbiAgICogICAgcmV0dXJuIHRydWU7XG4gICAqICB9XG4gICAqIGBgYFxuICAgKi9cbiAgYmVmb3JlU2F2ZT86ICh1cGRhdGVkUm93OiBhbnksIG9yaWdpbmFsUm93OiBhbnkpID0+IGJvb2xlYW47XG5cbn1cbiJdfQ==