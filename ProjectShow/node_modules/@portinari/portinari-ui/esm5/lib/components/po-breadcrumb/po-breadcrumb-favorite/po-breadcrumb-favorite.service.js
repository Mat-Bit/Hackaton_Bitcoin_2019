/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
var PoBreadcrumbFavoriteService = /** @class */ (function () {
    function PoBreadcrumbFavoriteService(http) {
        this.http = http;
    }
    Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "bodyParams", {
        get: /**
         * @return {?}
         */
        function () { return this._bodyParams; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    PoBreadcrumbFavoriteService.prototype.configService = /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    function (url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    };
    /**
     * @param {?} status
     * @return {?}
     */
    PoBreadcrumbFavoriteService.prototype.sendStatusFavorite = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    };
    /**
     * @return {?}
     */
    PoBreadcrumbFavoriteService.prototype.getFavorite = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    };
    PoBreadcrumbFavoriteService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoBreadcrumbFavoriteService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoBreadcrumbFavoriteService;
}());
export { PoBreadcrumbFavoriteService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype._bodyParams;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWItZmF2b3JpdGUvcG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBa0IzQztJQVVFLHFDQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQztJQUp6QyxzQkFBSSw0Q0FBRzs7OztRQUFQLGNBQW9CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBRXZDLHNCQUFJLG1EQUFVOzs7O1FBQWQsY0FBMkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzs7O09BQUE7Ozs7Ozs7SUFJckQsbURBQWE7Ozs7OztJQUFiLFVBQWMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsVUFBVSxFQUFFLEtBQUs7WUFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCx3REFBa0I7Ozs7SUFBbEIsVUFBbUIsTUFBTTtRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7SUFFRCxpREFBVzs7O0lBQVg7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO0lBQ25HLENBQUM7O2dCQTVCRixVQUFVOzs7O2dCQW5CRixVQUFVOztJQWdEbkIsa0NBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTVCWSwyQkFBMkI7Ozs7OztJQUV0QywyQ0FBcUI7Ozs7O0lBQ3JCLGtEQUE0Qjs7Ozs7SUFNaEIsMkNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHV0aWxpemFkbyBwYXJhIGZhdm9yaXRhci9kZXNmYXZvcml0YXIgdW1hIHVybCBubyBjb21wb25lbnRlIHBvLWJyZWFkY3J1bWIuXG4gKiBBIEFQSSBkZXZlIHJldG9ybmFyIHVtIG9iamV0byBubyBmb3JtYXRvIHsgaXNGYXZvcml0ZTogYm9vbGVhbm8sIHVybDogc3RyaW5nIH0uIEVtIGFtYm9zIG9zIG3DqXRvZG9zLCBHRVQgZSBQT1NUIGVzdGVcbiAqIG9iamV0byBkZXZlIHNlciByZXRvcm5hZG8uXG4gKiBBbyBhbHRlcmFyIG8gc3RhdHVzIGRlIGZhdm9yaXRvLCBhIEFQSSBkZXZlIHJldG9ybmFyIG8gb2JqZXRvIGFjaW1hLCBjb20gbyBub3ZvIHN0YXR1cyBhdHVhbGl6YWRvLlxuICogTm8gbcOpdG9kbyBQT1NULCBleGlzdGUgYSBwb3NzaWJpbGlkYWRlIGRlIHNlciBlbnZpYWRvIHBhcsOibWV0cm9zIGp1bnRvIGNvbSBhIHJlcXVpc2nDp8Ojby4gTmVzdGUgY2FzbywgbyBvYmpldG8gZW52aWFkb1xuICogcGFyYSBhIEFQSSB0ZXLDoSBvIGZvcm1hdG86IHsgaXNGYXZvcml0ZTogYm9vbGVhbm8sIHVybDogc3RyaW5nLCBwYXJhbXM6IHt9IH0sIG9uZGUgcGFyYW1zIMOpIG8gb2JqZXRvIHF1ZSBwb2RlIHNlciBlbnZpYWRvXG4gKiBqdW50byBjb20gYSByZXF1aXNpw6fDo28uXG4gKlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9CcmVhZGNydW1iRmF2b3JpdGVTZXJ2aWNlIHtcblxuICBwcml2YXRlIF91cmw6IHN0cmluZztcbiAgcHJpdmF0ZSBfYm9keVBhcmFtczogb2JqZWN0O1xuXG4gIGdldCB1cmwoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3VybDsgfVxuXG4gIGdldCBib2R5UGFyYW1zKCk6IG9iamVjdCB7IHJldHVybiB0aGlzLl9ib2R5UGFyYW1zOyB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cblxuICBjb25maWdTZXJ2aWNlKHVybCwgcGFyYW1zLCBpdGVtKSB7XG4gICAgdGhpcy5fdXJsID0gdXJsO1xuICAgIHRoaXMuX2JvZHlQYXJhbXMgPSB7XG4gICAgICBpc0Zhdm9yaXRlOiBmYWxzZSxcbiAgICAgIHVybDogaXRlbS5saW5rLFxuICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICB9O1xuICB9XG5cbiAgc2VuZFN0YXR1c0Zhdm9yaXRlKHN0YXR1cyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgdGhpcy5ib2R5UGFyYW1zWydpc0Zhdm9yaXRlJ10gPSBzdGF0dXM7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMudXJsLCB0aGlzLmJvZHlQYXJhbXMpO1xuICB9XG5cbiAgZ2V0RmF2b3JpdGUoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLnVybCwgeyByZXNwb25zZVR5cGU6ICdqc29uJywgcGFyYW1zOiB7IHVybDogdGhpcy5ib2R5UGFyYW1zWyd1cmwnXSB9fSk7XG4gIH1cbn1cbiJdfQ==