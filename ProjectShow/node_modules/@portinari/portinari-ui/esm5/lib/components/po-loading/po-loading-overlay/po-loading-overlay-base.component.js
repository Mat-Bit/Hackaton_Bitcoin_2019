/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
/** @type {?} */
export var poLoadingOverlayLiteralsDefault = {
    en: (/** @type {?} */ ({
        loading: 'Loading',
    })),
    es: (/** @type {?} */ ({
        loading: 'Cargando',
    })),
    pt: (/** @type {?} */ ({
        loading: 'Carregando',
    })),
    ru: (/** @type {?} */ ({
        loading: 'погрузка',
    }))
};
/**
 *
 * \@description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
var PoLoadingOverlayBaseComponent = /** @class */ (function () {
    function PoLoadingOverlayBaseComponent(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        if (!this.text) {
            this.text = this.getTextDefault();
        }
    }
    Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "screenLock", {
        get: /**
         * @return {?}
         */
        function () {
            return this._screenLock;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * \@default `false`
         * @param {?} screenLock
         * @return {?}
         */
        function (screenLock) {
            this._screenLock = convertToBoolean(screenLock);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        /**
         * @optional
         *
         * @description
         *
         * Texto a ser exibido no componente.
         *
         * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
         *
         * @default `Carregando`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Texto a ser exibido no componente.
         *
         * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
         *
         * \@default `Carregando`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._text = value || this.getTextDefault();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    PoLoadingOverlayBaseComponent.prototype.getTextDefault = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    };
    PoLoadingOverlayBaseComponent.propDecorators = {
        screenLock: [{ type: Input, args: ['p-screen-lock',] }],
        text: [{ type: Input, args: ['p-text',] }]
    };
    return PoLoadingOverlayBaseComponent;
}());
export { PoLoadingOverlayBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype._screenLock;
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype._text;
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1sb2FkaW5nL3BvLWxvYWRpbmctb3ZlcmxheS9wby1sb2FkaW5nLW92ZXJsYXktYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBTXpELE1BQU0sS0FBTywrQkFBK0IsR0FBRztJQUM3QyxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLE9BQU8sRUFBRSxTQUFTO0tBQ25CLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLE9BQU8sRUFBRSxZQUFZO0tBQ3RCLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCLEVBQUE7Q0FDRjs7Ozs7Ozs7QUFTRDtJQXlDRSx1Q0FBb0IsZUFBa0M7UUFBbEMsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBdkM5QyxnQkFBVyxHQUFhLEtBQUssQ0FBQztRQXdDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUNuQztJQUNILENBQUM7SUEvQkQsc0JBQTRCLHFEQUFVOzs7O1FBSXRDO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7UUFmRDs7Ozs7Ozs7V0FRRzs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBdUMsVUFBbUI7WUFDeEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRCxDQUFDOzs7T0FBQTtJQWlCRCxzQkFBcUIsK0NBQUk7Ozs7UUFJekI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQWpCRDs7Ozs7Ozs7OztXQVVHOzs7Ozs7Ozs7Ozs7OztRQUNILFVBQTBCLEtBQWE7WUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzlDLENBQUM7OztPQUFBOzs7OztJQVlPLHNEQUFjOzs7O0lBQXRCOztZQUNRLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFO1FBRXhELE9BQU8sK0JBQStCLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzNELENBQUM7OzZCQXJDQSxLQUFLLFNBQUMsZUFBZTt1QkFtQnJCLEtBQUssU0FBQyxRQUFROztJQW9CakIsb0NBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXJEWSw2QkFBNkI7Ozs7OztJQUV4QyxvREFBc0M7Ozs7O0lBQ3RDLDhDQUF1Qjs7Ozs7SUFzQ1gsd0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1sb2FkaW5nLW92ZXJsYXktbGl0ZXJhbHMuaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IHBvTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ0xvYWRpbmcnLFxuICB9LFxuICBlczogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz4ge1xuICAgIGxvYWRpbmc6ICdDYXJnYW5kbycsXG4gIH0sXG4gIHB0OiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ0NhcnJlZ2FuZG8nLFxuICB9LFxuICBydTogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz4ge1xuICAgIGxvYWRpbmc6ICfQv9C+0LPRgNGD0LfQutCwJyxcbiAgfVxufTtcblxuLyoqXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIG1vc3RyYSBhbyB1c3XDoXJpbyB1bWEgaW1hZ2VtIGRlIF9sb2FkaW5nXyBlIGJsb3F1ZWlhIGEgcMOhZ2luYSBpbnRlaXJhIG91IG8gY29udGFpbmVyIGVzY29saGlkbyxcbiAqIGVucXVhbnRvIGFndWFyZGEgYSByZXNwb3N0YSBkZSBhbGd1bWEgcmVxdWlzacOnw6NvLlxuICovXG5leHBvcnQgY2xhc3MgUG9Mb2FkaW5nT3ZlcmxheUJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX3NjcmVlbkxvY2s/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3RleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIG8gX292ZXJsYXlfIHNlcsOhIGFwbGljYWRvIGEgdW0gY29udGFpbmVyIG91IGEgcMOhZ2luYSBpbnRlaXJhLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Atc2NyZWVuLWxvY2snKSBzZXQgc2NyZWVuTG9jayhzY3JlZW5Mb2NrOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc2NyZWVuTG9jayA9IGNvbnZlcnRUb0Jvb2xlYW4oc2NyZWVuTG9jayk7XG4gIH1cblxuICBnZXQgc2NyZWVuTG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NyZWVuTG9jaztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRleHRvIGEgc2VyIGV4aWJpZG8gbm8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogPiBPIHZhbG9yIHBhZHLDo28gc2Vyw6EgdHJhZHV6aWRvIGFjb3JkbyBjb20gbyBpZGlvbWEgY29uZmlndXJhZG8gbm8gWyoqUG9JMThuKipdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91IG5hdmVnYWRvci5cbiAgICpcbiAgICogQGRlZmF1bHQgYENhcnJlZ2FuZG9gXG4gICAqL1xuICBASW5wdXQoJ3AtdGV4dCcpIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90ZXh0ID0gdmFsdWUgfHwgdGhpcy5nZXRUZXh0RGVmYXVsdCgpO1xuICB9XG5cbiAgZ2V0IHRleHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIGlmICghdGhpcy50ZXh0KSB7XG4gICAgICB0aGlzLnRleHQgPSB0aGlzLmdldFRleHREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRUZXh0RGVmYXVsdCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy5sYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xuXG4gICAgcmV0dXJuIHBvTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHRbbGFuZ3VhZ2VdLmxvYWRpbmc7XG4gIH1cblxufVxuIl19