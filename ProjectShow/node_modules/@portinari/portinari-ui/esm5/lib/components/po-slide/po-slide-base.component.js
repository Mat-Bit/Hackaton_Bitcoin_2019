/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToInt } from './../../utils/util';
/** @type {?} */
var poSlideIntervalDefault = 4000;
/**
 * \@description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 * @abstract
 */
var PoSlideBaseComponent = /** @class */ (function () {
    function PoSlideBaseComponent() {
        this._interval = poSlideIntervalDefault;
    }
    Object.defineProperty(PoSlideBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * @default `336`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * \@default `336`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
            this.setSlideHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideBaseComponent.prototype, "interval", {
        get: /**
         * @return {?}
         */
        function () {
            return this._interval;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * @default `4000`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * \@default `4000`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._interval = convertToInt(value, poSlideIntervalDefault);
            this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideBaseComponent.prototype, "slides", {
        get: /**
         * @return {?}
         */
        function () {
            return this._slides;
        },
        /**
         * @description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `PoSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         */
        set: /**
         * \@description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `PoSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._slides = value;
            this.setSlideItems(value);
            if (value && value.length) {
                this.startSlide();
            }
        },
        enumerable: true,
        configurable: true
    });
    PoSlideBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['p-height',] }],
        interval: [{ type: Input, args: ['p-interval',] }],
        slides: [{ type: Input, args: ['p-slides',] }]
    };
    return PoSlideBaseComponent;
}());
export { PoSlideBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoSlideBaseComponent.prototype._interval;
    /**
     * @type {?}
     * @private
     */
    PoSlideBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoSlideBaseComponent.prototype._slides;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    PoSlideBaseComponent.prototype.setSlideHeight = function (height) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoSlideBaseComponent.prototype.cancelInterval = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoSlideBaseComponent.prototype.setSlideItems = function (value) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoSlideBaseComponent.prototype.startSlide = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoSlideBaseComponent.prototype.startInterval = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXNsaWRlL3BvLXNsaWRlLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7SUFJNUMsc0JBQXNCLEdBQUcsSUFBSTs7Ozs7Ozs7Ozs7OztBQWFuQztJQUFBO1FBRVUsY0FBUyxHQUFXLHNCQUFzQixDQUFDO0lBK0VyRCxDQUFDO0lBbkVDLHNCQUF1Qix3Q0FBTTs7OztRQUs3QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBZkQ7Ozs7Ozs7V0FPRzs7Ozs7Ozs7Ozs7UUFDSCxVQUE4QixLQUFhO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25DLENBQUM7OztPQUFBO0lBZUQsc0JBQXlCLDBDQUFROzs7O1FBS2pDO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFoQkQ7Ozs7Ozs7O1dBUUc7Ozs7Ozs7Ozs7OztRQUNILFVBQWtDLEtBQWE7WUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hFLENBQUM7OztPQUFBO0lBMEJELHNCQUF1Qix3Q0FBTTs7OztRQVM3QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBL0JEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBbUJHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUNILFVBQThCLEtBQXdDO1lBQ3BFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFMUIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtnQkFDekIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQ25CO1FBQ0gsQ0FBQzs7O09BQUE7O3lCQXREQSxLQUFLLFNBQUMsVUFBVTsyQkFrQmhCLEtBQUssU0FBQyxZQUFZO3lCQTZCbEIsS0FBSyxTQUFDLFVBQVU7O0lBb0JuQiwyQkFBQztDQUFBLEFBakZELElBaUZDO1NBakZxQixvQkFBb0I7Ozs7OztJQUV4Qyx5Q0FBbUQ7Ozs7O0lBQ25ELHVDQUF5Qjs7Ozs7SUFDekIsdUNBQW1EOzs7Ozs7SUFzRW5ELHNFQUE4Qzs7Ozs7O0lBRTlDLGdFQUEwQzs7Ozs7OztJQUMxQyxvRUFBaUY7Ozs7OztJQUNqRiw0REFBc0M7Ozs7OztJQUN0QywrREFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9JbnQgfSBmcm9tICcuLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1NsaWRlSXRlbSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1zbGlkZS1pdGVtLmludGVyZmFjZSc7XG5cbmNvbnN0IHBvU2xpZGVJbnRlcnZhbERlZmF1bHQgPSA0MDAwO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgZGUgc2xpZGUgcGFyYSB2aXN1YWxpemHDp8OjbyBlIGNvbnRyb2xlIGRlIGVsZW1lbnRvcyBkZSBmb3JtYSBjw61jbGljYS4gRXhpYmUgdW0gY29uanVudG8gZGUgaW1hZ2VucyBvdSBkYWRvcyBxdWUgcGVybWl0ZW1cbiAqIGN1c3RvbWl6YXIgc3VhIHZpc3VhbGl6YcOnw6NvIHV0aWxpemFuZG8gYSBkaXJldGl2YSAqKltwLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGVdKC9kb2N1bWVudGF0aW9uL3BvLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGUpKiouXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhczpcbiAqIC0gVXRpbGl6YXIgaW1hZ2VucyBubyBzbGlkZSwgbWVzbW8gcXVhbmRvIHBvc3N1aSBjb250ZcO6ZG8gcGVyc29uYWxpemFkby5cbiAqIC0gRXZpdGFyIHV0aWxpemFyIGFwZW5hcyB1bSBzbGlkZSBpc29sYWRvLCB1dGlsaXplIHBlbG8gbWVub3MgZG9pcy5cbiAqIC0gRXZpdGFyIHV0aWxpemFyIG1haXMgZGUgNSBzbGlkZXMsIHBvaXMgYSBpZGVpYSBkbyBjb21wb25lbnRlIMOpIGRlc3RhY2FyIGFwZW5hcyBpbmZvcm1hw6fDtWVzIGltcG9ydGFudGVzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9TbGlkZUJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2ludGVydmFsOiBudW1iZXIgPSBwb1NsaWRlSW50ZXJ2YWxEZWZhdWx0O1xuICBwcml2YXRlIF9oZWlnaHQ/OiBudW1iZXI7XG4gIHByaXZhdGUgX3NsaWRlczogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsdHVyYSBkbyBwby1zbGlkZSwgY2FzbyBzZWphIHNsaWRlIGNvbSB0ZW1wbGF0ZSBjdXN0b21pemFkbywgbsOjbyBhc3N1bWUgbyB2YWxvciBgZGVmYXVsdGAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGAzMzZgXG4gICAqL1xuICBASW5wdXQoJ3AtaGVpZ2h0Jykgc2V0IGhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5faGVpZ2h0ID0gY29udmVydFRvSW50KHZhbHVlKTtcbiAgICB0aGlzLnNldFNsaWRlSGVpZ2h0KHRoaXMuaGVpZ2h0KTtcbiAgfVxuXG4gIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVmFsb3IgZW0gbWlsaXNzZWd1bmRvcyBxdWUgZGVmaW5lIG8gdGVtcG8gZGUgdHJvY2EgZG9zIHNsaWRlcywgY2FzbyBvIHZhbG9yIHNlamEgbWVub3IgcXVlIGAxMDAwYCBvcyBzbGlkZXMgbsOjbyB0cm9jYW0gYXV0b21hdGljYW1lbnRlLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgNDAwMGBcbiAgICovXG4gIEBJbnB1dCgncC1pbnRlcnZhbCcpIHNldCBpbnRlcnZhbCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBjb252ZXJ0VG9JbnQodmFsdWUsIHBvU2xpZGVJbnRlcnZhbERlZmF1bHQpO1xuICAgIHRoaXMuX2ludGVydmFsID49IDEwMDAgPyB0aGlzLnN0YXJ0SW50ZXJ2YWwoKSA6IHRoaXMuY2FuY2VsSW50ZXJ2YWwoKTtcbiAgfVxuXG4gIGdldCBpbnRlcnZhbCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXJyYXkgZGUgaW1hZ2VucyBvdSBkYWRvcyBwYXJhIG8gc2xpZGUsIHBvZGUgc2VyIGRlIHRyw6pzIGZvcm1hczpcbiAgICpcbiAgICogLSBBcnJheSBpbXBsZW1lbnRhbmRvIG9iamV0b3MgZGEgaW50ZXJmYWNlIGBQb1NsaWRlSXRlbWA6XG4gICAqIGBgYFxuICAgKiBbeyBpbWFnZTogJy9hc3NldHMvaW1hZ2UtMScsIGFjdGlvbjogJ2ltYWdlQ2xpY2suYmluZCh0aGlzKSd9LCB7IGltYWdlOiAnL2Fzc2V0cy9pbWFnZS0yJyB9XVxuICAgKiBgYGBcbiAgICogLSBBcnJheSBkZSBgc3RyaW5nc2AgY29tIG9zIGNhbWluaG9zIGRhcyBpbWFnZW5zOlxuICAgKiBgYGBcbiAgICogWycvYXNzZXRzL2ltYWdlLTEnLCAnL2Fzc2V0cy9pbWFnZS0yJyBdXG4gICAqIGBgYFxuICAgKiAtIEFycmF5IGNvbSBsaXN0YSBkZSBpdGVucyAocGFyYSB1dGlsaXphciB0ZW1wbGF0ZSk6XG4gICAqIGBgYFxuICAgKiBbeyBsYWJlbDogJzEnLCBpbWc6ICcvYXNzZXRzL2ltYWdlLTEnIH0sIHsgbGFiZWw6ICcyJywgaW1nOiAnL2Fzc2V0cy9pbWFnZS0xJyB9XVxuICAgKiBgYGBcbiAgICpcbiAgICogPiBBcyBzZXRhcyBkZSBuYXZlZ2HDp8OjbyBlIG8gY29udHJvbGUgY29tIGPDrXJjdWxvcyBhcGVuYXMgc2Vyw6NvIHJlbmRlcml6YWRvcyBjYXNvIHBvc3N1YSBtYWlzIGRlIHVtIHNsaWRlLlxuICAgKi9cbiAgQElucHV0KCdwLXNsaWRlcycpIHNldCBzbGlkZXModmFsdWU6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55Pikge1xuICAgIHRoaXMuX3NsaWRlcyA9IHZhbHVlO1xuICAgIHRoaXMuc2V0U2xpZGVJdGVtcyh2YWx1ZSk7XG5cbiAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLnN0YXJ0U2xpZGUoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgc2xpZGVzKCk6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX3NsaWRlcztcbiAgfVxuXG4gIGFic3RyYWN0IHNldFNsaWRlSGVpZ2h0KGhlaWdodDogbnVtYmVyKTogdm9pZDtcblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgY2FuY2VsSW50ZXJ2YWwoKTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNldFNsaWRlSXRlbXModmFsdWU6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55Pik6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzdGFydFNsaWRlKCk6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzdGFydEludGVydmFsKCk6IHZvaWQ7XG5cbn1cbiJdfQ==