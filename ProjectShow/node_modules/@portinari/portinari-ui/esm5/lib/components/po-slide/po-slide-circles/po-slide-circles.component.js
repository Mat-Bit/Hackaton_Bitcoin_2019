/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para o conjunto de c√≠rculos que faz a passagem de itens do `po-slide`.
 */
var PoSlideCirclesComponent = /** @class */ (function () {
    function PoSlideCirclesComponent() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new EventEmitter();
    }
    PoSlideCirclesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-slide-circles',
                    template: "<div class=\"po-slide-circles\">\n  <ng-container *ngFor=\"let item of items; let index = index;\">\n    <div\n      class=\"po-slide-circle\"\n      [class.po-slide-active-circle]=\"index === currentSlideIndex\"\n      (click)=\"click.emit(index)\">\n    </div>\n  </ng-container>\n</div>\n"
                }] }
    ];
    PoSlideCirclesComponent.propDecorators = {
        currentSlideIndex: [{ type: Input, args: ['p-current-slide-index',] }],
        items: [{ type: Input, args: ['p-items',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoSlideCirclesComponent;
}());
export { PoSlideCirclesComponent };
if (false) {
    /**
     * Index do slide atual.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.currentSlideIndex;
    /**
     * Itens do slide.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.items;
    /**
     * Evento emitido ao clicar em um controle.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.click;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtY2lyY2xlcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXNsaWRlL3BvLXNsaWRlLWNpcmNsZXMvcG8tc2xpZGUtY2lyY2xlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBU3ZFO0lBQUE7Ozs7UUFhcUIsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFDckQsQ0FBQzs7Z0JBZEEsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLCtTQUFnRDtpQkFDakQ7OztvQ0FJRSxLQUFLLFNBQUMsdUJBQXVCO3dCQUc3QixLQUFLLFNBQUMsU0FBUzt3QkFHZixNQUFNLFNBQUMsU0FBUzs7SUFDbkIsOEJBQUM7Q0FBQSxBQWRELElBY0M7U0FWWSx1QkFBdUI7Ozs7OztJQUdsQyxvREFBMEQ7Ozs7O0lBRzFELHdDQUFvQzs7Ozs7SUFHcEMsd0NBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHBhcmEgbyBjb25qdW50byBkZSBjw61yY3Vsb3MgcXVlIGZheiBhIHBhc3NhZ2VtIGRlIGl0ZW5zIGRvIGBwby1zbGlkZWAuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXNsaWRlLWNpcmNsZXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tc2xpZGUtY2lyY2xlcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9TbGlkZUNpcmNsZXNDb21wb25lbnQge1xuXG4gIC8qKiBJbmRleCBkbyBzbGlkZSBhdHVhbC4gKi9cbiAgQElucHV0KCdwLWN1cnJlbnQtc2xpZGUtaW5kZXgnKSBjdXJyZW50U2xpZGVJbmRleDogbnVtYmVyO1xuXG4gIC8qKiBJdGVucyBkbyBzbGlkZS4gKi9cbiAgQElucHV0KCdwLWl0ZW1zJykgaXRlbXM6IEFycmF5PGFueT47XG5cbiAgLyoqIEV2ZW50byBlbWl0aWRvIGFvIGNsaWNhciBlbSB1bSBjb250cm9sZS4gKi9cbiAgQE91dHB1dCgncC1jbGljaycpIGNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG59XG4iXX0=