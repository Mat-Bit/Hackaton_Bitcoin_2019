/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ContentChild, ElementRef, HostListener, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { PoSlideBaseComponent } from './po-slide-base.component';
import { PoSlideContentTemplateDirective } from './directives/po-slide-content-template.directive';
import { PoSlideItemComponent } from './po-slide-item/po-slide-item.component';
/** @type {?} */
var poSlideDefaultHeight = 336;
/** @type {?} */
var poSlideIntervalMin = 1000;
/** @type {?} */
var poSlideMinHeight = 192;
/** @type {?} */
var poSlideTiming = '250ms ease';
/**
 * \@docsExtends PoSlideBaseComponent
 *
 * \@example
 * <example name="po-slide-basic" title="Portinari Slide Basic">
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-labs" title="Portinari Slide Labs">
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-useful-articles" title="Portinari Slide - Useful articles">
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-landscapes" title="Portinari Slide - Landscapes">
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
 * </example>
 */
var PoSlideComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoSlideComponent, _super);
    function PoSlideComponent(builder) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.isLoaded = false;
        _this.currentSlideIndex = 0;
        _this.slideItems = [];
        return _this;
    }
    Object.defineProperty(PoSlideComponent.prototype, "hasElements", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "isImageSlide", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !this.slideContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "offset", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.currentSlideIndex * this.slideItemWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "hasSlides", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.slides && !!this.slides.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.slide) {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        }
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoSlideComponent.prototype.goToItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.nextControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = ((this.currentSlideIndex - 1) + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.previousControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    };
    /**
     * @param {?} height
     * @return {?}
     */
    PoSlideComponent.prototype.setSlideHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        this.setHeight(height);
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    PoSlideComponent.prototype.animate = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        if (this.hasElements) {
            /** @type {?} */
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    PoSlideComponent.prototype.buildTransitionAnimation = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        return this.builder.build([
            animate(poSlideTiming, keyframes([style({ transform: "translateX(-" + offset + "px)" })]))
        ]);
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    PoSlideComponent.prototype.createArrayForTemplate = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        this.slideItems = tslib_1.__spread(slides);
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    PoSlideComponent.prototype.createArrayFromSlides = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        var _this = this;
        /** @type {?} */
        var isStringArray = slides.every((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return typeof item === 'string'; }));
        if (isStringArray) {
            slides.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return _this.slideItems.push({ image: "" + element }); }));
        }
        else {
            this.slideItems = tslib_1.__spread((/** @type {?} */ (slides)));
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    PoSlideComponent.prototype.setDefaultHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height <= poSlideMinHeight || !height && this.isImageSlide) {
            this.slide.nativeElement.style.height = poSlideDefaultHeight + "px";
            this.imageHeight = poSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    PoSlideComponent.prototype.setHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height > poSlideMinHeight) {
            this.slide.nativeElement.style.height = height + "px";
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoSlideComponent.prototype.setSlideItemWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    PoSlideComponent.prototype.cancelInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        clearInterval(this.setInterval);
    };
    /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    PoSlideComponent.prototype.setSlideItems = /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    PoSlideComponent.prototype.startSlide = /**
     * @protected
     * @return {?}
     */
    function () {
        this.setSlideHeight(this.height);
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    };
    /**
     * @protected
     * @return {?}
     */
    PoSlideComponent.prototype.startInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval = this.hasSlides && this.hasElements ? setInterval((/**
         * @return {?}
         */
        function () { _this.next(); }), this.interval) : undefined;
    };
    PoSlideComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-slide',
                    template: "<div class=\"po-slide-wrapper\">\n  <div class=\"po-slide-outer\">\n    <div class=\"po-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index;\">\n        <po-slide-item\n          [p-action]=\"item.action\"\n          [p-data]=\"item\"\n          [p-image]=\"item.image\"\n          [p-image-height]=\"imageHeight\"\n          [p-template]=\"slideContentTemplate\"\n          [p-alt]=\"item.alt\"\n          [p-link]=\"item.link\">\n        </po-slide-item>\n      </ng-container>\n    </div>\n\n    <po-slide-control *ngIf=\"hasSlides && slides.length > 1\" \n      p-control=\"previous\"\n      (p-click)=\"previousControl()\">\n    </po-slide-control>\n\n    <po-slide-control *ngIf=\"hasSlides && slides.length > 1\"\n      p-control=\"next\"\n      (p-click)=\"nextControl()\">\n    </po-slide-control>\n\n  </div>\n\n  <po-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [p-current-slide-index]=\"currentSlideIndex\"\n    [p-items]=\"slideItems\"\n    (p-click)=\"goToItem($event)\">\n  </po-slide-circles>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoSlideComponent.ctorParameters = function () { return [
        { type: AnimationBuilder }
    ]; };
    PoSlideComponent.propDecorators = {
        slideContentTemplate: [{ type: ContentChild, args: [PoSlideContentTemplateDirective, { static: true },] }],
        slide: [{ type: ViewChild, args: ['slide', { static: true },] }],
        itemsElements: [{ type: ViewChildren, args: [PoSlideItemComponent,] }],
        onResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return PoSlideComponent;
}(PoSlideBaseComponent));
export { PoSlideComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.isLoaded;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.setInterval;
    /** @type {?} */
    PoSlideComponent.prototype.currentSlideIndex;
    /** @type {?} */
    PoSlideComponent.prototype.imageHeight;
    /** @type {?} */
    PoSlideComponent.prototype.slideItems;
    /** @type {?} */
    PoSlideComponent.prototype.slideItemWidth;
    /** @type {?} */
    PoSlideComponent.prototype.slideContentTemplate;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.slide;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.itemsElements;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.builder;
}
//# sourceMappingURL=data:application/json;base64,