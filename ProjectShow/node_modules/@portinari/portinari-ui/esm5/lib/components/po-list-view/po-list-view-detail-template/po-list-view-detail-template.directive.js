/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, Input } from '@angular/core';
/**
 * \@usedBy PoListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
var PoListViewDetailTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoListViewDetailTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoListViewDetailTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-list-view-detail-template]'
                },] }
    ];
    /** @nocollapse */
    PoListViewDetailTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    PoListViewDetailTemplateDirective.propDecorators = {
        showDetail: [{ type: Input, args: ['p-show-detail',] }]
    };
    return PoListViewDetailTemplateDirective;
}());
export { PoListViewDetailTemplateDirective };
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item
     * da lista inicie aberto ou fechado.
     *
     * @type {?}
     */
    PoListViewDetailTemplateDirective.prototype.showDetail;
    /** @type {?} */
    PoListViewDetailTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWxpc3Qtdmlldy9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQzlEO0lBZ0JFLHNFQUFzRTtJQUN0RSwyQ0FBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUksQ0FBQzs7Z0JBakJ0RCxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLCtCQUErQjtpQkFDMUM7Ozs7Z0JBakRtQixXQUFXOzs7NkJBNkQ1QixLQUFLLFNBQUMsZUFBZTs7SUFLeEIsd0NBQUM7Q0FBQSxBQW5CRCxJQW1CQztTQWhCWSxpQ0FBaUM7Ozs7Ozs7Ozs7OztJQVc1Qyx1REFBc0Q7O0lBRzFDLHdEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb0xpc3RWaWV3Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphbSBhcHJlc2VudGFkYXMgaW5mb3JtYcOnw7VlcyBhZGljaW9uYWlzIGRlIGNhZGEgaXRlbSwgY29uc3RydWluZG8gdW1cbiAqIGJvdMOjbyBgRXhpYmlyIGRldGFsaGVzYCBhYmFpeG8gZG8gY29udGXDumRvIHByaW5jaXBhbCBkbyBpdGVtLlxuICpcbiAqIERldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGEgcmVmZXLDqm5jaWEgZG8gaXRlbSBlL291IMOtbmRpY2UsIHNlbmRvIHBvciBwYWRyw6NvIG8gaXRlbS5cbiAqICAtIEl0ZW06IGBpdGVtYCBkZXRlcm1pbmEgbyBpdGVtIGRhIGxpbmhhIGNvcnJlbnRlLlxuICogIC0gw41uZGljZTogYGluZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcG9kZSBzZXIgdXNhZGEgZGUgZHVhcyBmb3JtYXM6IGV4cGzDrWNpdGEgb3UgKnN5bnRheCBzdWdhciouIFZlamEgYSBzZWd1aXIgYW1ib3MsIHJlc3BlY3RpdmFtZW50ZTpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLWxpc3Qtdmlld1xuICogICBwLXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKlxuICogICA8bmctdGVtcGxhdGUgcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlIGxldC1pdGVtIGxldC1jb2RlPVwiaW5kZXhcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwicG8tcm93XCI+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTZcIiBwLWxhYmVsPVwiQ29kZVwiIFtwLXZhbHVlXT1cImNvZGVcIj48L3BvLWluZm8+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTEyXCIgcC1sYWJlbD1cIkVtYWlsXCIgW3AtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvcG8taW5mbz5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqXG4gKiA8L3BvLWxpc3Qtdmlldz5cbiAqXG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tbGlzdC12aWV3XG4gKiAgICBwLXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgPGRpdiAqcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlPVwibGV0IGl0ZW0sIGxldCBpPWluZGV4XCIgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJFbWFpbFwiIFtwLXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3BvLWluZm8+XG4gKiAgICA8L2Rpdj5cbiAqIDwvcG8tbGlzdC12aWV3PlxuICogLi4uXG4gKlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0xpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmUge1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIHF1ZSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGRvIHRpcG8gYGJvb2xlYW5gLCBxdWUgc2Vyw6EgdXRpbGl6YWRvIGNvbW8gYSB2YWxpZGHDp8OjbyBwYXJhIHF1ZSBvIGRldGFsaGUgZGUgaXRlbVxuICAgKiBkYSBsaXN0YSBpbmljaWUgYWJlcnRvIG91IGZlY2hhZG8uXG4gICAqXG4gICAqL1xuICBASW5wdXQoJ3Atc2hvdy1kZXRhaWwnKSBzaG93RGV0YWlsOiAoaXRlbSkgPT4gYm9vbGVhbjtcblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxuXG59XG4iXX0=