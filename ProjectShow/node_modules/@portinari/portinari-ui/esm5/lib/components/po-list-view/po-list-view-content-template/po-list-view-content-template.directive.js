/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * \@usedBy PoListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="[{id: 1, name: "Register", email: register\@portinari.com}]">
 *
 *   <ng-template p-list-view-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="[{id: 1, name: "Register", email: register\@portinari.com}]">
 *
 *    <div *p-list-view-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **p-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `p-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <po-list-view
 *        [p-items]="items">
 *        <ng-template p-list-view-content-template let-item [p-title]="customTitle">
 *          <div class="po-row">
 *            <po-info class="po-md-12" p-label="Customer" [p-value]="item.customer"></po-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
var PoListViewContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoListViewContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoListViewContentTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-list-view-content-template]'
                },] }
    ];
    /** @nocollapse */
    PoListViewContentTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    PoListViewContentTemplateDirective.propDecorators = {
        title: [{ type: Input, args: ['p-title',] }]
    };
    return PoListViewContentTemplateDirective;
}());
export { PoListViewContentTemplateDirective };
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `string`, que será utilizado como o título de cada item da lista.
     *
     * > Por parâmetro será enviado o item corrente, onde poderá utilizá-lo para recuperar dados sobre o mesmo.
     * @type {?}
     */
    PoListViewContentTemplateDirective.prototype.title;
    /** @type {?} */
    PoListViewContentTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1saXN0LXZpZXcvcG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUvcG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0Y5RDtJQWdCRSxzRUFBc0U7SUFDdEUsNENBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFJLENBQUM7O2dCQWpCdEQsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQ0FBZ0M7aUJBQzNDOzs7O2dCQXRGMEIsV0FBVzs7O3dCQWtHbkMsS0FBSyxTQUFDLFNBQVM7O0lBS2xCLHlDQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FoQlksa0NBQWtDOzs7Ozs7Ozs7Ozs7SUFXN0MsbURBQTBDOztJQUc5Qix5REFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEB1c2VkQnkgUG9MaXN0Vmlld0NvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYW0gYXByZXNlbnRhZGFzIGluZm9ybWHDp8O1ZXMgZXNzZW5jaWFpcyBkZSBjYWRhIGl0ZW0uXG4gKlxuICogRGV2ZS1zZSB1dGlsaXphciBjb21vIHBhcsOibWV0cm8gYSByZWZlcsOqbmNpYSBkbyBpdGVtIGUvb3Ugw61uZGljZSwgc2VuZG8gcG9yIHBhZHLDo28gbyBpdGVtLlxuICogIC0gSXRlbTogYGl0ZW1gIGRldGVybWluYSBvIGl0ZW0gZGEgbGluaGEgY29ycmVudGUuXG4gKiAgLSDDjW5kaWNlOiBgaW5kZXhgIGRldGVybWluYSBvIMOtbmRpY2UgZGEgbGluaGEgY29ycmVudGUuXG4gKlxuICogRXN0YSBkaXJldGl2YSBwb2RlIHNlciB1c2FkYSBkZSBkdWFzIGZvcm1hczogZXhwbMOtY2l0YSBvdSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tbGlzdC12aWV3XG4gKiAgIHAtcHJvcGVydHktdGl0bGU9XCJuYW1lXCJcbiAqICAgW3AtaXRlbXNdPVwiW3tpZDogMSwgbmFtZTogXCJSZWdpc3RlclwiLCBlbWFpbDogcmVnaXN0ZXJAcG9ydGluYXJpLmNvbX1dXCI+XG4gKlxuICogICA8bmctdGVtcGxhdGUgcC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZSBsZXQtaXRlbSBsZXQtY29kZT1cImluZGV4XCI+XG4gKiAgICAgPGRpdiBjbGFzcz1cInBvLXJvd1wiPlxuICogICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC02XCIgcC1sYWJlbD1cIkNvZGVcIiBbcC12YWx1ZV09XCJjb2RlXCI+PC9wby1pbmZvPlxuICogICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC02XCIgcC1sYWJlbD1cIkVtYWlsXCIgW3AtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvcG8taW5mbz5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqXG4gKiA8L3BvLWxpc3Qtdmlldz5cbiAqXG4gKiAuLi5cbiAqIGBgYFxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tbGlzdC12aWV3XG4gKiAgICBwLXByb3BlcnR5LXRpdGxlPVwibmFtZVwiXG4gKiAgICBbcC1pdGVtc109XCJbe2lkOiAxLCBuYW1lOiBcIlJlZ2lzdGVyXCIsIGVtYWlsOiByZWdpc3RlckBwb3J0aW5hcmkuY29tfV1cIj5cbiAqXG4gKiAgICA8ZGl2ICpwLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlPVwibGV0IGl0ZW0sIGxldCBpPWluZGV4XCIgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJFbWFpbFwiIFtwLXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3BvLWluZm8+XG4gKiAgICA8L2Rpdj5cbiAqIDwvcG8tbGlzdC12aWV3PlxuICogLi4uXG4gKlxuICogYGBgXG4gKlxuICogQSBkaXJldGl2YSAqKnAtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUqKiwgcG9zc2liaWxpdGEgdGFtYsOpbSBhbHRlcmFyIG8gdMOtdHVsbyBkb3MgaXRlbnMuIFBhcmEgaXN0byxcbiAqIMOpIG5lY2Vzc8OhcmlvIGF0cmlidWlyIGEgcmVmZXLDqm5jaWEgZGEgZnVuw6fDo28gcXVlIGZheiBhIGFsdGVyYcOnw6NvLCDDoCBwcm9wcmllZGFkZSBgcC10aXRsZWAsXG4gKiBhIG1lc21hIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgZG8gdGlwbyAqc3RyaW5nKi4gVmVqYSBvIGV4ZW1wbG8gYSBzZWd1aXI6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIEBDb21wb25lbnQoe1xuICogICAgc2VsZWN0b3I6ICdhcHAtcm9vdCcsXG4gKiAgICB0ZW1wbGF0ZTogYFxuICogICAgICAuLi5cbiAqICAgICAgPHBvLWxpc3Qtdmlld1xuICogICAgICAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICAgICAgPG5nLXRlbXBsYXRlIHAtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUgbGV0LWl0ZW0gW3AtdGl0bGVdPVwiY3VzdG9tVGl0bGVcIj5cbiAqICAgICAgICAgIDxkaXYgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJDdXN0b21lclwiIFtwLXZhbHVlXT1cIml0ZW0uY3VzdG9tZXJcIj48L3BvLWluZm8+XG4gKiAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgICA8L25nLXRlbXBsYXRlPlxuICogICAgICAuLi5cbiAqICAgIGBcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgIHB1YmxpYyBpdGVtcyA9IFt7XG4gKiAgICAgIGNvZGU6IDEyMDAsXG4gKiAgICAgIHByb2R1Y3Q6ICdSaWNlJyxcbiAqICAgICAgY3VzdG9tZXI6ICdTdXBlcm1hcmtldCAxJyxcbiAqICAgIH0sIHtcbiAqICAgICAgY29kZTogMTM1NSxcbiAqICAgICAgcHJvZHVjdDogJ0JlYW4nLFxuICogICAgICBjdXN0b21lcjogJ1N1cGVybWFya2V0IDInXG4gKiAgICB9XTtcbiAqXG4gKiAgICBjdXN0b21UaXRsZShpdGVtKSB7XG4gKiAgICAgIHJldHVybiBgJHtpdGVtLmNvZGV9IC0gJHtpdGVtLnByb2R1Y3R9YDtcbiAqICAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIFBvTGlzdFZpZXdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUge1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIHF1ZSBkZXZlIHJldG9ybmFyIHVtIHZhbG9yIGRvIHRpcG8gYHN0cmluZ2AsIHF1ZSBzZXLDoSB1dGlsaXphZG8gY29tbyBvIHTDrXR1bG8gZGUgY2FkYSBpdGVtIGRhIGxpc3RhLlxuICAgKlxuICAgKiA+IFBvciBwYXLDom1ldHJvIHNlcsOhIGVudmlhZG8gbyBpdGVtIGNvcnJlbnRlLCBvbmRlIHBvZGVyw6EgdXRpbGl6w6EtbG8gcGFyYSByZWN1cGVyYXIgZGFkb3Mgc29icmUgbyBtZXNtby5cbiAgICovXG4gIEBJbnB1dCgncC10aXRsZScpIHRpdGxlOiAoaXRlbSkgPT4gc3RyaW5nO1xuXG4gIC8vIE5lY2Vzc8OhcmlvIG1hbnRlciB0ZW1wbGF0ZVJlZiBwYXJhIG8gZnVuY2lvbmFtZW50byBkbyByb3cgdGVtcGxhdGUuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PikgeyB9XG5cbn1cbiJdfQ==