/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectorRef, Component, ContentChild, IterableDiffers, ViewChild } from '@angular/core';
import { isTypeof } from '../../utils/util';
import { PoPopupComponent } from '../po-popup/po-popup.component';
import { PoListViewBaseComponent } from './po-list-view-base.component';
import { PoListViewContentTemplateDirective } from './po-list-view-content-template/po-list-view-content-template.directive';
import { PoListViewDetailTemplateDirective } from './po-list-view-detail-template/po-list-view-detail-template.directive';
/**
 * \@docsExtends PoListViewBaseComponent
 *
 * \@example
 *
 * <example name="po-list-view-basic" title="Portinari List View Basic">
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-labs" title="Portinari List View Labs">
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-hiring-processes" title="Portinari List View - Hiring Processes">
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
var PoListViewComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoListViewComponent, _super);
    function PoListViewComponent(changeDetector, differs) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(PoListViewComponent.prototype, "hasContentTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "hasDetailTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewDetailTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "displayShowMoreButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "showButtonsActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "showPopupActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "titleHasAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.titleAction.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "visibleActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actions && this.actions.filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.visible !== false; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoListViewComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.initShowDetail();
    };
    /**
     * @return {?}
     */
    PoListViewComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkItemsChange();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoListViewComponent.prototype.checkTitleType = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoListViewComponent.prototype.getItemTitle = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title ?
            this.listViewContentTemplate.title(item) : item[this.propertyTitle];
    };
    /**
     * @return {?}
     */
    PoListViewComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    PoListViewComponent.prototype.returnBooleanValue = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function') ? ((/** @type {?} */ (listViewAction))).disabled(item) : listViewAction.disabled;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoListViewComponent.prototype.trackBy = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    PoListViewComponent.prototype.togglePopup = /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    function (item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(item);
    };
    /**
     * @private
     * @return {?}
     */
    PoListViewComponent.prototype.checkItemsChange = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoListViewComponent.prototype.initShowDetail = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$showDetail = _this.listViewDetailTemplate.showDetail(item); }));
        }
    };
    PoListViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-list-view',
                    template: "\n<div\n  [class.po-list-view-main-container-header]=\"showHeader\"\n  [class.po-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\">\n\n  <div *ngIf=\"showHeader\" class=\"po-list-view-main-header\">\n    <div class=\"po-checkbox-group-item\">\n      <div class=\"po-list-view-main-select\">\n        <input class=\"po-input po-checkbox-group-input\" type=\"checkbox\"\n          [class.po-checkbox-group-input-checked]=\"selectAll\"\n          [class.po-checkbox-group-input-indeterminate]=\"selectAll === null\">\n        <label\n          class=\"po-checkbox-group-label po-clickable\"\n          (click)=\"selectAllListItems()\">\n          {{ literals.selectAll }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-list-view-main-content\">\n    <div class=\"po-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"po-list-view-container-no-data po-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"po-list-view\">\n        <div class=\"po-list-view-container\">\n          <div class=\"po-list-view-header\">\n            <div class=\"po-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"po-list-view-select\">\n                <input class=\"po-input po-checkbox-group-input\" type=\"checkbox\"\n                  [class.po-checkbox-group-input-checked]=\"item.$selected\">\n                <label class=\"po-checkbox-group-label po-clickable\" (click)=\"selectListItem(item)\"></label>\n              </div>\n              <a *ngSwitchCase=\"'externalLink'\"\n                class=\"po-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <a *ngSwitchCase=\"'internalLink'\"\n                class=\"po-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <span *ngSwitchCase=\"'noLink'\"\n                class=\"po-list-view-title-no-link\"\n                [class.po-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"po-list-view-actions\">\n              <po-button *ngFor=\"let action of visibleActions\"\n                p-small=\"true\"\n                [p-disabled]=\"returnBooleanValue(action, item)\"\n                [p-icon]=\"action.icon\"\n                [p-label]=\"action.label\"\n                [p-type]=\"action.type\"\n                (p-click)=\"onClickAction(action, item)\">\n              </po-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"po-list-view-more-actions\">\n              <span #popupTarget\n                class=\"po-icon po-icon-more po-list-view-more-icon po-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\">\n              </span>\n            </div>\n\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"po-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"po-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"po-list-view-detail-button\">\n          <span class=\"po-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"po-mb-2 po-text-center\">\n  <po-button\n    [p-disabled]=\"showMoreDisabled\"\n    [p-label]=\"literals.loadMoreData\"\n    (p-click)=\"onShowMore()\">\n  </po-button>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\">\n</po-popup>\n",
                    animations: [
                        trigger('showHideDetail', [
                            state('*', style({ 'overflow-y': 'visible' })),
                            state('void', style({ 'overflow-y': 'hidden' })),
                            transition('* => void', [
                                style({ height: '*', 'overflow-y': 'hidden' }),
                                animate(100, style({ height: 0 }))
                            ]),
                            transition('void => *', [
                                style({ height: '0' }),
                                animate(100, style({ height: '*' }))
                            ])
                        ])
                    ]
                }] }
    ];
    /** @nocollapse */
    PoListViewComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IterableDiffers }
    ]; };
    PoListViewComponent.propDecorators = {
        listViewContentTemplate: [{ type: ContentChild, args: [PoListViewContentTemplateDirective, { static: true },] }],
        listViewDetailTemplate: [{ type: ContentChild, args: [PoListViewDetailTemplateDirective, { static: true },] }],
        poPopupComponent: [{ type: ViewChild, args: ['popup', { static: true },] }]
    };
    return PoListViewComponent;
}(PoListViewBaseComponent));
export { PoListViewComponent };
if (false) {
    /** @type {?} */
    PoListViewComponent.prototype.listViewContentTemplate;
    /** @type {?} */
    PoListViewComponent.prototype.listViewDetailTemplate;
    /** @type {?} */
    PoListViewComponent.prototype.poPopupComponent;
    /**
     * @type {?}
     * @private
     */
    PoListViewComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoListViewComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,