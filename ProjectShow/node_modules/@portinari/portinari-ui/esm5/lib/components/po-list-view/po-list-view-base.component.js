/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, poLocaleDefault, convertToBoolean } from '../../utils/util';
/** @type {?} */
export var poListViewLiteralsDefault = {
    en: (/** @type {?} */ ({
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    })),
    es: (/** @type {?} */ ({
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    })),
    pt: (/** @type {?} */ ({
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    })),
    ru: (/** @type {?} */ ({
        hideDetails: 'Скрыть детали',
        loadMoreData: 'Загрузить больше результатов',
        noData: 'Данные не найдены',
        selectAll: 'Выбрать все',
        showDetails: 'Посмотреть детали'
    }))
};
/**
 * \@description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
 * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 */
var PoListViewBaseComponent = /** @class */ (function () {
    function PoListViewBaseComponent() {
        this.selectAll = false;
        this.showHeader = false;
        /**
         * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
         *
         * > Caso nenhuma ação for definida o mesmo não ficará visível.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação que será executada ao clicar no título.
         *
         * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
         */
        this.titleAction = new EventEmitter();
    }
    Object.defineProperty(PoListViewBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de ações que serão exibidas no componente.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista de ações que serão exibidas no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._actions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `po-list-view` em *pixels*.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do `po-list-view` em *pixels*.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "hideSelectAll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSelectAll;
        },
        /**
         * @description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * @default `false`
         */
        set: /**
         * \@description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * \@default `false`
         * @param {?} hideSelectAll
         * @return {?}
         */
        function (hideSelectAll) {
            this._hideSelectAll = convertToBoolean(hideSelectAll);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /** Lista de itens que serão exibidos no componente. */
        set: /**
         * Lista de itens que serão exibidos no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poListViewLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-list-view
         *   [p-literals]="customLiterals">
         * </po-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-list-view
         *   [p-literals]="customLiterals">
         * </po-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poListViewLiteralsDefault[poLocaleDefault], poListViewLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poListViewLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "select", {
        get: /**
         * @return {?}
         */
        function () {
            return this._select;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * \@default `false`
         * @param {?} select
         * @return {?}
         */
        function (select) {
            this._select = convertToBoolean(select);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "showMoreDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showMoreDisabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showMoreDisabled = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    PoListViewBaseComponent.prototype.onClickAction = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        /** @type {?} */
        var cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    };
    /**
     * @return {?}
     */
    PoListViewBaseComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        this.showMore.emit();
    };
    /**
     * @param {?} listItem
     * @return {?}
     */
    PoListViewBaseComponent.prototype.runTitleAction = /**
     * @param {?} listItem
     * @return {?}
     */
    function (listItem) {
        /** @type {?} */
        var itemWithPublicProperties = this.deleteInternalAttrs(listItem);
        this.titleAction.emit(itemWithPublicProperties);
    };
    /**
     * @return {?}
     */
    PoListViewBaseComponent.prototype.selectAllListItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.$selected = _this.selectAll;
            }));
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoListViewBaseComponent.prototype.selectListItem = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    PoListViewBaseComponent.prototype.deleteInternalAttrs = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var itemCopy = item ? tslib_1.__assign({}, item) : undefined;
        for (var key in itemCopy) {
            if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                delete itemCopy[key];
            }
        }
        return itemCopy;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    PoListViewBaseComponent.prototype.checkIfItemsAreSelected = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var someCheckedOrIndeterminate = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected || item.$selected === null; });
        /** @type {?} */
        var everyChecked = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected; });
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    PoListViewBaseComponent.prototype.showMainHeader = /**
     * @private
     * @return {?}
     */
    function () {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    };
    PoListViewBaseComponent.propDecorators = {
        actions: [{ type: Input, args: ['p-actions',] }],
        height: [{ type: Input, args: ['p-height',] }],
        hideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
        items: [{ type: Input, args: ['p-items',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        propertyLink: [{ type: Input, args: ['p-property-link',] }],
        propertyTitle: [{ type: Input, args: ['p-property-title',] }],
        select: [{ type: Input, args: ['p-select',] }],
        showMoreDisabled: [{ type: Input, args: ['p-show-more-disabled',] }],
        showMore: [{ type: Output, args: ['p-show-more',] }],
        titleAction: [{ type: Output, args: ['p-title-action',] }]
    };
    return PoListViewBaseComponent;
}());
export { PoListViewBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._hideSelectAll;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._select;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._showMoreDisabled;
    /** @type {?} */
    PoListViewBaseComponent.prototype.popupTarget;
    /** @type {?} */
    PoListViewBaseComponent.prototype.selectAll;
    /** @type {?} */
    PoListViewBaseComponent.prototype.showHeader;
    /**
     * Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será usado como link para o título.
     * @type {?}
     */
    PoListViewBaseComponent.prototype.propertyLink;
    /**
     * Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será exibido como o título de cada item.
     * @type {?}
     */
    PoListViewBaseComponent.prototype.propertyTitle;
    /**
     * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
     *
     * > Caso nenhuma ação for definida o mesmo não ficará visível.
     * @type {?}
     */
    PoListViewBaseComponent.prototype.showMore;
    /**
     * Ação que será executada ao clicar no título.
     *
     * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
     * @type {?}
     */
    PoListViewBaseComponent.prototype.titleAction;
}
//# sourceMappingURL=data:application/json;base64,