/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, HostListener, IterableDiffers, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartBaseComponent } from './po-chart-base.component';
import { PoChartColors } from './po-chart-colors.constant';
import { PoChartDonutComponent } from './po-chart-types/po-chart-donut/po-chart-donut.component';
import { PoChartPieComponent } from './po-chart-types/po-chart-pie/po-chart-pie.component';
import { PoChartType } from './enums/po-chart-type.enum';
/**
 * \@docsExtends PoChartBaseComponent
 *
 * \@example
 *
 * <example name="po-chart-basic" title="Portinari Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="Portinari Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="Portinari Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
var PoChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoChartComponent, _super);
    function PoChartComponent(changeDetector, componentFactoryResolver, differs) {
        var _a;
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.differs = differs;
        _this.calculatedElement = false;
        _this.initialized = false;
        _this.windowResizeListener = new Subject();
        _this.mappings = (_a = {},
            _a[PoChartType.Pie] = PoChartPieComponent,
            _a[PoChartType.Donut] = PoChartDonutComponent,
            _a);
        _this.colors = [];
        _this.onResize = (/**
         * @return {?}
         */
        function () { return _this.windowResizeListener.next(); });
        _this.differ = _this.differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    PoChartComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
    };
    /**
     * @return {?}
     */
    PoChartComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visÃ­vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    };
    /**
     * @return {?}
     */
    PoChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeWindowResizeListener();
    };
    /**
     * @return {?}
     */
    PoChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getSeriesColor();
    };
    /**
     * @return {?}
     */
    PoChartComponent.prototype.rebuildComponent = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.dynamicComponentSetting();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.checkingForSerieChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.componentRef && this.differ) {
            /** @type {?} */
            var changeSeries = this.differ.diff(this.series);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.createComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var componentType = this.getComponentType(this.type);
        /** @type {?} */
        var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        /** @type {?} */
        var instance = (/** @type {?} */ (this.componentRef.instance));
        this.setChartProperties(instance);
        return instance;
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.dynamicComponentSetting = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    };
    /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    PoChartComponent.prototype.getComponentType = /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    function (typeName) {
        return this.mappings[typeName];
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.getSeriesColor = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var colorsLength = PoChartColors.length - 1;
        if (!this.series) {
            return this.colors = PoChartColors[colorsLength];
        }
        /** @type {?} */
        var seriesLength = this.series.length - 1;
        if (seriesLength > colorsLength) {
            /** @type {?} */
            var colors = PoChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            /** @type {?} */
            var quantityDuplicates = seriesLength / colorsLength;
            for (var i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoChartColors[colorsLength]);
            }
            return this.colors = colors;
        }
        return this.colors = PoChartColors[seriesLength];
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.removeWindowResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onResize) {
            this.onResize = (/**
             * @return {?}
             */
            function () { });
        }
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    PoChartComponent.prototype.setChartProperties = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = Array.isArray(this.colors) ? tslib_1.__spread(this.colors) : [];
        instance.height = this.height;
        instance.series = this.series || [];
        instance.type = this.type;
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    PoChartComponent.prototype.setClickSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        instance.onSerieClick.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onSeriesClick(event);
        }));
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    PoChartComponent.prototype.setHoverSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        instance.onSerieHover.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onSeriesHover(event);
        }));
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    PoChartComponent.prototype.setResizeListenerSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        this.windowResizeListener.subscribe((/**
         * @return {?}
         */
        function () {
            instance.chartHeader = _this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = _this.chartLegend.nativeElement.offsetHeight;
            instance.chartWrapper = _this.chartWrapper.nativeElement.offsetWidth;
        }));
    };
    PoChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-chart',
                    template: "<div #chartWrapper class=\"po-chart-wrapper\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n  <div #chartLegend class=\"po-chart-legend\">\n    <div class=\"po-chart-legend-container\">\n      <div class=\"po-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\n        <div class=\"po-chart-legend-square\" [style.background]=\"colors[i]\"></div>\n        <span class=\"po-chart-legend-text\">{{ serie.category }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoChartComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers }
    ]; };
    PoChartComponent.propDecorators = {
        chartContainer: [{ type: ViewChild, args: ['chartContainer', { read: ViewContainerRef, static: true },] }],
        chartHeader: [{ type: ViewChild, args: ['chartHeader', { static: true },] }],
        chartLegend: [{ type: ViewChild, args: ['chartLegend', { static: true },] }],
        chartWrapper: [{ type: ViewChild, args: ['chartWrapper', { static: true },] }],
        onResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return PoChartComponent;
}(PoChartBaseComponent));
export { PoChartComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.windowResizeListener;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.mappings;
    /** @type {?} */
    PoChartComponent.prototype.colors;
    /** @type {?} */
    PoChartComponent.prototype.chartContainer;
    /** @type {?} */
    PoChartComponent.prototype.chartHeader;
    /** @type {?} */
    PoChartComponent.prototype.chartLegend;
    /** @type {?} */
    PoChartComponent.prototype.chartWrapper;
    /** @type {?} */
    PoChartComponent.prototype.onResize;
    /** @type {?} */
    PoChartComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.differs;
}
//# sourceMappingURL=data:application/json;base64,