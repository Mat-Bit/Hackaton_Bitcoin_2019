/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { poChartAngleStepInterval, poChartCompleteCircle, poChartPadding, poChartStartAngle } from './po-chart-circular.constant';
import { PoChartDynamicTypeComponent } from '../po-chart-dynamic-type.component';
import { PoChartType } from '../../enums/po-chart-type.enum';
import { PoSeriesTextBlack } from '../../po-chart-colors.constant';
/** @type {?} */
var poChartBlackColor = '#000000';
/** @type {?} */
var poChartWhiteColor = '#ffffff';
var PoChartCircular = /** @class */ (function (_super) {
    tslib_1.__extends(PoChartCircular, _super);
    function PoChartCircular(el, ngZone, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.ngZone = ngZone;
        _this.renderer = renderer;
        _this.chartItemsEndAngleList = [];
        _this.svgPathElementsList = [];
        _this.svgTextElementsList = [];
        return _this;
    }
    Object.defineProperty(PoChartCircular.prototype, "series", {
        get: /**
         * @return {?}
         */
        function () {
            return this._series;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._series = this.getSeriesWithValue(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    PoChartCircular.calculateEndAngle = /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    function (value, totalValue) {
        return value / totalValue * (Math.PI * 2);
    };
    /**
     * @return {?}
     */
    PoChartCircular.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeWindowResizeListener();
        this.removeWindowScrollListener();
        this.animationRunning = false;
    };
    /**
     * @return {?}
     */
    PoChartCircular.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.chartInitSetup();
        this.setEventListeners();
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.animationSetup = /**
     * @private
     * @return {?}
     */
    function () {
        this.chartItemStartAngle = poChartStartAngle;
        this.chartItemEndAngle = this.chartItemsEndAngleList[0];
        this.animationRunning = true;
        this.drawPathInit();
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.calculateAngleRadians = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.series.forEach((/**
         * @param {?} serie
         * @param {?} index
         * @return {?}
         */
        function (serie, index) {
            return _this.chartItemsEndAngleList[index] = PoChartCircular.calculateEndAngle(serie.value, _this.totalValue);
        }));
    };
    /**
     * @private
     * @param {?} angleCurrentPosition
     * @return {?}
     */
    PoChartCircular.prototype.calculateCurrentEndAngle = /**
     * @private
     * @param {?} angleCurrentPosition
     * @return {?}
     */
    function (angleCurrentPosition) {
        /** @type {?} */
        var isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
        if (isSerieDrawCompleted) {
            return (this.chartItemStartAngle + this.chartItemEndAngle) - poChartCompleteCircle;
        }
        else {
            return this.chartItemStartAngle + angleCurrentPosition;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.calculateSVGDimensions = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.setInnerRadius();
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoChartCircular.prototype.changeTooltipPosition = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.tooltipElement && this.tooltipElement.classList.contains('po-invisible')) {
            this.showTooltip();
        }
        /** @type {?} */
        var tooltipPositions = this.setTooltipPositions(event);
        this.renderer.setStyle(this.tooltipElement, 'left', tooltipPositions.left + "px");
        this.renderer.setStyle(this.tooltipElement, 'top', tooltipPositions.top + "px");
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.chartInitSetup = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateSVGDimensions();
        this.calculateTotalValue();
        this.calculateAngleRadians();
        this.createSVGElements();
        this.animationSetup();
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.checkingIfScrollsWithPoPage = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var poPageContent = document.getElementsByClassName('po-page-content');
        return poPageContent.length ? poPageContent[0] : window;
    };
    /**
     * @private
     * @param {?} serie
     * @param {?} svgPathsWrapper
     * @return {?}
     */
    PoChartCircular.prototype.createPath = /**
     * @private
     * @param {?} serie
     * @param {?} svgPathsWrapper
     * @return {?}
     */
    function (serie, svgPathsWrapper) {
        /** @type {?} */
        var svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'po-path-item');
        this.renderer.setAttribute(svgPath, 'fill', serie.color);
        this.setTooltipAttributes(svgPath, serie);
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        this.svgPathElementsList.push(svgPath);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.createPaths = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
        this.series.forEach((/**
         * @param {?} serie
         * @return {?}
         */
        function (serie) { return _this.createPath(serie, svgPathsWrapper); }));
    };
    /**
     * @private
     * @param {?} serie
     * @return {?}
     */
    PoChartCircular.prototype.createText = /**
     * @private
     * @param {?} serie
     * @return {?}
     */
    function (serie) {
        var value = serie.value;
        /** @type {?} */
        var svgG = this.renderer.createElement('svg:g', 'svg');
        /** @type {?} */
        var svgText = this.renderer.createElement('svg:text', 'svg');
        /** @type {?} */
        var fontSize = this.getFontSize();
        /** @type {?} */
        var textColor = this.getTextColor(serie.color);
        svgText.textContent = this.getPercentValue(value, this.totalValue) + '%';
        this.renderer.setAttribute(svgText, 'class', 'po-path-item');
        this.renderer.setAttribute(svgText, 'fill', textColor);
        this.renderer.setAttribute(svgText, 'font-size', fontSize);
        this.renderer.setAttribute(svgText, 'fill-opacity', '0');
        this.setTooltipAttributes(svgText, serie);
        this.renderer.appendChild(svgG, svgText);
        this.renderer.appendChild(this.svgElement, svgG);
        this.svgTextElementsList.push(svgText);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.createTexts = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.type === PoChartType.Donut) {
            this.series.forEach((/**
             * @param {?} serie
             * @return {?}
             */
            function (serie) { return _this.createText(serie); }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.createSVGElements = /**
     * @private
     * @return {?}
     */
    function () {
        this.svgElement = this.renderer.createElement('svg:svg', 'svg');
        this.renderer.setAttribute(this.svgElement, 'viewBox', "0 0 " + this.chartWrapper + " " + this.centerX * 2);
        this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', 'xMidYMin meet');
        this.renderer.setAttribute(this.svgElement, 'class', 'po-chart-svg-element');
        this.renderer.setAttribute(this.svgElement, 'width', "" + (this.chartWrapper - poChartPadding * 2));
        this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
        this.svgContainer.nativeElement.appendChild(this.svgElement);
        this.createPaths();
        this.createTexts();
    };
    /**
     * @private
     * @param {?} path
     * @param {?} chartItemStartAngle
     * @param {?} chartItemEndAngle
     * @return {?}
     */
    PoChartCircular.prototype.drawPath = /**
     * @private
     * @param {?} path
     * @param {?} chartItemStartAngle
     * @param {?} chartItemEndAngle
     * @return {?}
     */
    function (path, chartItemStartAngle, chartItemEndAngle) {
        /** @type {?} */
        var largeArc = chartItemEndAngle - chartItemStartAngle > Math.PI;
        /** @type {?} */
        var sinAlpha = Math.sin(chartItemStartAngle);
        /** @type {?} */
        var cosAlpha = Math.cos(chartItemStartAngle);
        /** @type {?} */
        var sinBeta = Math.sin(chartItemEndAngle);
        /** @type {?} */
        var cosBeta = Math.cos(chartItemEndAngle);
        /** @type {?} */
        var startX = this.centerX + cosAlpha * this.centerX;
        /** @type {?} */
        var startY = this.centerX + sinAlpha * this.centerX;
        /** @type {?} */
        var endX = this.centerX + cosBeta * this.centerX;
        /** @type {?} */
        var endY = this.centerX + sinBeta * this.centerX;
        /** @type {?} */
        var startInnerX = this.centerX + cosAlpha * this.innerRadius;
        /** @type {?} */
        var startInnerY = this.centerX + sinAlpha * this.innerRadius;
        /** @type {?} */
        var endInnerX = this.centerX + cosBeta * this.innerRadius;
        /** @type {?} */
        var endInnerY = this.centerX + sinBeta * this.innerRadius;
        /** @type {?} */
        var pathCoordinates = [
            'M', startX, startY,
            'A', this.centerX, this.centerX, 0, largeArc ? '1,1' : '0,1', endX, endY,
            'L', endInnerX, endInnerY,
            'A', this.innerRadius, this.innerRadius, 0, largeArc ? '1,0' : '0,0', startInnerX, startInnerY,
            'Z'
        ].join(' ');
        return path.setAttribute('d', pathCoordinates);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.drawPathInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.animationRunning) {
            return;
        }
        else {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.drawSeries(); }));
        }
    };
    /**
     * @private
     * @param {?=} currentSerieIndex
     * @param {?=} angleCurrentPosition
     * @return {?}
     */
    PoChartCircular.prototype.drawSeries = /**
     * @private
     * @param {?=} currentSerieIndex
     * @param {?=} angleCurrentPosition
     * @return {?}
     */
    function (currentSerieIndex, angleCurrentPosition) {
        if (currentSerieIndex === void 0) { currentSerieIndex = 0; }
        if (angleCurrentPosition === void 0) { angleCurrentPosition = 0; }
        /** @type {?} */
        var isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
        /** @type {?} */
        var isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
        if (isFinishedDrawingAllSeries) {
            return;
        }
        if (isFinishedDrawingCurrentSeries) {
            this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
            currentSerieIndex++;
            this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
            angleCurrentPosition = 0;
        }
        else {
            angleCurrentPosition += poChartAngleStepInterval;
            this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
            this.setTextProperties(this.svgTextElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
        }
        window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoChartCircular.prototype.emitEventOnEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onSerieHover.next(event);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.getFontSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fontSizePorcent = 0.04;
        /** @type {?} */
        var fontSize = fontSizePorcent * this.chartWrapper;
        return fontSize.toFixed(0) + "px";
    };
    /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    PoChartCircular.prototype.getPercentValue = /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    function (value, totalValue) {
        /** @type {?} */
        var percentValue = (value / totalValue) * 100;
        // caso tiver mais que duas casas decimais, fixa até duas, ex: 10.6575 => 10.65
        // se não retorna o valor com parsefloat que remove casa decimal desencessaria, ex: 10.60 => 10.6
        /** @type {?} */
        var floatPercentValue = this.isMoreThanTwoDecimalsPlaces(percentValue) ?
            parseFloat(percentValue.toFixed(2)) : parseFloat((/** @type {?} */ (percentValue)));
        return String(floatPercentValue).replace('.', ',');
    };
    /**
     * @private
     * @param {?} series
     * @return {?}
     */
    PoChartCircular.prototype.getSeriesWithValue = /**
     * @private
     * @param {?} series
     * @return {?}
     */
    function (series) {
        var _this = this;
        /** @type {?} */
        var newSeries = [];
        series.forEach((/**
         * @param {?} serie
         * @param {?} index
         * @return {?}
         */
        function (serie, index) {
            if (serie.value > 0) {
                newSeries.push(tslib_1.__assign({}, serie, { color: _this.colors[index] }));
            }
        }));
        return newSeries;
    };
    /**
     * @private
     * @param {?} color
     * @return {?}
     */
    PoChartCircular.prototype.getTextColor = /**
     * @private
     * @param {?} color
     * @return {?}
     */
    function (color) {
        if (PoSeriesTextBlack.includes(color)) {
            return poChartBlackColor;
        }
        return poChartWhiteColor;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoChartCircular.prototype.getTooltipValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.type === PoChartType.Pie) {
            return value.toString();
        }
        return this.getPercentValue(value, this.totalValue) + '%';
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    PoChartCircular.prototype.isMoreThanTwoDecimalsPlaces = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = 0; }
        var _a = tslib_1.__read(value.toString().split('.'), 2), valueAfterDot = _a[1];
        return valueAfterDot && valueAfterDot.length > 2;
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.onMouseClick = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var serieOnClick = { category: this.chartElementCategory, value: this.chartElementValue };
        this.onSerieClick.next(serieOnClick);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoChartCircular.prototype.onMouseEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.tooltipElement = this.chartBody.nativeElement.lastChild;
        this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');
        this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');
        this.tooltipText = event.target.getAttributeNS(null, 'data-tooltip-text');
        this.showTooltip();
        this.changeTooltipPosition(event);
        /** @type {?} */
        var serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };
        this.emitEventOnEnter(serieOnEnter);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.onWindowResize = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateSVGDimensions();
        this.renderer.setAttribute(this.svgElement, 'width', "" + (this.chartWrapper - poChartPadding * 2));
        this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.removeTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.tooltipElement) {
            this.renderer.addClass(this.tooltipElement, 'po-invisible');
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.removeWindowResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.removeWindowScrollListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.windowScrollListener) {
            this.windowScrollListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.setEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var chartSeries = this.el.nativeElement.querySelectorAll('.po-path-item');
        chartSeries = Array.from(chartSeries);
        chartSeries.forEach((/**
         * @param {?} serie
         * @return {?}
         */
        function (serie) {
            _this.renderer.listen(serie, 'click', _this.onMouseClick.bind(_this));
            _this.renderer.listen(serie, 'mouseenter', _this.onMouseEnter.bind(_this));
            _this.renderer.listen(serie, 'mousemove', _this.changeTooltipPosition.bind(_this));
            _this.renderer.listen(serie, 'mouseleave', _this.removeTooltip.bind(_this));
        }));
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
        this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithPoPage(), 'scroll', this.removeTooltip.bind(this));
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.setInnerRadius = /**
     * @private
     * @return {?}
     */
    function () {
        // tamanho da largua da serie proporcional ao grafico, o valor 0.27 fica proximo de 32px
        /** @type {?} */
        var serieWidth = 0.27;
        this.innerRadius = this.type === PoChartType.Pie ? 0 : this.centerX - (this.centerX * serieWidth);
    };
    /**
     * @private
     * @param {?} text
     * @param {?} startAngle
     * @param {?} endAngle
     * @return {?}
     */
    PoChartCircular.prototype.setTextProperties = /**
     * @private
     * @param {?} text
     * @param {?} startAngle
     * @param {?} endAngle
     * @return {?}
     */
    function (text, startAngle, endAngle) {
        if (this.type === PoChartType.Donut) {
            // utilizado para recuperar o angulo do meio, entre o inicio e fim para centralizar o texto
            /** @type {?} */
            var centerAngle = (startAngle + endAngle) / 2;
            /** @type {?} */
            var textBox = text.getBBox();
            /** @type {?} */
            var halfTextWidth = textBox.width / 2;
            /** @type {?} */
            var halfTextHeight = textBox.height / 2;
            // radius interno (circulo branco) + a metade da diferença entre tamanho do centro e radius interno
            /** @type {?} */
            var radius = this.innerRadius + (this.centerX - this.innerRadius) / 2;
            /** @type {?} */
            var xCoordinate = radius * Math.cos(centerAngle) + this.centerX - (halfTextWidth);
            /** @type {?} */
            var yCoordinate = radius * Math.sin(centerAngle) + this.centerX + (halfTextHeight / 2);
            text.setAttribute('x', xCoordinate);
            text.setAttribute('y', yCoordinate);
            text.setAttribute('fill-opacity', '1');
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoChartCircular.prototype.setTooltipPositions = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var displacement = 8;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    };
    /**
     * @private
     * @param {?} svgElement
     * @param {?} serie
     * @return {?}
     */
    PoChartCircular.prototype.setTooltipAttributes = /**
     * @private
     * @param {?} svgElement
     * @param {?} serie
     * @return {?}
     */
    function (svgElement, serie) {
        var value = serie.value, category = serie.category, tooltip = serie.tooltip;
        /** @type {?} */
        var tooltipValue = this.getTooltipValue(value);
        this.renderer.setAttribute(svgElement, 'data-tooltip-category', category);
        this.renderer.setAttribute(svgElement, 'data-tooltip-value', "" + value);
        this.renderer.setAttribute(svgElement, 'data-tooltip-text', tooltip || category + ": " + tooltipValue);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.showTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.tooltipElement, 'po-invisible');
    };
    return PoChartCircular;
}(PoChartDynamicTypeComponent));
export { PoChartCircular };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype._series;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.animationRunning;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemEndAngle;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemStartAngle;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemsEndAngleList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.svgPathElementsList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.svgTextElementsList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.el;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,