/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToInt, isTypeof } from '../../utils/util';
import { PoChartType } from './enums/po-chart-type.enum';
/** @type {?} */
var poChartDefaultHeight = 400;
/** @type {?} */
var poChartMinHeight = 200;
/** @type {?} */
var poChartTypeDefault = PoChartType.Pie;
/**
 * \@description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Este componente também possibilita a definição das seguintes propriedades:
 *  - altura
 *  - series
 *  - tipo
 *  - título
 *
 * Além das definições de propriedades, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 *
 * @abstract
 */
var PoChartBaseComponent = /** @class */ (function () {
    function PoChartBaseComponent() {
        this._height = poChartDefaultHeight;
        this._type = poChartTypeDefault;
        this.poChartType = PoChartType;
        /**
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesClick = new EventEmitter();
        /**
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesHover = new EventEmitter();
    }
    Object.defineProperty(PoChartBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * @default `400px`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * \@default `400px`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var intValue = convertToInt(value);
            /** @type {?} */
            var height;
            if (isTypeof(value, 'number')) {
                height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
            }
            else {
                height = poChartDefaultHeight;
            }
            this._height = height;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o tipo de gráfico.
         *
         * > Veja os valores válidos no *enum* `PoChartType`.
         *
         * @default `PoChartType.Pie`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o tipo de gráfico.
         *
         * > Veja os valores válidos no *enum* `PoChartType`.
         *
         * \@default `PoChartType.Pie`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = ((/** @type {?} */ (Object))).values(PoChartType).includes(value) ? value : poChartTypeDefault;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    PoChartBaseComponent.prototype.onSeriesClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesClick.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoChartBaseComponent.prototype.onSeriesHover = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesHover.emit(event);
    };
    PoChartBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['p-height',] }],
        series: [{ type: Input, args: ['p-series',] }],
        title: [{ type: Input, args: ['p-title',] }],
        type: [{ type: Input, args: ['p-type',] }],
        seriesClick: [{ type: Output, args: ['p-series-click',] }],
        seriesHover: [{ type: Output, args: ['p-series-hover',] }]
    };
    return PoChartBaseComponent;
}());
export { PoChartBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoChartBaseComponent.prototype._type;
    /** @type {?} */
    PoChartBaseComponent.prototype.poChartType;
    /**
     * \@description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     *
     * > A coleção de objetos deve implementar alguma das interfaces abaixo:
     * - `PoDonutChartSeries`
     * - `PoPieChartSeries`
     * @type {?}
     */
    PoChartBaseComponent.prototype.series;
    /**
     * Define o título do gráfico.
     * @type {?}
     */
    PoChartBaseComponent.prototype.title;
    /**
     * Evento executado quando o usuário clicar sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    PoChartBaseComponent.prototype.seriesClick;
    /**
     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    PoChartBaseComponent.prototype.seriesHover;
    /**
     * @abstract
     * @return {?}
     */
    PoChartBaseComponent.prototype.rebuildComponent = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWNoYXJ0L3BvLWNoYXJ0LWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7O0lBSW5ELG9CQUFvQixHQUFHLEdBQUc7O0lBQzFCLGdCQUFnQixHQUFHLEdBQUc7O0lBQ3RCLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0IxQztJQUFBO1FBRVUsWUFBTyxHQUFZLG9CQUFvQixDQUFDO1FBQ3hDLFVBQUssR0FBZ0Isa0JBQWtCLENBQUM7UUFFaEMsZ0JBQVcsR0FBRyxXQUFXLENBQUM7Ozs7OztRQXlFMUMsZ0JBQVcsR0FBdUIsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7Ozs7O1FBUTFELGdCQUFXLEdBQXVCLElBQUksWUFBWSxFQUFPLENBQUM7SUFZNUQsQ0FBQztJQWhGQyxzQkFBdUIsd0NBQU07Ozs7UUFlN0I7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQztRQTVCRDs7Ozs7Ozs7OztXQVVHOzs7Ozs7Ozs7Ozs7OztRQUNILFVBQThCLEtBQWE7O2dCQUNuQyxRQUFRLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQzs7Z0JBQ2hDLE1BQWM7WUFFbEIsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFO2dCQUM3QixNQUFNLEdBQUcsUUFBUSxJQUFJLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO2FBQ3JFO2lCQUFNO2dCQUNMLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQzthQUMvQjtZQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBRXRCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBK0JELHNCQUFxQixzQ0FBSTs7OztRQU16QjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDO1FBbkJEOzs7Ozs7Ozs7O1dBVUc7Ozs7Ozs7Ozs7Ozs7O1FBQ0gsVUFBMEIsS0FBa0I7WUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztZQUU1RixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMxQixDQUFDOzs7T0FBQTs7Ozs7SUFzQkQsNENBQWE7Ozs7SUFBYixVQUFjLEtBQVU7UUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7SUFFRCw0Q0FBYTs7OztJQUFiLFVBQWMsS0FBVTtRQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDOzt5QkE1RUEsS0FBSyxTQUFDLFVBQVU7eUJBNEJoQixLQUFLLFNBQUMsVUFBVTt3QkFHaEIsS0FBSyxTQUFDLFNBQVM7dUJBYWYsS0FBSyxTQUFDLFFBQVE7OEJBZWQsTUFBTSxTQUFDLGdCQUFnQjs4QkFRdkIsTUFBTSxTQUFDLGdCQUFnQjs7SUFhMUIsMkJBQUM7Q0FBQSxBQWxHRCxJQWtHQztTQWxHcUIsb0JBQW9COzs7Ozs7SUFFeEMsdUNBQWdEOzs7OztJQUNoRCxxQ0FBZ0Q7O0lBRWhELDJDQUEwQzs7Ozs7Ozs7Ozs7SUF5QzFDLHNDQUF3RTs7Ozs7SUFHeEUscUNBQWlDOzs7Ozs7O0lBNEJqQywyQ0FDMEQ7Ozs7Ozs7SUFPMUQsMkNBQzBEOzs7OztJQVUxRCxrRUFBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvSW50LCBpc1R5cGVvZiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb0NoYXJ0VHlwZSB9IGZyb20gJy4vZW51bXMvcG8tY2hhcnQtdHlwZS5lbnVtJztcbmltcG9ydCB7IFBvRG9udXRDaGFydFNlcmllcyB9IGZyb20gJy4vcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZG9udXQvcG8tY2hhcnQtZG9udXQtc2VyaWVzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BpZUNoYXJ0U2VyaWVzIH0gZnJvbSAnLi9wby1jaGFydC10eXBlcy9wby1jaGFydC1waWUvcG8tY2hhcnQtcGllLXNlcmllcy5pbnRlcmZhY2UnO1xuXG5jb25zdCBwb0NoYXJ0RGVmYXVsdEhlaWdodCA9IDQwMDtcbmNvbnN0IHBvQ2hhcnRNaW5IZWlnaHQgPSAyMDA7XG5jb25zdCBwb0NoYXJ0VHlwZURlZmF1bHQgPSBQb0NoYXJ0VHlwZS5QaWU7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tY2hhcnRgIMOpIHVtIGNvbXBvbmVudGUgcGFyYSByZW5kZXJpemHDp8OjbyBkZSBkYWRvcyBhdHJhdsOpcyBkZSBncsOhZmljb3MsIGNvbSBpc3NvIGZhY2lsaXRhbmRvIGEgY29tcHJlZW5zw6NvIGUgdG9ybmFuZG8gYVxuICogdmlzdWFsaXphw6fDo28gZGVzdGVzIGRhZG9zIG1haXMgYWdyYWTDoXZlbC5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgdGFtYsOpbSBwb3NzaWJpbGl0YSBhIGRlZmluacOnw6NvIGRhcyBzZWd1aW50ZXMgcHJvcHJpZWRhZGVzOlxuICogIC0gYWx0dXJhXG4gKiAgLSBzZXJpZXNcbiAqICAtIHRpcG9cbiAqICAtIHTDrXR1bG9cbiAqXG4gKiBBbMOpbSBkYXMgZGVmaW5pw6fDtWVzIGRlIHByb3ByaWVkYWRlcywgdGFtYsOpbSDDqSBwb3Nzw612ZWwgZGVmaW5pciB1bWEgYcOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgYW8gY2xpY2FyIGVtIGRldGVybWluYWRvIGVsZW1lbnRvIGRvIGdyw6FmaWNvXG4gKiBlIG91dHJhIHF1ZSBzZXLDoSBleGVjdXRhZGEgYW8gcGFzc2FyIG8gKm1vdXNlKiBzb2JyZSBvIGVsZW1lbnRvLlxuICpcbiAqICMjIyMgQm9hcyBwcsOhdGljYXNcbiAqXG4gKiAtIFBhcmEgcXVlIG8gZ3LDoWZpY28gbsOjbyBmaXF1ZSBpbGVnw612ZWwgZSBpbmNvbXByZWVuc8OtdmVsLCBldml0ZSB1bWEgcXVhbnRpYSBleGNlc3NpdmEgZGUgc8Opcmllcy5cbiAqXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb0NoYXJ0QmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfaGVpZ2h0PzogbnVtYmVyID0gcG9DaGFydERlZmF1bHRIZWlnaHQ7XG4gIHByaXZhdGUgX3R5cGU6IFBvQ2hhcnRUeXBlID0gcG9DaGFydFR5cGVEZWZhdWx0O1xuXG4gIHB1YmxpYyByZWFkb25seSBwb0NoYXJ0VHlwZSA9IFBvQ2hhcnRUeXBlO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGFsdHVyYSBkbyBncsOhZmljby5cbiAgICpcbiAgICogPiBPIHZhbG9yIG3DrW5pbW8gcXVlIHBvZGUgc2VyIGluZm9ybWFkbyDDqSAyMDAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGA0MDBweGBcbiAgICovXG4gIEBJbnB1dCgncC1oZWlnaHQnKSBzZXQgaGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcbiAgICBjb25zdCBpbnRWYWx1ZSA9IGNvbnZlcnRUb0ludCh2YWx1ZSk7XG4gICAgbGV0IGhlaWdodDogbnVtYmVyO1xuXG4gICAgaWYgKGlzVHlwZW9mKHZhbHVlLCAnbnVtYmVyJykpIHtcbiAgICAgIGhlaWdodCA9IGludFZhbHVlIDw9IHBvQ2hhcnRNaW5IZWlnaHQgPyBwb0NoYXJ0TWluSGVpZ2h0IDogaW50VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9IHBvQ2hhcnREZWZhdWx0SGVpZ2h0O1xuICAgIH1cblxuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcblxuICAgIHRoaXMucmVidWlsZENvbXBvbmVudCgpO1xuICB9XG5cbiAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBvcyBlbGVtZW50b3MgZG8gZ3LDoWZpY28gcXVlIHNlcsOjbyBjcmlhZG9zIGRpbmFtaWNhbWVudGUuXG4gICAqXG4gICAqID4gQSBjb2xlw6fDo28gZGUgb2JqZXRvcyBkZXZlIGltcGxlbWVudGFyIGFsZ3VtYSBkYXMgaW50ZXJmYWNlcyBhYmFpeG86XG4gICAqIC0gYFBvRG9udXRDaGFydFNlcmllc2BcbiAgICogLSBgUG9QaWVDaGFydFNlcmllc2BcbiAgICovXG4gIEBJbnB1dCgncC1zZXJpZXMnKSBzZXJpZXM6IEFycmF5PFBvRG9udXRDaGFydFNlcmllcyB8IFBvUGllQ2hhcnRTZXJpZXM+O1xuXG4gIC8qKiBEZWZpbmUgbyB0w610dWxvIGRvIGdyw6FmaWNvLiAqL1xuICBASW5wdXQoJ3AtdGl0bGUnKSB0aXRsZT86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyB0aXBvIGRlIGdyw6FmaWNvLlxuICAgKlxuICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFBvQ2hhcnRUeXBlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYFBvQ2hhcnRUeXBlLlBpZWBcbiAgICovXG4gIEBJbnB1dCgncC10eXBlJykgc2V0IHR5cGUodmFsdWU6IFBvQ2hhcnRUeXBlKSB7XG4gICAgdGhpcy5fdHlwZSA9ICg8YW55Pk9iamVjdCkudmFsdWVzKFBvQ2hhcnRUeXBlKS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IHBvQ2hhcnRUeXBlRGVmYXVsdDtcblxuICAgIHRoaXMucmVidWlsZENvbXBvbmVudCgpO1xuICB9XG5cbiAgZ2V0IHR5cGUoKTogUG9DaGFydFR5cGUge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50byBleGVjdXRhZG8gcXVhbmRvIG8gdXN1w6FyaW8gY2xpY2FyIHNvYnJlIHVtIGVsZW1lbnRvIGRvIGdyw6FmaWNvLlxuICAgKlxuICAgKiA+IFNlcsOhIHBhc3NhZG8gcG9yIHBhcsOibWV0cm8gdW0gb2JqZXRvIGNvbnRlbmRvIGEgY2F0ZWdvcmlhIGUgdmFsb3IgZGEgc8OpcmllLlxuICAgKi9cbiAgQE91dHB1dCgncC1zZXJpZXMtY2xpY2snKVxuICBzZXJpZXNDbGljaz86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqXG4gICAqIEV2ZW50byBleGVjdXRhZG8gcXVhbmRvIG8gdXN1w6FyaW8gcGFzc2FyIG8gKm1vdXNlKiBzb2JyZSB1bSBlbGVtZW50byBkbyBncsOhZmljby5cbiAgICpcbiAgICogPiBTZXLDoSBwYXNzYWRvIHBvciBwYXLDom1ldHJvIHVtIG9iamV0byBjb250ZW5kbyBhIGNhdGVnb3JpYSBlIHZhbG9yIGRhIHPDqXJpZS5cbiAgICovXG4gIEBPdXRwdXQoJ3Atc2VyaWVzLWhvdmVyJylcbiAgc2VyaWVzSG92ZXI/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIG9uU2VyaWVzQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuc2VyaWVzQ2xpY2suZW1pdChldmVudCk7XG4gIH1cblxuICBvblNlcmllc0hvdmVyKGV2ZW50OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnNlcmllc0hvdmVyLmVtaXQoZXZlbnQpO1xuICB9XG5cbiAgYWJzdHJhY3QgcmVidWlsZENvbXBvbmVudCgpOiB2b2lkO1xuXG59XG4iXX0=