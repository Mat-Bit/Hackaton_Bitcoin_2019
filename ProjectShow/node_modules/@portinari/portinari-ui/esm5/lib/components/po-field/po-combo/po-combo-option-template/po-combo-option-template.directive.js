/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef } from '@angular/core';
/**
 * \@usedBy PoComboComponent
 *
 * \@description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista de opções do componente.
 *
 * > Quando utilizada em dispositivos *mobile* será exibido o componente nativo.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-combo-option-template` com `ng-template`
 * dentro da *tag* `po-combo`.
 *
 * Para obter a referência do item atual utilize `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-combo
 *   name="combo"
 *   [(ngModel)]="combo"
 *   [p-options]="options">
 *     <ng-template p-combo-option-template let-option>
 *       <option-template [option]="option"></option-template>
 *     </ng-template>
 * </po-combo>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-combo
 *   name="combo"
 *   [(ngModel)]="combo"
 *   [p-options]="options">
 *     <div *p-combo-option-template="let option">
 *       <option-template [option]="option"></option-template>
 *     </div>
 * </po-combo>
 * ...
 *
 * ```
 */
var PoComboOptionTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoComboOptionTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoComboOptionTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-combo-option-template]'
                },] }
    ];
    /** @nocollapse */
    PoComboOptionTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return PoComboOptionTemplateDirective;
}());
export { PoComboOptionTemplateDirective };
if (false) {
    /** @type {?} */
    PoComboOptionTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tb3B0aW9uLXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tY29tYm8vcG8tY29tYm8tb3B0aW9uLXRlbXBsYXRlL3BvLWNvbWJvLW9wdGlvbi10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZDdkQ7SUFLRSxzRUFBc0U7SUFDdEUsd0NBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFJLENBQUM7O2dCQU50RCxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7Ozs7Z0JBL0NtQixXQUFXOztJQXFEL0IscUNBQUM7Q0FBQSxBQVJELElBUUM7U0FMWSw4QkFBOEI7OztJQUc3QixxREFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb0NvbWJvQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHBlcnNvbmFsaXphciBvIGNvbnRlw7pkbyBkb3MgaXRlbnMgZXhpYmlkb3MgbmEgbGlzdGEgZGUgb3DDp8O1ZXMgZG8gY29tcG9uZW50ZS5cbiAqXG4gKiA+IFF1YW5kbyB1dGlsaXphZGEgZW0gZGlzcG9zaXRpdm9zICptb2JpbGUqIHNlcsOhIGV4aWJpZG8gbyBjb21wb25lbnRlIG5hdGl2by5cbiAqXG4gKiBQYXJhIHBlcnNvbmFsaXphciBvIGNvbnRlw7pkbyBkZSBjYWRhIGl0ZW0gZGEgbGlzdGEgZGV2ZS1zZSB1dGlsaXphciBhIGRpcmV0aXZhIGBwLWNvbWJvLW9wdGlvbi10ZW1wbGF0ZWAgY29tIGBuZy10ZW1wbGF0ZWBcbiAqIGRlbnRybyBkYSAqdGFnKiBgcG8tY29tYm9gLlxuICpcbiAqIFBhcmEgb2J0ZXIgYSByZWZlcsOqbmNpYSBkbyBpdGVtIGF0dWFsIHV0aWxpemUgYGxldC1vcHRpb25gLCBjb20gaXNzbyB2b2PDqiB0ZXLDoSBhY2Vzc28gYW9zIHZhbG9yZXMgZSBwb2RlcsOhIHBlcnNvbmFsaXphciBzdWEgZXhpYmnDp8Ojby5cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIGNvbXDDtWUtc2UgZGUgZG9pcyBtZWlvcyBwYXJhIHVzbywgZGUgZm9ybWEgZXhwbMOtY2l0YSB0YWwgY29tbyBlbSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tY29tYm9cbiAqICAgbmFtZT1cImNvbWJvXCJcbiAqICAgWyhuZ01vZGVsKV09XCJjb21ib1wiXG4gKiAgIFtwLW9wdGlvbnNdPVwib3B0aW9uc1wiPlxuICogICAgIDxuZy10ZW1wbGF0ZSBwLWNvbWJvLW9wdGlvbi10ZW1wbGF0ZSBsZXQtb3B0aW9uPlxuICogICAgICAgPG9wdGlvbi10ZW1wbGF0ZSBbb3B0aW9uXT1cIm9wdGlvblwiPjwvb3B0aW9uLXRlbXBsYXRlPlxuICogICAgIDwvbmctdGVtcGxhdGU+XG4gKiA8L3BvLWNvbWJvPlxuICogLi4uXG4gKiBgYGBcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLWNvbWJvXG4gKiAgIG5hbWU9XCJjb21ib1wiXG4gKiAgIFsobmdNb2RlbCldPVwiY29tYm9cIlxuICogICBbcC1vcHRpb25zXT1cIm9wdGlvbnNcIj5cbiAqICAgICA8ZGl2ICpwLWNvbWJvLW9wdGlvbi10ZW1wbGF0ZT1cImxldCBvcHRpb25cIj5cbiAqICAgICAgIDxvcHRpb24tdGVtcGxhdGUgW29wdGlvbl09XCJvcHRpb25cIj48L29wdGlvbi10ZW1wbGF0ZT5cbiAqICAgICA8L2Rpdj5cbiAqIDwvcG8tY29tYm8+XG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3AtY29tYm8tb3B0aW9uLXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgUG9Db21ib09wdGlvblRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAvLyBOZWNlc3PDoXJpbyBtYW50ZXIgdGVtcGxhdGVSZWYgcGFyYSBvIGZ1bmNpb25hbWVudG8gZG8gcm93IHRlbXBsYXRlLlxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pIHsgfVxuXG59XG4iXX0=