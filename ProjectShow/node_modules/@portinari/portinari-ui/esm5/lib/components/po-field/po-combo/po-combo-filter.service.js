/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
var PoComboFilterService = /** @class */ (function () {
    function PoComboFilterService(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    Object.defineProperty(PoComboFilterService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    PoComboFilterService.prototype.getFilteredData = /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    function (param, filterParams) {
        var _this = this;
        /** @type {?} */
        var value = param.value;
        /** @type {?} */
        var params = new HttpParams({
            fromString: "filter=" + value
        });
        return this.http.get("" + this.url, { responseType: 'json', params: params })
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.parseToArrayComboOption(response.items); })));
    };
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    PoComboFilterService.prototype.getObjectByValue = /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    function (value, filterParams) {
        var _this = this;
        return this.http.get(this.url + "/" + value).pipe(map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.parseToComboOption(item); })));
    };
    /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    PoComboFilterService.prototype.configProperties = /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    function (url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    PoComboFilterService.prototype.parseToArrayComboOption = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        if (items && items.length > 0) {
            return items.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return _this.parseToComboOption(item);
            }));
        }
        return [];
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    PoComboFilterService.prototype.parseToComboOption = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item && item[this.fieldValue]) {
            /** @type {?} */
            var label = item[this.fieldLabel];
            /** @type {?} */
            var value = item[this.fieldValue];
            return { label: label, value: value };
        }
    };
    PoComboFilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoComboFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoComboFilterService;
}());
export { PoComboFilterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoComboFilterService.prototype._url;
    /** @type {?} */
    PoComboFilterService.prototype.fieldLabel;
    /** @type {?} */
    PoComboFilterService.prototype.fieldValue;
    /**
     * @type {?}
     * @private
     */
    PoComboFilterService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWNvbWJvL3BvLWNvbWJvLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7OztBQWFyQztJQVVFLDhCQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBTHBDLGVBQVUsR0FBVyxPQUFPLENBQUM7UUFDN0IsZUFBVSxHQUFXLE9BQU8sQ0FBQztJQUlXLENBQUM7SUFGekMsc0JBQUkscUNBQUc7Ozs7UUFBUCxjQUFvQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTs7Ozs7O0lBSXZDLDhDQUFlOzs7OztJQUFmLFVBQWdCLEtBQVUsRUFBRSxZQUFrQjtRQUE5QyxpQkFTQzs7WUFSTyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUs7O1lBRW5CLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQztZQUM1QixVQUFVLEVBQUUsWUFBVSxLQUFPO1NBQzlCLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUcsSUFBSSxDQUFDLEdBQUssRUFBRSxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxDQUFDO2FBQ3hFLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQyxRQUFvQixJQUFLLE9BQUEsS0FBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBNUMsQ0FBNEMsRUFBQyxDQUFDLENBQUM7SUFDdkYsQ0FBQzs7Ozs7O0lBRUQsK0NBQWdCOzs7OztJQUFoQixVQUFpQixLQUFzQixFQUFFLFlBQWtCO1FBQTNELGlCQUVDO1FBREMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsR0FBRyxTQUFJLEtBQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQTdCLENBQTZCLEVBQUMsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7Ozs7Ozs7SUFFRCwrQ0FBZ0I7Ozs7OztJQUFoQixVQUFpQixHQUFXLEVBQUUsVUFBa0IsRUFBRSxVQUFrQjtRQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFTyxzREFBdUI7Ozs7O0lBQS9CLFVBQWdDLEtBQWlCO1FBQWpELGlCQVVDO1FBVEMsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFFN0IsT0FBTyxLQUFLLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsSUFBSTtnQkFDbkIsT0FBTyxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxFQUFDLENBQUM7U0FFSjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7O0lBRU8saURBQWtCOzs7OztJQUExQixVQUEyQixJQUFTO1FBQ2xDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7O2dCQUUzQixLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7O2dCQUM3QixLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFFbkMsT0FBTyxFQUFFLEtBQUssT0FBQSxFQUFFLEtBQUssT0FBQSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDOztnQkFyREYsVUFBVTs7OztnQkFqQkYsVUFBVTs7SUF3RW5CLDJCQUFDO0NBQUEsQUF2REQsSUF1REM7U0F0RFksb0JBQW9COzs7Ozs7SUFFL0Isb0NBQXFCOztJQUVyQiwwQ0FBNkI7O0lBQzdCLDBDQUE2Qjs7Ozs7SUFJakIsb0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBQb0NvbWJvRmlsdGVyIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWNvbWJvLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Db21ib09wdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1vcHRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUmVzcG9uc2UgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcmVzcG9uc2UuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyBwYWRyw6NvIHV0aWxpemFkbyBwYXJhIGZpbHRyYXIgb3MgZGFkb3MgZG8gY29tcG9uZW50ZSBwby1jb21iby5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQ29tYm9GaWx0ZXJTZXJ2aWNlIGltcGxlbWVudHMgUG9Db21ib0ZpbHRlciB7XG5cbiAgcHJpdmF0ZSBfdXJsOiBzdHJpbmc7XG5cbiAgZmllbGRMYWJlbDogc3RyaW5nID0gJ2xhYmVsJztcbiAgZmllbGRWYWx1ZTogc3RyaW5nID0gJ3ZhbHVlJztcblxuICBnZXQgdXJsKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl91cmw7IH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGdldEZpbHRlcmVkRGF0YShwYXJhbTogYW55LCBmaWx0ZXJQYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPEFycmF5PFBvQ29tYm9PcHRpb24+PiB7XG4gICAgY29uc3QgdmFsdWUgPSBwYXJhbS52YWx1ZTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKHtcbiAgICAgIGZyb21TdHJpbmc6IGBmaWx0ZXI9JHt2YWx1ZX1gXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHt0aGlzLnVybH1gLCB7cmVzcG9uc2VUeXBlOiAnanNvbicsIHBhcmFtczogcGFyYW1zfSlcbiAgICAgIC5waXBlKG1hcCgocmVzcG9uc2U6IFBvUmVzcG9uc2UpID0+IHRoaXMucGFyc2VUb0FycmF5Q29tYm9PcHRpb24ocmVzcG9uc2UuaXRlbXMpKSk7XG4gIH1cblxuICBnZXRPYmplY3RCeVZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8UG9Db21ib09wdGlvbj4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3RoaXMudXJsfS8ke3ZhbHVlfWApLnBpcGUobWFwKGl0ZW0gPT4gdGhpcy5wYXJzZVRvQ29tYm9PcHRpb24oaXRlbSkpKTtcbiAgfVxuXG4gIGNvbmZpZ1Byb3BlcnRpZXModXJsOiBzdHJpbmcsIGZpZWxkTGFiZWw6IHN0cmluZywgZmllbGRWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdXJsID0gdXJsO1xuICAgIHRoaXMuZmllbGRMYWJlbCA9IGZpZWxkTGFiZWw7XG4gICAgdGhpcy5maWVsZFZhbHVlID0gZmllbGRWYWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VUb0FycmF5Q29tYm9PcHRpb24oaXRlbXM6IEFycmF5PGFueT4pOiBBcnJheTxQb0NvbWJvT3B0aW9uPiB7XG4gICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcblxuICAgICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUb0NvbWJvT3B0aW9uKGl0ZW0pO1xuICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9Db21ib09wdGlvbihpdGVtOiBhbnkpOiBQb0NvbWJvT3B0aW9uIHtcbiAgICBpZiAoaXRlbSAmJiBpdGVtW3RoaXMuZmllbGRWYWx1ZV0pIHtcblxuICAgICAgY29uc3QgbGFiZWwgPSBpdGVtW3RoaXMuZmllbGRMYWJlbF07XG4gICAgICBjb25zdCB2YWx1ZSA9IGl0ZW1bdGhpcy5maWVsZFZhbHVlXTtcblxuICAgICAgcmV0dXJuIHsgbGFiZWwsIHZhbHVlIH07XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==