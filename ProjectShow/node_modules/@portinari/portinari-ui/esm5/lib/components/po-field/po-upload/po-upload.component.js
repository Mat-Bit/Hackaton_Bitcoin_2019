/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Renderer2, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { formatBytes, isMobile } from '../../../utils/util';
import { PoButtonComponent } from './../../po-button/po-button.component';
import { PoI18nPipe } from '../../../services/po-i18n/po-i18n.pipe';
import { PoNotificationService } from '../../../services/po-notification/po-notification.service';
import { PoProgressStatus } from '../../po-progress/enums/po-progress-status.enum';
import { PoUploadBaseComponent } from './po-upload-base.component';
import { PoUploadDragDropComponent } from './po-upload-drag-drop/po-upload-drag-drop.component';
import { PoUploadService } from './po-upload.service';
import { PoUploadStatus } from './po-upload-status.enum';
/**
 * \@docsExtends PoUploadBaseComponent
 *
 * \@example
 *
 * <example name="po-upload-basic" title="Portinari Upload Basic">
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-labs" title="Portinari Upload Labs">
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-resume" title="Portinari Upload - Resume">
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-rs" title="Portinari Upload - Realize & Show">
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
 * </example>
 */
var PoUploadComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoUploadComponent, _super);
    function PoUploadComponent(uploadService, renderer, i18nPipe, notification) {
        var _a, _b;
        var _this = _super.call(this, uploadService) || this;
        _this.renderer = renderer;
        _this.i18nPipe = i18nPipe;
        _this.notification = notification;
        _this.infoByUploadStatus = (_a = {},
            _a[PoUploadStatus.Uploaded] = {
                text: (/**
                 * @return {?}
                 */
                function () { return _this.literals.sentWithSuccess; }),
                icon: 'po-icon-ok'
            },
            _a[PoUploadStatus.Error] = {
                text: (/**
                 * @return {?}
                 */
                function () { return _this.literals.errorOccurred; })
            },
            _a[PoUploadStatus.Uploading] = {
                text: (/**
                 * @param {?} percent
                 * @return {?}
                 */
                function (percent) { return percent + '%'; })
            },
            _a);
        _this.progressStatusByFileStatus = (_b = {},
            _b[PoUploadStatus.Uploaded] = PoProgressStatus.Success,
            _b[PoUploadStatus.Error] = PoProgressStatus.Error,
            _b);
        _this.calledByCleanInputValue = false;
        return _this;
    }
    Object.defineProperty(PoUploadComponent.prototype, "displayDragDrop", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dragDrop && !isMobile();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "displaySendButton", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var currentFiles = this.currentFiles || [];
            return !this.hideSendButton && !this.autoUpload && (currentFiles.length > 0 && this.hasFileNotUploaded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "selectFileButtonLabel", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.canHandleDirectory) {
                return this.literals.selectFolder;
            }
            else if (this.isMultiple) {
                return this.literals.selectFiles;
            }
            else {
                return this.literals.selectFile;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "hasMoreThanFourItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currentFiles && this.currentFiles.length > 4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "hasMultipleFiles", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currentFiles && this.currentFiles.length > 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "hasFileNotUploaded", {
        get: /**
         * @return {?}
         */
        function () {
            if (Array.isArray(this.currentFiles)) {
                return this.currentFiles.some((/**
                 * @param {?} file
                 * @return {?}
                 */
                function (file) { return file.status !== PoUploadStatus.Uploaded; }));
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var currentFiles = this.currentFiles || [];
            return !!(this.hasAnyFileUploading(currentFiles) ||
                !this.url ||
                this.disabled ||
                this.isExceededFileLimit(currentFiles.length));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "maxFiles", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isMultiple && this.fileRestrictions && this.fileRestrictions.maxFiles;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.cancel = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (file.status === PoUploadStatus.Uploading) {
            return this.stopUpload(file);
        }
        this.removeFile(file);
    };
    /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
    /**
     * Método responsável por **limpar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    PoUploadComponent.prototype.clear = /**
     * Método responsável por **limpar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    function () {
        this.currentFiles = undefined;
        this.updateModel([]);
        this.cleanInputValue();
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     * @return {?}
     */
    PoUploadComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            if (this.uploadButton) {
                this.uploadButton.focus();
                return;
            }
            if (this.displayDragDrop) {
                this.poUploadDragDropComponent.focus();
            }
        }
    };
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.hasAnyFileUploading = 
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (files && files.length) {
            return files.some((/**
             * @param {?} file
             * @return {?}
             */
            function (file) { return file.status === PoUploadStatus.Uploading; }));
        }
        return false;
    };
    // retorna se o status do arquivo é diferente de enviado
    // retorna se o status do arquivo é diferente de enviado
    /**
     * @param {?} status
     * @return {?}
     */
    PoUploadComponent.prototype.isAllowCancelEvent = 
    // retorna se o status do arquivo é diferente de enviado
    /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        return status !== PoUploadStatus.Uploaded;
    };
    // Função disparada ao selecionar algum arquivo.
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    PoUploadComponent.prototype.onFileChange = 
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // necessário este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        /** @type {?} */
        var files = event.target.files;
        this.updateFiles(files);
        this.cleanInputValue();
    };
    /**
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.onFileChangeDragDrop = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        this.updateFiles(files);
    };
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.removeFile = 
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel(tslib_1.__spread(this.currentFiles));
    };
    /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
    /**
     * Método responsável por **abrir** a janela para seleção de arquivo(s).
     * @return {?}
     */
    PoUploadComponent.prototype.selectFiles = /**
     * Método responsável por **abrir** a janela para seleção de arquivo(s).
     * @return {?}
     */
    function () {
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    };
    /**
     * @return {?}
     */
    PoUploadComponent.prototype.sendFeedback = /**
     * @return {?}
     */
    function () {
        if (this.sizeNotAllowed > 0) {
            /** @type {?} */
            var minFileSize = formatBytes(this.fileRestrictions.minFileSize);
            /** @type {?} */
            var maxFileSize = formatBytes(this.fileRestrictions.maxFileSize);
            /** @type {?} */
            var args = [this.sizeNotAllowed, minFileSize || '0', maxFileSize];
            this.setPipeArguments('invalidSize', args);
            this.sizeNotAllowed = 0;
        }
        if (this.extensionNotAllowed > 0) {
            /** @type {?} */
            var allowedExtensionsFormatted = this.fileRestrictions.allowedExtensions.join(', ').toUpperCase();
            /** @type {?} */
            var args = [this.extensionNotAllowed, allowedExtensionsFormatted];
            this.setPipeArguments('invalidFormat', args);
            this.extensionNotAllowed = 0;
        }
        if (this.quantityNotAllowed > 0) {
            /** @type {?} */
            var args = [this.quantityNotAllowed];
            this.setPipeArguments('invalidAmount', args);
            this.quantityNotAllowed = 0;
        }
    };
    /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
    /**
     * Método responsável por **enviar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    PoUploadComponent.prototype.sendFiles = /**
     * Método responsável por **enviar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    function () {
        if (this.currentFiles && this.currentFiles.length) {
            this.uploadFiles(this.currentFiles);
        }
    };
    /**
     * @param {?} canHandleDirectory
     * @return {?}
     */
    PoUploadComponent.prototype.setDirectoryAttribute = /**
     * @param {?} canHandleDirectory
     * @return {?}
     */
    function (canHandleDirectory) {
        if (canHandleDirectory) {
            this.renderer.setAttribute(this.inputFile.nativeElement, 'webkitdirectory', 'true');
        }
        else {
            this.renderer.removeAttribute(this.inputFile.nativeElement, 'webkitdirectory');
        }
    };
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.stopUpload = 
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        this.uploadService.stopRequestByFile(file, (/**
         * @return {?}
         */
        function () {
            if (_this.autoUpload) {
                _this.removeFile(file);
            }
            else {
                _this.stopUploadHandler(file);
            }
        }));
    };
    /**
     * @param {?} index
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.trackByFn = /**
     * @param {?} index
     * @param {?} file
     * @return {?}
     */
    function (index, file) {
        return file.uid;
    };
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.uploadFiles = 
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filesFiltered = files.filter((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.status !== PoUploadStatus.Uploaded; }));
        this.uploadService.upload(this.url, filesFiltered, this.onUpload, (/**
         * @param {?} file
         * @param {?} percent
         * @return {?}
         */
        function (file, percent) {
            _this.uploadingHandler(file, percent);
        }), (/**
         * @param {?} file
         * @param {?} eventResponse
         * @return {?}
         */
        function (file, eventResponse) {
            _this.responseHandler(file, PoUploadStatus.Uploaded);
            _this.onSuccess.emit(eventResponse);
        }), (/**
         * @param {?} file
         * @param {?} eventError
         * @return {?}
         */
        function (file, eventError) {
            _this.responseHandler(file, PoUploadStatus.Error);
            _this.onError.emit(eventError);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoUploadComponent.prototype.cleanInputValue = /**
     * @private
     * @return {?}
     */
    function () {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
    };
    // função disparada na resposta do sucesso ou error
    // função disparada na resposta do sucesso ou error
    /**
     * @private
     * @param {?} file
     * @param {?} status
     * @return {?}
     */
    PoUploadComponent.prototype.responseHandler = 
    // função disparada na resposta do sucesso ou error
    /**
     * @private
     * @param {?} file
     * @param {?} status
     * @return {?}
     */
    function (file, status) {
        file.status = status;
        file.percent = 100;
    };
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    /**
     * @private
     * @param {?} literalAttributes
     * @param {?=} literalArguments
     * @return {?}
     */
    PoUploadComponent.prototype.setPipeArguments = 
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    /**
     * @private
     * @param {?} literalAttributes
     * @param {?=} literalArguments
     * @return {?}
     */
    function (literalAttributes, literalArguments) {
        /** @type {?} */
        var pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], literalArguments);
        this.notification.information(pipeArguments);
    };
    // Função disparada ao parar um envio de arquivo.
    // Função disparada ao parar um envio de arquivo.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.stopUploadHandler = 
    // Função disparada ao parar um envio de arquivo.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.status = PoUploadStatus.None;
        file.percent = 0;
    };
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.updateFiles = /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        this.currentFiles = this.parseFiles(files);
        this.updateModel(tslib_1.__spread(this.currentFiles));
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    };
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.updateModel = 
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var modelFiles = this.mapCleanUploadFiles(files);
        this.onModelChange ? this.onModelChange(modelFiles) : this.ngModelChange.emit(modelFiles);
    };
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @private
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    PoUploadComponent.prototype.uploadingHandler = 
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @private
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    function (file, percent) {
        file.status = PoUploadStatus.Uploading;
        file.percent = percent;
    };
    // retorna os objetos do array sem as propriedades: percent e displayName
    // retorna os objetos do array sem as propriedades: percent e displayName
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.mapCleanUploadFiles = 
    // retorna os objetos do array sem as propriedades: percent e displayName
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var mapedByUploadFile = (/**
         * @param {?} progressFile
         * @return {?}
         */
        function (progressFile) {
            var percent = progressFile.percent, displayName = progressFile.displayName, uploadFile = tslib_1.__rest(progressFile, ["percent", "displayName"]);
            return uploadFile;
        });
        return files.map(mapedByUploadFile);
    };
    PoUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-upload',
                    template: "<po-field-container\r\n  [p-label]=\"label\"\r\n  [p-help]=\"help\"\r\n  [p-optional]=\"!required && optional\">\r\n\r\n  <div class=\"po-upload\">\r\n    <input\r\n      #inputFile\r\n      class=\"po-upload-input\"\r\n      type=\"file\"\r\n      [accept]=\"allowedExtensions\"\r\n      [attr.name]=\"name\"\r\n      [disabled]=\"isDisabled\"\r\n      [multiple]=\"isMultiple\"\r\n      [required]=\"required\"\r\n      (change)=\"onFileChange($event)\">\r\n\r\n    <po-upload-drag-drop *ngIf=\"displayDragDrop\"\r\n      [p-directory-compatible]=\"canHandleDirectory\"\r\n      [p-disabled]=\"isDisabled\"\r\n      [p-drag-drop-height]=\"dragDropHeight\"\r\n      [p-literals]=\"literals\"\r\n      (p-file-change)=\"onFileChangeDragDrop($event)\"\r\n      (p-select-files)=\"selectFiles()\">\r\n    </po-upload-drag-drop>\r\n\r\n    <po-button *ngIf=\"!hideSelectButton && !displayDragDrop\"\r\n      #uploadButton\r\n      class=\"po-upload-button\"\r\n      for=\"file\"\r\n      [p-disabled]=\"isDisabled\"\r\n      [p-label]=\"selectFileButtonLabel\"\r\n      (p-click)=\"selectFiles()\">\r\n    </po-button>\r\n\r\n    <po-upload-file-restrictions *ngIf=\"fileRestrictions && !hideRestrictionsInfo\"\r\n      class=\"po-upload-file-restrictions\"\r\n      [ngClass]=\"{'po-upload-file-restrictions-drag-drop' : displayDragDrop}\"\r\n      [p-allowed-extensions]=\"fileRestrictions?.allowedExtensions\"\r\n      [p-max-files]=\"maxFiles\"\r\n      [p-max-file-size]=\"fileRestrictions?.maxFileSize\"\r\n      [p-min-file-size]=\"fileRestrictions?.minFileSize\">\r\n    </po-upload-file-restrictions>\r\n\r\n    <div *ngIf=\"currentFiles && currentFiles.length\" class=\"po-upload-progress-container\">\r\n      <po-container\r\n        p-no-shadow\r\n        [p-height]=\"hasMoreThanFourItems ? 280 : 'auto'\"\r\n        [p-no-border]=\"!hasMoreThanFourItems\"\r\n        [p-no-padding]=\"!hasMoreThanFourItems\">\r\n        <div [ngClass]=\"{'po-upload-progress-container-area po-pt-2 po-pl-1': hasMoreThanFourItems}\">\r\n          <po-progress\r\n            *ngFor=\"let file of currentFiles; trackBy: trackByFn\"\r\n            [p-info]=\"infoByUploadStatus[file.status]?.text(file.percent)\"\r\n            [p-info-icon]=\"infoByUploadStatus[file.status]?.icon\"\r\n            [p-status]=\"progressStatusByFileStatus[file.status]\"\r\n            [p-text]=\"file.displayName\"\r\n            [p-value]=\"file.percent\"\r\n            (p-cancel)=\"cancel(file)\"\r\n            (p-retry)=\"uploadFiles([file])\">\r\n          </po-progress>\r\n        </div>\r\n      </po-container>\r\n    </div>\r\n\r\n    <po-button\r\n      *ngIf=\"displaySendButton\"\r\n      class=\"po-upload-send-button\"\r\n      [class.po-mt-3]=\"hasMoreThanFourItems\"\r\n      p-type=\"primary\"\r\n      [p-disabled]=\"hasAnyFileUploading(currentFiles)\"\r\n      [p-label]=\"literals.startSending\"\r\n      (p-click)=\"uploadFiles(currentFiles)\">\r\n    </po-button>\r\n  </div>\r\n\r\n</po-field-container>\r\n",
                    providers: [
                        PoI18nPipe,
                        PoUploadService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoUploadComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoUploadComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoUploadComponent.ctorParameters = function () { return [
        { type: PoUploadService },
        { type: Renderer2 },
        { type: PoI18nPipe },
        { type: PoNotificationService }
    ]; };
    PoUploadComponent.propDecorators = {
        inputFile: [{ type: ViewChild, args: ['inputFile', { read: ElementRef, static: true },] }],
        poUploadDragDropComponent: [{ type: ViewChild, args: [PoUploadDragDropComponent, { static: false },] }],
        uploadButton: [{ type: ViewChild, args: ['uploadButton', { static: false },] }]
    };
    return PoUploadComponent;
}(PoUploadBaseComponent));
export { PoUploadComponent };
if (false) {
    /** @type {?} */
    PoUploadComponent.prototype.infoByUploadStatus;
    /** @type {?} */
    PoUploadComponent.prototype.progressStatusByFileStatus;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.calledByCleanInputValue;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.inputFile;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.poUploadDragDropComponent;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.uploadButton;
    /** @type {?} */
    PoUploadComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.i18nPipe;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.notification;
}
//# sourceMappingURL=data:application/json;base64,