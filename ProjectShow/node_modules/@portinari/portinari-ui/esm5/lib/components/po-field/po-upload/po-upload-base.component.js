/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, isEquals, isIE, isMobile, poLocaleDefault } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { PoUploadFile } from './po-upload-file';
import { PoUploadStatus } from './po-upload-status.enum';
/** @type {?} */
export var poUploadLiteralsDefault = {
    en: (/** @type {?} */ ({
        files: 'files',
        folders: 'folders',
        selectFile: 'Select file',
        selectFiles: 'Select files',
        selectFolder: 'Select folder',
        deleteFile: 'Delete',
        cancel: 'Cancel',
        tryAgain: 'Try again',
        startSending: 'Start sending',
        dragFilesHere: 'Drag files here',
        dragFoldersHere: 'Drag folders here',
        selectFilesOnComputer: 'or select files on your computer',
        selectFolderOnComputer: 'or select folder on your computer',
        dropFilesHere: 'Drop files here',
        dropFoldersHere: 'Drop folders here',
        invalidDropArea: '{0} were not dropped in the correct area',
        invalidFileType: 'Failed to load {0} file(s) as it is not the allowed file type.',
        invalidAmount: 'Failed to load {0} file(s), as it exceeds the limit amount of files.',
        invalidFormat: 'Failed to load {0} file(s), as it does not match the format(s): {1}.',
        invalidSize: 'Failed to load {0} files(s), as it is not the allowed size: from {1} to {2}.',
        numberOfFilesAllowed: '{0} file(s) allowed',
        allowedFormats: 'Accepted file formats: {0}.',
        allowedFileSizeRange: 'Size limit per file: from {0} to {1}',
        maxFileSizeAllowed: 'Size limit per file: {0} maximum',
        minFileSizeAllowed: 'Size limit per file: {0} minimum',
        errorOccurred: 'An error has occurred',
        sentWithSuccess: 'Sent with success'
    })),
    es: (/** @type {?} */ ({
        files: 'archivos',
        folders: 'carpetas',
        selectFile: 'Seleccionar archivo',
        selectFiles: 'Seleccionar archivos',
        selectFolder: 'Seleccionar carpeta',
        deleteFile: 'Borrar',
        cancel: 'Cancelar',
        tryAgain: 'Intentar de nuevo',
        startSending: 'Iniciar carga',
        dragFilesHere: 'Arrastra los archivos aquí',
        dragFoldersHere: 'Arrastra las carpetas aquí',
        selectFilesOnComputer: 'o selecciona los archivos en tu computadora',
        selectFolderOnComputer: 'o selecciona la carpeta en tu computadora',
        dropFilesHere: 'Deja los archivos aquí',
        dropFoldersHere: 'Deja las carpetas aquí',
        invalidDropArea: 'Los {0} no se insertaron en la ubicación correcta',
        invalidFileType: 'Error al cargar {0} archivo (s) ya que no es el tipo de archivo permitido',
        invalidAmount: 'Error al cargar {0} archivo (s) ya que excede la cantidad limite de archivos.',
        invalidFormat: 'Error al cargar {0} archivo (s) ya que no coincide con el formato (s): {1}.',
        invalidSize: 'Error al cargar {0} archivo (s) ya que no cumple con el tamaño permitido: desde {1} hasta {2}.',
        numberOfFilesAllowed: '{0} archivo(s) permitido(s)',
        allowedFormats: 'Formatos aceptados: {0}.',
        allowedFileSizeRange: 'Limite de tamaño de archivo: desde {0} hasta {1}',
        maxFileSizeAllowed: 'Limite de tamaño de archivo: hasta {0}',
        minFileSizeAllowed: 'Limite de tamaño de archivo: minimo {0}',
        errorOccurred: 'Ocurrio un error',
        sentWithSuccess: 'Enviado con éxito'
    })),
    pt: (/** @type {?} */ ({
        files: 'arquivos',
        folders: 'diretórios',
        selectFile: 'Selecionar arquivo',
        selectFiles: 'Selecionar arquivos',
        selectFolder: 'Selecionar pasta',
        deleteFile: 'Excluir',
        cancel: 'Cancelar',
        tryAgain: 'Tentar Novamente',
        startSending: 'Iniciar envio',
        dragFilesHere: 'Arraste os arquivos aqui',
        dragFoldersHere: 'Arraste as pastas aqui',
        selectFilesOnComputer: 'ou selecione os arquivos no computador',
        selectFolderOnComputer: 'ou selecione a pasta no computador',
        dropFilesHere: 'Solte os arquivos aqui',
        dropFoldersHere: 'Solte as pastas aqui',
        invalidDropArea: 'Os {0} não foram inseridos no local correto',
        invalidFileType: 'Falha ao carregar {0} arquivo (s), pois não é o tipo de arquivo permitido',
        invalidAmount: 'Falha ao carregar {0} arquivo(s), pois excede(m) a quantidade limite de arquivos.',
        invalidFormat: 'Falha ao carregar {0} arquivo(s), pois não corresponde(m) ao(s) formato(s): {1}.',
        invalidSize: 'Falha ao carregar {0} arquivo(s), pois não atende ao tamanho permitido: {1} até {2}.',
        numberOfFilesAllowed: 'Quantidade máxima: {0} arquivo(s)',
        allowedFormats: 'Formatos adotados: {0}.',
        allowedFileSizeRange: 'Limite de tamanho por arquivo: de {0} até {1}',
        maxFileSizeAllowed: 'Limite de tamanho por arquivo: até {0}',
        minFileSizeAllowed: 'Limite de tamanho por arquivo: no mínimo {0}',
        errorOccurred: 'Ocorreu um erro',
        sentWithSuccess: 'Enviado com sucesso'
    })),
    ru: (/** @type {?} */ ({
        files: 'файлы',
        folders: 'папки с файлами',
        selectFile: 'Выберите файл',
        selectFiles: 'Выберите файлы',
        selectFolder: 'Выберите папку с файлами',
        deleteFile: 'удалять',
        cancel: 'отменить',
        tryAgain: 'попробуйте еще раз',
        startSending: 'Начать загрузку',
        dragFilesHere: 'Перетащите файлы сюда',
        dragFoldersHere: 'Перетащите сюда папки',
        selectFilesOnComputer: 'или выберите файлы на компьютере',
        selectFolderOnComputer: 'или выберите папку на вашем компьютере',
        dropFilesHere: 'Оставьте файлы здесь',
        dropFoldersHere: 'Перетащите сюда папки',
        invalidDropArea: '{0} не были вставлены в правильном месте.',
        invalidFileType: 'Не удалось загрузить файлы {0}, так как это неверный тип файла',
        invalidAmount: 'Não foi possível carregar os arquivos {0} porque eles excederam o limite de arquivos.',
        invalidFormat: 'Не удалось загрузить файлы {0}, так как они не соответствуют формату (ам): {1}.',
        invalidSize: 'Не удалось загрузить файлы {0}, поскольку они не соответствуют разрешенному размеру: от {1} до {2}.',
        numberOfFilesAllowed: 'Максимальное количество: {0} файлов',
        allowedFormats: 'Форматы приняты: {0}.',
        allowedFileSizeRange: 'Ограничение размера файла: от {0} до {1}',
        maxFileSizeAllowed: 'Ограничение размера файла: до {0}',
        minFileSizeAllowed: 'Ограничение размера файла: не менее {0}',
        errorOccurred: 'Произошла ошибка.',
        sentWithSuccess: 'Успешно отправлено'
    }))
};
/** @type {?} */
var poUploadFormFieldDefault = 'files';
/** @type {?} */
var poUploadMaxFileSize = 31457280;
// 30MB
/** @type {?} */
var poUploadMinFileSize = 0;
/**
 * \@description
 *
 * O componente `po-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  – Envio de diretórios, onde ele acessa o diretório selecionado assim como seus sub-diretórios;
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 *  - Permite habilitar uma área onde os arquivos podem ser arrastados.
 * @abstract
 */
var PoUploadBaseComponent = /** @class */ (function () {
    function PoUploadBaseComponent(uploadService) {
        this.uploadService = uploadService;
        this._dragDrop = false;
        this.extensionNotAllowed = 0;
        this.quantityNotAllowed = 0;
        this.sizeNotAllowed = 0;
        /**
         * Define o valor do atributo `name` do componente.
         */
        this.name = 'file';
        /**
         * \@optional
         *
         * \@description
         *
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         *
         * \@default `false`
         */
        this.autoUpload = false;
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição, por exemplo:
         *
         * ```
         *   event.data = {id: 'id do usuario'};
         * ```
         */
        this.onUpload = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
         */
        this.onSuccess = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(PoUploadBaseComponent.prototype, "directory", {
        get: /**
         * @return {?}
         */
        function () {
            return this._directory;
        },
        /**
         * @optional
         *
         * @description
         *
         * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
         *
         * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
         *
         * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
         *
         * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
         *
         * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._directory = convertToBoolean(value);
            this.canHandleDirectory = this._directory && !isIE() && !isMobile();
            this.setDirectoryAttribute(this.canHandleDirectory);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "dragDrop", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dragDrop;
        },
        /**
         * @optional
         *
         * @description
         *
         * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
         * automaticamente.
         *
         * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
         * automaticamente.
         *
         * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dragDrop = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideRestrictionsInfo", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideRestrictionsInfo;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta visualmente as informações de restrições para o upload.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta visualmente as informações de restrições para o upload.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideRestrictionsInfo = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideSelectButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSelectButton;
        },
        /**
         * @optional
         *
         * @description
         *
         * Omite o botão de seleção de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `selectFiles()` para seleção de arquivos.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Omite o botão de seleção de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `selectFiles()` para seleção de arquivos.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideSelectButton = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideSendButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSendButton;
        },
        /**
         * @optional
         *
         * @description
         *
         * Omite o botão de envio de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Omite o botão de envio de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideSendButton = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poUploadLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    cancel: 'Desistir',
         *    deleteFile: 'Deletar',
         *  };
         *
         * Ou passando apenas as literais que deseja customizar:,
         *    selectFile: 'Buscar arquivo',
         * ```
         *    startSending: 'Enviar'
         *   tryAgain: 'Recomeçar',
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-upload
         *   [p-literals]="customLiterals">
         * </po-upload>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    cancel: 'Desistir',
         *    deleteFile: 'Deletar',
         *  };
         *
         * Ou passando apenas as literais que deseja customizar:,
         *    selectFile: 'Buscar arquivo',
         * ```
         *    startSending: 'Enviar'
         *   tryAgain: 'Recomeçar',
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-upload
         *   [p-literals]="customLiterals">
         * </po-upload>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poUploadLiteralsDefault[poLocaleDefault], poUploadLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poUploadLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "fileRestrictions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileRestrictions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
         * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
         * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
         * @param {?} restrictions
         * @return {?}
         */
        function (restrictions) {
            this._fileRestrictions = this.initRestrictions(restrictions);
            this.setAllowedExtensions(restrictions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "formField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._formField;
        },
        /**
         * @optional
         *
         * @description
         *
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
         *
         * @default `files`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
         *
         * \@default `files`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._formField = value && typeof value === 'string' ? value : poUploadFormFieldDefault;
            this.getUploadService().formField = this.formField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "isMultiple", {
        get: /**
         * @return {?}
         */
        function () {
            return this.canHandleDirectory ? true : this._isMultiple;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se pode selecionar mais de um arquivo.
         *
         * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se pode selecionar mais de um arquivo.
         *
         * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isMultiple = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    PoUploadBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoUploadBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoUploadBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoUploadBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PoUploadBaseComponent.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    };
    /**
     * @protected
     * @param {?} currentFilesLength
     * @return {?}
     */
    PoUploadBaseComponent.prototype.isExceededFileLimit = /**
     * @protected
     * @param {?} currentFilesLength
     * @return {?}
     */
    function (currentFilesLength) {
        return this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength;
    };
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    PoUploadBaseComponent.prototype.parseFiles = 
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var poUploadFiles = this.currentFiles || [];
        /** @type {?} */
        var filesLength = files.length;
        for (var i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(poUploadFiles.length)) {
                this.quantityNotAllowed = filesLength - this.fileRestrictions.maxFiles;
                break;
            }
            /** @type {?} */
            var file = new PoUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                poUploadFiles = this.insertFileInFiles(file, poUploadFiles);
            }
        }
        this.sendFeedback();
        return poUploadFiles;
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    PoUploadBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    // Verifica se o arquivo está de acordo com as restrições.
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    PoUploadBaseComponent.prototype.checkRestrictions = 
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var restrictions = this.fileRestrictions;
        if (restrictions) {
            /** @type {?} */
            var allowedExtensions = restrictions.allowedExtensions;
            /** @type {?} */
            var minFileSize = restrictions.minFileSize;
            /** @type {?} */
            var maxFileSize = restrictions.maxFileSize;
            /** @type {?} */
            var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            /** @type {?} */
            var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            if (!isAcceptSize) {
                this.sizeNotAllowed = this.sizeNotAllowed + 1;
            }
            return isAccept && isAcceptSize;
        }
        return true;
    };
    /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    PoUploadBaseComponent.prototype.existsFileSameName = /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    function (file, files) {
        return files.some((/**
         * @param {?} currentFile
         * @return {?}
         */
        function (currentFile) { return file.name === currentFile.name; }));
    };
    /**
     * @private
     * @return {?}
     */
    PoUploadBaseComponent.prototype.getUploadService = /**
     * @private
     * @return {?}
     */
    function () {
        return this.uploadService;
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    PoUploadBaseComponent.prototype.insertFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    };
    /**
     * @private
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    PoUploadBaseComponent.prototype.isAllowedExtension = /**
     * @private
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    function (extension, allowedExtensions) {
        if (allowedExtensions === void 0) { allowedExtensions = []; }
        /** @type {?} */
        var isAllowed = allowedExtensions.some((/**
         * @param {?} ext
         * @return {?}
         */
        function (ext) { return ext.toLowerCase() === extension; }));
        if (!isAllowed) {
            this.extensionNotAllowed = this.extensionNotAllowed + 1;
        }
        return isAllowed;
    };
    /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    PoUploadBaseComponent.prototype.setAllowedExtensions = /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    function (restrictions) {
        if (restrictions === void 0) { restrictions = {}; }
        /** @type {?} */
        var _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    };
    /**
     * @private
     * @param {?} restrictions
     * @return {?}
     */
    PoUploadBaseComponent.prototype.initRestrictions = /**
     * @private
     * @param {?} restrictions
     * @return {?}
     */
    function (restrictions) {
        if (!restrictions) {
            return;
        }
        /** @type {?} */
        var minFileSize = restrictions.minFileSize || poUploadMinFileSize;
        /** @type {?} */
        var maxFileSize = restrictions.maxFileSize || poUploadMaxFileSize;
        return tslib_1.__assign({}, restrictions, { maxFileSize: maxFileSize, minFileSize: minFileSize });
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    PoUploadBaseComponent.prototype.updateExistsFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        /** @type {?} */
        var fileIndex = files.findIndex((/**
         * @param {?} currentFile
         * @return {?}
         */
        function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== PoUploadStatus.Uploaded; }));
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    };
    PoUploadBaseComponent.propDecorators = {
        directory: [{ type: Input, args: ['p-directory',] }],
        dragDropHeight: [{ type: Input, args: ['p-drag-drop-height',] }],
        dragDrop: [{ type: Input, args: ['p-drag-drop',] }],
        hideRestrictionsInfo: [{ type: Input, args: ['p-hide-restrictions-info',] }],
        hideSelectButton: [{ type: Input, args: ['p-hide-select-button',] }],
        hideSendButton: [{ type: Input, args: ['p-hide-send-button',] }],
        label: [{ type: Input, args: ['p-label',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        help: [{ type: Input, args: ['p-help',] }],
        url: [{ type: Input, args: ['p-url',] }],
        fileRestrictions: [{ type: Input, args: ['p-restrictions',] }],
        name: [{ type: Input, args: ['name',] }],
        formField: [{ type: Input, args: ['p-form-field',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        autoUpload: [{ type: Input, args: ['p-auto-upload',] }],
        isMultiple: [{ type: Input, args: ['p-multiple',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        required: [{ type: Input, args: ['p-required',] }],
        onUpload: [{ type: Output, args: ['p-upload',] }],
        onError: [{ type: Output, args: ['p-error',] }],
        onSuccess: [{ type: Output, args: ['p-success',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return PoUploadBaseComponent;
}());
export { PoUploadBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._directory;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._dragDrop;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._fileRestrictions;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._formField;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._hideRestrictionsInfo;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._hideSelectButton;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._hideSendButton;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._isMultiple;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._required;
    /** @type {?} */
    PoUploadBaseComponent.prototype.allowedExtensions;
    /** @type {?} */
    PoUploadBaseComponent.prototype.currentFiles;
    /** @type {?} */
    PoUploadBaseComponent.prototype.canHandleDirectory;
    /** @type {?} */
    PoUploadBaseComponent.prototype.onModelChange;
    /** @type {?} */
    PoUploadBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype.validatorChange;
    /**
     * @type {?}
     * @protected
     */
    PoUploadBaseComponent.prototype.extensionNotAllowed;
    /**
     * @type {?}
     * @protected
     */
    PoUploadBaseComponent.prototype.quantityNotAllowed;
    /**
     * @type {?}
     * @protected
     */
    PoUploadBaseComponent.prototype.sizeNotAllowed;
    /**
     * \@optional
     *
     * \@description
     *
     * Define em *pixels* a altura da área onde podem ser arrastados os arquivos. A altura mínima aceita é `160px`.
     *
     * > Esta propriedade funciona somente se a propriedade `p-drag-drop` estiver habilitada.
     *
     * \@default `320`
     * @type {?}
     */
    PoUploadBaseComponent.prototype.dragDropHeight;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.help;
    /**
     * URL que deve ser feita a requisição com os arquivos selecionados.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.url;
    /**
     * Define o valor do atributo `name` do componente.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se o envio do arquivo será automático ao selecionar o mesmo.
     *
     * \@default `false`
     * @type {?}
     */
    PoUploadBaseComponent.prototype.autoUpload;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     *  - O campo conter `p-required`;
     *  - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoUploadBaseComponent.prototype.optional;
    /**
     * Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição, por exemplo:
     *
     * ```
     *   event.data = {id: 'id do usuario'};
     * ```
     * @type {?}
     */
    PoUploadBaseComponent.prototype.onUpload;
    /**
     * Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.onSuccess;
    /** @type {?} */
    PoUploadBaseComponent.prototype.ngModelChange;
    /**
     * @type {?}
     * @protected
     */
    PoUploadBaseComponent.prototype.uploadService;
    /**
     * @abstract
     * @return {?}
     */
    PoUploadBaseComponent.prototype.sendFeedback = function () { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoUploadBaseComponent.prototype.setDirectoryAttribute = function (value) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby11cGxvYWQvcG8tdXBsb2FkLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFJaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQUV6RCxNQUFNLEtBQU8sdUJBQXVCLEdBQUc7SUFDckMsRUFBRSxFQUFFLG1CQUFrQjtRQUNwQixLQUFLLEVBQUUsT0FBTztRQUNkLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFlBQVksRUFBRSxlQUFlO1FBQzdCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFlBQVksRUFBRSxlQUFlO1FBQzdCLGFBQWEsRUFBRSxpQkFBaUI7UUFDaEMsZUFBZSxFQUFFLG1CQUFtQjtRQUNwQyxxQkFBcUIsRUFBRSxrQ0FBa0M7UUFDekQsc0JBQXNCLEVBQUUsbUNBQW1DO1FBQzNELGFBQWEsRUFBRSxpQkFBaUI7UUFDaEMsZUFBZSxFQUFFLG1CQUFtQjtRQUNwQyxlQUFlLEVBQUUsMENBQTBDO1FBQzNELGVBQWUsRUFB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U0FoZ0JxQixxQkFBcUI7Ozs7OztJQUV6QywyQ0FBNkI7Ozs7O0lBQzdCLDBDQUE0Qjs7Ozs7SUFDNUIsMENBQW9DOzs7OztJQUNwQyxrREFBcUQ7Ozs7O0lBQ3JELDJDQUE0Qjs7Ozs7SUFDNUIsc0RBQXdDOzs7OztJQUN4QyxrREFBb0M7Ozs7O0lBQ3BDLGdEQUFrQzs7Ozs7SUFDbEMsNENBQThCOzs7OztJQUM5QiwwQ0FBd0I7Ozs7O0lBQ3hCLDBDQUE0Qjs7SUFFNUIsa0RBQTBCOztJQUMxQiw2Q0FBa0M7O0lBRWxDLG1EQUE0Qjs7SUFDNUIsOENBQW1COztJQUNuQiwrQ0FBb0I7Ozs7O0lBRXBCLGdEQUE2Qjs7Ozs7SUFFN0Isb0RBQWtDOzs7OztJQUNsQyxtREFBaUM7Ozs7O0lBQ2pDLCtDQUE2Qjs7Ozs7Ozs7Ozs7OztJQXFDN0IsK0NBQW9EOzs7OztJQThFcEQsc0NBQWlDOzs7OztJQXVEakMscUNBQStCOzs7OztJQUcvQixvQ0FBNEI7Ozs7O0lBcUI1QixxQ0FBcUM7Ozs7Ozs7Ozs7O0lBK0NyQywyQ0FBcUQ7Ozs7Ozs7Ozs7Ozs7OztJQWdDckQseUNBQXVDOzs7Ozs7Ozs7Ozs7SUErQnZDLHlDQUEyRTs7Ozs7O0lBTTNFLHdDQUF5RTs7Ozs7O0lBTXpFLDBDQUE2RTs7SUFHN0UsOENBQXFGOzs7OztJQUV6RSw4Q0FBd0M7Ozs7O0lBRXBELCtEQUE4Qjs7Ozs7O0lBa0s5Qiw2RUFBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgYnJvd3Nlckxhbmd1YWdlLCBjb252ZXJ0VG9Cb29sZWFuLCBpc0VxdWFscywgaXNJRSwgaXNNb2JpbGUsIHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5pbXBvcnQgeyByZXF1aXJlZEZhaWxlZCB9IGZyb20gJy4uL3ZhbGlkYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgUG9VcGxvYWRGaWxlIH0gZnJvbSAnLi9wby11cGxvYWQtZmlsZSc7XHJcbmltcG9ydCB7IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbi5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb1VwbG9hZExpdGVyYWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXVwbG9hZC1saXRlcmFscy5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb1VwbG9hZFNlcnZpY2UgfSBmcm9tICcuL3BvLXVwbG9hZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUG9VcGxvYWRTdGF0dXMgfSBmcm9tICcuL3BvLXVwbG9hZC1zdGF0dXMuZW51bSc7XHJcblxyXG5leHBvcnQgY29uc3QgcG9VcGxvYWRMaXRlcmFsc0RlZmF1bHQgPSB7XHJcbiAgZW46IDxQb1VwbG9hZExpdGVyYWxzPntcclxuICAgIGZpbGVzOiAnZmlsZXMnLFxyXG4gICAgZm9sZGVyczogJ2ZvbGRlcnMnLFxyXG4gICAgc2VsZWN0RmlsZTogJ1NlbGVjdCBmaWxlJyxcclxuICAgIHNlbGVjdEZpbGVzOiAnU2VsZWN0IGZpbGVzJyxcclxuICAgIHNlbGVjdEZvbGRlcjogJ1NlbGVjdCBmb2xkZXInLFxyXG4gICAgZGVsZXRlRmlsZTogJ0RlbGV0ZScsXHJcbiAgICBjYW5jZWw6ICdDYW5jZWwnLFxyXG4gICAgdHJ5QWdhaW46ICdUcnkgYWdhaW4nLFxyXG4gICAgc3RhcnRTZW5kaW5nOiAnU3RhcnQgc2VuZGluZycsXHJcbiAgICBkcmFnRmlsZXNIZXJlOiAnRHJhZyBmaWxlcyBoZXJlJyxcclxuICAgIGRyYWdGb2xkZXJzSGVyZTogJ0RyYWcgZm9sZGVycyBoZXJlJyxcclxuICAgIHNlbGVjdEZpbGVzT25Db21wdXRlcjogJ29yIHNlbGVjdCBmaWxlcyBvbiB5b3VyIGNvbXB1dGVyJyxcclxuICAgIHNlbGVjdEZvbGRlck9uQ29tcHV0ZXI6ICdvciBzZWxlY3QgZm9sZGVyIG9uIHlvdXIgY29tcHV0ZXInLFxyXG4gICAgZHJvcEZpbGVzSGVyZTogJ0Ryb3AgZmlsZXMgaGVyZScsXHJcbiAgICBkcm9wRm9sZGVyc0hlcmU6ICdEcm9wIGZvbGRlcnMgaGVyZScsXHJcbiAgICBpbnZhbGlkRHJvcEFyZWE6ICd7MH0gd2VyZSBub3QgZHJvcHBlZCBpbiB0aGUgY29ycmVjdCBhcmVhJyxcclxuICAgIGludmFsaWRGaWxlVHlwZTogJ0ZhaWxlZCB0byBsb2FkIHswfSBmaWxlKHMpIGFzIGl0IGlzIG5vdCB0aGUgYWxsb3dlZCBmaWxlIHR5cGUuJyxcclxuICAgIGludmFsaWRBbW91bnQ6ICdGYWlsZWQgdG8gbG9hZCB7MH0gZmlsZShzKSwgYXMgaXQgZXhjZWVkcyB0aGUgbGltaXQgYW1vdW50IG9mIGZpbGVzLicsXHJcbiAgICBpbnZhbGlkRm9ybWF0OiAnRmFpbGVkIHRvIGxvYWQgezB9IGZpbGUocyksIGFzIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBmb3JtYXQocyk6IHsxfS4nLFxyXG4gICAgaW52YWxpZFNpemU6ICdGYWlsZWQgdG8gbG9hZCB7MH0gZmlsZXMocyksIGFzIGl0IGlzIG5vdCB0aGUgYWxsb3dlZCBzaXplOiBmcm9tIHsxfSB0byB7Mn0uJyxcclxuICAgIG51bWJlck9mRmlsZXNBbGxvd2VkOiAnezB9IGZpbGUocykgYWxsb3dlZCcsXHJcbiAgICBhbGxvd2VkRm9ybWF0czogJ0FjY2VwdGVkIGZpbGUgZm9ybWF0czogezB9LicsXHJcbiAgICBhbGxvd2VkRmlsZVNpemVSYW5nZTogJ1NpemUgbGltaXQgcGVyIGZpbGU6IGZyb20gezB9IHRvIHsxfScsXHJcbiAgICBtYXhGaWxlU2l6ZUFsbG93ZWQ6ICdTaXplIGxpbWl0IHBlciBmaWxlOiB7MH0gbWF4aW11bScsXHJcbiAgICBtaW5GaWxlU2l6ZUFsbG93ZWQ6ICdTaXplIGxpbWl0IHBlciBmaWxlOiB7MH0gbWluaW11bScsXHJcbiAgICBlcnJvck9jY3VycmVkOiAnQW4gZXJyb3IgaGFzIG9jY3VycmVkJyxcclxuICAgIHNlbnRXaXRoU3VjY2VzczogJ1NlbnQgd2l0aCBzdWNjZXNzJ1xyXG4gIH0sXHJcbiAgZXM6IDxQb1VwbG9hZExpdGVyYWxzPntcclxuICAgIGZpbGVzOiAnYXJjaGl2b3MnLFxyXG4gICAgZm9sZGVyczogJ2NhcnBldGFzJyxcclxuICAgIHNlbGVjdEZpbGU6ICdTZWxlY2Npb25hciBhcmNoaXZvJyxcclxuICAgIHNlbGVjdEZpbGVzOiAnU2VsZWNjaW9uYXIgYXJjaGl2b3MnLFxyXG4gICAgc2VsZWN0Rm9sZGVyOiAnU2VsZWNjaW9uYXIgY2FycGV0YScsXHJcbiAgICBkZWxldGVGaWxlOiAnQm9ycmFyJyxcclxuICAgIGNhbmNlbDogJ0NhbmNlbGFyJyxcclxuICAgIHRyeUFnYWluOiAnSW50ZW50YXIgZGUgbnVldm8nLFxyXG4gICAgc3RhcnRTZW5kaW5nOiAnSW5pY2lhciBjYXJnYScsXHJcbiAgICBkcmFnRmlsZXNIZXJlOiAnQXJyYXN0cmEgbG9zIGFyY2hpdm9zIGFxdcOtJyxcclxuICAgIGRyYWdGb2xkZXJzSGVyZTogJ0FycmFzdHJhIGxhcyBjYXJwZXRhcyBhcXXDrScsXHJcbiAgICBzZWxlY3RGaWxlc09uQ29tcHV0ZXI6ICdvIHNlbGVjY2lvbmEgbG9zIGFyY2hpdm9zIGVuIHR1IGNvbXB1dGFkb3JhJyxcclxuICAgIHNlbGVjdEZvbGRlck9uQ29tcHV0ZXI6ICdvIHNlbGVjY2lvbmEgbGEgY2FycGV0YSBlbiB0dSBjb21wdXRhZG9yYScsXHJcbiAgICBkcm9wRmlsZXNIZXJlOiAnRGVqYSBsb3MgYXJjaGl2b3MgYXF1w60nLFxyXG4gICAgZHJvcEZvbGRlcnNIZXJlOiAnRGVqYSBsYXMgY2FycGV0YXMgYXF1w60nLFxyXG4gICAgaW52YWxpZERyb3BBcmVhOiAnTG9zIHswfSBubyBzZSBpbnNlcnRhcm9uIGVuIGxhIHViaWNhY2nDs24gY29ycmVjdGEnLFxyXG4gICAgaW52YWxpZEZpbGVUeXBlOiAnRXJyb3IgYWwgY2FyZ2FyIHswfSBhcmNoaXZvIChzKSB5YSBxdWUgbm8gZXMgZWwgdGlwbyBkZSBhcmNoaXZvIHBlcm1pdGlkbycsXHJcbiAgICBpbnZhbGlkQW1vdW50OiAnRXJyb3IgYWwgY2FyZ2FyIHswfSBhcmNoaXZvIChzKSB5YSBxdWUgZXhjZWRlIGxhIGNhbnRpZGFkIGxpbWl0ZSBkZSBhcmNoaXZvcy4nLFxyXG4gICAgaW52YWxpZEZvcm1hdDogJ0Vycm9yIGFsIGNhcmdhciB7MH0gYXJjaGl2byAocykgeWEgcXVlIG5vIGNvaW5jaWRlIGNvbiBlbCBmb3JtYXRvIChzKTogezF9LicsXHJcbiAgICBpbnZhbGlkU2l6ZTogJ0Vycm9yIGFsIGNhcmdhciB7MH0gYXJjaGl2byAocykgeWEgcXVlIG5vIGN1bXBsZSBjb24gZWwgdGFtYcOxbyBwZXJtaXRpZG86IGRlc2RlIHsxfSBoYXN0YSB7Mn0uJyxcclxuICAgIG51bWJlck9mRmlsZXNBbGxvd2VkOiAnezB9IGFyY2hpdm8ocykgcGVybWl0aWRvKHMpJyxcclxuICAgIGFsbG93ZWRGb3JtYXRzOiAnRm9ybWF0b3MgYWNlcHRhZG9zOiB7MH0uJyxcclxuICAgIGFsbG93ZWRGaWxlU2l6ZVJhbmdlOiAnTGltaXRlIGRlIHRhbWHDsW8gZGUgYXJjaGl2bzogZGVzZGUgezB9IGhhc3RhIHsxfScsXHJcbiAgICBtYXhGaWxlU2l6ZUFsbG93ZWQ6ICdMaW1pdGUgZGUgdGFtYcOxbyBkZSBhcmNoaXZvOiBoYXN0YSB7MH0nLFxyXG4gICAgbWluRmlsZVNpemVBbGxvd2VkOiAnTGltaXRlIGRlIHRhbWHDsW8gZGUgYXJjaGl2bzogbWluaW1vIHswfScsXHJcbiAgICBlcnJvck9jY3VycmVkOiAnT2N1cnJpbyB1biBlcnJvcicsXHJcbiAgICBzZW50V2l0aFN1Y2Nlc3M6ICdFbnZpYWRvIGNvbiDDqXhpdG8nXHJcbiAgfSxcclxuICBwdDogPFBvVXBsb2FkTGl0ZXJhbHM+e1xyXG4gICAgZmlsZXM6ICdhcnF1aXZvcycsXHJcbiAgICBmb2xkZXJzOiAnZGlyZXTDs3Jpb3MnLFxyXG4gICAgc2VsZWN0RmlsZTogJ1NlbGVjaW9uYXIgYXJxdWl2bycsXHJcbiAgICBzZWxlY3RGaWxlczogJ1NlbGVjaW9uYXIgYXJxdWl2b3MnLFxyXG4gICAgc2VsZWN0Rm9sZGVyOiAnU2VsZWNpb25hciBwYXN0YScsXHJcbiAgICBkZWxldGVGaWxlOiAnRXhjbHVpcicsXHJcbiAgICBjYW5jZWw6ICdDYW5jZWxhcicsXHJcbiAgICB0cnlBZ2FpbjogJ1RlbnRhciBOb3ZhbWVudGUnLFxyXG4gICAgc3RhcnRTZW5kaW5nOiAnSW5pY2lhciBlbnZpbycsXHJcbiAgICBkcmFnRmlsZXNIZXJlOiAnQXJyYXN0ZSBvcyBhcnF1aXZvcyBhcXVpJyxcclxuICAgIGRyYWdGb2xkZXJzSGVyZTogJ0FycmFzdGUgYXMgcGFzdGFzIGFxdWknLFxyXG4gICAgc2VsZWN0RmlsZXNPbkNvbXB1dGVyOiAnb3Ugc2VsZWNpb25lIG9zIGFycXVpdm9zIG5vIGNvbXB1dGFkb3InLFxyXG4gICAgc2VsZWN0Rm9sZGVyT25Db21wdXRlcjogJ291IHNlbGVjaW9uZSBhIHBhc3RhIG5vIGNvbXB1dGFkb3InLFxyXG4gICAgZHJvcEZpbGVzSGVyZTogJ1NvbHRlIG9zIGFycXVpdm9zIGFxdWknLFxyXG4gICAgZHJvcEZvbGRlcnNIZXJlOiAnU29sdGUgYXMgcGFzdGFzIGFxdWknLFxyXG4gICAgaW52YWxpZERyb3BBcmVhOiAnT3MgezB9IG7Do28gZm9yYW0gaW5zZXJpZG9zIG5vIGxvY2FsIGNvcnJldG8nLFxyXG4gICAgaW52YWxpZEZpbGVUeXBlOiAnRmFsaGEgYW8gY2FycmVnYXIgezB9IGFycXVpdm8gKHMpLCBwb2lzIG7Do28gw6kgbyB0aXBvIGRlIGFycXVpdm8gcGVybWl0aWRvJyxcclxuICAgIGludmFsaWRBbW91bnQ6ICdGYWxoYSBhbyBjYXJyZWdhciB7MH0gYXJxdWl2byhzKSwgcG9pcyBleGNlZGUobSkgYSBxdWFudGlkYWRlIGxpbWl0ZSBkZSBhcnF1aXZvcy4nLFxyXG4gICAgaW52YWxpZEZvcm1hdDogJ0ZhbGhhIGFvIGNhcnJlZ2FyIHswfSBhcnF1aXZvKHMpLCBwb2lzIG7Do28gY29ycmVzcG9uZGUobSkgYW8ocykgZm9ybWF0byhzKTogezF9LicsXHJcbiAgICBpbnZhbGlkU2l6ZTogJ0ZhbGhhIGFvIGNhcnJlZ2FyIHswfSBhcnF1aXZvKHMpLCBwb2lzIG7Do28gYXRlbmRlIGFvIHRhbWFuaG8gcGVybWl0aWRvOiB7MX0gYXTDqSB7Mn0uJyxcclxuICAgIG51bWJlck9mRmlsZXNBbGxvd2VkOiAnUXVhbnRpZGFkZSBtw6F4aW1hOiB7MH0gYXJxdWl2byhzKScsXHJcbiAgICBhbGxvd2VkRm9ybWF0czogJ0Zvcm1hdG9zIGFkb3RhZG9zOiB7MH0uJyxcclxuICAgIGFsbG93ZWRGaWxlU2l6ZVJhbmdlOiAnTGltaXRlIGRlIHRhbWFuaG8gcG9yIGFycXVpdm86IGRlIHswfSBhdMOpIHsxfScsXHJcbiAgICBtYXhGaWxlU2l6ZUFsbG93ZWQ6ICdMaW1pdGUgZGUgdGFtYW5obyBwb3IgYXJxdWl2bzogYXTDqSB7MH0nLFxyXG4gICAgbWluRmlsZVNpemVBbGxvd2VkOiAnTGltaXRlIGRlIHRhbWFuaG8gcG9yIGFycXVpdm86IG5vIG3DrW5pbW8gezB9JyxcclxuICAgIGVycm9yT2NjdXJyZWQ6ICdPY29ycmV1IHVtIGVycm8nLFxyXG4gICAgc2VudFdpdGhTdWNjZXNzOiAnRW52aWFkbyBjb20gc3VjZXNzbydcclxuICB9LFxyXG4gIHJ1OiA8UG9VcGxvYWRMaXRlcmFscz57XHJcbiAgICBmaWxlczogJ9GE0LDQudC70YsnLFxyXG4gICAgZm9sZGVyczogJ9C/0LDQv9C60Lgg0YEg0YTQsNC50LvQsNC80LgnLFxyXG4gICAgc2VsZWN0RmlsZTogJ9CS0YvQsdC10YDQuNGC0LUg0YTQsNC50LsnLFxyXG4gICAgc2VsZWN0RmlsZXM6ICfQktGL0LHQtdGA0LjRgtC1INGE0LDQudC70YsnLFxyXG4gICAgc2VsZWN0Rm9sZGVyOiAn0JLRi9Cx0LXRgNC40YLQtSDQv9Cw0L/QutGDINGBINGE0LDQudC70LDQvNC4JyxcclxuICAgIGRlbGV0ZUZpbGU6ICfRg9C00LDQu9GP0YLRjCcsXHJcbiAgICBjYW5jZWw6ICfQvtGC0LzQtdC90LjRgtGMJyxcclxuICAgIHRyeUFnYWluOiAn0L/QvtC/0YDQvtCx0YPQudGC0LUg0LXRidC1INGA0LDQtycsXHJcbiAgICBzdGFydFNlbmRpbmc6ICfQndCw0YfQsNGC0Ywg0LfQsNCz0YDRg9C30LrRgycsXHJcbiAgICBkcmFnRmlsZXNIZXJlOiAn0J/QtdGA0LXRgtCw0YnQuNGC0LUg0YTQsNC50LvRiyDRgdGO0LTQsCcsXHJcbiAgICBkcmFnRm9sZGVyc0hlcmU6ICfQn9C10YDQtdGC0LDRidC40YLQtSDRgdGO0LTQsCDQv9Cw0L/QutC4JyxcclxuICAgIHNlbGVjdEZpbGVzT25Db21wdXRlcjogJ9C40LvQuCDQstGL0LHQtdGA0LjRgtC1INGE0LDQudC70Ysg0L3QsCDQutC+0LzQv9GM0Y7RgtC10YDQtScsXHJcbiAgICBzZWxlY3RGb2xkZXJPbkNvbXB1dGVyOiAn0LjQu9C4INCy0YvQsdC10YDQuNGC0LUg0L/QsNC/0LrRgyDQvdCwINCy0LDRiNC10Lwg0LrQvtC80L/RjNGO0YLQtdGA0LUnLFxyXG4gICAgZHJvcEZpbGVzSGVyZTogJ9Ce0YHRgtCw0LLRjNGC0LUg0YTQsNC50LvRiyDQt9C00LXRgdGMJyxcclxuICAgIGRyb3BGb2xkZXJzSGVyZTogJ9Cf0LXRgNC10YLQsNGJ0LjRgtC1INGB0Y7QtNCwINC/0LDQv9C60LgnLFxyXG4gICAgaW52YWxpZERyb3BBcmVhOiAnezB9INC90LUg0LHRi9C70Lgg0LLRgdGC0LDQstC70LXQvdGLINCyINC/0YDQsNCy0LjQu9GM0L3QvtC8INC80LXRgdGC0LUuJyxcclxuICAgIGludmFsaWRGaWxlVHlwZTogJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCz0YDRg9C30LjRgtGMINGE0LDQudC70YsgezB9LCDRgtCw0Log0LrQsNC6INGN0YLQviDQvdC10LLQtdGA0L3Ri9C5INGC0LjQvyDRhNCw0LnQu9CwJyxcclxuICAgIGludmFsaWRBbW91bnQ6ICdOw6NvIGZvaSBwb3Nzw612ZWwgY2FycmVnYXIgb3MgYXJxdWl2b3MgezB9IHBvcnF1ZSBlbGVzIGV4Y2VkZXJhbSBvIGxpbWl0ZSBkZSBhcnF1aXZvcy4nLFxyXG4gICAgaW52YWxpZEZvcm1hdDogJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCz0YDRg9C30LjRgtGMINGE0LDQudC70YsgezB9LCDRgtCw0Log0LrQsNC6INC+0L3QuCDQvdC1INGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGCINGE0L7RgNC80LDRgtGDICjQsNC8KTogezF9LicsXHJcbiAgICBpbnZhbGlkU2l6ZTogJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCz0YDRg9C30LjRgtGMINGE0LDQudC70YsgezB9LCDQv9C+0YHQutC+0LvRjNC60YMg0L7QvdC4INC90LUg0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YIg0YDQsNC30YDQtdGI0LXQvdC90L7QvNGDINGA0LDQt9C80LXRgNGDOiDQvtGCIHsxfSDQtNC+IHsyfS4nLFxyXG4gICAgbnVtYmVyT2ZGaWxlc0FsbG93ZWQ6ICfQnNCw0LrRgdC40LzQsNC70YzQvdC+0LUg0LrQvtC70LjRh9C10YHRgtCy0L46IHswfSDRhNCw0LnQu9C+0LInLFxyXG4gICAgYWxsb3dlZEZvcm1hdHM6ICfQpNC+0YDQvNCw0YLRiyDQv9GA0LjQvdGP0YLRizogezB9LicsXHJcbiAgICBhbGxvd2VkRmlsZVNpemVSYW5nZTogJ9Ce0LPRgNCw0L3QuNGH0LXQvdC40LUg0YDQsNC30LzQtdGA0LAg0YTQsNC50LvQsDog0L7RgiB7MH0g0LTQviB7MX0nLFxyXG4gICAgbWF4RmlsZVNpemVBbGxvd2VkOiAn0J7Qs9GA0LDQvdC40YfQtdC90LjQtSDRgNCw0LfQvNC10YDQsCDRhNCw0LnQu9CwOiDQtNC+IHswfScsXHJcbiAgICBtaW5GaWxlU2l6ZUFsbG93ZWQ6ICfQntCz0YDQsNC90LjRh9C10L3QuNC1INGA0LDQt9C80LXRgNCwINGE0LDQudC70LA6INC90LUg0LzQtdC90LXQtSB7MH0nLFxyXG4gICAgZXJyb3JPY2N1cnJlZDogJ9Cf0YDQvtC40LfQvtGI0LvQsCDQvtGI0LjQsdC60LAuJyxcclxuICAgIHNlbnRXaXRoU3VjY2VzczogJ9Cj0YHQv9C10YjQvdC+INC+0YLQv9GA0LDQstC70LXQvdC+J1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IHBvVXBsb2FkRm9ybUZpZWxkRGVmYXVsdCA9ICdmaWxlcyc7XHJcblxyXG5jb25zdCBwb1VwbG9hZE1heEZpbGVTaXplID0gMzE0NTcyODA7IC8vIDMwTUJcclxuY29uc3QgcG9VcGxvYWRNaW5GaWxlU2l6ZSA9IDA7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uXHJcbiAqXHJcbiAqIE8gY29tcG9uZW50ZSBgcG8tdXBsb2FkYCBwZXJtaXRlIHF1ZSBvIHVzdcOhcmlvIGVudmllIGFycXVpdm8ocykgYW8gc2Vydmlkb3IgZSBhY29tcGFuaGUgbyBwcm9ncmVzc28uXHJcbiAqIEVzdGUgY29tcG9uZW50ZSB0YW1iw6ltIHBvc3NpYmlsaXRhIGFsZ3VtYXMgY29uZmlndXJhw6fDtWVzIGNvbW86XHJcbiAqICDigJMgRW52aW8gZGUgZGlyZXTDs3Jpb3MsIG9uZGUgZWxlIGFjZXNzYSBvIGRpcmV0w7NyaW8gc2VsZWNpb25hZG8gYXNzaW0gY29tbyBzZXVzIHN1Yi1kaXJldMOzcmlvcztcclxuICogIC0gTcO6bHRpcGxhIHNlbGXDp8Ojbywgb25kZSBvIHVzdcOhcmlvIHBvZGUgZW52aWFyIG1haXMgZGUgdW0gYXJxdWl2byBhbyBzZXJ2aWRvci5cclxuICogIC0gQXV0byBlbnZpbywgb25kZSBvIGFycXVpdm8gw6kgZW52aWFkbyBpbWVkaWF0YW1lbnRlIGFww7NzIGEgc2VsZcOnw6NvIGRvIHVzdcOhcmlvLCBuw6NvIG5lY2Vzc2l0YW5kbyBxdWUgbyB1c3XDoXJpb1xyXG4gKiBjbGlxdWUgZW0gZW52aWFyLlxyXG4gKiAgLSBSZXN0cmnDp8O1ZXMgZGUgZm9ybWF0b3MgZGUgYXJxdWl2byBlIHRhbWFuaG8uXHJcbiAqICAtIEZ1bsOnw6NvIGRlIHN1Y2Vzc28gcXVlIHNlcsOhIGRpc3BhcmFkYSBxdWFuZG8gb3MgYXJxdWl2b3MgZm9yZW0gZW52aWFkb3MgY29tIHN1Y2Vzc28uXHJcbiAqICAtIEZ1bsOnw6NvIGRlIGVycm8gcXVlIHNlcsOhIGRpc3BhcmFkYSBxdWFuZG8gaG91dmVyIGVycm8gbm8gZW52aW8gZG9zIGFycXVpdm9zLlxyXG4gKiAgLSBQZXJtaXRlIGhhYmlsaXRhciB1bWEgw6FyZWEgb25kZSBvcyBhcnF1aXZvcyBwb2RlbSBzZXIgYXJyYXN0YWRvcy5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb1VwbG9hZEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIHtcclxuXHJcbiAgcHJpdmF0ZSBfZGlyZWN0b3J5PzogYm9vbGVhbjtcclxuICBwcml2YXRlIF9kaXNhYmxlZD86IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfZHJhZ0Ryb3A/OiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBfZmlsZVJlc3RyaWN0aW9ucz86IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucztcclxuICBwcml2YXRlIF9mb3JtRmllbGQ/OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfaGlkZVJlc3RyaWN0aW9uc0luZm8/OiBib29sZWFuO1xyXG4gIHByaXZhdGUgX2hpZGVTZWxlY3RCdXR0b24/OiBib29sZWFuO1xyXG4gIHByaXZhdGUgX2hpZGVTZW5kQnV0dG9uPzogYm9vbGVhbjtcclxuICBwcml2YXRlIF9pc011bHRpcGxlPzogYm9vbGVhbjtcclxuICBwcml2YXRlIF9saXRlcmFscz86IGFueTtcclxuICBwcml2YXRlIF9yZXF1aXJlZD86IGJvb2xlYW47XHJcblxyXG4gIGFsbG93ZWRFeHRlbnNpb25zOiBzdHJpbmc7XHJcbiAgY3VycmVudEZpbGVzOiBBcnJheTxQb1VwbG9hZEZpbGU+O1xyXG5cclxuICBjYW5IYW5kbGVEaXJlY3Rvcnk6IGJvb2xlYW47XHJcbiAgb25Nb2RlbENoYW5nZTogYW55O1xyXG4gIG9uTW9kZWxUb3VjaGVkOiBhbnk7XHJcblxyXG4gIHByaXZhdGUgdmFsaWRhdG9yQ2hhbmdlOiBhbnk7XHJcblxyXG4gIHByb3RlY3RlZCBleHRlbnNpb25Ob3RBbGxvd2VkID0gMDtcclxuICBwcm90ZWN0ZWQgcXVhbnRpdHlOb3RBbGxvd2VkID0gMDtcclxuICBwcm90ZWN0ZWQgc2l6ZU5vdEFsbG93ZWQgPSAwO1xyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogUGVybWl0ZSBhIHNlbGXDp8OjbyBkZSBkaXJldMOzcmlvcyBjb250ZW5kbyB1bSBvdSBtYWlzIGFycXVpdm9zIHBhcmEgZW52aW8uXHJcbiAgICpcclxuICAgKiA+IEEgaGFiaWxpdGHDp8OjbyBkZXN0YSBwcm9wcmllZGFkZSBzZSByZXN0cmluZ2UgYXBlbmFzIMOgIHNlbGXDp8OjbyBkZSBkaXJldMOzcmlvcy5cclxuICAgKlxyXG4gICAqID4gRGVmaW5pw6fDo28gbsOjbyBzdXBvcnRhZGEgcGVsbyBicm93c2VyICoqSW50ZXJuZXQgRXhwbG9yZXIqKiwgdG9kYXZpYSBzZXLDoSBwb3Nzw612ZWwgYSBzZWxlw6fDo28gZGUgYXJxdWl2b3MgcGFkcsOjby5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtZGlyZWN0b3J5Jykgc2V0IGRpcmVjdG9yeSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fZGlyZWN0b3J5ID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XHJcblxyXG4gICAgdGhpcy5jYW5IYW5kbGVEaXJlY3RvcnkgPSB0aGlzLl9kaXJlY3RvcnkgJiYgIWlzSUUoKSAmJiAhaXNNb2JpbGUoKTtcclxuICAgIHRoaXMuc2V0RGlyZWN0b3J5QXR0cmlidXRlKHRoaXMuY2FuSGFuZGxlRGlyZWN0b3J5KTtcclxuICB9XHJcblxyXG4gIGdldCBkaXJlY3RvcnkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0b3J5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIERlZmluZSBlbSAqcGl4ZWxzKiBhIGFsdHVyYSBkYSDDoXJlYSBvbmRlIHBvZGVtIHNlciBhcnJhc3RhZG9zIG9zIGFycXVpdm9zLiBBIGFsdHVyYSBtw61uaW1hIGFjZWl0YSDDqSBgMTYwcHhgLlxyXG4gICAqXHJcbiAgICogPiBFc3RhIHByb3ByaWVkYWRlIGZ1bmNpb25hIHNvbWVudGUgc2UgYSBwcm9wcmllZGFkZSBgcC1kcmFnLWRyb3BgIGVzdGl2ZXIgaGFiaWxpdGFkYS5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGAzMjBgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWRyYWctZHJvcC1oZWlnaHQnKSBkcmFnRHJvcEhlaWdodDogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRXhpYmUgYSDDoXJlYSBvbmRlIMOpIHBvc3PDrXZlbCBhcnJhc3RhciBlIHNlbGVjaW9uYXIgb3MgYXJxdWl2b3MuIFF1YW5kbyBlc3RpdmVyIGRlZmluaWRhLCBvbWl0ZSBvIGJvdMOjbyBwYXJhIHNlbGXDp8OjbyBkZSBhcnF1aXZvc1xyXG4gICAqIGF1dG9tYXRpY2FtZW50ZS5cclxuICAgKlxyXG4gICAqID4gUmVjb21lbmRhbW9zIHV0aWxpemFyIGFwZW5hcyB1bSBgcG8tdXBsb2FkYCBjb20gZXN0YSBmdW5jaW9uYWxpZGFkZSBwb3IgdGVsYS5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtZHJhZy1kcm9wJykgc2V0IGRyYWdEcm9wKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9kcmFnRHJvcCA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRyYWdEcm9wKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RyYWdEcm9wO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIE9jdWx0YSB2aXN1YWxtZW50ZSBhcyBpbmZvcm1hw6fDtWVzIGRlIHJlc3RyacOnw7VlcyBwYXJhIG8gdXBsb2FkLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1oaWRlLXJlc3RyaWN0aW9ucy1pbmZvJykgc2V0IGhpZGVSZXN0cmljdGlvbnNJbmZvKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9oaWRlUmVzdHJpY3Rpb25zSW5mbyA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhpZGVSZXN0cmljdGlvbnNJbmZvKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2hpZGVSZXN0cmljdGlvbnNJbmZvO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIE9taXRlIG8gYm90w6NvIGRlIHNlbGXDp8OjbyBkZSBhcnF1aXZvcy5cclxuICAgKlxyXG4gICAqID4gQ2FzbyBvIHZhbG9yIGRlZmluaWRvIHNlamEgYHRydWVgLCBjYWJlcsOhIGFvIGRlc2Vudm9sdmVkb3IgYSByZXNwb25zYWJpbGlkYWRlXHJcbiAgICogcGVsYSBjaGFtYWRhIGRvIG3DqXRvZG8gYHNlbGVjdEZpbGVzKClgIHBhcmEgc2VsZcOnw6NvIGRlIGFycXVpdm9zLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1oaWRlLXNlbGVjdC1idXR0b24nKSBzZXQgaGlkZVNlbGVjdEJ1dHRvbih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5faGlkZVNlbGVjdEJ1dHRvbiA9IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xyXG4gIH1cclxuICBnZXQgaGlkZVNlbGVjdEJ1dHRvbigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9oaWRlU2VsZWN0QnV0dG9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIE9taXRlIG8gYm90w6NvIGRlIGVudmlvIGRlIGFycXVpdm9zLlxyXG4gICAqXHJcbiAgICogPiBDYXNvIG8gdmFsb3IgZGVmaW5pZG8gc2VqYSBgdHJ1ZWAsIGNhYmVyw6EgYW8gZGVzZW52b2x2ZWRvciBhIHJlc3BvbnNhYmlsaWRhZGVcclxuICAgKiBwZWxhIGNoYW1hZGEgZG8gbcOpdG9kbyBgc2VuZEZpbGVzKClgIHBhcmEgZW52aW8gZG8ocykgYXJxdWl2byhzKSBzZWxlY2lvbmFkbyhzKS5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgKi9cclxuICBASW5wdXQoJ3AtaGlkZS1zZW5kLWJ1dHRvbicpIHNldCBoaWRlU2VuZEJ1dHRvbih2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5faGlkZVNlbmRCdXR0b24gPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcclxuICB9XHJcbiAgZ2V0IGhpZGVTZW5kQnV0dG9uKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2hpZGVTZW5kQnV0dG9uO1xyXG4gIH1cclxuXHJcbiAgLyoqIFLDs3R1bG8gZG8gY2FtcG8uICovXHJcbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw/OiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBPYmpldG8gY29tIGFzIGxpdGVyYWlzIHVzYWRhcyBubyBgcG8tdXBsb2FkYC5cclxuICAgKlxyXG4gICAqIEV4aXN0ZW0gZHVhcyBtYW5laXJhcyBkZSBjdXN0b21pemFyIG8gY29tcG9uZW50ZSwgcGFzc2FuZG8gdW0gb2JqZXRvIGNvbSB0b2RhcyBhcyBsaXRlcmFpcyBkaXNwb27DrXZlaXM6XHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvVXBsb2FkTGl0ZXJhbHMgPSB7XHJcbiAgICogICAgY2FuY2VsOiAnRGVzaXN0aXInLFxyXG4gICAqICAgIGRlbGV0ZUZpbGU6ICdEZWxldGFyJyxcclxuICAgKiAgfTtcclxuICAgKlxyXG4gICAqIE91IHBhc3NhbmRvIGFwZW5hcyBhcyBsaXRlcmFpcyBxdWUgZGVzZWphIGN1c3RvbWl6YXI6LFxyXG4gICAqICAgIHNlbGVjdEZpbGU6ICdCdXNjYXIgYXJxdWl2bycsXHJcbiAgICogYGBgXHJcbiAgICogICAgc3RhcnRTZW5kaW5nOiAnRW52aWFyJ1xyXG4gICAqICAgdHJ5QWdhaW46ICdSZWNvbWXDp2FyJyxcclxuICAgKlxyXG4gICAqIGBgYFxyXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9VcGxvYWRMaXRlcmFscyA9IHtcclxuICAgKiAgICBkZWxldGVGaWxlOiAnRGVsZXRhcidcclxuICAgKiAgfTtcclxuICAgKiBgYGBcclxuICAgKlxyXG4gICAqIEUgcGFyYSBjYXJyZWdhciBhcyBsaXRlcmFpcyBjdXN0b21pemFkYXMsIGJhc3RhIGFwZW5hcyBwYXNzYXIgbyBvYmpldG8gcGFyYSBvIGNvbXBvbmVudGU6XHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiA8cG8tdXBsb2FkXHJcbiAgICogICBbcC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxyXG4gICAqIDwvcG8tdXBsb2FkPlxyXG4gICAqIGBgYFxyXG4gICAqXHJcbiAgICogPiBPIG9iamV0byBwYWRyw6NvIGRlIGxpdGVyYWlzIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGRvICpicm93c2VyKiAocHQsIGVuLCBlcykuXHJcbiAgICovXHJcbiAgQElucHV0KCdwLWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb1VwbG9hZExpdGVyYWxzKSB7XHJcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICB0aGlzLl9saXRlcmFscyA9IHtcclxuICAgICAgICAuLi5wb1VwbG9hZExpdGVyYWxzRGVmYXVsdFtwb0xvY2FsZURlZmF1bHRdLFxyXG4gICAgICAgIC4uLnBvVXBsb2FkTGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXSxcclxuICAgICAgICAuLi52YWx1ZVxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fbGl0ZXJhbHMgPSBwb1VwbG9hZExpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldCBsaXRlcmFscygpIHtcclxuICAgIHJldHVybiB0aGlzLl9saXRlcmFscyB8fCBwb1VwbG9hZExpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XHJcbiAgfVxyXG5cclxuICAvKiogVGV4dG8gZGUgYXBvaW8gcGFyYSBvIGNhbXBvLiAqL1xyXG4gIEBJbnB1dCgncC1oZWxwJykgaGVscD86IHN0cmluZztcclxuXHJcbiAgLyoqIFVSTCBxdWUgZGV2ZSBzZXIgZmVpdGEgYSByZXF1aXNpw6fDo28gY29tIG9zIGFycXVpdm9zIHNlbGVjaW9uYWRvcy4gKi9cclxuICBASW5wdXQoJ3AtdXJsJykgdXJsOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBPYmpldG8gcXVlIHNlZ3VlIGEgZGVmaW5pw6fDo28gZGEgaW50ZXJmYWNlIGBQb1VwbG9hZEZpbGVSZXN0cmljdGlvbnNgLFxyXG4gICAqIHF1ZSBwb3NzaWJpbGl0YSBkZWZpbmlyIHRhbWFuaG8gbcOheGltby9tw61uaW1vIGUgZXh0ZW5zw6NvIGRvcyBhcnF1aXZvcyBwZXJtaXRpZG9zLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1yZXN0cmljdGlvbnMnKSBzZXQgZmlsZVJlc3RyaWN0aW9ucyhyZXN0cmljdGlvbnM6IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucykge1xyXG4gICAgdGhpcy5fZmlsZVJlc3RyaWN0aW9ucyA9IHRoaXMuaW5pdFJlc3RyaWN0aW9ucyhyZXN0cmljdGlvbnMpO1xyXG5cclxuICAgIHRoaXMuc2V0QWxsb3dlZEV4dGVuc2lvbnMocmVzdHJpY3Rpb25zKTtcclxuICB9XHJcblxyXG4gIGdldCBmaWxlUmVzdHJpY3Rpb25zKCk6IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucyB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmlsZVJlc3RyaWN0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKiBEZWZpbmUgbyB2YWxvciBkbyBhdHJpYnV0byBgbmFtZWAgZG8gY29tcG9uZW50ZS4gKi9cclxuICBASW5wdXQoJ25hbWUnKSBuYW1lOiBzdHJpbmcgPSAnZmlsZSc7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBOb21lIGRvIGNhbXBvIGRlIGZvcm11bMOhcmlvIHF1ZSBzZXLDoSBlbnZpYWRvIHBhcmEgbyBzZXJ2acOnbyBpbmZvcm1hZG8gbmEgcHJvcHJpZWRhZGUgYHAtdXJsYC5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBmaWxlc2BcclxuICAgKi9cclxuICBASW5wdXQoJ3AtZm9ybS1maWVsZCcpIHNldCBmb3JtRmllbGQodmFsdWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5fZm9ybUZpZWxkID0gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogcG9VcGxvYWRGb3JtRmllbGREZWZhdWx0O1xyXG5cclxuICAgIHRoaXMuZ2V0VXBsb2FkU2VydmljZSgpLmZvcm1GaWVsZCA9IHRoaXMuZm9ybUZpZWxkO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGZvcm1GaWVsZCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1GaWVsZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBJbmRpY2EgcXVlIG8gY2FtcG8gc2Vyw6EgZGVzYWJpbGl0YWRvLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1kaXNhYmxlZCcpIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fZGlzYWJsZWQgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcclxuXHJcbiAgICB0aGlzLnZhbGlkYXRlTW9kZWwodGhpcy5jdXJyZW50RmlsZXMpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRpc2FibGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIERlZmluZSBzZSBvIGVudmlvIGRvIGFycXVpdm8gc2Vyw6EgYXV0b23DoXRpY28gYW8gc2VsZWNpb25hciBvIG1lc21vLlxyXG4gICAqXHJcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxyXG4gICAqL1xyXG4gIEBJbnB1dCgncC1hdXRvLXVwbG9hZCcpIGF1dG9VcGxvYWQ/OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBvcHRpb25hbFxyXG4gICAqXHJcbiAgICogQGRlc2NyaXB0aW9uXHJcbiAgICpcclxuICAgKiBEZWZpbmUgc2UgcG9kZSBzZWxlY2lvbmFyIG1haXMgZGUgdW0gYXJxdWl2by5cclxuICAgKlxyXG4gICAqID4gU2UgdXRpbGl6YWRhIGEgYHAtZGlyZWN0b3J5YCwgaGFiaWxpdGEtc2UgYXV0b21hdGljYW1lbnRlIGVzdGEgcHJvcHJpZWRhZGUuXHJcbiAgICovXHJcbiAgQElucHV0KCdwLW11bHRpcGxlJykgc2V0IGlzTXVsdGlwbGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2lzTXVsdGlwbGUgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGdldCBpc011bHRpcGxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FuSGFuZGxlRGlyZWN0b3J5ID8gdHJ1ZSA6IHRoaXMuX2lzTXVsdGlwbGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAb3B0aW9uYWxcclxuICAgKlxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqXHJcbiAgICogRGVmaW5lIHNlIGEgaW5kaWNhw6fDo28gZGUgY2FtcG8gb3BjaW9uYWwgc2Vyw6EgZXhpYmlkYS5cclxuICAgKlxyXG4gICAqID4gTsOjbyBzZXLDoSBleGliaWRhIGEgaW5kaWNhw6fDo28gc2U6XHJcbiAgICogIC0gTyBjYW1wbyBjb250ZXIgYHAtcmVxdWlyZWRgO1xyXG4gICAqICAtIE7Do28gcG9zc3VpciBgcC1oZWxwYCBlL291IGBwLWxhYmVsYC5cclxuICAgKlxyXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcclxuICAgKi9cclxuICBASW5wdXQoJ3Atb3B0aW9uYWwnKSBvcHRpb25hbDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogQG9wdGlvbmFsXHJcbiAgICpcclxuICAgKiBAZGVzY3JpcHRpb25cclxuICAgKlxyXG4gICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBvYnJpZ2F0w7NyaW8uXHJcbiAgICpcclxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXHJcbiAgICovXHJcbiAgQElucHV0KCdwLXJlcXVpcmVkJykgc2V0IHJlcXVpcmVkKHJlcXVpcmVkOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLl9yZXF1aXJlZCA9IGNvbnZlcnRUb0Jvb2xlYW4ocmVxdWlyZWQpO1xyXG5cclxuICAgIHRoaXMudmFsaWRhdGVNb2RlbCh0aGlzLmN1cnJlbnRGaWxlcyk7XHJcbiAgfVxyXG5cclxuICBnZXQgcmVxdWlyZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVxdWlyZWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIG5vIG1vbWVudG8gZGUgcmVhbGl6YXIgbyBlbnZpbyBkbyBhcnF1aXZvLFxyXG4gICAqIG9uZGUgc2Vyw6EgcG9zc8OtdmVsIGFkaWNpb25hciBpbmZvcm1hw6fDtWVzIGFvIHBhcsOibWV0cm8gcXVlIHNlcsOhIGVudmlhZG8gbmEgcmVxdWlzacOnw6NvLlxyXG4gICAqIMOJIHBhc3NhZG8gcG9yIHBhcsOibWV0cm8gdW0gb2JqZXRvIGNvbSBvIGFycXVpdm8gZSBhIHByb3BpZWRhZGUgZGF0YSBuZXN0YSBwcm9wcmllZGFkZSBwb2RlIHNlciBpbmZvcm1hZG8gYWxndW0gZGFkbyxcclxuICAgKiBxdWUgc2Vyw6EgZW52aWFkbyBlbSBjb25qdW50byBjb20gbyBhcnF1aXZvIG5hIHJlcXVpc2nDp8OjbywgcG9yIGV4ZW1wbG86XHJcbiAgICpcclxuICAgKiBgYGBcclxuICAgKiAgIGV2ZW50LmRhdGEgPSB7aWQ6ICdpZCBkbyB1c3VhcmlvJ307XHJcbiAgICogYGBgXHJcbiAgICovXHJcbiAgQE91dHB1dCgncC11cGxvYWQnKSBvblVwbG9hZD86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEV2ZW50byBzZXLDoSBkaXNwYXJhZG8gcXVhbmRvIG9jb3JyZXIgYWxndW0gZXJybyBubyBlbnZpbyBkbyBhcnF1aXZvLlxyXG4gICAqID4gUG9yIHBhcsOibWV0cm8gc2Vyw6EgcGFzc2FkbyBvIG9iamV0byBkbyByZXRvcm5vIHF1ZSDDqSBkbyB0aXBvIGBIdHRwRXJyb3JSZXNwb25zZWAuXHJcbiAgICovXHJcbiAgQE91dHB1dCgncC1lcnJvcicpIG9uRXJyb3I/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICAvKipcclxuICAgKiBFdmVudG8gc2Vyw6EgZGlzcGFyYWRvIHF1YW5kbyBvIGVudmlvIGRvIGFycXVpdm8gZm9yIHJlYWxpemFkbyBjb20gc3VjZXNzby5cclxuICAgKiA+IFBvciBwYXLDom1ldHJvIHNlcsOhIHBhc3NhZG8gbyBvYmpldG8gZG8gcmV0b3JubyBxdWUgw6kgZG8gdGlwbyBgSHR0cFJlc3BvbnNlYC5cclxuICAgKi9cclxuICBAT3V0cHV0KCdwLXN1Y2Nlc3MnKSBvblN1Y2Nlc3M/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICAvLyBGdW7Dp8OjbyBwYXJhIGF0dWFsaXphciBvIG5nTW9kZWwgZG8gY29tcG9uZW50ZSwgbmVjZXNzw6FyaW8gcXVhbmRvIG7Do28gZm9yIHV0aWxpemFkbyBkZW50cm8gZGEgKnRhZyogYGZvcm1gLlxyXG4gIEBPdXRwdXQoJ25nTW9kZWxDaGFuZ2UnKSBuZ01vZGVsQ2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHVwbG9hZFNlcnZpY2U6IFBvVXBsb2FkU2VydmljZSkgeyB9XHJcblxyXG4gIGFic3RyYWN0IHNlbmRGZWVkYmFjaygpOiB2b2lkO1xyXG5cclxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMub25Nb2RlbENoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5vbk1vZGVsVG91Y2hlZCA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy52YWxpZGF0b3JDaGFuZ2UgPSBmbjtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlKGFic3RyYWN0Q29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnk7IH0ge1xyXG5cclxuICAgIGlmIChyZXF1aXJlZEZhaWxlZCh0aGlzLnJlcXVpcmVkLCB0aGlzLmRpc2FibGVkLCBhYnN0cmFjdENvbnRyb2wudmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVxdWlyZWQ6IHtcclxuICAgICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgd3JpdGVWYWx1ZShtb2RlbDogYW55KTogdm9pZCB7XHJcbiAgICBpZiAobW9kZWwpIHtcclxuICAgICAgaWYgKCFpc0VxdWFscyh0aGlzLmN1cnJlbnRGaWxlcywgbW9kZWwpKSB7XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudEZpbGVzID0gdGhpcy5wYXJzZUZpbGVzKG1vZGVsKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgIHRoaXMuY3VycmVudEZpbGVzID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGlzRXhjZWVkZWRGaWxlTGltaXQoY3VycmVudEZpbGVzTGVuZ3RoOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmlzTXVsdGlwbGUgJiZcclxuICAgICAgdGhpcy5maWxlUmVzdHJpY3Rpb25zICYmXHJcbiAgICAgIHRoaXMuZmlsZVJlc3RyaWN0aW9ucy5tYXhGaWxlcyA+IDAgJiZcclxuICAgICAgdGhpcy5maWxlUmVzdHJpY3Rpb25zLm1heEZpbGVzIDw9IGN1cnJlbnRGaWxlc0xlbmd0aDtcclxuICB9XHJcblxyXG4gIC8vIEZheiBvIHBhcnNlIGRvcyBhcnF1aXZvcyBzZWxlY2lvbmFkb3MgcGFyYSBhcnF1aXZvcyBkbyBmb3JtYXRvIFBvVXBsb2FkRmlsZSBlIGF0dWFsaXphIG9zIGFycXVpdm9zIGNvcnJlbnRlcy5cclxuICBwcm90ZWN0ZWQgcGFyc2VGaWxlcyhmaWxlczogQXJyYXk8RmlsZT4pOiBBcnJheTxQb1VwbG9hZEZpbGU+IHtcclxuICAgIGxldCBwb1VwbG9hZEZpbGVzOiBBcnJheTxQb1VwbG9hZEZpbGU+ID0gdGhpcy5jdXJyZW50RmlsZXMgfHwgW107XHJcbiAgICBjb25zdCBmaWxlc0xlbmd0aCA9IGZpbGVzLmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzTGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgIGlmICh0aGlzLmlzRXhjZWVkZWRGaWxlTGltaXQocG9VcGxvYWRGaWxlcy5sZW5ndGgpKSB7XHJcbiAgICAgICAgdGhpcy5xdWFudGl0eU5vdEFsbG93ZWQgPSBmaWxlc0xlbmd0aCAtIHRoaXMuZmlsZVJlc3RyaWN0aW9ucy5tYXhGaWxlcztcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBmaWxlID0gbmV3IFBvVXBsb2FkRmlsZShmaWxlc1tpXSk7XHJcblxyXG4gICAgICBpZiAodGhpcy5jaGVja1Jlc3RyaWN0aW9ucyhmaWxlKSkge1xyXG4gICAgICAgIHBvVXBsb2FkRmlsZXMgPSB0aGlzLmluc2VydEZpbGVJbkZpbGVzKGZpbGUsIHBvVXBsb2FkRmlsZXMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgdGhpcy5zZW5kRmVlZGJhY2soKTtcclxuICAgIHJldHVybiBwb1VwbG9hZEZpbGVzO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHZhbGlkYXRlTW9kZWwobW9kZWw6IGFueSkge1xyXG4gICAgaWYgKHRoaXMudmFsaWRhdG9yQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMudmFsaWRhdG9yQ2hhbmdlKG1vZGVsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFZlcmlmaWNhIHNlIG8gYXJxdWl2byBlc3TDoSBkZSBhY29yZG8gY29tIGFzIHJlc3RyacOnw7Vlcy5cclxuICBwcml2YXRlIGNoZWNrUmVzdHJpY3Rpb25zKGZpbGU6IFBvVXBsb2FkRmlsZSk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgcmVzdHJpY3Rpb25zID0gdGhpcy5maWxlUmVzdHJpY3Rpb25zO1xyXG5cclxuICAgIGlmIChyZXN0cmljdGlvbnMpIHtcclxuICAgICAgY29uc3QgYWxsb3dlZEV4dGVuc2lvbnMgPSByZXN0cmljdGlvbnMuYWxsb3dlZEV4dGVuc2lvbnM7XHJcbiAgICAgIGNvbnN0IG1pbkZpbGVTaXplID0gcmVzdHJpY3Rpb25zLm1pbkZpbGVTaXplO1xyXG4gICAgICBjb25zdCBtYXhGaWxlU2l6ZSA9IHJlc3RyaWN0aW9ucy5tYXhGaWxlU2l6ZTtcclxuXHJcbiAgICAgIGNvbnN0IGlzQWNjZXB0ID0gYWxsb3dlZEV4dGVuc2lvbnMgPyB0aGlzLmlzQWxsb3dlZEV4dGVuc2lvbihmaWxlLmV4dGVuc2lvbiwgYWxsb3dlZEV4dGVuc2lvbnMpIDogdHJ1ZTtcclxuICAgICAgY29uc3QgaXNBY2NlcHRTaXplID0gZmlsZS5zaXplID49IG1pbkZpbGVTaXplICYmIGZpbGUuc2l6ZSA8PSBtYXhGaWxlU2l6ZTtcclxuXHJcbiAgICAgIGlmICghaXNBY2NlcHRTaXplKSB7XHJcbiAgICAgICAgdGhpcy5zaXplTm90QWxsb3dlZCA9IHRoaXMuc2l6ZU5vdEFsbG93ZWQgKyAxO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gaXNBY2NlcHQgJiYgaXNBY2NlcHRTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleGlzdHNGaWxlU2FtZU5hbWUoZmlsZTogUG9VcGxvYWRGaWxlLCBmaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZpbGVzLnNvbWUoY3VycmVudEZpbGUgPT4gZmlsZS5uYW1lID09PSBjdXJyZW50RmlsZS5uYW1lKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VXBsb2FkU2VydmljZSgpOiBQb1VwbG9hZFNlcnZpY2Uge1xyXG4gICAgcmV0dXJuIHRoaXMudXBsb2FkU2VydmljZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5zZXJ0RmlsZUluRmlsZXMobmV3RmlsZTogUG9VcGxvYWRGaWxlLCBmaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPikge1xyXG5cclxuICAgIGlmICh0aGlzLmV4aXN0c0ZpbGVTYW1lTmFtZShuZXdGaWxlLCBmaWxlcykpIHtcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUV4aXN0c0ZpbGVJbkZpbGVzKG5ld0ZpbGUsIGZpbGVzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pc011bHRpcGxlKSB7XHJcblxyXG4gICAgICBmaWxlcy5wdXNoKG5ld0ZpbGUpO1xyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgIGZpbGVzLnNwbGljZSgwLCBmaWxlcy5sZW5ndGgsIG5ld0ZpbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmaWxlcztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNBbGxvd2VkRXh0ZW5zaW9uKGV4dGVuc2lvbjogc3RyaW5nLCBhbGxvd2VkRXh0ZW5zaW9uczogQXJyYXk8c3RyaW5nPiA9IFtdKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBpc0FsbG93ZWQgPSBhbGxvd2VkRXh0ZW5zaW9ucy5zb21lKGV4dCA9PiBleHQudG9Mb3dlckNhc2UoKSA9PT0gZXh0ZW5zaW9uKTtcclxuICAgIGlmICghaXNBbGxvd2VkKSB7XHJcbiAgICAgIHRoaXMuZXh0ZW5zaW9uTm90QWxsb3dlZCA9IHRoaXMuZXh0ZW5zaW9uTm90QWxsb3dlZCArIDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNBbGxvd2VkO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRBbGxvd2VkRXh0ZW5zaW9ucyhyZXN0cmljdGlvbnM6IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucyA9IHt9KSB7XHJcbiAgICBjb25zdCBfYWxsb3dlZEV4dGVuc2lvbnMgPSByZXN0cmljdGlvbnMuYWxsb3dlZEV4dGVuc2lvbnMgfHwgW107XHJcblxyXG4gICAgdGhpcy5hbGxvd2VkRXh0ZW5zaW9ucyA9IF9hbGxvd2VkRXh0ZW5zaW9ucy5qb2luKCcsJyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRSZXN0cmljdGlvbnMocmVzdHJpY3Rpb25zOiBQb1VwbG9hZEZpbGVSZXN0cmljdGlvbnMpOiBQb1VwbG9hZEZpbGVSZXN0cmljdGlvbnMge1xyXG5cclxuICAgIGlmICghcmVzdHJpY3Rpb25zKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtaW5GaWxlU2l6ZSA9IHJlc3RyaWN0aW9ucy5taW5GaWxlU2l6ZSB8fCBwb1VwbG9hZE1pbkZpbGVTaXplO1xyXG4gICAgY29uc3QgbWF4RmlsZVNpemUgPSByZXN0cmljdGlvbnMubWF4RmlsZVNpemUgfHwgcG9VcGxvYWRNYXhGaWxlU2l6ZTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5yZXN0cmljdGlvbnMsXHJcbiAgICAgIG1heEZpbGVTaXplOiBtYXhGaWxlU2l6ZSxcclxuICAgICAgbWluRmlsZVNpemU6IG1pbkZpbGVTaXplXHJcbiAgICB9O1xyXG5cclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlRXhpc3RzRmlsZUluRmlsZXMobmV3RmlsZTogUG9VcGxvYWRGaWxlLCBmaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPikge1xyXG4gICAgY29uc3QgZmlsZUluZGV4ID0gZmlsZXMuZmluZEluZGV4KGN1cnJlbnRGaWxlID0+IG5ld0ZpbGUubmFtZSA9PT0gY3VycmVudEZpbGUubmFtZSAmJiBjdXJyZW50RmlsZS5zdGF0dXMgIT09IFBvVXBsb2FkU3RhdHVzLlVwbG9hZGVkKTtcclxuXHJcbiAgICBpZiAoZmlsZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICBmaWxlcy5zcGxpY2UoZmlsZUluZGV4LCAxLCBuZXdGaWxlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmlsZXM7XHJcbiAgfVxyXG5cclxuICBhYnN0cmFjdCBzZXREaXJlY3RvcnlBdHRyaWJ1dGUodmFsdWU6IGJvb2xlYW4pO1xyXG5cclxufVxyXG4iXX0=