/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewContainerRef } from '@angular/core';
import { PoCleanBaseComponent } from './po-clean-base.component';
/**
 * \@docsPrivate
 *
 * \@docsExtends PoCleanBaseComponent
 *
 * \@examplePrivate
 *
 * <example-private name="po-clean-labs" title="Portinari Clean Labs">
 *   <file name="sample-po-clean-labs.component.html"> </file>
 *   <file name="sample-po-clean-labs.component.ts"> </file>
 * </example-private>
 */
var PoCleanComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoCleanComponent, _super);
    function PoCleanComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.parentComponent = _this.viewRef['_view']['component'];
        return _this;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    PoCleanComponent.prototype.setInputValue = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (this.inputRef && this.inputRef.nativeElement) {
            this.inputRef.nativeElement.value = value;
        }
    };
    /**
     * @return {?}
     */
    PoCleanComponent.prototype.getInputValue = /**
     * @return {?}
     */
    function () {
        if (this.inputRef && this.inputRef.nativeElement) {
            return this.inputRef.nativeElement.value;
        }
    };
    PoCleanComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-clean',
                    template: "<span *ngIf=\"showIcon()\"\n  class=\"po-icon po-field-icon po-icon-close\"\n  (click)=\"clear()\">\n</span>\n"
                }] }
    ];
    /** @nocollapse */
    PoCleanComponent.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    return PoCleanComponent;
}(PoCleanBaseComponent));
export { PoCleanComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCleanComponent.prototype.viewRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2xlYW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1jbGVhbi9wby1jbGVhbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7Ozs7Ozs7Ozs7O0FBY2pFO0lBSXNDLDRDQUFvQjtJQUV4RCwwQkFBb0IsT0FBeUI7UUFBN0MsWUFDRSxpQkFBTyxTQUVSO1FBSG1CLGFBQU8sR0FBUCxPQUFPLENBQWtCO1FBRTNDLEtBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7SUFDNUQsQ0FBQzs7Ozs7SUFFRCx3Q0FBYTs7OztJQUFiLFVBQWMsS0FBYztRQUMxQixJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7WUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUMzQztJQUNILENBQUM7Ozs7SUFFRCx3Q0FBYTs7O0lBQWI7UUFDRSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7WUFDaEQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7U0FDMUM7SUFDSCxDQUFDOztnQkFyQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxVQUFVO29CQUNwQiwwSEFBd0M7aUJBQ3pDOzs7O2dCQW5CbUIsZ0JBQWdCOztJQXVDcEMsdUJBQUM7Q0FBQSxBQXZCRCxDQUlzQyxvQkFBb0IsR0FtQnpEO1NBbkJZLGdCQUFnQjs7Ozs7O0lBRWYsbUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQ2xlYW5CYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby1jbGVhbi1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRvY3NFeHRlbmRzIFBvQ2xlYW5CYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVQcml2YXRlXG4gKlxuICogPGV4YW1wbGUtcHJpdmF0ZSBuYW1lPVwicG8tY2xlYW4tbGFic1wiIHRpdGxlPVwiUG9ydGluYXJpIENsZWFuIExhYnNcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jbGVhbi1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jbGVhbi1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGUtcHJpdmF0ZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tY2xlYW4nLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tY2xlYW4uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvQ2xlYW5Db21wb25lbnQgZXh0ZW5kcyBQb0NsZWFuQmFzZUNvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3UmVmOiBWaWV3Q29udGFpbmVyUmVmKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBhcmVudENvbXBvbmVudCA9IHRoaXMudmlld1JlZlsnX3ZpZXcnXVsnY29tcG9uZW50J107XG4gIH1cblxuICBzZXRJbnB1dFZhbHVlKHZhbHVlPzogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuaW5wdXRSZWYgJiYgdGhpcy5pbnB1dFJlZi5uYXRpdmVFbGVtZW50KSB7XG4gICAgICB0aGlzLmlucHV0UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBnZXRJbnB1dFZhbHVlKCkge1xuICAgIGlmICh0aGlzLmlucHV0UmVmICYmIHRoaXMuaW5wdXRSZWYubmF0aXZlRWxlbWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5wdXRSZWYubmF0aXZlRWxlbWVudC52YWx1ZTtcbiAgICB9XG4gIH1cblxufVxuIl19