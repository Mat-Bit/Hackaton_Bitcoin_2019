/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, poLocaleDefault } from './../../../utils/util';
import { requiredFailed } from '../validators';
/** @type {?} */
export var poDatepickerRangeLiteralsDefault = {
    en: (/** @type {?} */ ({
        invalidFormat: 'Date in invalid format',
        startDateGreaterThanEndDate: 'Start date greater than end date',
    })),
    es: (/** @type {?} */ ({
        invalidFormat: 'Fecha en formato no válido',
        startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',
    })),
    pt: (/** @type {?} */ ({
        invalidFormat: 'Data no formato inválido',
        startDateGreaterThanEndDate: 'Data inicial maior que data final',
    })),
    ru: (/** @type {?} */ ({
        invalidFormat: 'Дата в неверном формате',
        startDateGreaterThanEndDate: 'Дата начала больше даты окончания',
    }))
};
/**
 * \@description
 *
 * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
 * a data inicial ou a data final.
 *
 * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface
 * `PoDatepickerRange`, contendo as seguintes propriedades:
 * ```
 * { "start": '2017-11-28', "end": '2017-11-30' }
 * ```
 *
 * <a id="accepted-formats"></a>
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * new Date(2017, 10, 28);
 * ```
 *
 * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
 * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
 *
 * Importante:
 *
 * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
 * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
 * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do
 * `[(ngModel)]`, no entanto sem a validação do formulário;
 * - Para a validação do formulário, utilize o `[(ngModel)]`.
 * @abstract
 */
var PoDatepickerRangeBaseComponent = /** @class */ (function () {
    function PoDatepickerRangeBaseComponent(poDateService) {
        this.poDateService = poDateService;
        this.errorMessage = '';
        this._clean = false;
        this._noAutocomplete = false;
        this._readonly = false;
        this._required = false;
        this.dateRange = { start: '', end: '' };
        this.format = 'dd/mm/yyyy';
        this.isDateRangeInputFormatValid = true;
        this.isStartDateRangeInputValid = true;
        /**
         * \@optional
         *
         * \@description
         *
         * Evento disparado ao alterar valor do campo.
         */
        this.onChange = new EventEmitter();
    }
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "isDateRangeInputValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "clean", {
        get: /**
         * @return {?}
         */
        function () {
            return this._clean;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita ação para limpar o campo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita ação para limpar o campo.
         *
         * \@default `false`
         * @param {?} clean
         * @return {?}
         */
        function (clean) {
            this._clean = convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o campo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o campo.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "endDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._endDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data final.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data final.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this._endDate = this.convertPatternDateFormat(date);
            this.dateRange.end = this.endDate;
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poDatepickerRangeLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-datepicker-range`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format',
         *    startDateGreaterThanEndDate: 'End date less than start date'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-datepicker-range
         *   [p-literals]="customLiterals">
         * </po-datepicker-range>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-datepicker-range`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format',
         *    startDateGreaterThanEndDate: 'End date less than start date'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-datepicker-range
         *   [p-literals]="customLiterals">
         * </po-datepicker-range>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poDatepickerRangeLiteralsDefault[poLocaleDefault], poDatepickerRangeLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poDatepickerRangeLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "noAutocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noAutocomplete;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noAutocomplete = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será somente leitura.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = convertToBoolean(value);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "startDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._startDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data inicial.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data inicial.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this._startDate = this.convertPatternDateFormat(date);
            this.dateRange.start = this.startDate;
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouchedModel = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value || {};
        /** @type {?} */
        var startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
        /** @type {?} */
        var endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
        if (this.requiredDateRangeFailed(startDate, endDate)) {
            this.errorMessage = '';
            return { required: {
                    valid: false,
                } };
        }
        if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
            this.errorMessage = this.literals.invalidFormat;
            return { date: {
                    valid: false,
                } };
        }
        if (this.dateRangeFailed(startDate, endDate)) {
            this.errorMessage = this.literals.startDateGreaterThanEndDate;
            return { date: {
                    valid: false,
                } };
        }
        return null;
    };
    /**
     * @param {?} dateRange
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.writeValue = /**
     * @param {?} dateRange
     * @return {?}
     */
    function (dateRange) {
        this.resetDateRangeInputValidation();
        if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
            this.dateRange = { start: '', end: '' };
        }
        if (!dateRange) {
            this.validateModel(this.dateRange);
        }
        if (this.dateRangeObjectFailed(dateRange)) {
            this.updateModel(dateRange);
        }
        if (this.isDateRangeObject(dateRange)) {
            this.dateRange = {
                start: this.convertPatternDateFormat(dateRange.start),
                end: this.convertPatternDateFormat(dateRange.end)
            };
            this.updateModel(this.dateRange);
        }
        this.updateScreenByModel(this.dateRange);
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.dateFormatFailed = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && !this.poDateService.isValidIso(value);
    };
    // Executa a função onChange
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.updateModel = 
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var model = typeof (value) === 'object' ? tslib_1.__assign({}, value) : value;
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(model);
        }
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var model = tslib_1.__assign({}, value);
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.convertPatternDateFormat = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Date) {
            return this.poDateService.convertDateToISO(value);
        }
        return value;
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.dateRangeFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return !this.poDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.dateRangeFormatFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.dateRangeObjectFailed = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && !this.isDateRangeObject(value);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.isDateRangeObject = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.requiredDateRangeFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.isDateRangeInputValid &&
            requiredFailed(this.required, this.disabled, startDate) &&
            requiredFailed(this.required, this.disabled, endDate);
    };
    PoDatepickerRangeBaseComponent.propDecorators = {
        clean: [{ type: Input, args: ['p-clean',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        endDate: [{ type: Input, args: ['p-end-date',] }],
        help: [{ type: Input, args: ['p-help',] }],
        label: [{ type: Input, args: ['p-label',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        noAutocomplete: [{ type: Input, args: ['p-no-autocomplete',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        readonly: [{ type: Input, args: ['p-readonly',] }],
        required: [{ type: Input, args: ['p-required',] }],
        startDate: [{ type: Input, args: ['p-start-date',] }],
        onChange: [{ type: Output, args: ['p-change',] }]
    };
    return PoDatepickerRangeBaseComponent;
}());
export { PoDatepickerRangeBaseComponent };
if (false) {
    /** @type {?} */
    PoDatepickerRangeBaseComponent.prototype.errorMessage;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._clean;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._endDate;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._noAutocomplete;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._startDate;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype.onChangeModel;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype.validatorChange;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.dateRange;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.format;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.isDateRangeInputFormatValid;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.isStartDateRangeInputValid;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.onTouchedModel;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto de apoio do campo.
     * @type {?}
     */
    PoDatepickerRangeBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Rótulo do campo.
     * @type {?}
     */
    PoDatepickerRangeBaseComponent.prototype.label;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoDatepickerRangeBaseComponent.prototype.optional;
    /**
     * \@optional
     *
     * \@description
     *
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    PoDatepickerRangeBaseComponent.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.poDateService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.resetDateRangeInputValidation = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} dateRange
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.updateScreenByModel = function (dateRange) { };
}
//# sourceMappingURL=data:application/json;base64,