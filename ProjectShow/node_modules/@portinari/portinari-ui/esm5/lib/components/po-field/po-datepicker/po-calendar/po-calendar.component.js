/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isMobile, setYearFrom0To100, validateDateRange } from '../../../../utils/util';
import { PoCalendarLangService } from './po-calendar.lang.service';
import { PoCalendarService } from './po-calendar.service';
/** @type {?} */
var poCalendarLocaleDefault = 'pt';
/** @type {?} */
var poCalendarLocales = ['pt', 'en', 'es'];
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendário de uso interno
 */
var PoCalendarComponent = /** @class */ (function () {
    function PoCalendarComponent(poCalendarService, poCalendarLangService) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.monthVisible = false;
        this.overlayInvisible = true;
        this.visible = false;
        this.yearVisible = false;
        this.isMobile = isMobile;
        this.today = new Date();
        this.selectedDateChange = new EventEmitter();
        this.submit = new EventEmitter();
    }
    Object.defineProperty(PoCalendarComponent.prototype, "dateEnd", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateEnd;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data máxima possível de ser selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data máxima possível de ser selecionada no calendário.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val instanceof Date) {
                /** @type {?} */
                var year = val.getFullYear();
                /** @type {?} */
                var month = val.getMonth();
                /** @type {?} */
                var day = val.getDate();
                /** @type {?} */
                var date = new Date(year, month, day, 23, 59, 59);
                setYearFrom0To100(date, year);
                this._dateEnd = date;
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "selectedDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data selecionada no calendário.
         * @param {?} selectedDate
         * @return {?}
         */
        function (selectedDate) {
            this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "dateStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateStart;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data mínima possível de ser selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data mínima possível de ser selecionada no calendário.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val instanceof Date) {
                /** @type {?} */
                var year = val.getFullYear();
                /** @type {?} */
                var month = val.getMonth();
                /** @type {?} */
                var day = val.getDate();
                /** @type {?} */
                var date = new Date(year, month, day, 0, 0, 0);
                setYearFrom0To100(date, year);
                this._dateStart = date;
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.overlayInvisible = true;
        this.visible = false;
    };
    // Obtém um array de todos os anos desta década
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.getArrayDecade = 
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    PoCalendarComponent.prototype.getBackgroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.getDayBackgroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-background-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-background-today';
        }
        else if (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-background';
            }
            else {
                return 'po-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.getDayForegroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-foreground-today';
        }
        else {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-foreground';
            }
            else {
                return 'po-calendar-box-foreground-disabled';
            }
        }
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    PoCalendarComponent.prototype.getForegroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.getWordMonth = /**
     * @return {?}
     */
    function () {
        return this.poCalendarLangService.getWordMonth();
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.getWordYear = /**
     * @return {?}
     */
    function () {
        return this.poCalendarLangService.getWordYear();
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
        if (this.isMobile()) {
            this.overlayInvisible = false;
        }
        this.visible = true;
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.poCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.poCalendarLangService.getArrayMonths();
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.onNextMonth = /**
     * @return {?}
     */
    function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.onPrevMonth = /**
     * @return {?}
     */
    function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    // Ao selecionar uma data
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectDate = 
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (validateDateRange(date, this.dateStart, this.dateEnd)) {
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.submit.emit(date);
        }
    };
    // Ao selecionar um mês
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectMonth = 
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectYear = 
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectDay = /**
     * @return {?}
     */
    function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectMonth = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectYear = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.setMobileVisualization = /**
     * @return {?}
     */
    function () {
        return this.isMobile() ? 'po-calendar po-calendar-mobile' : 'po-calendar';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoCalendarComponent.prototype.updateYear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.addAllYearsInDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    PoCalendarComponent.prototype.equalsDate = /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDisplay = /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    PoCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-calendar',
                    template: "<div class=\"po-calendar-overlay\" [class.po-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\" class=\"po-calendar-day po-calendar-box-background\" (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"po-calendar-month\"\n        (click)=\"onSelectMonth(displayYear, i)\"\n        [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span (click)=\"updateYear(10)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"po-calendar-year\"\n        (click)=\"onSelectYear(year, displayMonthNumber)\"\n        [ngClass]=\"getBackgroundColor(year, currentYear)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                    providers: [PoCalendarService, PoCalendarLangService]
                }] }
    ];
    /** @nocollapse */
    PoCalendarComponent.ctorParameters = function () { return [
        { type: PoCalendarService },
        { type: PoCalendarLangService }
    ]; };
    PoCalendarComponent.propDecorators = {
        elDays: [{ type: ViewChild, args: ['days', { read: ElementRef, static: true },] }],
        elMonths: [{ type: ViewChild, args: ['months', { read: ElementRef, static: true },] }],
        elYears: [{ type: ViewChild, args: ['years', { read: ElementRef, static: true },] }],
        dateEnd: [{ type: Input, args: ['p-date-end',] }],
        locale: [{ type: Input, args: ['p-locale',] }],
        selectedDate: [{ type: Input, args: ['p-selected-date',] }],
        dateStart: [{ type: Input, args: ['p-date-start',] }],
        selectedDateChange: [{ type: Output, args: ['p-selected-dateChange',] }],
        submit: [{ type: Output, args: ['p-submit',] }]
    };
    return PoCalendarComponent;
}());
export { PoCalendarComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype._dateEnd;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype._dateStart;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype._selectedDate;
    /** @type {?} */
    PoCalendarComponent.prototype.currentYear;
    /** @type {?} */
    PoCalendarComponent.prototype.dayVisible;
    /** @type {?} */
    PoCalendarComponent.prototype.displayDays;
    /** @type {?} */
    PoCalendarComponent.prototype.displayDecade;
    /** @type {?} */
    PoCalendarComponent.prototype.displayFinalDecade;
    /** @type {?} */
    PoCalendarComponent.prototype.displayMonth;
    /** @type {?} */
    PoCalendarComponent.prototype.displayMonthNumber;
    /** @type {?} */
    PoCalendarComponent.prototype.displayMonths;
    /** @type {?} */
    PoCalendarComponent.prototype.displayStartDecade;
    /** @type {?} */
    PoCalendarComponent.prototype.displayWeedDays;
    /** @type {?} */
    PoCalendarComponent.prototype.displayYear;
    /** @type {?} */
    PoCalendarComponent.prototype.monthVisible;
    /** @type {?} */
    PoCalendarComponent.prototype.overlayInvisible;
    /** @type {?} */
    PoCalendarComponent.prototype.visible;
    /** @type {?} */
    PoCalendarComponent.prototype.yearVisible;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.currentMonthNumber;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.isMobile;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.lastDisplay;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.today;
    /** @type {?} */
    PoCalendarComponent.prototype.elDays;
    /** @type {?} */
    PoCalendarComponent.prototype.elMonths;
    /** @type {?} */
    PoCalendarComponent.prototype.elYears;
    /** @type {?} */
    PoCalendarComponent.prototype.selectedDateChange;
    /** @type {?} */
    PoCalendarComponent.prototype.submit;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.poCalendarService;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.poCalendarLangService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1kYXRlcGlja2VyL3BvLWNhbGVuZGFyL3BvLWNhbGVuZGFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlGLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7SUFFcEQsdUJBQXVCLEdBQUcsSUFBSTs7SUFDOUIsaUJBQWlCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQzs7Ozs7Ozs7QUFTNUM7SUE0SEUsNkJBQ1UsaUJBQW9DLEVBQ3BDLHFCQUE0QztRQUQ1QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFqSHRELGVBQVUsR0FBWSxLQUFLLENBQUM7UUFNNUIsa0JBQWEsR0FBZSxLQUFLLEVBQUUsQ0FBQztRQUVwQyxvQkFBZSxHQUFlLEtBQUssRUFBRSxDQUFDO1FBRXRDLGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBQzlCLHFCQUFnQixHQUFZLElBQUksQ0FBQztRQUNqQyxZQUFPLEdBQVksS0FBSyxDQUFDO1FBQ3pCLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBR3JCLGFBQVEsR0FBUSxRQUFRLENBQUM7UUFFekIsVUFBSyxHQUFTLElBQUksSUFBSSxFQUFFLENB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LElBQUksRUFBRTsyQkFDcEQsU0FBUyxTQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTswQkFDdEQsU0FBUyxTQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTswQkFTckQsS0FBSyxTQUFDLFlBQVk7eUJBOEJsQixLQUFLLFNBQUMsVUFBVTsrQkFlaEIsS0FBSyxTQUFDLGlCQUFpQjs0QkFjdkIsS0FBSyxTQUFDLGNBQWM7cUNBa0JwQixNQUFNLFNBQUMsdUJBQXVCO3lCQUM5QixNQUFNLFNBQUMsVUFBVTs7SUFvTXBCLDBCQUFDO0NBQUEsQUE5VEQsSUE4VEM7U0F6VFksbUJBQW1COzs7Ozs7SUFFOUIsdUNBQXVCOzs7OztJQUN2Qix5Q0FBeUI7Ozs7O0lBQ3pCLHNDQUF3Qjs7Ozs7SUFDeEIsNENBQTZCOztJQUU3QiwwQ0FBb0I7O0lBQ3BCLHlDQUE0Qjs7SUFDNUIsMENBQTJCOztJQUMzQiw0Q0FBNkI7O0lBQzdCLGlEQUEyQjs7SUFDM0IsMkNBQWtCOztJQUNsQixpREFBMkI7O0lBQzNCLDRDQUFvQzs7SUFDcEMsaURBQTJCOztJQUMzQiw4Q0FBc0M7O0lBQ3RDLDBDQUFvQjs7SUFDcEIsMkNBQThCOztJQUM5QiwrQ0FBaUM7O0lBQ2pDLHNDQUF5Qjs7SUFDekIsMENBQTZCOzs7OztJQUU3QixpREFBbUM7Ozs7O0lBQ25DLHVDQUFpQzs7Ozs7SUFDakMsMENBQTRCOzs7OztJQUM1QixvQ0FBaUM7O0lBRWpDLHFDQUEwRTs7SUFDMUUsdUNBQThFOztJQUM5RSxzQ0FBNEU7O0lBc0Y1RSxpREFBK0U7O0lBQy9FLHFDQUFzRDs7Ozs7SUFHcEQsZ0RBQTRDOzs7OztJQUM1QyxvREFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzTW9iaWxlLCBzZXRZZWFyRnJvbTBUbzEwMCwgdmFsaWRhdGVEYXRlUmFuZ2UgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvQ2FsZW5kYXJMYW5nU2VydmljZSB9IGZyb20gJy4vcG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlJztcbmltcG9ydCB7IFBvQ2FsZW5kYXJTZXJ2aWNlIH0gZnJvbSAnLi9wby1jYWxlbmRhci5zZXJ2aWNlJztcblxuY29uc3QgcG9DYWxlbmRhckxvY2FsZURlZmF1bHQgPSAncHQnO1xuY29uc3QgcG9DYWxlbmRhckxvY2FsZXMgPSBbJ3B0JywgJ2VuJywgJ2VzJ107XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBkZSBjYWxlbmTDoXJpbyBkZSB1c28gaW50ZXJub1xuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1jYWxlbmRhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1jYWxlbmRhci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1BvQ2FsZW5kYXJTZXJ2aWNlLCBQb0NhbGVuZGFyTGFuZ1NlcnZpY2UgXVxufSlcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9kYXRlRW5kOiBEYXRlO1xuICBwcml2YXRlIF9kYXRlU3RhcnQ6IERhdGU7XG4gIHByaXZhdGUgX2xvY2FsZTogc3RyaW5nO1xuICBwcml2YXRlIF9zZWxlY3RlZERhdGU/OiBEYXRlO1xuXG4gIGN1cnJlbnRZZWFyOiBudW1iZXI7XG4gIGRheVZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZGlzcGxheURheXM6IEFycmF5PG51bWJlcj47XG4gIGRpc3BsYXlEZWNhZGU6IEFycmF5PG51bWJlcj47XG4gIGRpc3BsYXlGaW5hbERlY2FkZTogbnVtYmVyO1xuICBkaXNwbGF5TW9udGg6IGFueTtcbiAgZGlzcGxheU1vbnRoTnVtYmVyOiBudW1iZXI7XG4gIGRpc3BsYXlNb250aHM6IEFycmF5PGFueT4gPSBBcnJheSgpO1xuICBkaXNwbGF5U3RhcnREZWNhZGU6IG51bWJlcjtcbiAgZGlzcGxheVdlZWREYXlzOiBBcnJheTxhbnk+ID0gQXJyYXkoKTtcbiAgZGlzcGxheVllYXI6IG51bWJlcjtcbiAgbW9udGhWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG4gIG92ZXJsYXlJbnZpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xuICB2aXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG4gIHllYXJWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBjdXJyZW50TW9udGhOdW1iZXI6IG51bWJlcjtcbiAgcHJpdmF0ZSBpc01vYmlsZTogYW55ID0gaXNNb2JpbGU7XG4gIHByaXZhdGUgbGFzdERpc3BsYXk6IHN0cmluZztcbiAgcHJpdmF0ZSB0b2RheTogRGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgQFZpZXdDaGlsZCgnZGF5cycsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiB0cnVlIH0pIGVsRGF5czogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnbW9udGhzJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgZWxNb250aHM6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ3llYXJzJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgZWxZZWFyczogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEYXRhIG3DoXhpbWEgcG9zc8OtdmVsIGRlIHNlciBzZWxlY2lvbmFkYSBubyBjYWxlbmTDoXJpby5cbiAgICovXG4gIEBJbnB1dCgncC1kYXRlLWVuZCcpIHNldCBkYXRlRW5kKHZhbDogRGF0ZSkge1xuICAgIGlmICh2YWwgJiYgdmFsIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgY29uc3QgeWVhciA9IHZhbC5nZXRGdWxsWWVhcigpO1xuICAgICAgY29uc3QgbW9udGggPSB2YWwuZ2V0TW9udGgoKTtcbiAgICAgIGNvbnN0IGRheSA9IHZhbC5nZXREYXRlKCk7XG5cbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCAyMywgNTksIDU5KTtcbiAgICAgIHNldFllYXJGcm9tMFRvMTAwKGRhdGUsIHllYXIpO1xuXG4gICAgICB0aGlzLl9kYXRlRW5kID0gZGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGF0ZUVuZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgZ2V0IGRhdGVFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVFbmQ7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJZGlvbWEgZG8gY2FsZW5kw6FyaW8uXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqICAtIGBwdGBcbiAgICogIC0gYGVuYFxuICAgKiAgLSBgZXNgXG4gICAqL1xuICBASW5wdXQoJ3AtbG9jYWxlJykgc2V0IGxvY2FsZShsb2NhbGU6IHN0cmluZykge1xuICAgIHRoaXMuX2xvY2FsZSA9IHBvQ2FsZW5kYXJMb2NhbGVzLmluY2x1ZGVzKGxvY2FsZSkgPyBsb2NhbGUgOiBwb0NhbGVuZGFyTG9jYWxlRGVmYXVsdDtcbiAgICB0aGlzLmluaXRpYWxpemVMYW5ndWFnZSgpO1xuICB9XG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERhdGEgc2VsZWNpb25hZGEgbm8gY2FsZW5kw6FyaW8uXG4gICAqL1xuICBASW5wdXQoJ3Atc2VsZWN0ZWQtZGF0ZScpIHNldCBzZWxlY3RlZERhdGUoc2VsZWN0ZWREYXRlOiBEYXRlKSB7XG4gICAgdGhpcy5fc2VsZWN0ZWREYXRlICA9IHNlbGVjdGVkRGF0ZSAmJiBzZWxlY3RlZERhdGUgaW5zdGFuY2VvZiBEYXRlID8gc2VsZWN0ZWREYXRlIDogdW5kZWZpbmVkO1xuICB9XG4gIGdldCBzZWxlY3RlZERhdGUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkRGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERhdGEgbcOtbmltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhIG5vIGNhbGVuZMOhcmlvLlxuICAgKi9cbiAgQElucHV0KCdwLWRhdGUtc3RhcnQnKSBzZXQgZGF0ZVN0YXJ0KHZhbDogRGF0ZSkge1xuICAgIGlmICh2YWwgJiYgdmFsIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgY29uc3QgeWVhciA9IHZhbC5nZXRGdWxsWWVhcigpO1xuICAgICAgY29uc3QgbW9udGggPSB2YWwuZ2V0TW9udGgoKTtcbiAgICAgIGNvbnN0IGRheSA9IHZhbC5nZXREYXRlKCk7XG5cbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCAwLCAwLCAwKTtcbiAgICAgIHNldFllYXJGcm9tMFRvMTAwKGRhdGUsIHllYXIpO1xuXG4gICAgICB0aGlzLl9kYXRlU3RhcnQgPSBkYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kYXRlU3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGdldCBkYXRlU3RhcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVTdGFydDtcbiAgfVxuXG4gIEBPdXRwdXQoJ3Atc2VsZWN0ZWQtZGF0ZUNoYW5nZScpIHNlbGVjdGVkRGF0ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0ZT4oKTtcbiAgQE91dHB1dCgncC1zdWJtaXQnKSBzdWJtaXQgPSBuZXcgRXZlbnRFbWl0dGVyPERhdGU+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBwb0NhbGVuZGFyU2VydmljZTogUG9DYWxlbmRhclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwb0NhbGVuZGFyTGFuZ1NlcnZpY2U6IFBvQ2FsZW5kYXJMYW5nU2VydmljZSkge1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5vdmVybGF5SW52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIE9idMOpbSB1bSBhcnJheSBkZSB0b2RvcyBvcyBhbm9zIGRlc3RhIGTDqWNhZGFcbiAgZ2V0QXJyYXlEZWNhZGUoeWVhcikge1xuICAgIHRoaXMuZGlzcGxheURlY2FkZSA9IEFycmF5KCk7XG5cbiAgICBpZiAoeWVhciAlIDEwICE9PSAwKSB7XG4gICAgICB3aGlsZSAoeWVhciAlIDEwICE9PSAwKSB7XG4gICAgICAgIHllYXItLTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy51cGRhdGVEZWNhZGUoeWVhcik7XG4gIH1cblxuICBnZXRCYWNrZ3JvdW5kQ29sb3IoZGlzcGxheVZhbHVlOiBudW1iZXIsIHByb3BlcnR5VmFsdWU6IG51bWJlcikge1xuICAgIHJldHVybiAoZGlzcGxheVZhbHVlID09PSBwcm9wZXJ0eVZhbHVlKSA/ICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1zZWxlY3RlZCcgOiAncG8tY2FsZW5kYXItYm94LWJhY2tncm91bmQnO1xuICB9XG5cbiAgZ2V0RGF5QmFja2dyb3VuZENvbG9yKGRhdGU6IERhdGUpIHtcbiAgICBpZiAodGhpcy5lcXVhbHNEYXRlKGRhdGUsIHRoaXMuc2VsZWN0ZWREYXRlKSkge1xuICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1zZWxlY3RlZCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmVxdWFsc0RhdGUoZGF0ZSwgdGhpcy50b2RheSkpIHtcbiAgICAgIHJldHVybiAncG8tY2FsZW5kYXItYm94LWJhY2tncm91bmQtdG9kYXknO1xuICAgIH0gZWxzZSBpZiAoZGF0ZSkge1xuICAgICAgaWYgKHZhbGlkYXRlRGF0ZVJhbmdlKGRhdGUsIHRoaXMuZGF0ZVN0YXJ0LCB0aGlzLmRhdGVFbmQpKSB7XG4gICAgICAgIHJldHVybiAncG8tY2FsZW5kYXItYm94LWJhY2tncm91bmQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1kaXNhYmxlZCc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBnZXREYXlGb3JlZ3JvdW5kQ29sb3IoZGF0ZTogRGF0ZSkge1xuICAgIGlmICh0aGlzLmVxdWFsc0RhdGUoZGF0ZSwgdGhpcy5zZWxlY3RlZERhdGUpKSB7XG4gICAgICByZXR1cm4gJ3BvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXNlbGVjdGVkJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXF1YWxzRGF0ZShkYXRlLCB0aGlzLnRvZGF5KSkge1xuICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtZm9yZWdyb3VuZC10b2RheSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2YWxpZGF0ZURhdGVSYW5nZShkYXRlLCB0aGlzLmRhdGVTdGFydCwgdGhpcy5kYXRlRW5kKSkge1xuICAgICAgICByZXR1cm4gJ3BvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAncG8tY2FsZW5kYXItYm94LWZvcmVncm91bmQtZGlzYWJsZWQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEZvcmVncm91bmRDb2xvcihkaXNwbGF5VmFsdWU6IG51bWJlciwgcHJvcGVydHlWYWx1ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChkaXNwbGF5VmFsdWUgPT09IHByb3BlcnR5VmFsdWUpID8gJ3BvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXNlbGVjdGVkJyA6ICdwby1jYWxlbmRhci1ib3gtZm9yZWdyb3VuZCc7XG4gIH1cblxuICBnZXRXb3JkTW9udGgoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9DYWxlbmRhckxhbmdTZXJ2aWNlLmdldFdvcmRNb250aCgpO1xuICB9XG5cbiAgZ2V0V29yZFllYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9DYWxlbmRhckxhbmdTZXJ2aWNlLmdldFdvcmRZZWFyKCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuc2VsZWN0ZWREYXRlID8gdGhpcy51cGRhdGVEYXRlKHRoaXMuc2VsZWN0ZWREYXRlKSA6IHRoaXMudXBkYXRlRGF0ZSh0aGlzLnRvZGF5KTtcblxuICAgIHRoaXMuaW5pdGlhbGl6ZUxhbmd1YWdlKCk7XG5cbiAgICB0aGlzLnNlbGVjdERheSgpO1xuXG4gICAgaWYgKHRoaXMuaXNNb2JpbGUoKSkge1xuICAgICAgdGhpcy5vdmVybGF5SW52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGluaXRpYWxpemVMYW5ndWFnZSgpIHtcbiAgICB0aGlzLnBvQ2FsZW5kYXJMYW5nU2VydmljZS5zZXRMYW5ndWFnZSh0aGlzLmxvY2FsZSk7XG4gICAgdGhpcy5kaXNwbGF5V2VlZERheXMgPSB0aGlzLnBvQ2FsZW5kYXJMYW5nU2VydmljZS5nZXRBcnJheVdlZWtEYXlzKCk7XG4gICAgdGhpcy5kaXNwbGF5TW9udGhzID0gdGhpcy5wb0NhbGVuZGFyTGFuZ1NlcnZpY2UuZ2V0QXJyYXlNb250aHMoKTtcbiAgfVxuXG4gIG9uTmV4dE1vbnRoKCkge1xuICAgIGlmICh0aGlzLmRpc3BsYXlNb250aE51bWJlciA8IDExKSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5kaXNwbGF5WWVhciwgdGhpcy5kaXNwbGF5TW9udGhOdW1iZXIgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVEaXNwbGF5KHRoaXMuZGlzcGxheVllYXIgKyAxLCAwKTtcbiAgICB9XG4gIH1cblxuICBvblByZXZNb250aCgpIHtcbiAgICBpZiAodGhpcy5kaXNwbGF5TW9udGhOdW1iZXIgPiAwKSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5kaXNwbGF5WWVhciwgdGhpcy5kaXNwbGF5TW9udGhOdW1iZXIgLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVEaXNwbGF5KHRoaXMuZGlzcGxheVllYXIgLSAxLCAxMSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQW8gc2VsZWNpb25hciB1bWEgZGF0YVxuICBvblNlbGVjdERhdGUoZGF0ZTogRGF0ZSkge1xuICAgIGlmICh2YWxpZGF0ZURhdGVSYW5nZShkYXRlLCB0aGlzLmRhdGVTdGFydCwgdGhpcy5kYXRlRW5kKSkge1xuICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBkYXRlO1xuICAgICAgdGhpcy5zZWxlY3RlZERhdGVDaGFuZ2UuZW1pdChkYXRlKTtcbiAgICAgIHRoaXMuc3VibWl0LmVtaXQoZGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQW8gc2VsZWNpb25hciB1bSBtw6pzXG4gIG9uU2VsZWN0TW9udGgoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSB7XG4gICAgdGhpcy5zZWxlY3REYXkoKTtcbiAgICB0aGlzLnVwZGF0ZURpc3BsYXkoeWVhciwgbW9udGgpO1xuICB9XG5cbiAgLy8gQW8gc2VsZWNpb25hciB1bSBhbm9cbiAgb25TZWxlY3RZZWFyKHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlcikge1xuICAgIC8vIFNlIHZlaW8gZGEgdGVsYSBkZSBzZWxlw6fDo28gZGUgbcOqc1xuICAgIHRoaXMubGFzdERpc3BsYXkgPT09ICdtb250aCcgPyB0aGlzLnNlbGVjdE1vbnRoKCkgOiB0aGlzLnNlbGVjdERheSgpO1xuXG4gICAgdGhpcy5jdXJyZW50WWVhciA9IHllYXI7XG4gICAgdGhpcy51cGRhdGVEaXNwbGF5KHllYXIsIG1vbnRoKTtcbiAgfVxuXG4gIHNlbGVjdERheSgpIHtcbiAgICB0aGlzLmRheVZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMubW9udGhWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy55ZWFyVmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubGFzdERpc3BsYXkgPSAnZGF5JztcbiAgfVxuXG4gIHNlbGVjdE1vbnRoKCkge1xuICAgIHRoaXMuZGF5VmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubW9udGhWaXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnllYXJWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0RGlzcGxheSA9ICdtb250aCc7XG4gIH1cblxuICBzZWxlY3RZZWFyKCkge1xuICAgIHRoaXMuZGF5VmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubW9udGhWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy55ZWFyVmlzaWJsZSA9IHRydWU7XG4gIH1cblxuICBzZXRNb2JpbGVWaXN1YWxpemF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmlzTW9iaWxlKCkgPyAncG8tY2FsZW5kYXIgcG8tY2FsZW5kYXItbW9iaWxlJyA6ICdwby1jYWxlbmRhcic7XG4gIH1cblxuICB1cGRhdGVZZWFyKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5kaXNwbGF5WWVhciArIHZhbHVlLCB0aGlzLmRpc3BsYXlNb250aE51bWJlcik7XG4gIH1cblxuICBwcml2YXRlIGFkZEFsbFllYXJzSW5EZWNhZGUoeWVhcjogbnVtYmVyKSB7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0geWVhcjsgaSA8IHllYXIgKyAxMDsgaSsrKSB7XG4gICAgICB0aGlzLmRpc3BsYXlEZWNhZGUucHVzaChpKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGVxdWFsc0RhdGUoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBkYXRlMS5nZXRGdWxsWWVhcigpID09PSBkYXRlMi5nZXRGdWxsWWVhcigpICYmXG4gICAgICAgIGRhdGUxLmdldE1vbnRoKCkgPT09IGRhdGUyLmdldE1vbnRoKCkgJiZcbiAgICAgICAgZGF0ZTEuZ2V0RGF0ZSgpID09PSBkYXRlMi5nZXREYXRlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZURhdGUoZGF0ZTogRGF0ZSkge1xuICAgIHRoaXMuY3VycmVudE1vbnRoTnVtYmVyID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHRoaXMuY3VycmVudFllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgdGhpcy51cGRhdGVEaXNwbGF5KHRoaXMuY3VycmVudFllYXIsIHRoaXMuY3VycmVudE1vbnRoTnVtYmVyKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlRGVjYWRlKHllYXI6IG51bWJlcikge1xuICAgIHRoaXMuYWRkQWxsWWVhcnNJbkRlY2FkZSh5ZWFyKTtcbiAgICB0aGlzLmRpc3BsYXlTdGFydERlY2FkZSA9IHllYXI7XG4gICAgdGhpcy5kaXNwbGF5RmluYWxEZWNhZGUgPSB5ZWFyICsgOTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlRGlzcGxheSh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpIHtcbiAgICBjb25zdCBjYWxlbmRhckFycmF5ID0gdGhpcy5wb0NhbGVuZGFyU2VydmljZS5tb250aERheXMoeWVhciwgbW9udGgpO1xuICAgIHRoaXMuZGlzcGxheURheXMgPSBbXS5jb25jYXQuYXBwbHkoW10sIGNhbGVuZGFyQXJyYXkpO1xuICAgIHRoaXMuZGlzcGxheU1vbnRoTnVtYmVyID0gbW9udGg7XG4gICAgdGhpcy5kaXNwbGF5TW9udGggPSB0aGlzLmRpc3BsYXlNb250aHNbbW9udGhdO1xuICAgIHRoaXMuZGlzcGxheVllYXIgPSB5ZWFyO1xuICAgIHRoaXMuZ2V0QXJyYXlEZWNhZGUoeWVhcik7XG4gIH1cblxufVxuIl19