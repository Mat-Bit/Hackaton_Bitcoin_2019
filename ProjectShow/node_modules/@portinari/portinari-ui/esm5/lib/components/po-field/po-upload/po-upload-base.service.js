/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';
var PoUploadBaseService = /** @class */ (function () {
    function PoUploadBaseService(http) {
        this.http = http;
        this.formField = 'files';
        this.requests = [];
    }
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    PoUploadBaseService.prototype.upload = /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    function (url, files, tOnUpload, uploadCallback, successCallback, errorCallback) {
        /** @type {?} */
        var filesLength = files.length;
        /** @type {?} */
        var uploadEvent = {
            data: {},
            file: null
        };
        for (var i = 0; i < filesLength; i++) {
            /** @type {?} */
            var formData = new FormData();
            /** @type {?} */
            var file = files[i];
            /** @type {?} */
            var fileName = file.rawFile.name;
            formData.append(this.formField, file.rawFile, fileName);
            // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
            if (tOnUpload) {
                uploadEvent['file'] = file;
                tOnUpload.emit(uploadEvent);
                formData.append('data', JSON.stringify(uploadEvent.data));
            }
            this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);
        }
    };
    /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    PoUploadBaseService.prototype.sendFile = /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    function (url, file, formData, uploadCallback, successCallback, errorCallback) {
        var _this = this;
        /** @type {?} */
        var request = this.getRequest(url, formData).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                _this.addRequest(file, request);
                /** @type {?} */
                var percentDone = Math.round(100 * event.loaded / event.total);
                uploadCallback(file, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // Sucesso, arquivos enviados.
                successCallback(file, event);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            errorCallback(file, err);
        }));
    };
    /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    PoUploadBaseService.prototype.getRequest = /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    function (url, formData) {
        /** @type {?} */
        var req = new HttpRequest('POST', url, formData, {
            reportProgress: true
        });
        return this.http.request(req);
    };
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    PoUploadBaseService.prototype.stopRequestByFile = /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    function (file, callback) {
        /** @type {?} */
        var requestObj = this.requests.find((/**
         * @param {?} req
         * @return {?}
         */
        function (req) {
            return req.file.uid === file.uid;
        }));
        if (requestObj) {
            /** @type {?} */
            var request = requestObj.request;
            request.unsubscribe();
            this.removeRequest(requestObj);
            callback();
        }
    };
    /**
     * @param {?} requestObj
     * @return {?}
     */
    PoUploadBaseService.prototype.removeRequest = /**
     * @param {?} requestObj
     * @return {?}
     */
    function (requestObj) {
        /** @type {?} */
        var index = this.requests.indexOf(requestObj);
        this.requests.splice(index, 1);
    };
    /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    PoUploadBaseService.prototype.addRequest = /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    function (file, request) {
        /** @type {?} */
        var hasRequest = this.requests.some((/**
         * @param {?} req
         * @return {?}
         */
        function (req) {
            return req.file.uid === file.uid;
        }));
        if (!hasRequest) {
            this.requests.push({ file: file, request: request });
        }
    };
    PoUploadBaseService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoUploadBaseService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoUploadBaseService;
}());
export { PoUploadBaseService };
if (false) {
    /** @type {?} */
    PoUploadBaseService.prototype.formField;
    /** @type {?} */
    PoUploadBaseService.prototype.requests;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWJhc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tdXBsb2FkL3BvLXVwbG9hZC1iYXNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFxQixXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFNL0c7SUFNRSw2QkFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUhwQyxjQUFTLEdBQVcsT0FBTyxDQUFDO1FBQzVCLGFBQVEsR0FBZSxFQUFFLENBQUM7SUFFYyxDQUFDO0lBRXpDOzs7Ozs7Ozs7T0FTRzs7Ozs7Ozs7Ozs7O0lBQ0ksb0NBQU07Ozs7Ozs7Ozs7O0lBQWIsVUFDRSxHQUFXLEVBQ1gsS0FBMEIsRUFDMUIsU0FBNEIsRUFDNUIsY0FBNkQsRUFDN0QsZUFBeUQsRUFDekQsYUFBdUQ7O1lBRWpELFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTTs7WUFDMUIsV0FBVyxHQUFRO1lBQ3ZCLElBQUksRUFBRSxFQUFFO1lBQ1IsSUFBSSxFQUFFLElBQUk7U0FDWDtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2dCQUM5QixRQUFRLEdBQWEsSUFBSSxRQUFRLEVBQUU7O2dCQUNuQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzs7Z0JBQ2YsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSTtZQUVsQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMs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SSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ25DLENBQUMsRUFBQztRQUVGLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksTUFBQSxFQUFFLE9BQU8sU0FBQSxFQUFDLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7O2dCQS9HRixVQUFVOzs7O2dCQU5GLFVBQVU7O0lBdUhuQiwwQkFBQztDQUFBLEFBakhELElBaUhDO1NBaEhZLG1CQUFtQjs7O0lBRTlCLHdDQUE0Qjs7SUFDNUIsdUNBQTBCOzs7OztJQUVkLG1DQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEV2ZW50VHlwZSwgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IFBvVXBsb2FkRmlsZSB9IGZyb20gJy4vcG8tdXBsb2FkLWZpbGUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvVXBsb2FkQmFzZVNlcnZpY2Uge1xuXG4gIGZvcm1GaWVsZDogc3RyaW5nID0gJ2ZpbGVzJztcbiAgcmVxdWVzdHM6IEFycmF5PGFueT4gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIC8qKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgZW52aWFyIG9zIGFycXVpdm9zIGFvIHNlcnZpZG9yLCBjb25mb3JtZSBvIHBhcsOibWV0cm8gVVJMLlxuICAgKlxuICAgKiBAcGFyYW0gdXJsIFVSTCBkYSByZXF1aXNpw6fDo28gYSBzZXIgZWZldHVhZGEuXG4gICAqIEBwYXJhbSBmaWxlcyBBcnF1aXZvcyBhIHNlcmVtIGVudmlhZG9zLlxuICAgKiBAcGFyYW0gdE9uVXBsb2FkIEZ1bsOnw6NvIGEgc2VyIGV4ZWN1dGFkYSBxdWFuZG8gbyBhcnF1aXZvIGZvciBlbnZpYWRvIGFvIHNlcnZpZG9yLlxuICAgKiBAcGFyYW0gdXBsb2FkQ2FsbGJhY2sgRnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBlbnF1YW50byBvcyBhcnF1aXZvcyBlc3RpdmVyZW0gc2VuZG8gZW52aWFkb3MuXG4gICAqIEBwYXJhbSBzdWNjZXNzQ2FsbGJhY2sgRnVuw6fDo28gYSBzZXIgZXhlY3V0YWRhIHF1YW5kbyBhIHJlcXVpc2nDp8OjbyBmb3IgZWZldHVhZGEgY29tIHN1Y2Vzc28uXG4gICAqIEBwYXJhbSBlcnJvckNhbGxiYWNrIEZ1bsOnw6NvIGEgc2VyIGV4ZWN1dGFkYSBxdWFuZG8gYSByZXF1aXNpw6fDo28gZm9pIGVmZXR1YWRhIGNvbSBzdWNlc3NvLlxuICAgKi9cbiAgcHVibGljIHVwbG9hZChcbiAgICB1cmw6IHN0cmluZyxcbiAgICBmaWxlczogQXJyYXk8UG9VcGxvYWRGaWxlPixcbiAgICB0T25VcGxvYWQ6IEV2ZW50RW1pdHRlcjxhbnk+LFxuICAgIHVwbG9hZENhbGxiYWNrOiAoZmlsZTogUG9VcGxvYWRGaWxlLCBwZXJjZW50OiBudW1iZXIpID0+IHZvaWQsXG4gICAgc3VjY2Vzc0NhbGxiYWNrOiAoZmlsZTogUG9VcGxvYWRGaWxlLCBldmVudDogYW55KSA9PiB2b2lkLFxuICAgIGVycm9yQ2FsbGJhY2s6IChmaWxlOiBQb1VwbG9hZEZpbGUsIGV2ZW50OiBhbnkpID0+IHZvaWQpIHtcblxuICAgIGNvbnN0IGZpbGVzTGVuZ3RoID0gZmlsZXMubGVuZ3RoO1xuICAgIGNvbnN0IHVwbG9hZEV2ZW50OiBhbnkgPSB7XG4gICAgICBkYXRhOiB7fSxcbiAgICAgIGZpbGU6IG51bGxcbiAgICB9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlc0xlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmb3JtRGF0YTogRm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGNvbnN0IGZpbGUgPSBmaWxlc1tpXTtcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gZmlsZS5yYXdGaWxlLm5hbWU7XG5cbiAgICAgIGZvcm1EYXRhLmFwcGVuZCh0aGlzLmZvcm1GaWVsZCwgZmlsZS5yYXdGaWxlLCBmaWxlTmFtZSk7XG5cbiAgICAgIC8vIEZ1bsOnw6NvIHVwbG9hZCwgb25kZSBvIGRlc2Vudm9sdmVkb3IgcG9kZSBlbnZpYXIgZGFkb3MgcGFyYSBhIHJlcXVpc2nDp8Ojby5cbiAgICAgIGlmICh0T25VcGxvYWQpIHtcbiAgICAgICAgdXBsb2FkRXZlbnRbJ2ZpbGUnXSA9IGZpbGU7XG4gICAgICAgIHRPblVwbG9hZC5lbWl0KHVwbG9hZEV2ZW50KTtcblxuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2RhdGEnLCBKU09OLnN0cmluZ2lmeSh1cGxvYWRFdmVudC5kYXRhKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2VuZEZpbGUodXJsLCBmaWxlLCBmb3JtRGF0YSwgdXBsb2FkQ2FsbGJhY2ssIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNlbmRGaWxlKFxuICAgIHVybDogc3RyaW5nLFxuICAgIGZpbGU6IFBvVXBsb2FkRmlsZSxcbiAgICBmb3JtRGF0YTogRm9ybURhdGEsXG4gICAgdXBsb2FkQ2FsbGJhY2s6IChmaWxlOiBQb1VwbG9hZEZpbGUsIHBlcmNlbnQ6IG51bWJlcikgPT4gdm9pZCxcbiAgICBzdWNjZXNzQ2FsbGJhY2s6IChmaWxlOiBQb1VwbG9hZEZpbGUsIGV2ZW50OiBhbnkpID0+IHZvaWQsXG4gICAgZXJyb3JDYWxsYmFjazogKGZpbGU6IFBvVXBsb2FkRmlsZSwgZXZlbnQ6IGFueSkgPT4gdm9pZCkge1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuZ2V0UmVxdWVzdCh1cmwsIGZvcm1EYXRhKS5zdWJzY3JpYmUoZXZlbnQgPT4ge1xuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gSHR0cEV2ZW50VHlwZS5VcGxvYWRQcm9ncmVzcykge1xuICAgICAgICB0aGlzLmFkZFJlcXVlc3QoZmlsZSwgcmVxdWVzdCk7XG5cbiAgICAgICAgY29uc3QgcGVyY2VudERvbmUgPSBNYXRoLnJvdW5kKDEwMCAqIGV2ZW50LmxvYWRlZCAvIGV2ZW50LnRvdGFsKTtcbiAgICAgICAgdXBsb2FkQ2FsbGJhY2soZmlsZSwgcGVyY2VudERvbmUpO1xuXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlKSB7XG4gICAgICAgIC8vIFN1Y2Vzc28sIGFycXVpdm9zIGVudmlhZG9zLlxuICAgICAgICBzdWNjZXNzQ2FsbGJhY2soZmlsZSwgZXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgKGVycjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgIGVycm9yQ2FsbGJhY2soZmlsZSwgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRSZXF1ZXN0KHVybDogc3RyaW5nLCBmb3JtRGF0YTogRm9ybURhdGEpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHJlcSA9IG5ldyBIdHRwUmVxdWVzdCgnUE9TVCcsIHVybCwgZm9ybURhdGEsIHtcbiAgICAgIHJlcG9ydFByb2dyZXNzOiB0cnVlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLnJlcXVlc3QocmVxKTtcbiAgfVxuXG4gIHB1YmxpYyBzdG9wUmVxdWVzdEJ5RmlsZShmaWxlOiBhbnksIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgY29uc3QgcmVxdWVzdE9iaiA9IHRoaXMucmVxdWVzdHMuZmluZChyZXEgPT4ge1xuICAgICAgcmV0dXJuIHJlcS5maWxlLnVpZCA9PT0gZmlsZS51aWQ7XG4gICAgfSk7XG5cbiAgICBpZiAocmVxdWVzdE9iaikge1xuICAgICAgY29uc3QgcmVxdWVzdCA9IHJlcXVlc3RPYmoucmVxdWVzdDtcbiAgICAgIHJlcXVlc3QudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMucmVtb3ZlUmVxdWVzdChyZXF1ZXN0T2JqKTtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbW92ZVJlcXVlc3QocmVxdWVzdE9iajogYW55KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnJlcXVlc3RzLmluZGV4T2YocmVxdWVzdE9iaik7XG4gICAgdGhpcy5yZXF1ZXN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG5cbiAgcHVibGljIGFkZFJlcXVlc3QoZmlsZTogUG9VcGxvYWRGaWxlLCByZXF1ZXN0OiBTdWJzY3JpcHRpb24pIHtcbiAgICBjb25zdCBoYXNSZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0cy5zb21lKHJlcSA9PiB7XG4gICAgICByZXR1cm4gcmVxLmZpbGUudWlkID09PSBmaWxlLnVpZDtcbiAgICB9KTtcblxuICAgIGlmICghaGFzUmVxdWVzdCkge1xuICAgICAgdGhpcy5yZXF1ZXN0cy5wdXNoKHtmaWxlLCByZXF1ZXN0fSk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==