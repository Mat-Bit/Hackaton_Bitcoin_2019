/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt, uuid } from './../../../utils/util';
import { requiredFailed } from '../validators';
/** @type {?} */
var poCheckboxGroupColumnsDefaultLength = 6;
/** @type {?} */
var poCheckboxGroupColumnsTotalLength = 12;
/**
 * \@description
 *
 * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**Portinari Radio Group**](/documentation/po-radio-group).
 *
 * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['PO', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `p-indeterminate` como `true`.
 *
 * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  PO: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
var PoCheckboxGroupBaseComponent = /** @class */ (function () {
    function PoCheckboxGroupBaseComponent() {
        this.checkedOptions = {};
        this.checkedOptionsList = [];
        this.mdColumns = poCheckboxGroupColumnsDefaultLength;
        this._columns = poCheckboxGroupColumnsDefaultLength;
        this._disabled = false;
        this._indeterminate = false;
        this._required = false;
        // Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do campo
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
         *
         * @default `2`
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
         *
         * \@default `2`
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var columns = convertToInt(value, poCheckboxGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita todos os itens do checkbox.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita todos os itens do checkbox.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "indeterminate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._indeterminate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * \@default `false`
         * @param {?} indeterminate
         * @return {?}
         */
        function (indeterminate) {
            this._indeterminate = convertToBoolean(indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * @optional
         *
         * @description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
         */
        set: /**
         * \@optional
         *
         * \@description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = Array.isArray(value) ? value : [];
            this.removeDuplicatedOptions();
            this.setCheckboxGroupOptionsView(this.options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.changeValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.checkIndeterminate();
        if (this.propagateChange) {
            this.propagateChange(value);
        }
        else {
            this.ngModelChange.emit(value);
        }
        this.change.emit(value);
    };
    /**
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.checkIndeterminate = /**
     * @return {?}
     */
    function () {
        return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.checkOption = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this._disabled && !value.disabled) {
            this.checkOptionModel(value);
            this.changeValue();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} optionsModel
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.writeValue = /**
     * @param {?} optionsModel
     * @return {?}
     */
    function (optionsModel) {
        if (optionsModel && this.checkedOptions !== optionsModel) {
            this.generateCheckOptions(optionsModel);
        }
        else {
            this.checkedOptionsList = [];
            this.checkedOptions = {};
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) || this.isInvalidIndeterminate()) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.checkColumnsRange = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    /**
     * @private
     * @param {?} optionChecked
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.checkOptionModel = /**
     * @private
     * @param {?} optionChecked
     * @return {?}
     */
    function (optionChecked) {
        this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
        if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
            this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
        }
        else if (!this.indeterminate) {
            this.checkedOptionsList.push(optionChecked.value);
        }
    };
    /**
     * @private
     * @param {?} optionsModel
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.generateCheckOptions = /**
     * @private
     * @param {?} optionsModel
     * @return {?}
     */
    function (optionsModel) {
        var _this = this;
        this.checkedOptions = {};
        if (optionsModel instanceof Array) {
            this.checkedOptionsList = optionsModel;
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                _this.checkedOptions[option.value] = optionsModel.includes(option.value);
            }));
        }
        else {
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                _this.checkedOptions = optionsModel;
            }));
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.getGridSystemColumns = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var gridSystemColumns = poCheckboxGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poCheckboxGroupColumnsDefaultLength;
    };
    /**
     * @private
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.isInvalidIndeterminate = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.indeterminate && this.required && this.checkedOptions) {
            return ((/** @type {?} */ (Object))).values(this.checkedOptions).every((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value === false; }));
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.removeDuplicatedOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.options.forEach((/**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
        function (option, index) {
            /** @type {?} */
            var duplicatedIndex = _this.options.findIndex((/**
             * @param {?} optionFind
             * @return {?}
             */
            function (optionFind) { return optionFind.value === option.value; })) === index;
            if (!duplicatedIndex) {
                _this.options.splice(_this.options.indexOf(option), 1);
            }
        }));
    };
    /**
     * @private
     * @param {?} optionsList
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.setCheckboxGroupOptionsView = /**
     * @private
     * @param {?} optionsList
     * @return {?}
     */
    function (optionsList) {
        this.checkboxGroupOptionsView = optionsList.map((/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            return tslib_1.__assign({}, option, { id: uuid() });
        }));
    };
    PoCheckboxGroupBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        columns: [{ type: Input, args: ['p-columns',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        help: [{ type: Input, args: ['p-help',] }],
        indeterminate: [{ type: Input, args: ['p-indeterminate',] }],
        label: [{ type: Input, args: ['p-label',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        options: [{ type: Input, args: ['p-options',] }],
        required: [{ type: Input, args: ['p-required',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoCheckboxGroupBaseComponent;
}());
export { PoCheckboxGroupBaseComponent };
if (false) {
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.checkboxGroupOptionsView;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.checkedOptions;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.checkedOptionsList;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.mdColumns;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.propagateChange;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.validatorChange;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._indeterminate;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._required;
    /**
     * Nome dos checkboxes
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.name;
    /**
     * Texto de apoio do campo
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.help;
    /**
     * Label do campo
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.label;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.optional;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.ngModelChange;
    /**
     * Evento disparado ao alterar valor do campo
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.change;
}
//# sourceMappingURL=data:application/json;base64,