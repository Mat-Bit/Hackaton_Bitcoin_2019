/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions, sortOptionsByProperty, poLocaleDefault } from '../../../utils/util';
import { requiredFailed } from './../validators';
import { PoMultiselectFilterMode } from './po-multiselect-filter-mode.enum';
/** @type {?} */
export var poMultiselectLiteralsDefault = {
    en: (/** @type {?} */ ({
        noData: 'No data found',
        placeholderSearch: 'Search'
    })),
    es: (/** @type {?} */ ({
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca'
    })),
    pt: (/** @type {?} */ ({
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar'
    })),
    ru: (/** @type {?} */ ({
        noData: 'Данные не найдены',
        placeholderSearch: 'искать'
    }))
};
/**
 * \@description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 * @abstract
 */
var PoMultiselectBaseComponent = /** @class */ (function () {
    function PoMultiselectBaseComponent() {
        this._autofocus = false;
        this._disabled = false;
        this._filterMode = PoMultiselectFilterMode.startsWith;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this.readyToValidation = false;
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         */
        this.placeholderSearch = '';
        /**
         * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poMultiselectLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-multiselect
         *   [p-literals]="customLiterals">
         * </po-po-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-multiselect
         *   [p-literals]="customLiterals">
         * </po-po-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poMultiselectLiteralsDefault[poLocaleDefault], poMultiselectLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poMultiselectLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = (/** @type {?} */ (required)) === '' ? true : convertToBoolean(required);
            this.updateModelToValidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
            this.updateModelToValidate();
            this.updateVisibleItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "hideSearch", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSearch;
        },
        /**
         * @optional
         *
         * @description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
         *
         * \@default `false`
         * @param {?} hideSearch
         * @return {?}
         */
        function (hideSearch) {
            this._hideSearch = (/** @type {?} */ (hideSearch)) === '' ? true : convertToBoolean(hideSearch);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * @description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         */
        set: /**
         * \@description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = options;
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "sort", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sort;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * \@default `false`
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this._sort = (/** @type {?} */ (sort)) === '' ? true : convertToBoolean(sort);
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "autofocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autofocus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * \@default `false`
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._autofocus = convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "filterMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: PoMultiselectFilterMode
         *
         * @default `startsWith`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: PoMultiselectFilterMode
         *
         * \@default `startsWith`
         * @param {?} filterMode
         * @return {?}
         */
        function (filterMode) {
            this._filterMode = (filterMode in PoMultiselectFilterMode) ? filterMode : PoMultiselectFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = PoMultiselectFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = PoMultiselectFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = PoMultiselectFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateList(this.options);
    };
    /**
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        // Seta esta variável para indicar que a tela já foi carregada e podem ser aplicadas as validações.
        // A partir desse momento, toda vez que uma propriedade que interfere na validação, for alterada, o model será atualizado
        // para que o campo seja validado novamente.
        this.readyToValidation = true;
    };
    /**
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.validAndSortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.setUndefinedLabels = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            if (!option['label']) {
                option.label = option.value;
            }
        }));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateList = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    };
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateModelToValidate = 
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.readyToValidation) {
            // Este timeout é necessário para quando for atualizado o model e uma propriedade do Datepicker ao mesmo tempo.
            // Caso contrário, o writeValue não é disparado, não atualizando o model do componente.
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.callOnChange(_this.selectedOptions);
            }));
        }
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.callOnChange = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.eventChange = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.getValuesFromOptions = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.value; })) : [];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.getLabelByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var index = this.options.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.value === value; }));
        return this.options[index].label;
    };
    /**
     * @param {?} selectedValues
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.changeItems = /**
     * @param {?} selectedValues
     * @return {?}
     */
    function (selectedValues) {
        this.updateSelectedOptions(selectedValues);
        this.callOnChange(this.selectedOptions);
    };
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.searchByLabel = /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            /** @type {?} */
            var newOptions_1 = [];
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (option.label && _this.compareMethod(search, option, filterMode)) {
                    newOptions_1.push(option);
                }
            }));
            this.visibleOptionsDropdown = newOptions_1;
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.compareMethod = /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    function (search, option, filterMode) {
        switch (filterMode) {
            case PoMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoMultiselectFilterMode.contains:
                return this.contains(search, option);
            case PoMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.startsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.contains = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.endsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        return null;
    };
    /**
     * @param {?} values
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateSelectedOptions = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        this.selectedOptions = [];
        values.forEach((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (option.value === value) {
                    _this.selectedOptions.push(option);
                }
            }));
        }));
        this.updateVisibleItems();
    };
    /**
     * @param {?} values
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.writeValue = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        if (!values) {
            values = [];
            this.callOnChange([]);
        }
        // Validar se todos os items existem entre os options, senão atualizar o model
        this.updateSelectedOptions(values);
        if (this.selectedOptions.length < values.length) {
            this.callOnChange(this.selectedOptions);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    PoMultiselectBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        placeholderSearch: [{ type: Input, args: ['p-placeholder-search',] }],
        name: [{ type: Input, args: ['name',] }],
        required: [{ type: Input, args: ['p-required',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        hideSearch: [{ type: Input, args: ['p-hide-search',] }],
        options: [{ type: Input, args: ['p-options',] }],
        sort: [{ type: Input, args: ['p-sort',] }],
        autofocus: [{ type: Input, args: ['p-focus',] }],
        filterMode: [{ type: Input, args: ['p-filter-mode',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoMultiselectBaseComponent;
}());
export { PoMultiselectBaseComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._autofocus;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._hideSearch;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.lastLengthModel;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.onModelChange;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.readyToValidation;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.selectedOptions;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.visibleOptionsDropdown;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.visibleDisclaimers;
    /**
     * Label no componente.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.optional;
    /**
     * Mensagem apresentada enquanto o campo estiver vazio.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.placeholder;
    /**
     * \@description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * \@default `Buscar`
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.placeholderSearch;
    /**
     * Nome do componente.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.name;
    /**
     * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.change;
    /**
     * @type {?}
     * @protected
     */
    PoMultiselectBaseComponent.prototype.clickOutListener;
    /**
     * @type {?}
     * @protected
     */
    PoMultiselectBaseComponent.prototype.resizeListener;
    /**
     * @abstract
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateVisibleItems = function () { };
}
//# sourceMappingURL=data:application/json;base64,