/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChild, ElementRef, forwardRef, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';
import { removeDuplicatedOptions } from '../../../utils/util';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoComboBaseComponent } from './po-combo-base.component';
import { PoComboFilterMode } from './po-combo-filter-mode.enum';
import { PoComboFilterService } from './po-combo-filter.service';
import { PoComboOptionTemplateDirective } from './po-combo-option-template/po-combo-option-template.directive';
/** @type {?} */
var poComboContainerOffset = 8;
/** @type {?} */
var poComboContainerPositionDefault = 'bottom';
/**
 * \@docsExtends PoComboBaseComponent
 *
 * \@description
 * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * \@example
 *
 * <example name="po-combo-basic" title="Portinari Combo Basic">
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-labs" title="Portinari Combo Labs">
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-scheduling" title="Portinari Combo - Scheduling">
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-transfer" title="Portinari Combo - Banking Transfer">
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes" title="Portinari Combo - Heroes">
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes-reactive-form" title="Portinari Combo - Heroes Reactive Form">
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-hotels" title="Portinari Combo - Booking Hotel">
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.service.ts"> </file>
 * </example>
 */
var PoComboComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoComboComponent, _super);
    function PoComboComponent(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.differs = differs;
        _this.defaultService = defaultService;
        _this.renderer = renderer;
        _this.changeDetector = changeDetector;
        _this.controlPosition = controlPosition;
        _this.sanitized = sanitized;
        _this._isServerSearching = false;
        _this.comboIcon = 'po-icon-arrow-down';
        _this.comboOpen = false;
        _this.isProcessingGetObjectByValue = false;
        _this.scrollTop = 0;
        _this.shouldMarkLetters = true;
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            _this.adjustContainerPosition();
        });
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(PoComboComponent.prototype, "isServerSearching", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isServerSearching;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._isServerSearching = value;
                this.changeDetector.detectChanges();
                this.setContainerPosition();
                this.initializeListeners();
            }
            else {
                this._isServerSearching = value;
                this.removeListeners();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoComboComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
        }
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     * @return {?}
     */
    PoComboComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.inputElement.nativeElement.focus();
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PoComboComponent.prototype.onKeyDown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode;
        /** @type {?} */
        var inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && key === PoKeyCodeEnum.tab && inputValue) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (key === PoKeyCodeEnum.arrowUp || key === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.comboOpen) {
                if (key === PoKeyCodeEnum.arrowUp) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (key === PoKeyCodeEnum.tab || key === PoKeyCodeEnum.esc) {
            if (key === PoKeyCodeEnum.esc && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            return;
        }
        // Tecla "enter"
        if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            /** @type {?} */
            var isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            this.updateComboList();
            return;
        }
        if (key === PoKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PoComboComponent.prototype.onKeyUp = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode || event.which;
        /** @type {?} */
        var inputValue = event.target.value;
        /** @type {?} */
        var isValidKey = (key !== PoKeyCodeEnum.arrowUp && key !== PoKeyCodeEnum.arrowDown && key !== PoKeyCodeEnum.enter);
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.options, this.filterMode);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                /** @type {?} */
                var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList(tslib_1.__spread(this.cacheOptions));
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.initInputObservable = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.service) {
            /** @type {?} */
            var keyupObservable = fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.isValidCharacterToSearch(e.keyCode); })), map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.currentTarget.value; })), distinctUntilChanged(), tap((/**
             * @return {?}
             */
            function () {
                _this.shouldMarkLetters = false;
            })), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value.length >= _this.filterMinlength || !value) {
                    _this.controlApplyFilter(value);
                }
            }));
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.controlApplyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
            this.applyFilter(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.applyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.controlComboVisibility(false);
        this.isServerSearching = true;
        /** @type {?} */
        var param = { property: this.fieldLabel, value: value };
        this.filterSubscription = this.service.getFilteredData(param, this.filterParams)
            .subscribe((/**
         * @param {?} items
         * @return {?}
         */
        function (items) { return _this.setOptionsByApplyFilter(value, items); }));
    };
    /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    PoComboComponent.prototype.setOptionsByApplyFilter = /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    function (value, items) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.options = items;
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.options;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.getObjectByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (!this.selectedValue) {
            this.isProcessingGetObjectByValue = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams)
                .subscribe((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.updateOptionByFilteredValue(item); }));
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoComboComponent.prototype.updateOptionByFilteredValue = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout((/**
         * @return {?}
         */
        function () { _this.isProcessingGetObjectByValue = false; }), this.debounceTime);
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.selectPreviousOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.selectNextOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var index = this.changeOnEnter ? 1 : 0;
            /** @type {?} */
            var visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.toggleComboVisibility = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.applyFilterInFirstClick = /**
     * @return {?}
     */
    function () {
        if (this.isFirstFilter && !this.selectedValue) {
            this.applyFilter('');
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    PoComboComponent.prototype.controlComboVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        toOpen ? this.open() : this.close();
    };
    /**
     * @param {?} option
     * @param {?=} event
     * @return {?}
     */
    PoComboComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @param {?=} event
     * @return {?}
     */
    function (option, event) {
        /** @type {?} */
        var inputValue = this.getInputValue();
        /** @type {?} */
        var isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);
        if (event) {
            event.stopPropagation();
        }
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        this.updateComboList([tslib_1.__assign({}, this.selectedView)]);
        this.previousSearchValue = this.selectedView.label;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoComboComponent.prototype.scrollTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
        this.setScrollTop(scrollTop);
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.getInputValue = /**
     * @return {?}
     */
    function () {
        return this.inputElement.nativeElement.value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.setInputValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputElement.nativeElement.value = value;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoComboComponent.prototype.wasClickedOnToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.comboOpen &&
            !this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            this.updateComboList();
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                this.applyFilter('');
            }
        }
    };
    /**
     * @param {?} label
     * @return {?}
     */
    PoComboComponent.prototype.getLabelFormatted = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        /** @type {?} */
        var format = label;
        if (this.isFiltering ||
            (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {
            /** @type {?} */
            var labelInput = this.getInputValue().toString().toLowerCase();
            /** @type {?} */
            var labelLowerCase = label.toLowerCase();
            /** @type {?} */
            var openTagBold = '<span class="po-font-text-large-bold">';
            /** @type {?} */
            var closeTagBold = '</span>';
            /** @type {?} */
            var startString = void 0;
            /** @type {?} */
            var middleString = void 0;
            /** @type {?} */
            var endString = void 0;
            switch (this.filterMode) {
                case PoComboFilterMode.startsWith:
                case PoComboFilterMode.contains:
                    startString = label.substring(0, labelLowerCase.indexOf(labelInput));
                    middleString = label.substring(labelLowerCase.indexOf(labelInput), labelLowerCase.indexOf(labelInput) + labelInput.length);
                    endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);
                    format = startString + openTagBold + middleString + closeTagBold + endString;
                    break;
                case PoComboFilterMode.endsWith:
                    startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));
                    middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));
                    format = startString + openTagBold + middleString + closeTagBold;
                    break;
            }
        }
        return this.safeHtml(format);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.safeHtml = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    PoComboComponent.prototype.isValidCharacterToSearch = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.searchOnEnter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.adjustContainerPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.adjustPosition(poComboContainerPositionDefault);
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.close = /**
     * @private
     * @return {?}
     */
    function () {
        this.comboOpen = false;
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-down';
        this.removeListeners();
        this.isFiltering = false;
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.removeListeners();
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnToggle(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.adjustContainerPosition(); }), 250);
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.open = /**
     * @private
     * @return {?}
     */
    function () {
        this.comboOpen = true;
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-up';
        this.initializeListeners();
        this.inputElement.nativeElement.focus();
        this.scrollTo(this.getIndexSelectedView());
        this.setContainerPosition();
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.setContainerPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    };
    /**
     * @private
     * @param {?} scrollTop
     * @return {?}
     */
    PoComboComponent.prototype.setScrollTop = /**
     * @private
     * @param {?} scrollTop
     * @return {?}
     */
    function (scrollTop) {
        if (this.contentElement) {
            this.contentElement.nativeElement.scrollTop = scrollTop;
        }
    };
    PoComboComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-combo',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{icon}}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inputElement\n      class=\"po-input po-combo-input\"\n      [class.po-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <span #iconArrow\n        class=\"po-icon po-field-icon {{ comboIcon }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [class.po-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\">\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\">\n    </ng-container>\n\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"po-combo-container-loading\">\n    <po-loading></po-loading>\n  </div>\n</ng-template>\n\n<ng-template #optionsTemplate>\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate ; else noDataTemplate\">\n  </ng-container>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement class=\"po-combo-container-content\">\n    <li *ngFor=\"let option of visibleOptions\"\n      [class.po-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"onOptionClick(option, $event)\">\n      <a class=\"po-combo-item\">\n\n        <ng-container *ngIf=\"comboOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n        \n        <ng-template #defaultOptionTemplate>\n          <span [innerHTML]=\"getLabelFormatted(option?.label)\"></span>\n        </ng-template>\n\n        <ng-template #optionTemplate\n          [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n          [ngTemplateOutletContext]=\"{$implicit: option}\">\n        </ng-template>\n\n      </a>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"po-combo-container-no-data\">\n    <div class=\"po-combo-no-data po-text-center\">\n      <span>\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                    providers: [
                        PoComboFilterService,
                        PoControlPositionService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoComboComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoComboComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IterableDiffers },
        { type: PoComboFilterService },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: PoControlPositionService },
        { type: DomSanitizer }
    ]; };
    PoComboComponent.propDecorators = {
        comboOptionTemplate: [{ type: ContentChild, args: [PoComboOptionTemplateDirective, { static: true },] }],
        containerElement: [{ type: ViewChild, args: ['containerElement', { read: ElementRef, static: false },] }],
        contentElement: [{ type: ViewChild, args: ['contentElement', { read: ElementRef, static: false },] }],
        iconElement: [{ type: ViewChild, args: ['iconArrow', { read: ElementRef, static: true },] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef, static: true },] }]
    };
    return PoComboComponent;
}(PoComboBaseComponent));
export { PoComboComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype._isServerSearching;
    /** @type {?} */
    PoComboComponent.prototype.comboIcon;
    /** @type {?} */
    PoComboComponent.prototype.comboOpen;
    /** @type {?} */
    PoComboComponent.prototype.differ;
    /** @type {?} */
    PoComboComponent.prototype.isProcessingGetObjectByValue;
    /** @type {?} */
    PoComboComponent.prototype.scrollTop;
    /** @type {?} */
    PoComboComponent.prototype.service;
    /** @type {?} */
    PoComboComponent.prototype.shouldMarkLetters;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.eventResizeListener;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.filterSubscription;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.getSubscription;
    /** @type {?} */
    PoComboComponent.prototype.comboOptionTemplate;
    /** @type {?} */
    PoComboComponent.prototype.containerElement;
    /** @type {?} */
    PoComboComponent.prototype.contentElement;
    /** @type {?} */
    PoComboComponent.prototype.iconElement;
    /** @type {?} */
    PoComboComponent.prototype.inputElement;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.onScroll;
    /** @type {?} */
    PoComboComponent.prototype.element;
    /** @type {?} */
    PoComboComponent.prototype.differs;
    /** @type {?} */
    PoComboComponent.prototype.defaultService;
    /** @type {?} */
    PoComboComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.sanitized;
}
//# sourceMappingURL=data:application/json;base64,