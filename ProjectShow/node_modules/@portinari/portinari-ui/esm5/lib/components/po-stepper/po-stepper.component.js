/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChildren, QueryList } from '@angular/core';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperBaseComponent } from './po-stepper-base.component';
import { PoStepperStatus } from './enums/po-stepper-status.enum';
/**
 * \@docsExtends PoStepperBaseComponent
 *
 * \@example
 *
 * <example name="po-stepper-basic" title="Portinari Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="Portinari Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="Portinari Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 */
var PoStepperComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoStepperComponent, _super);
    function PoStepperComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    Object.defineProperty(PoStepperComponent.prototype, "currentStepIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.step - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperComponent.prototype, "stepList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.usePoSteps && this.poSteps || this.steps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperComponent.prototype, "usePoSteps", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.poSteps.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoStepperComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.activeFirstStep();
        this.poSteps.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.controlStepsStatus(0, _this.poSteps.first);
        }));
    };
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param index {number} Índice do `po-step` que se deseja ativar.
     */
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {?} index {number} Índice do `po-step` que se deseja ativar.
     * @return {?}
     */
    PoStepperComponent.prototype.active = /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {?} index {number} Índice do `po-step` que se deseja ativar.
     * @return {?}
     */
    function (index) {
        if (!this.usePoSteps) {
            return;
        }
        /** @type {?} */
        var stepsArray = this.getPoSteps();
        /** @type {?} */
        var step = stepsArray[index];
        /** @type {?} */
        var isDisabledStep = step.status === PoStepperStatus.Disabled;
        /** @type {?} */
        var isErrorStep = step.status === PoStepperStatus.Error;
        if (!isDisabledStep || isErrorStep) {
            this.changeStep(index, step);
        }
    };
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    PoStepperComponent.prototype.first = /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    function () {
        if (!this.usePoSteps) {
            return;
        }
        /** @type {?} */
        var firstStep = this.poSteps.first;
        /** @type {?} */
        var firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    };
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    PoStepperComponent.prototype.next = /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    function () {
        if (!this.usePoSteps) {
            return;
        }
        var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var nextIndex = stepIndex + 1;
        /** @type {?} */
        var nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    };
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    PoStepperComponent.prototype.previous = /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    function () {
        if (!this.usePoSteps) {
            return;
        }
        var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var previousIndex = stepIndex - 1;
        /** @type {?} */
        var previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    };
    /**
     * @param {?} stepIndex
     * @param {?=} step
     * @return {?}
     */
    PoStepperComponent.prototype.changeStep = /**
     * @param {?} stepIndex
     * @param {?=} step
     * @return {?}
     */
    function (stepIndex, step) {
        /** @type {?} */
        var isDifferentStep = (!this.currentActiveStep || step.id !== this.currentActiveStep.id);
        if (this.usePoSteps && isDifferentStep && this.allowNextStep(stepIndex)) {
            this.controlStepsStatus(stepIndex, step);
            this.onChangeStep.emit(step);
        }
        else if (!this.usePoSteps && stepIndex !== this.currentStepIndex && this.allowNextStep(stepIndex)) {
            // if para tratamento do modelo antigo do po-stepper
            this.onChangeStep.emit(stepIndex + 1);
        }
    };
    /**
     * @param {?} step
     * @return {?}
     */
    PoStepperComponent.prototype.onStepActive = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        this.currentActiveStep = step;
        this.previousActiveStep = this.poSteps.find((/**
         * @param {?} stepChild
         * @return {?}
         */
        function (stepChild) { return stepChild.status === PoStepperStatus.Active && stepChild.id !== step.id; }));
        this.setPreviousStepAsDone();
    };
    /**
     * @param {?} step
     * @return {?}
     */
    PoStepperComponent.prototype.trackByFn = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return step.id;
    };
    /**
     * @private
     * @return {?}
     */
    PoStepperComponent.prototype.activeFirstStep = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hasStepActive = this.poSteps.some((/**
         * @param {?} poStep
         * @return {?}
         */
        function (poStep) { return poStep.status === PoStepperStatus.Active; }));
        if (this.usePoSteps && !hasStepActive) {
            this.changeStep(0, this.poSteps.first);
        }
    };
    /**
     * @private
     * @param {?} nextStepIndex
     * @return {?}
     */
    PoStepperComponent.prototype.allowNextStep = /**
     * @private
     * @param {?} nextStepIndex
     * @return {?}
     */
    function (nextStepIndex) {
        if (!this.sequential) {
            return true;
        }
        if (this.usePoSteps) {
            return this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep);
        }
        return this.steps.slice(this.step, nextStepIndex).every((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.status === PoStepperStatus.Done; }));
    };
    /**
     * @private
     * @param {?=} currentActiveStep
     * @return {?}
     */
    PoStepperComponent.prototype.canActiveNextStep = /**
     * @private
     * @param {?=} currentActiveStep
     * @return {?}
     */
    function (currentActiveStep) {
        if (currentActiveStep === void 0) { currentActiveStep = (/** @type {?} */ ({})); }
        if (!currentActiveStep.canActiveNextStep) {
            return true;
        }
        /** @type {?} */
        var canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        currentActiveStep.status = this.getStepperStatusByCanActive(canActiveNextStep);
        return canActiveNextStep;
    };
    /**
     * @private
     * @param {?} stepIndex
     * @param {?} step
     * @return {?}
     */
    PoStepperComponent.prototype.controlStepsStatus = /**
     * @private
     * @param {?} stepIndex
     * @param {?} step
     * @return {?}
     */
    function (stepIndex, step) {
        if (this.usePoSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    };
    /**
     * @private
     * @param {?} canActiveNextStep
     * @return {?}
     */
    PoStepperComponent.prototype.getStepperStatusByCanActive = /**
     * @private
     * @param {?} canActiveNextStep
     * @return {?}
     */
    function (canActiveNextStep) {
        return canActiveNextStep ? PoStepperStatus.Done : PoStepperStatus.Error;
    };
    /**
     * @private
     * @param {?=} step
     * @return {?}
     */
    PoStepperComponent.prototype.getStepsAndIndex = /**
     * @private
     * @param {?=} step
     * @return {?}
     */
    function (step) {
        if (step === void 0) { step = (/** @type {?} */ ({})); }
        /** @type {?} */
        var steps = this.getPoSteps();
        /** @type {?} */
        var stepIndex = steps.findIndex((/**
         * @param {?} poStep
         * @return {?}
         */
        function (poStep) { return poStep.id === step.id; }));
        return { steps: steps, stepIndex: stepIndex };
    };
    /**
     * @private
     * @return {?}
     */
    PoStepperComponent.prototype.getPoSteps = /**
     * @private
     * @return {?}
     */
    function () {
        return this.poSteps.toArray();
    };
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    PoStepperComponent.prototype.isBeforeStep = /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    function (stepIndex) {
        var _this = this;
        /** @type {?} */
        var currentActiveStepIndex = (/**
         * @return {?}
         */
        function () { return _this.getPoSteps().findIndex((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.id === _this.currentActiveStep.id; })); });
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    };
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    PoStepperComponent.prototype.setFinalSteppersAsDisabled = /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    function (stepIndex) {
        this.getPoSteps()
            .filter((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        function (step, index) { return step && index >= stepIndex + 2; }))
            .forEach((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.status = PoStepperStatus.Disabled; }));
    };
    /**
     * @private
     * @param {?} step
     * @return {?}
     */
    PoStepperComponent.prototype.setStepAsActive = /**
     * @private
     * @param {?} step
     * @return {?}
     */
    function (step) {
        step.status = PoStepperStatus.Active;
    };
    /**
     * @private
     * @param {?} currentStep
     * @return {?}
     */
    PoStepperComponent.prototype.setNextStepAsDefault = /**
     * @private
     * @param {?} currentStep
     * @return {?}
     */
    function (currentStep) {
        var _a = this.getStepsAndIndex(currentStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var nextIndex = stepIndex + 1;
        if (nextIndex < this.poSteps.length) {
            steps[nextIndex].status = PoStepperStatus.Default;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoStepperComponent.prototype.setPreviousStepAsDone = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveStep) {
            this.previousActiveStep.status = PoStepperStatus.Done;
        }
    };
    PoStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-stepper',
                    template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n\n  <div class=\"po-stepper-container\">\n    <po-stepper-step *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index+1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\">\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoStepperComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoStepperComponent.propDecorators = {
        poSteps: [{ type: ContentChildren, args: [PoStepComponent,] }]
    };
    return PoStepperComponent;
}(PoStepperBaseComponent));
export { PoStepperComponent };
if (false) {
    /** @type {?} */
    PoStepperComponent.prototype.poSteps;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.currentActiveStep;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.previousActiveStep;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,