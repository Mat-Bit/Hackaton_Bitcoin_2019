/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * \@description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
var PoStepComponent = /** @class */ (function () {
    function PoStepComponent(elementRef) {
        this.elementRef = elementRef;
        this._status = PoStepperStatus.Disabled;
        // ID do step
        this.id = uuid();
    }
    Object.defineProperty(PoStepComponent.prototype, "status", {
        get: /**
         * @return {?}
         */
        function () {
            return this._status;
        },
        // Estado de exibição do `po-step`.
        set: 
        // Estado de exibição do `po-step`.
        /**
         * @param {?} status
         * @return {?}
         */
        function (status) {
            this._status = status;
            this.setDisplayOnActiveOrError();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoStepComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setDisplayOnActiveOrError();
    };
    /**
     * @protected
     * @return {?}
     */
    PoStepComponent.prototype.setDisplayOnActiveOrError = /**
     * @protected
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display =
            (this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error) ? '' : 'none';
    };
    PoStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-step',
                    template: "<ng-content></ng-content>\n"
                }] }
    ];
    /** @nocollapse */
    PoStepComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PoStepComponent.propDecorators = {
        canActiveNextStep: [{ type: Input, args: ['p-can-active-next-step',] }],
        label: [{ type: Input, args: ['p-label',] }],
        status: [{ type: Input, args: ['p-status',] }]
    };
    return PoStepComponent;
}());
export { PoStepComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoStepComponent.prototype._status;
    /** @type {?} */
    PoStepComponent.prototype.id;
    /**
     * \@optional
     *
     * \@description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <po-step p-label="Step 1" [p-can-active-next-step]="validate.bind(this)">
     * ...
     * </po-step>
     * ```
     * @type {?}
     */
    PoStepComponent.prototype.canActiveNextStep;
    /**
     * Título que será exibido descrevendo o passo (*step*).
     * @type {?}
     */
    PoStepComponent.prototype.label;
    /**
     * @type {?}
     * @private
     */
    PoStepComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXN0ZXBwZXIvcG8tc3RlcC9wby1zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVDbEU7SUErQ0UseUJBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUF6Q2xDLFlBQU8sR0FBcUIsZUFBZSxDQUFDLFFBQVEsQ0FBQzs7UUFHN0QsT0FBRSxHQUFZLElBQUksRUFBRSxDQUFDO0lBc0N5QixDQUFDO0lBVi9DLHNCQUF1QixtQ0FBTTs7OztRQU03QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBVEQsbUNBQW1DOzs7Ozs7O1FBQ25DLFVBQThCLE1BQXVCO1lBQ25ELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBRXRCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1FBQ25DLENBQUM7OztPQUFBOzs7O0lBUUQsNENBQWtCOzs7SUFBbEI7UUFDRSxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVTLG1EQUF5Qjs7OztJQUFuQztRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPO1lBQ3pDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxlQUFlLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNwRyxDQUFDOztnQkF4REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxTQUFTO29CQUNuQix1Q0FBcUM7aUJBQ3RDOzs7O2dCQTlDcUMsVUFBVTs7O29DQTBFN0MsS0FBSyxTQUFDLHdCQUF3Qjt3QkFHOUIsS0FBSyxTQUFDLFNBQVM7eUJBR2YsS0FBSyxTQUFDLFVBQVU7O0lBcUJuQixzQkFBQztDQUFBLEFBMURELElBMERDO1NBdERZLGVBQWU7Ozs7OztJQUUxQixrQ0FBNkQ7O0lBRzdELDZCQUFxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXNCckIsNENBQTZEOzs7OztJQUc3RCxnQ0FBZ0M7Ozs7O0lBYXBCLHFDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgdXVpZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1N0ZXBwZXJTdGF0dXMgfSBmcm9tICcuLi9lbnVtcy9wby1zdGVwcGVyLXN0YXR1cy5lbnVtJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXN0ZXBgIMOpIHV0aWxpemFkbyBwYXJhIGVudm9sdmVyIGUgcmVuZGVyaXphciBvIGNvbnRlw7pkbyBkZSB1bSBwYXNzbyAoKnN0ZXAqKSBkbyBgcG8tc3RlcHBlcmAsIHBvciBleGVtcGxvOlxuICpcbiAqIGBgYFxuICogPHBvLXN0ZXBwZXI+XG4gKlxuICogICAgPHBvLXN0ZXAgcC1sYWJlbD1cIkVuZGVyZcOnb1wiPlxuICpcbiAqICAgICAgICA8IS0tIENvbnRlw7pkbyByZWZlcmVudGUgYW8gZW5kZXJlw6dvIC0tPlxuICpcbiAqICAgIDwvcG8tc3RlcD5cbiAqXG4gKiAgICA8cG8tc3RlcCBwLWxhYmVsPVwiUGFnYW1lbnRvXCI+XG4gKlxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBwYWdhbWVudG8gLS0+XG4gKlxuICogICAgPC9wby1zdGVwPlxuICpcbiAqICA8L3BvLXN0ZXBwZXI+XG4gKiBgYGBcbiAqXG4gKiBBIHJlbmRlcml6YcOnw6NvIGRvIGNvbnRlw7pkbyBlbnZvbHZpZG8gbmEgdGVsYSBlIG8gY29udHJvbGUgZG9zIHN0YXR1cyBzw6NvIGZlaXRvcyBhdXRvbWF0aWNhbWVudGUuIE5vIHF1YWwsIG8gcHJpbWVpcm9cbiAqIGBwby1zdGVwYCBlbmNvbnRyYWRvIHNlcsOhIGNvbG9jYWRvIGNvbW8gYXRpdm8sIG8gcHLDs3hpbW8gZmljYSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgb3MgZGVtYWlzIGZpY2FtXG4gKiBkZXNhYmlsaXRhZG9zICgqZGlzYWJsZWQqKS5cbiAqXG4gKiBBbyBjbGljYXIgbm8gYHBvLXN0ZXBgIHF1ZSBlc3TDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqLCBvIHF1ZSBlc3TDoSBhdGl2byBmaWNhcsOhIGNvbSBvXG4gKiBzdGF0dXMgZGUgY29uY2x1w61kbyAoKmRvbmUqKSBlIG8gcHLDs3hpbW8gcXVlIGVzdGF2YSBkZXNhYmlsaXRhZG8gZmljYXLDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgbyByZXN0YW50ZSBwZXJtYW5lY2Vyw6FcbiAqIGNvbSBvIHN0YXR1cyBkZXNhYmlsaXRhZG8uXG4gKlxuICogPiBBbyB1dGlsaXphciBvIGBwby1zdGVwYCwgbyBjb21wb25lbnRlIGBwby1zdGVwcGVyYCBmdW5jaW9uYXLDoSBkZSBmb3JtYSBzZXF1ZW5jaWFsLCBvdSBzZWphLCBuw6NvIHNlcsOhIHBvc3PDrXZlbFxuICogcHVsYXIgcGFyYSBvdXRybyBgcG8tc3RlcGAgcXVlIGVzdGVqYSBjb20gbyBzdGF0dXMgaWd1YWwgYSBkZXNhYmlsaXRhZG8gKCpkaXNhYmxlZCopLlxuICpcbiAqIEFjZXNzZSBhIFtkb2N1bWVudGHDp8OjbyBkbyBgcG8tc3RlcHBlcmBdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXBwZXIpIHBhcmEgdGVyIG1haXMgaW5mb3JtYcOnw7VlcyBzb2JyZSBvIHNldSBmdW5jaW9uYW1lbnRvXG4gKiBlIGV4ZW1wbG9zIGRlIHVzby5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tc3RlcCcsXG4gIHRlbXBsYXRlVXJsOiAncG8tc3RlcC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9TdGVwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgcHJpdmF0ZSBfc3RhdHVzPzogUG9TdGVwcGVyU3RhdHVzID0gUG9TdGVwcGVyU3RhdHVzLkRpc2FibGVkO1xuXG4gIC8vIElEIGRvIHN0ZXBcbiAgaWQ/OiBzdHJpbmcgPSB1dWlkKCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gY2hhbWFkYSBxdWFuZG8gbyBwcsOzeGltbyAqc3RlcCogZm9yIGNsaWNhZG8gb3UgcXVhbmRvIG8gbcOpdG9kbyBgUG9TdGVwcGVyQ29tcG9uZW50Lm5leHQoKWAgZm9yIGNoYW1hZG8uXG4gICAqIEFvIHJldG9ybmFyIGB0cnVlYCBkZWZpbmUgcXVlIGVzc2UgKnN0ZXAqIGZpY2Fyw6EgYXRpdm8gZSBvIGF0dWFsIGNvbW8gY29uY2x1w61kbyAoKmRvbmUqKS5cbiAgICpcbiAgICogQW8gc2VyIGRpc3BhcmFkYSwgYSBtZXNtYSByZWNlYmVyw6EgcG9yIHBhcsOibWV0cm8gbyBgUG9TdGVwQ29tcG9uZW50YCBhdHVhbC5cbiAgICpcbiAgICogTyBjb250ZXh0byBkYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgY2hhbWFkYSwgc2Vyw6EgbyBtZXNtbyBxdWUgbyBkbyBgUG9TdGVwQ29tcG9uZW50YCwgZW50w6NvIHBhcmEgcG9kZXIgYWx0ZXJhclxuICAgKiBwYXJhIG8gY29udGV4dG8gZG8gY29tcG9uZW50ZSBxdWUgbyBlc3TDoSB1dGlsaXphbmRvLCBwb2RlIHNlciB1dGlsaXphZG8gYSBwcm9wcmllZGFkZSBgYmluZGAgZG8gSmF2YXNjcmlwdC5cbiAgICogUG9yIGV4ZW1wbG8sIHBhcmEgYSBmdW7Dp8OjbyBgdmFsaWRhdGVgOlxuICAgKlxuICAgKiBgYGBcbiAgICogPHBvLXN0ZXAgcC1sYWJlbD1cIlN0ZXAgMVwiIFtwLWNhbi1hY3RpdmUtbmV4dC1zdGVwXT1cInZhbGlkYXRlLmJpbmQodGhpcylcIj5cbiAgICogLi4uXG4gICAqIDwvcG8tc3RlcD5cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtY2FuLWFjdGl2ZS1uZXh0LXN0ZXAnKSBjYW5BY3RpdmVOZXh0U3RlcDogRnVuY3Rpb247XG5cbiAgLyoqIFTDrXR1bG8gcXVlIHNlcsOhIGV4aWJpZG8gZGVzY3JldmVuZG8gbyBwYXNzbyAoKnN0ZXAqKS4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICAvLyBFc3RhZG8gZGUgZXhpYmnDp8OjbyBkbyBgcG8tc3RlcGAuXG4gIEBJbnB1dCgncC1zdGF0dXMnKSBzZXQgc3RhdHVzKHN0YXR1czogUG9TdGVwcGVyU3RhdHVzKSB7XG4gICAgdGhpcy5fc3RhdHVzID0gc3RhdHVzO1xuXG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XG4gIH1cblxuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnNldERpc3BsYXlPbkFjdGl2ZU9yRXJyb3IoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCkge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPVxuICAgICAgKHRoaXMuc3RhdHVzID09PSBQb1N0ZXBwZXJTdGF0dXMuQWN0aXZlIHx8IHRoaXMuc3RhdHVzID09PSBQb1N0ZXBwZXJTdGF0dXMuRXJyb3IpID8gJycgOiAnbm9uZSc7XG4gIH1cblxufVxuIl19