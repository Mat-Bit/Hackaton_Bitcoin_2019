/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, isTypeof, poLocaleDefault } from './../../../utils/util';
import { PoStepperOrientation } from '../enums/po-stepper-orientation.enum';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/** @type {?} */
var poStepperStepSizeDefault = 24;
/** @type {?} */
var poStepperStepSizeMax = 64;
/** @type {?} */
var poStepLiteralsDefault = {
    en: { label: 'Step' },
    es: { label: 'Paso' },
    pt: { label: 'Passo' }
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que representa um *step* contendo as ligações das laterais (`po-stepper-step-bar`) e a label.
 */
var PoStepperStepComponent = /** @class */ (function () {
    function PoStepperStepComponent() {
        this._stepIcons = false;
        this._stepSize = poStepperStepSizeDefault;
        this.literals = tslib_1.__assign({}, poStepLiteralsDefault[poLocaleDefault], poStepLiteralsDefault[browserLanguage()]);
        // Evento que será emitido quando o status do *step* estiver ativo (`PoStepperStatus.Active`).
        this.activated = new EventEmitter();
        // Evento que será emitido ao clicar no *step*.
        this.click = new EventEmitter();
        // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
        this.enter = new EventEmitter();
    }
    Object.defineProperty(PoStepperStepComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label;
        },
        // Label do *step*.
        set: 
        // Label do *step*.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._label = isTypeof(value, 'string') ? value : this.literals.label + " " + this.circleContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "status", {
        get: /**
         * @return {?}
         */
        function () {
            return this._status;
        },
        // Define o estado de exibição.
        set: 
        // Define o estado de exibição.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._status = ((/** @type {?} */ (value))) ? value : undefined;
            if (this.status === PoStepperStatus.Active) {
                this.activated.emit();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "stepIcons", {
        get: /**
         * @return {?}
         */
        function () {
            return this._stepIcons;
        },
        set: /**
         * @param {?} stepIcons
         * @return {?}
         */
        function (stepIcons) {
            this._stepIcons = convertToBoolean(stepIcons);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "stepSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._stepSize;
        },
        // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
        // O valor informado deve ser entre `24` e `64`.
        set: 
        // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
        // O valor informado deve ser entre `24` e `64`.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._stepSize = (value >= poStepperStepSizeDefault && value <= poStepperStepSizeMax) ? value : poStepperStepSizeDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "halfStepSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stepSize / 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "isVerticalOrientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this.orientation === PoStepperOrientation.Vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "marginHorizontalBar", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isVerticalOrientation ? undefined : this.halfStepSize;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} status
     * @return {?}
     */
    PoStepperStepComponent.prototype.getStatusClass = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        switch (status) {
            case PoStepperStatus.Active:
                return 'po-stepper-step-active';
            case PoStepperStatus.Disabled:
                return 'po-stepper-step-disabled';
            case PoStepperStatus.Done:
                return 'po-stepper-step-done';
            case PoStepperStatus.Error:
                return 'po-stepper-step-error';
            default:
                return 'po-stepper-step-default';
        }
    };
    /**
     * @return {?}
     */
    PoStepperStepComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.status !== PoStepperStatus.Disabled) {
            this.click.emit();
        }
    };
    /**
     * @return {?}
     */
    PoStepperStepComponent.prototype.onEnter = /**
     * @return {?}
     */
    function () {
        if (this.status !== PoStepperStatus.Disabled) {
            this.enter.emit();
        }
    };
    PoStepperStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-stepper-step',
                    template: "<div class=\"po-stepper-step\"\n  [ngClass]=\"getStatusClass(status)\"\n  (click)=\"onClick()\"\n  (keydown.enter)=\"onEnter()\">\n\n  <div class=\"po-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\n\n    <div\n      [class.po-stepper-step-bar-top]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-left]=\"!isVerticalOrientation\"\n      [style.margin-right.px]=\"marginHorizontalBar\">\n    </div>\n\n    <po-stepper-circle\n      [p-content]=\"circleContent\"\n      [p-icons]=\"stepIcons\"\n      [p-size]=\"stepSize\"\n      [p-status]=\"status\">\n    </po-stepper-circle>\n\n    <div\n      [class.po-stepper-step-bar-bottom]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-right]=\"!isVerticalOrientation\"\n      [style.margin-left.px]=\"marginHorizontalBar\">\n    </div>\n\n  </div>\n\n  <po-stepper-label\n    class=\"po-stepper-step-label-position\"\n    [p-content]=\"label\">\n  </po-stepper-label>\n</div>\n"
                }] }
    ];
    PoStepperStepComponent.propDecorators = {
        circleContent: [{ type: Input, args: ['p-circle-content',] }],
        label: [{ type: Input, args: ['p-label',] }],
        orientation: [{ type: Input, args: ['p-orientation',] }],
        status: [{ type: Input, args: ['p-status',] }],
        stepIcons: [{ type: Input, args: ['p-step-icons',] }],
        stepSize: [{ type: Input, args: ['p-step-size',] }],
        activated: [{ type: Output, args: ['p-activated',] }],
        click: [{ type: Output, args: ['p-click',] }],
        enter: [{ type: Output, args: ['p-enter',] }]
    };
    return PoStepperStepComponent;
}());
export { PoStepperStepComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoStepperStepComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    PoStepperStepComponent.prototype._status;
    /**
     * @type {?}
     * @private
     */
    PoStepperStepComponent.prototype._stepIcons;
    /**
     * @type {?}
     * @private
     */
    PoStepperStepComponent.prototype._stepSize;
    /** @type {?} */
    PoStepperStepComponent.prototype.literals;
    /** @type {?} */
    PoStepperStepComponent.prototype.circleContent;
    /** @type {?} */
    PoStepperStepComponent.prototype.orientation;
    /** @type {?} */
    PoStepperStepComponent.prototype.activated;
    /** @type {?} */
    PoStepperStepComponent.prototype.click;
    /** @type {?} */
    PoStepperStepComponent.prototype.enter;
}
//# sourceMappingURL=data:application/json;base64,