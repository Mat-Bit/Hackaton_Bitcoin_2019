/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { getBrowserLanguage, getShortLanguage, isLanguage, poLocaleDefault, poLocales } from '../../utils/util';
import * as i0 from "@angular/core";
/** @type {?} */
var poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
/** @type {?} */
var poLocaleKey = 'PO_USER_LOCALE';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
var PoLanguageService = /** @class */ (function () {
    function PoLanguageService() {
    }
    Object.defineProperty(PoLanguageService.prototype, "languageDefault", {
        get: /**
         * @return {?}
         */
        function () {
            return localStorage.getItem(poDefaultLanguage);
        },
        set: /**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            if (language && isLanguage(language)) {
                localStorage.setItem(poDefaultLanguage, language);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    /**
     * \@description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     * @return {?}
     */
    PoLanguageService.prototype.getLanguage = /**
     * \@description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    };
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    /**
     * \@description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     * @return {?}
     */
    PoLanguageService.prototype.getLanguageDefault = /**
     * \@description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     * @return {?}
     */
    function () {
        return this.languageDefault;
    };
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    /**
     * \@description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * \@default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     * @return {?}
     */
    PoLanguageService.prototype.getShortLanguage = /**
     * \@description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * \@default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = this.getLanguage();
        /** @type {?} */
        var shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
    };
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    /**
     * \@description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    PoLanguageService.prototype.setLanguage = /**
     * \@description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    function (language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(poLocaleKey, language.toLowerCase());
    };
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    /**
     * \@description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    PoLanguageService.prototype.setLanguageDefault = /**
     * \@description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    function (language) {
        this.languageDefault = language;
    };
    PoLanguageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ PoLanguageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PoLanguageService_Factory() { return new PoLanguageService(); }, token: PoLanguageService, providedIn: "root" });
    return PoLanguageService;
}());
export { PoLanguageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGFuZ3VhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztJQUUxRyxpQkFBaUIsR0FBRyxxQkFBcUI7O0lBQ3pDLFdBQVcsR0FBRyxnQkFBZ0I7Ozs7Ozs7O0FBU3BDO0lBQUE7S0EyR0M7SUF0R0Msc0JBQUksOENBQWU7Ozs7UUFNbkI7WUFDRSxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRCxDQUFDOzs7OztRQVJELFVBQW9CLFFBQWdCO1lBQ2xDLElBQUksUUFBUSxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDcEMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUNuRDtRQUNILENBQUM7OztPQUFBO0lBTUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUNILHVDQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBQVg7O1lBQ1EsUUFBUSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxrQkFBa0IsRUFBRTtRQUVsRyxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7Ozs7Ozs7Ozs7SUFDSCw4Q0FBa0I7Ozs7Ozs7OztJQUFsQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7Ozs7Ozs7Ozs7O0lBQ0gsNENBQWdCOzs7Ozs7Ozs7O0lBQWhCOztZQUNRLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFOztZQUM3QixhQUFhLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1FBRWhELE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFDN0UsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7O09BYUc7Ozs7Ozs7Ozs7Ozs7Ozs7SUFDSCx1Q0FBVzs7Ozs7Ozs7Ozs7Ozs7O0lBQVgsVUFBWSxRQUFnQjtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLE9BQU87U0FDUjtRQUVELFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7Ozs7Ozs7Ozs7OztPQWFHOzs7Ozs7Ozs7Ozs7Ozs7O0lBQ0gsOENBQWtCOzs7Ozs7Ozs7Ozs7Ozs7SUFBbEIsVUFBbUIsUUFBZ0I7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUM7SUFDbEMsQ0FBQzs7Z0JBekdGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs0QkFoQkQ7Q0F5SEMsQUEzR0QsSUEyR0M7U0F4R1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBnZXRCcm93c2VyTGFuZ3VhZ2UsIGdldFNob3J0TGFuZ3VhZ2UsIGlzTGFuZ3VhZ2UsIHBvTG9jYWxlRGVmYXVsdCwgcG9Mb2NhbGVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmNvbnN0IHBvRGVmYXVsdExhbmd1YWdlID0gJ1BPX0RFRkFVTFRfTEFOR1VBR0UnO1xuY29uc3QgcG9Mb2NhbGVLZXkgPSAnUE9fVVNFUl9MT0NBTEUnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgZ2VyZW5jaWFyIGFzIGxpbmd1YWdlbnMgZGEgYXBsaWNhw6fDo28uXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBvTGFuZ3VhZ2VTZXJ2aWNlIHtcblxuICBzZXQgbGFuZ3VhZ2VEZWZhdWx0KGxhbmd1YWdlOiBzdHJpbmcpIHtcbiAgICBpZiAobGFuZ3VhZ2UgJiYgaXNMYW5ndWFnZShsYW5ndWFnZSkpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHBvRGVmYXVsdExhbmd1YWdlLCBsYW5ndWFnZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwb0RlZmF1bHRMYW5ndWFnZSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciByZXRvcm5hciBvIGlkaW9tYSBhdGl2by5cbiAgICpcbiAgICogQSBidXNjYSBkbyBpZGlvbWEgc2Vyw6EgZmVpdGEgbmEgc2VndWludGUgb3JkZW06XG4gICAqXG4gICAqICAgMSAtIG8gaWRpb21hIHF1ZSBmb2kgYXJtYXplbmFkbyBubyAqbG9jYWxTdG9yYWdlKiwgYXRyYXbDqXMgZG8gbcOpdG9kbyBgc2V0TGFuZ3VhZ2UoKWAgdXRpbGl6YWRvIHBlbG8gaTE4bi5cbiAgICpcbiAgICogICAyIC0gbyB2YWxvciBpbnNlcmlkbyBuYXMgY29uZmlndXJhw6fDtWVzIGRvIG3Ds2R1bG8gZG8gaTE4biBhdHJhdsOpcyBkbyBwYXLDom1ldHJvIGBjb25maWdgLCBzZW5kbyBvIGlkaW9tYSBpbnNlcmlkb1xuICAgKiBuYSBwcm9wcmllZGFkZSBgbGFuZ3VhZ2VgIGRhIGludGVyZmFjZSBgUG9JMThuQ29uZmlnRGVmYXVsdGAuXG4gICAqXG4gICAqICAgMyAtIG8gaWRpb21hIGRvIG5hdmVnYWRvciB1dGlsaXphZG8uXG4gICAqXG4gICAqID4gQ2FzbyBvIGlkaW9tYSBkbyBuYXZlZ2Fkb3IgbsOjbyBzZWphIHN1cG9ydGFkbyBwZWxvIFBPIChgcHRgLCBgZW5gLCBgZXNgIG91IGBydWApLCBzZXLDoSByZXRvcm5hZG8gdmFsb3IgYHB0YC5cbiAgICpcbiAgICogKipSZXRvcm5vOioqIGBzdHJpbmdgIGNvbSBhIHNpZ2xhIGRvIGlkaW9tYSBhdGl2by5cbiAgICovXG4gIGdldExhbmd1YWdlKCk6IHN0cmluZyB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwb0xvY2FsZUtleSkgfHwgdGhpcy5sYW5ndWFnZURlZmF1bHQgfHwgZ2V0QnJvd3Nlckxhbmd1YWdlKCk7XG5cbiAgICByZXR1cm4gbGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIG8gaWRpb21hICpkZWZhdWx0KiBkYSBhcGxpY2HDp8OjbyBkZWZpbmlkbyBuYXMgY29uZmlndXJhw6fDtWVzIGRvIG3Ds2R1bG8gZG8gaTE4biBhdHJhdsOpc1xuICAgKiBkbyBwYXLDom1ldHJvIGBjb25maWdgLlxuICAgKlxuICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgZG8gaWRpb21hICpkZWZhdWx0Ki5cbiAgICovXG4gIGdldExhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxhbmd1YWdlRGVmYXVsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIGEgYWJyZXZpYcOnw6NvIGRvIGlkaW9tYSBhdGl2byBuYSBhcGxpY2HDp8Ojby5cbiAgICpcbiAgICogQGRlZmF1bHQgYHB0YFxuICAgKlxuICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgYWJyZXZpYWRhIGRvIGlkaW9tYSBhdGl2by5cbiAgICovXG4gIGdldFNob3J0TGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IHRoaXMuZ2V0TGFuZ3VhZ2UoKTtcbiAgICBjb25zdCBzaG9ydExhbmd1YWdlID0gZ2V0U2hvcnRMYW5ndWFnZShsYW5ndWFnZSk7XG5cbiAgICByZXR1cm4gcG9Mb2NhbGVzLmluY2x1ZGVzKHNob3J0TGFuZ3VhZ2UpID8gc2hvcnRMYW5ndWFnZSA6IHBvTG9jYWxlRGVmYXVsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyBwYXJhIHNhbHZhciBvIGlkaW9tYSBkYSBhcGxpY2HDp8OjbyBubyAqc3RvcmFnZSosIHV0aWxpemFkbyBwZWxvIHNlcnZpw6dvIGRvIGkxOG4uXG4gICAqXG4gICAqID4gQW8gZGVmaW5pciB1bSBpZGlvbWEgcG9yIGVzdGUgbcOpdG9kbywgdG9kb3Mgb3MgbcOzZHVsb3MgZGEgYXBsaWNhw6fDo28gdXRpbGl6YXLDo28gbyBpZGlvbWEgZGVmaW5pZG8uXG4gICAqXG4gICAqIEBwYXJhbSBsYW5ndWFnZSBzaWdsYSBkbyBpZGlvbWEuXG4gICAqXG4gICAqIEVzdGEgc2lnbGEgZGV2ZSBzZXIgY29tcG9zdGEgcG9yIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBpZGlvbWEsXG4gICAqIHBvZGVuZG8gc2VyIGFkaWNpb25hZG8gb3V0cmFzIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBwYcOtcywgcG9yIGV4ZW1wbG86IGBwdGAsIGBwdC1CUmAsIGBwdC1icmAsIGBlbmAgb3UgYGVuLVVTYC5cbiAgICpcbiAgICogPiBDYXNvIHNlamEgaW5mb3JtYWRvIHVtIHZhbG9yIGRpZmVyZW50ZSBkZXN0ZSBwYWRyw6NvLCBvIG1lc21vIHNlcsOhIGlnbm9yYWRvLlxuICAgKi9cbiAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghaXNMYW5ndWFnZShsYW5ndWFnZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShwb0xvY2FsZUtleSwgbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKSk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcXVlIGRlZmluZSBvIGlkaW9tYSBjb25maWd1cmFkbyBhIHBhcnRpciBkbyBwYXLDom1ldHJvIGBjb25maWdgIHV0aWxpemFkbyBwZWxvIG3Ds2R1bG8gZG8gaTE4bi5cbiAgICpcbiAgICogPiBBbyBkZWZpbmlyIHVtIGlkaW9tYSBwb3IgZXN0ZSBzZXJ2acOnbywgYXBlbmFzIG8gbcOzZHVsbyBkbyBpMThuIHJlZmVyZW50ZSBhIGVzdGEgY29uZmlndXJhw6fDo28gdXRpbGl6YXLDoSBvIGlkaW9tYSBkZWZpbmlkby5cbiAgICpcbiAgICogQHBhcmFtIGxhbmd1YWdlIHNpZ2xhIGRvIGlkaW9tYS5cbiAgICpcbiAgICogRXN0YSBzaWdsYSBkZXZlIHNlciBjb21wb3N0YSBwb3IgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIGlkaW9tYSxcbiAgICogcG9kZW5kbyBzZXIgYWRpY2lvbmFkbyBvdXRyYXMgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIHBhw61zLCBwb3IgZXhlbXBsbzogYHB0YCwgYHB0LUJSYCwgYHB0LWJyYCwgYGVuYCBvdSBgZW4tVVNgLlxuICAgKlxuICAgKiA+IENhc28gc2VqYSBpbmZvcm1hZG8gdW0gdmFsb3IgZGlmZXJlbnRlIGRlc3RlIHBhZHLDo28sIG8gbWVzbW8gc2Vyw6EgaWdub3JhZG8uXG4gICAqL1xuICBzZXRMYW5ndWFnZURlZmF1bHQobGFuZ3VhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMubGFuZ3VhZ2VEZWZhdWx0ID0gbGFuZ3VhZ2U7XG4gIH1cblxufVxuIl19