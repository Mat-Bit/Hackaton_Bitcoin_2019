/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { browserLanguage, poLocaleDefault } from '../../utils/util';
import { PoDialogType } from './po-dialog.enum';
import { PoModalComponent } from '../../components/po-modal/po-modal.component';
/** @type {?} */
export var poDialogAlertLiteralsDefault = {
    en: (/** @type {?} */ ({ ok: 'Ok' })),
    es: (/** @type {?} */ ({ ok: 'Ok' })),
    pt: (/** @type {?} */ ({ ok: 'Ok' })),
    ru: (/** @type {?} */ ({ ok: 'Ок' }))
};
/** @type {?} */
export var poDialogConfirmLiteralsDefault = {
    en: (/** @type {?} */ ({ cancel: 'Cancel', confirm: 'Confirm' })),
    es: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    pt: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    ru: (/** @type {?} */ ({ cancel: 'отменить', confirm: 'подтвердить' }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do po-dialog.service
 */
var PoDialogComponent = /** @class */ (function () {
    function PoDialogComponent() {
        // Objeto primary do poModal
        this.primaryAction = { label: 'ok', action: (/**
             * @return {?}
             */
            function () { }) };
    }
    /**
     * @return {?}
     */
    PoDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.closeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    PoDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.closeSubscription = this.poModal.onXClosed.subscribe((/**
         * @param {?} close
         * @return {?}
         */
        function (close) { return _this.destroy(); }));
    };
    // Fecha o poModal
    // Fecha o poModal
    /**
     * @return {?}
     */
    PoDialogComponent.prototype.close = 
    // Fecha o poModal
    /**
     * @return {?}
     */
    function () {
        this.poModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    PoDialogComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    // Insere os valores recebidos de this.open para o poModal
    // Insere os valores recebidos de this.open para o poModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    PoDialogComponent.prototype.configDialog = 
    // Insere os valores recebidos de this.open para o poModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: (/**
             * @return {?}
             */
            function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            })
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: (/**
                 * @return {?}
                 */
                function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                })
            };
        }
    };
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    PoDialogComponent.prototype.open = 
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, ((/** @type {?} */ (dialogOptions))).confirm, this.literalsConfirm.cancel, ((/** @type {?} */ (dialogOptions))).cancel);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, ((/** @type {?} */ (dialogOptions))).ok);
                break;
            }
        }
        this.poModal.open();
    };
    /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    PoDialogComponent.prototype.setDialogLiterals = /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    function (dialogOptions, dialogType) {
        /** @type {?} */
        var alertLiterals = poDialogAlertLiteralsDefault;
        /** @type {?} */
        var confirmLiterals = poDialogConfirmLiteralsDefault;
        /** @type {?} */
        var literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = tslib_1.__assign({}, alertLiterals[poLocaleDefault], alertLiterals[browserLanguage()], literals);
        }
        else {
            this.literalsConfirm = tslib_1.__assign({}, confirmLiterals[poLocaleDefault], confirmLiterals[browserLanguage()], literals);
        }
    };
    PoDialogComponent.decorators = [
        { type: Component, args: [{
                    template: "<po-modal\n  [p-title]=\"title\"\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</po-modal>\n"
                }] }
    ];
    PoDialogComponent.propDecorators = {
        poModal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }]
    };
    return PoDialogComponent;
}());
export { PoDialogComponent };
if (false) {
    /** @type {?} */
    PoDialogComponent.prototype.poModal;
    /** @type {?} */
    PoDialogComponent.prototype.title;
    /** @type {?} */
    PoDialogComponent.prototype.message;
    /** @type {?} */
    PoDialogComponent.prototype.primaryAction;
    /** @type {?} */
    PoDialogComponent.prototype.secondaryAction;
    /** @type {?} */
    PoDialogComponent.prototype.literalsAlert;
    /** @type {?} */
    PoDialogComponent.prototype.literalsConfirm;
    /**
     * @type {?}
     * @private
     */
    PoDialogComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    PoDialogComponent.prototype.closeSubscription;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlhbG9nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BvLWRpYWxvZy9wby1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBbUMsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSXRGLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFLcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWhELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDOztBQUVoRixNQUFNLEtBQU8sNEJBQTRCLEdBQUc7SUFDMUMsRUFBRSxFQUFFLG1CQUF3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBQTtJQUN4QyxFQUFFLEVBQUUsbUJBQXdCLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFBO0lBQ3hDLEVBQUUsRUFBRSxtQkFBd0IsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUE7SUFDeEMsRUFBRSxFQUFFLG1CQUF3QixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBQTtDQUN6Qzs7QUFFRCxNQUFNLEtBQU8sOEJBQThCLEdBQUc7SUFDNUMsRUFBRSxFQUFFLG1CQUEwQixFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFBO0lBQ3RFLEVBQUUsRUFBRSxtQkFBMEIsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBQTtJQUMxRSxFQUFFLEVBQUUsbUJBQTBCLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQUE7SUFDMUUsRUFBRSxFQUFFLG1CQUEwQixFQUFFLE1BQU0sRUFB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QUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7Ozs7SUFFTyw2Q0FBaUI7Ozs7OztJQUF6QixVQUEwQixhQUE0RCxFQUFFLFVBQXdCOztZQUN4RyxhQUFhLEdBQUcsNEJBQTRCOztZQUM1QyxlQUFlLEdBQUcsOEJBQThCOztZQUNoRCxRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVE7UUFFdkMsSUFBSSxVQUFVLEtBQUssWUFBWSxDQUFDLEtBQUssRUFBRTtZQUNyQyxJQUFJLENBQUMsYUFBYSx3QkFBTyxhQUFhLENBQUMsZUFBZSxDQUFDLEVBQUssYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQUssUUFBUSxDQUFDLENBQUM7U0FDNUc7YUFBTTtZQUNMLElBQUksQ0FBQyxlQUFlLHdCQUFPLGVBQWUsQ0FBQyxlQUFlLENBQUMsRUFBSyxlQUFlLENBQUMsZUFBZSxFQUFFLENBQUMsRUFBSyxRQUFRLENBQUMsQ0FBQztTQUNsSDtJQUNILENBQUM7O2dCQWpIRixTQUFTLFNBQUM7b0JBQ1QsaUtBQXlDO2lCQUMxQzs7OzBCQUdFLFNBQVMsU0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBNkcvQyx3QkFBQztDQUFBLEFBbEhELElBa0hDO1NBL0dZLGlCQUFpQjs7O0lBRTVCLG9DQUF5RTs7SUFHekUsa0NBQWM7O0lBR2Qsb0NBQWdCOztJQUdoQiwwQ0FBa0U7O0lBR2xFLDRDQUErQjs7SUFHL0IsMENBQXFDOztJQUdyQyw0Q0FBeUM7Ozs7O0lBR3pDLHlDQUFzRDs7Ozs7SUFDdEQsOENBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRSZWYsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IGJyb3dzZXJMYW5ndWFnZSwgcG9Mb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvRGlhbG9nQWxlcnRMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1kaWFsb2ctYWxlcnQtbGl0ZXJhbHMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvRGlhbG9nQWxlcnRPcHRpb25zLCBQb0RpYWxvZ0NvbmZpcm1PcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWRpYWxvZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EaWFsb2dDb25maXJtTGl0ZXJhbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tZGlhbG9nLWNvbmZpcm0tbGl0ZXJhbHMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvRGlhbG9nVHlwZSB9IGZyb20gJy4vcG8tZGlhbG9nLmVudW0nO1xuaW1wb3J0IHsgUG9Nb2RhbEFjdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvcG8tbW9kYWwvcG8tbW9kYWwtYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb01vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9wby1tb2RhbC9wby1tb2RhbC5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgcG9EaWFsb2dBbGVydExpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxQb0RpYWxvZ0FsZXJ0TGl0ZXJhbHM+IHsgb2s6ICdPaycgfSxcbiAgZXM6IDxQb0RpYWxvZ0FsZXJ0TGl0ZXJhbHM+IHsgb2s6ICdPaycgfSxcbiAgcHQ6IDxQb0RpYWxvZ0FsZXJ0TGl0ZXJhbHM+IHsgb2s6ICdPaycgfSxcbiAgcnU6IDxQb0RpYWxvZ0FsZXJ0TGl0ZXJhbHM+IHsgb2s6ICfQntC6JyB9XG59O1xuXG5leHBvcnQgY29uc3QgcG9EaWFsb2dDb25maXJtTGl0ZXJhbHNEZWZhdWx0ID0ge1xuICBlbjogPFBvRGlhbG9nQ29uZmlybUxpdGVyYWxzPiB7IGNhbmNlbDogJ0NhbmNlbCcsIGNvbmZpcm06ICdDb25maXJtJyB9LFxuICBlczogPFBvRGlhbG9nQ29uZmlybUxpdGVyYWxzPiB7IGNhbmNlbDogJ0NhbmNlbGFyJywgY29uZmlybTogJ0NvbmZpcm1hcicgfSxcbiAgcHQ6IDxQb0RpYWxvZ0NvbmZpcm1MaXRlcmFscz4geyBjYW5jZWw6ICdDYW5jZWxhcicsIGNvbmZpcm06ICdDb25maXJtYXInIH0sXG4gIHJ1OiA8UG9EaWFsb2dDb25maXJtTGl0ZXJhbHM+IHsgY2FuY2VsOiAn0L7RgtC80LXQvdC40YLRjCcsIGNvbmZpcm06ICfQv9C+0LTRgtCy0LXRgNC00LjRgtGMJyB9XG59O1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcXVlIHNlcnZlIGNvbW8gY29udGFpbmVyIGRvIHBvLWRpYWxvZy5zZXJ2aWNlXG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHRlbXBsYXRlVXJsOiAnLi9wby1kaWFsb2cuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvRGlhbG9nQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQge1xuICAvLyBWaWV3Q2hpbGQgcGFyYSBvIHVzbyBkbyBwby1tb2RhbC5jb21wb25lbnRcbiAgQFZpZXdDaGlsZChQb01vZGFsQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSBwb01vZGFsOiBQb01vZGFsQ29tcG9uZW50O1xuXG4gIC8vIFRpdGxlIGRvIHBvTW9kYWxcbiAgdGl0bGU6IHN0cmluZztcblxuICAvLyBNZXNzYWdlIGRvIHBvTW9kYWxcbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIC8vIE9iamV0byBwcmltYXJ5IGRvIHBvTW9kYWxcbiAgcHJpbWFyeUFjdGlvbjogUG9Nb2RhbEFjdGlvbiA9IHsgbGFiZWw6ICdvaycsIGFjdGlvbjogKCkgPT4geyB9IH07XG5cbiAgLy8gT2JqZXRvIHNlY29uZGFyeSBkbyBwb01vZGFsXG4gIHNlY29uZGFyeUFjdGlvbjogUG9Nb2RhbEFjdGlvbjtcblxuICAvLyBMaXRlcmFpcyB1c2FkYXMgbm9zIGJvdMOjbyBkZSBhbGVydGEgZG8gcG9Nb2RhbFxuICBsaXRlcmFsc0FsZXJ0OiBQb0RpYWxvZ0FsZXJ0TGl0ZXJhbHM7XG5cbiAgLy8gTGl0ZXJhaXMgdXNhZGFzIG5vcyBib3TDtWVzIGRlIGNvbmZpcm1hw6fDo28gZG8gcG9Nb2RhbFxuICBsaXRlcmFsc0NvbmZpcm06IFBvRGlhbG9nQ29uZmlybUxpdGVyYWxzO1xuXG4gIC8vIEF0cmlidXRvIHBhcmEgYXJtYXplbmFyIGEgcmVmZXJlbmNpYSBkbyBjb21wb25lbnRlIGNyaWFkbyB2aWEgc2VydmnDp28uXG4gIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8UG9EaWFsb2dDb21wb25lbnQ+O1xuICBwcml2YXRlIGNsb3NlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbG9zZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jbG9zZVN1YnNjcmlwdGlvbiA9IHRoaXMucG9Nb2RhbC5vblhDbG9zZWQuc3Vic2NyaWJlKGNsb3NlID0+IHRoaXMuZGVzdHJveSgpKTtcbiAgfVxuXG4gICAgLy8gRmVjaGEgbyBwb01vZGFsXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMucG9Nb2RhbC5jbG9zZSgpO1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICAvLyBJbnNlcmUgb3MgdmFsb3JlcyByZWNlYmlkb3MgZGUgdGhpcy5vcGVuIHBhcmEgbyBwb01vZGFsXG4gIGNvbmZpZ0RpYWxvZyhwcmltYXJ5TGFiZWw/LCBwcmltYXJ5QWN0aW9uPywgc2Vjb25kYXJ5TGFiZWw/LCBzZWNvbmRhcnlBY3Rpb24/KSB7XG5cbiAgICB0aGlzLnByaW1hcnlBY3Rpb24gPSB7XG4gICAgICBsYWJlbDogcHJpbWFyeUxhYmVsLFxuICAgICAgYWN0aW9uOiAoKSA9PiB7XG4gICAgICAgICAgaWYgKHByaW1hcnlBY3Rpb24pIHtcbiAgICAgICAgICAgIHByaW1hcnlBY3Rpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc2Vjb25kYXJ5TGFiZWwpIHtcbiAgICAgIHRoaXMuc2Vjb25kYXJ5QWN0aW9uID0ge1xuICAgICAgICBsYWJlbDogc2Vjb25kYXJ5TGFiZWwsXG4gICAgICAgIGFjdGlvbjogKCkgPT4ge1xuICAgICAgICAgIGlmIChzZWNvbmRhcnlBY3Rpb24pIHtcbiAgICAgICAgICAgIHNlY29uZGFyeUFjdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLy8gSW5zZXJlIG9zIHZhbG9yZXMgcmVjZWJpZG9zIGRlIHBvLWRpYWxvZy5zZXJ2aWNlIGRlIGFjb3JkbyBjb20gbyB0aXBvIGRlIGRpw6FsYWdvIHNvbGljaXRhZG9cbiAgb3BlbihkaWFsb2dPcHRpb25zOiAoUG9EaWFsb2dDb25maXJtT3B0aW9ucyB8IFBvRGlhbG9nQWxlcnRPcHRpb25zKSxcbiAgICAgICBkaWFsb2dUeXBlOiBQb0RpYWxvZ1R5cGUsXG4gICAgICAgY29tcG9uZW50UmVmPzogQ29tcG9uZW50UmVmPFBvRGlhbG9nQ29tcG9uZW50Pik6IHZvaWQge1xuXG4gICAgdGhpcy50aXRsZSA9IGRpYWxvZ09wdGlvbnMudGl0bGU7XG4gICAgdGhpcy5tZXNzYWdlID0gZGlhbG9nT3B0aW9ucy5tZXNzYWdlO1xuXG4gICAgdGhpcy5jb21wb25lbnRSZWYgPSBjb21wb25lbnRSZWY7XG5cbiAgICB0aGlzLnNldERpYWxvZ0xpdGVyYWxzKGRpYWxvZ09wdGlvbnMsIGRpYWxvZ1R5cGUpO1xuXG4gICAgc3dpdGNoIChkaWFsb2dUeXBlKSB7XG4gICAgICBjYXNlIFBvRGlhbG9nVHlwZS5Db25maXJtOiB7XG4gICAgICAgIHRoaXMuY29uZmlnRGlhbG9nKFxuICAgICAgICAgIHRoaXMubGl0ZXJhbHNDb25maXJtLmNvbmZpcm0sICg8UG9EaWFsb2dDb25maXJtT3B0aW9ucz5kaWFsb2dPcHRpb25zKS5jb25maXJtLFxuICAgICAgICAgIHRoaXMubGl0ZXJhbHNDb25maXJtLmNhbmNlbCwgKDxQb0RpYWxvZ0NvbmZpcm1PcHRpb25zPmRpYWxvZ09wdGlvbnMpLmNhbmNlbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBQb0RpYWxvZ1R5cGUuQWxlcnQ6IHtcbiAgICAgICAgdGhpcy5jb25maWdEaWFsb2codGhpcy5saXRlcmFsc0FsZXJ0Lm9rLCAoPFBvRGlhbG9nQWxlcnRPcHRpb25zPmRpYWxvZ09wdGlvbnMpLm9rKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wb01vZGFsLm9wZW4oKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0RGlhbG9nTGl0ZXJhbHMoZGlhbG9nT3B0aW9uczogUG9EaWFsb2dDb25maXJtT3B0aW9ucyB8IFBvRGlhbG9nQWxlcnRPcHRpb25zLCBkaWFsb2dUeXBlOiBQb0RpYWxvZ1R5cGUpIHtcbiAgICBjb25zdCBhbGVydExpdGVyYWxzID0gcG9EaWFsb2dBbGVydExpdGVyYWxzRGVmYXVsdDtcbiAgICBjb25zdCBjb25maXJtTGl0ZXJhbHMgPSBwb0RpYWxvZ0NvbmZpcm1MaXRlcmFsc0RlZmF1bHQ7XG4gICAgY29uc3QgbGl0ZXJhbHMgPSBkaWFsb2dPcHRpb25zLmxpdGVyYWxzO1xuXG4gICAgaWYgKGRpYWxvZ1R5cGUgPT09IFBvRGlhbG9nVHlwZS5BbGVydCkge1xuICAgICAgdGhpcy5saXRlcmFsc0FsZXJ0ID0gey4uLmFsZXJ0TGl0ZXJhbHNbcG9Mb2NhbGVEZWZhdWx0XSwgLi4uYWxlcnRMaXRlcmFsc1ticm93c2VyTGFuZ3VhZ2UoKV0sIC4uLmxpdGVyYWxzfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5saXRlcmFsc0NvbmZpcm0gPSB7Li4uY29uZmlybUxpdGVyYWxzW3BvTG9jYWxlRGVmYXVsdF0sIC4uLmNvbmZpcm1MaXRlcmFsc1ticm93c2VyTGFuZ3VhZ2UoKV0sIC4uLmxpdGVyYWxzfTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==