/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { PoComponentInjectorService } from '../../services/po-component-injector/po-component-injector.service';
import { PoLoadingOverlayComponent } from '../../components/po-loading/po-loading-overlay/po-loading-overlay.component';
import { PoHttpRequesControltService } from './po-http-request-control-service';
import * as i0 from "@angular/core";
import * as i1 from "./po-http-request-control-service";
import * as i2 from "../../services/po-component-injector/po-component-injector.service";
/** @type {?} */
var noCountPendingRequests = 'X-Portinari-No-Count-Pending-Requests';
/** @type {?} */
var screenLock = 'X-Portinari-Screen-Lock';
/**
 * \@description
 *
 * O serviço Portinari Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-Portinari-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Portinari-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-Portinari-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Portinari-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-Portinari-No-Count-Pending-Requests': true, 'X-Portinari-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * \@example
 * <example name='po-http-request-interceptor-labs' title='Portinari Http Request Interceptor Labs'>
 *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
var PoHttpRequestInterceptorService = /** @class */ (function () {
    function PoHttpRequestInterceptorService(controlHttpRequest, poComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.poComponentInjector = poComponentInjector;
        this.loadingOverlayComponent = undefined;
        this.pendingRequests = 0;
        this.overlayRequests = 0;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response instanceof HttpResponse) {
                _this.setCountPendingRequests(false, requestClone);
                _this.setCountOverlayRequests(false, requestClone);
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.setCountPendingRequests(false, requestClone);
            _this.setCountOverlayRequests(false, requestClone);
            return throwError(error);
        })));
    };
    /**
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.getCountPendingRequests = /**
     * @return {?}
     */
    function () {
        return this.controlHttpRequest.getControlHttpRequest();
    };
    /**
     * @private
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.buildLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.poComponentInjector.createComponentInApplication(PoLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.destroyLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.loadingOverlayComponent) {
            this.poComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    };
    /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.requestCloneWithoutHeaderParam = /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    function (headersParams, request) {
        /** @type {?} */
        var isRequestClone = false;
        headersParams.forEach((/**
         * @param {?} headerParam
         * @return {?}
         */
        function (headerParam) {
            if (request.headers.has(headerParam)) {
                request.headers.delete(headerParam);
                isRequestClone = true;
            }
        }));
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    };
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.setCountPendingRequests = /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    function (isIncrement, request) {
        /** @type {?} */
        var hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        /** @type {?} */
        var headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && (headerParam.toString().toLowerCase() === 'true')) {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    };
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.setCountOverlayRequests = /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    function (isIncrement, request) {
        /** @type {?} */
        var hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            /** @type {?} */
            var headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    };
    PoHttpRequestInterceptorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PoHttpRequestInterceptorService.ctorParameters = function () { return [
        { type: PoHttpRequesControltService },
        { type: PoComponentInjectorService }
    ]; };
    /** @nocollapse */ PoHttpRequestInterceptorService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PoHttpRequestInterceptorService_Factory() { return new PoHttpRequestInterceptorService(i0.ɵɵinject(i1.PoHttpRequesControltService), i0.ɵɵinject(i2.PoComponentInjectorService)); }, token: PoHttpRequestInterceptorService, providedIn: "root" });
    return PoHttpRequestInterceptorService;
}());
export { PoHttpRequestInterceptorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.loadingOverlayComponent;
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.pendingRequests;
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.overlayRequests;
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.controlHttpRequest;
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.poComponentInjector;
}
//# sourceMappingURL=data:application/json;base64,