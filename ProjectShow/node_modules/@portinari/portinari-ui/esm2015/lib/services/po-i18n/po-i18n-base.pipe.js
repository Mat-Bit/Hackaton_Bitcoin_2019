/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O pipe po-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | poI18n:[1,10] }}
 * {{ i18nPT.totalPages | poI18n:10 }}
 * ```
 */
export class PoI18nBasePipe {
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    transform(value, args) {
        if (!value) {
            return '';
        }
        if (!(args instanceof Array)) {
            args = [args];
        }
        for (const arg of args) {
            value = value.replace(/(\{\w*\})+/, arg);
        }
        return value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taTE4bi1iYXNlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wby1pMThuL3BvLWkxOG4tYmFzZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLE1BQU0sT0FBTyxjQUFjOzs7Ozs7SUFFekIsU0FBUyxDQUFDLEtBQWEsRUFBRSxJQUFTO1FBQ2hDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLEtBQUssQ0FBQyxFQUFFO1lBQzVCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2Y7UUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUN0QixLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUcsR0FBRyxDQUFDLENBQUM7U0FDM0M7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIHBpcGUgcG8taTE4biDDqSByZXNwb25zw6F2ZWwgcG9yIHRyYXRhciBsaXRlcmFpcyBwYXLDom1ldHJpemFkYXMsIGRhbmRvIG1haXMgZmxleGliaWxpZGFkZSBhcyBsaXRlcmFpcyBkZSB0cmFkdcOnw6NvLlxuICogTyBuw7ptZXJvIGRlIHBhcsOibWV0cm9zIGluc2VyaWRvcyBuYXMgbGl0ZXJhaXMgZGV2ZSBjb2luY2lkaXIgY29tIGEgcXVhbnRpYSBkZSBwYXLDom1ldHJvcyBwYXNzYWRvcyBwb3IgcGFyw6JtZXRybyxcbiAqIG9zIHBhcsOibWV0cm9zIHNlcsOjbyBzdWJzdGl0dWlkb3MgZGUgYWNvcmRvIGNvbSBhIG9yZGVtIGluZm9ybWFkYS5cbiAqXG4gKiBQYXJhIGluc2VyaXIgdW0gcGFyw6JtZXRybyBlbSB1bWEgbGl0ZXJhbCwgbyBtZXNtbyBkZXZlcsOhIHNlciBpbnNlcmlkbyBlbnRyZSBjaGF2ZXMgZGVudHJvIGRhIGxpdGVyYWwgZSBwb3NpY2lvbmFkb1xuICogZGUgYWNvcmRvIGNvbW8gZGV2ZSBzZXIgZXhpYmlkbyBhcMOzcyBhIHN1YSB0cmFuc2Zvcm1hw6fDo28uXG4gKlxuICogYGBgXG4gKiBjb25zdCBpMThuUFQgPSB7XG4gKiAgIHBhZ2luYXRpb246ICdQw6FnaW5hIHsxfSBkZSB7Mn0gcMOhZ2luYXMuJyxcbiAqICAgdG90YWxQYWdlczogJ1RvdGFsIGRlIHt0b3RhbFBhZ2VzfSBlbmNvbnRyYWRhcy4nXG4gKiB9O1xuICogYGBgXG4gKlxuICogw4kgcG9zc8OtdmVsIHBhc3NhciB1bSB2YWxvciBvdSB1bSBhcnJheSBkZSB2YWxvcmVzIHBhcmEgbyBwaXBlLCBjYXNvIHNlamEgcGFzc2FkbyB1bSBhcnJheSwgb3MgdmFsb3JlcyBkZXZlbSBvYmVkZWNlciBhIG9yZGVtXG4gKiBpbmZvcm1hZGEgbmEgbGl0ZXJhbC5cbiAqXG4gKiBgYGBcbiAqIHt7IGkxOG5QVC5wYWdpbmF0aW9uIHwgcG9JMThuOlsxLDEwXSB9fVxuICoge3sgaTE4blBULnRvdGFsUGFnZXMgfCBwb0kxOG46MTAgfX1cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUG9JMThuQmFzZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZywgYXJnczogYW55KTogc3RyaW5nIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgaWYgKCEoYXJncyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgYXJncyA9IFthcmdzXTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGFyZyBvZiBhcmdzKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLyhcXHtcXHcqXFx9KSsvLCAgYXJnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxufVxuIl19