/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { sortValues } from '../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
 */
export class PoDateService {
    constructor() {
        this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
    }
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} minDate Definir `true` caso seja `minDate`.
     * @param {?} maxDate Definir `true` caso seja `maxDate`.
     * @return {?}
     */
    convertIsoToDate(dateString, minDate, maxDate) {
        if (dateString) {
            const { year, month, day } = this.getDateFromIso(dateString);
            if (minDate) {
                /** @type {?} */
                const date = new Date(year, month - 1, day, 0, 0, 0);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else if (maxDate) {
                /** @type {?} */
                const date = new Date(year, month - 1, day, 23, 59, 59);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else {
                /** @type {?} */
                const miliseconds = Date.parse(dateString);
                /** @type {?} */
                const timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(miliseconds + timezone);
            }
        }
    }
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param {?} date Data no formato `Date`.
     * @return {?}
     */
    convertDateToISO(date) {
        if (date) {
            /** @type {?} */
            const fullYear = date.getFullYear();
            /** @type {?} */
            const getMonth = date.getMonth() + 1;
            /** @type {?} */
            const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            /** @type {?} */
            const month = getMonth < 10 ? '0' + getMonth : getMonth;
            /** @type {?} */
            const year = this.formatYear(fullYear);
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    }
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param {?} year Ano a ser validado.
     * @return {?}
     */
    formatYear(year) {
        if (year > 999) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return `0${year}`;
        }
        if (year > 9 && year < 100) {
            return `00${year}`;
        }
        if (year >= 0 && year < 10) {
            return `000${year}`;
        }
    }
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param {?} isoDate Ano em formato string.
     * @return {?}
     */
    getDateFromIso(isoDate) {
        /** @type {?} */
        const day = parseInt(isoDate.substring(8, 10), 10);
        /** @type {?} */
        const month = parseInt(isoDate.substring(5, 7), 10);
        /** @type {?} */
        const year = parseInt(isoDate.substring(0, 4), 10);
        return { year, month, day };
    }
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     * @return {?}
     */
    getDateForDateRange(date, isMinDate) {
        /** @type {?} */
        const lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
        if (date instanceof Date) {
            const { year, month, day } = this.splitDate(date);
            /** @type {?} */
            const validDate = new Date(year, month, day, ...lastHour);
            this.setYearFrom0To100(validDate, year);
            return validDate;
        }
        else if (this.isValidIso(date)) {
            return this.convertIsoToDate(date, isMinDate, !isMinDate);
        }
    }
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param {?=} dateA primeira data
     * @param {?=} dateB segunda data
     * @return {?}
     */
    isDateRangeValid(dateA = '', dateB = '') {
        /** @type {?} */
        const dateASplitted = dateA.split('-').map((/**
         * @param {?} item
         * @return {?}
         */
        item => parseInt(item, 10)));
        /** @type {?} */
        const dateBSplitted = dateB.split('-').map((/**
         * @param {?} item
         * @return {?}
         */
        item => parseInt(item, 10)));
        for (let index = 0; index <= dateASplitted.length; index++) {
            if (dateASplitted[index] > dateBSplitted[index]) {
                return true;
            }
            else if (dateASplitted[index] < dateBSplitted[index]) {
                return false;
            }
        }
        return true;
    }
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param {?} stringDate Data.
     * @return {?}
     */
    isValidIso(stringDate) {
        return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
    }
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param {?} date Data.
     * @param {?} year .
     * @return {?}
     */
    setYearFrom0To100(date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    }
    /**
     * Método responsável por ordenar duas datas.
     *
     * @param {?} leftSide Primeira data a ser comparada.
     * @param {?} rightSide Segunda data a ser comparada.
     * @param {?} ascending Determina se será em ordem crescente ou decrescente.
     * @return {?}
     */
    sortDate(leftSide, rightSide, ascending) {
        return sortValues(this.validateDate(leftSide), this.validateDate(rightSide), ascending);
    }
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param {?} date Valor da data.
     * @return {?}
     */
    splitDate(date) {
        /** @type {?} */
        const year = date.getFullYear();
        /** @type {?} */
        const month = date.getMonth();
        /** @type {?} */
        const day = date.getDate();
        return { year, month, day };
    }
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param {?} date Data a ser validada.
     * @param {?} minDate Data inicial.
     * @param {?} maxDate Data final.
     * @return {?}
     */
    validateDateRange(date, minDate, maxDate) {
        if (minDate && maxDate) {
            return (date >= minDate && date <= maxDate);
        }
        else if (minDate && !maxDate) {
            return (date >= minDate);
        }
        else if (!minDate && maxDate) {
            return (date <= maxDate);
        }
        else {
            return true;
        }
    }
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @private
     * @param {?} date Data que será validada.
     * @return {?}
     */
    validateDate(date) {
        /** @type {?} */
        const validDate = date instanceof Date ? this.convertDateToISO(date) : date;
        return this.isValidIso(validDate) ? validDate : undefined;
    }
}
PoDateService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDateService.prototype.dateRegex;
    /**
     * @type {?}
     * @private
     */
    PoDateService.prototype.isoRegex;
}
//# sourceMappingURL=data:application/json;base64,