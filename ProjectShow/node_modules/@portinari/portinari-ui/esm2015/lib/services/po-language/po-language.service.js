/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { getBrowserLanguage, getShortLanguage, isLanguage, poLocaleDefault, poLocales } from '../../utils/util';
import * as i0 from "@angular/core";
/** @type {?} */
const poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
/** @type {?} */
const poLocaleKey = 'PO_USER_LOCALE';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
export class PoLanguageService {
    /**
     * @param {?} language
     * @return {?}
     */
    set languageDefault(language) {
        if (language && isLanguage(language)) {
            localStorage.setItem(poDefaultLanguage, language);
        }
    }
    /**
     * @return {?}
     */
    get languageDefault() {
        return localStorage.getItem(poDefaultLanguage);
    }
    /**
     * \@description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     * @return {?}
     */
    getLanguage() {
        /** @type {?} */
        const language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    }
    /**
     * \@description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     * @return {?}
     */
    getLanguageDefault() {
        return this.languageDefault;
    }
    /**
     * \@description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * \@default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     * @return {?}
     */
    getShortLanguage() {
        /** @type {?} */
        const language = this.getLanguage();
        /** @type {?} */
        const shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
    }
    /**
     * \@description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    setLanguage(language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(poLocaleKey, language.toLowerCase());
    }
    /**
     * \@description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    setLanguageDefault(language) {
        this.languageDefault = language;
    }
}
PoLanguageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ PoLanguageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PoLanguageService_Factory() { return new PoLanguageService(); }, token: PoLanguageService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGFuZ3VhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7OztNQUUxRyxpQkFBaUIsR0FBRyxxQkFBcUI7O01BQ3pDLFdBQVcsR0FBRyxnQkFBZ0I7Ozs7Ozs7O0FBWXBDLE1BQU0sT0FBTyxpQkFBaUI7Ozs7O0lBRTVCLElBQUksZUFBZSxDQUFDLFFBQWdCO1FBQ2xDLElBQUksUUFBUSxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNwQyxZQUFZLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7OztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW9CRCxXQUFXOztjQUNILFFBQVEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksa0JBQWtCLEVBQUU7UUFFbEcsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzVDLENBQUM7Ozs7Ozs7Ozs7SUFVRCxrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7Ozs7Ozs7Ozs7O0lBV0QsZ0JBQWdCOztjQUNSLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFOztjQUM3QixhQUFhLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1FBRWhELE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFDN0UsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztJQWdCRCxXQUFXLENBQUMsUUFBZ0I7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN6QixPQUFPO1NBQ1I7UUFFRCxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0lBZ0JELGtCQUFrQixDQUFDLFFBQWdCO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDO0lBQ2xDLENBQUM7OztZQXpHRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGdldEJyb3dzZXJMYW5ndWFnZSwgZ2V0U2hvcnRMYW5ndWFnZSwgaXNMYW5ndWFnZSwgcG9Mb2NhbGVEZWZhdWx0LCBwb0xvY2FsZXMgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuY29uc3QgcG9EZWZhdWx0TGFuZ3VhZ2UgPSAnUE9fREVGQVVMVF9MQU5HVUFHRSc7XG5jb25zdCBwb0xvY2FsZUtleSA9ICdQT19VU0VSX0xPQ0FMRSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcmVzcG9uc8OhdmVsIHBvciBnZXJlbmNpYXIgYXMgbGluZ3VhZ2VucyBkYSBhcGxpY2HDp8Ojby5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9MYW5ndWFnZVNlcnZpY2Uge1xuXG4gIHNldCBsYW5ndWFnZURlZmF1bHQobGFuZ3VhZ2U6IHN0cmluZykge1xuICAgIGlmIChsYW5ndWFnZSAmJiBpc0xhbmd1YWdlKGxhbmd1YWdlKSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocG9EZWZhdWx0TGFuZ3VhZ2UsIGxhbmd1YWdlKTtcbiAgICB9XG4gIH1cblxuICBnZXQgbGFuZ3VhZ2VEZWZhdWx0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKHBvRGVmYXVsdExhbmd1YWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIHJldG9ybmFyIG8gaWRpb21hIGF0aXZvLlxuICAgKlxuICAgKiBBIGJ1c2NhIGRvIGlkaW9tYSBzZXLDoSBmZWl0YSBuYSBzZWd1aW50ZSBvcmRlbTpcbiAgICpcbiAgICogICAxIC0gbyBpZGlvbWEgcXVlIGZvaSBhcm1hemVuYWRvIG5vICpsb2NhbFN0b3JhZ2UqLCBhdHJhdsOpcyBkbyBtw6l0b2RvIGBzZXRMYW5ndWFnZSgpYCB1dGlsaXphZG8gcGVsbyBpMThuLlxuICAgKlxuICAgKiAgIDIgLSBvIHZhbG9yIGluc2VyaWRvIG5hcyBjb25maWd1cmHDp8O1ZXMgZG8gbcOzZHVsbyBkbyBpMThuIGF0cmF2w6lzIGRvIHBhcsOibWV0cm8gYGNvbmZpZ2AsIHNlbmRvIG8gaWRpb21hIGluc2VyaWRvXG4gICAqIG5hIHByb3ByaWVkYWRlIGBsYW5ndWFnZWAgZGEgaW50ZXJmYWNlIGBQb0kxOG5Db25maWdEZWZhdWx0YC5cbiAgICpcbiAgICogICAzIC0gbyBpZGlvbWEgZG8gbmF2ZWdhZG9yIHV0aWxpemFkby5cbiAgICpcbiAgICogPiBDYXNvIG8gaWRpb21hIGRvIG5hdmVnYWRvciBuw6NvIHNlamEgc3Vwb3J0YWRvIHBlbG8gUE8gKGBwdGAsIGBlbmAsIGBlc2Agb3UgYHJ1YCksIHNlcsOhIHJldG9ybmFkbyB2YWxvciBgcHRgLlxuICAgKlxuICAgKiAqKlJldG9ybm86KiogYHN0cmluZ2AgY29tIGEgc2lnbGEgZG8gaWRpb21hIGF0aXZvLlxuICAgKi9cbiAgZ2V0TGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHBvTG9jYWxlS2V5KSB8fCB0aGlzLmxhbmd1YWdlRGVmYXVsdCB8fCBnZXRCcm93c2VyTGFuZ3VhZ2UoKTtcblxuICAgIHJldHVybiBsYW5ndWFnZSAmJiBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmV0b3JuYXIgbyBpZGlvbWEgKmRlZmF1bHQqIGRhIGFwbGljYcOnw6NvIGRlZmluaWRvIG5hcyBjb25maWd1cmHDp8O1ZXMgZG8gbcOzZHVsbyBkbyBpMThuIGF0cmF2w6lzXG4gICAqIGRvIHBhcsOibWV0cm8gYGNvbmZpZ2AuXG4gICAqXG4gICAqICoqUmV0b3JubzoqKiBgc3RyaW5nYCBjb20gYSBzaWdsYSBkbyBpZGlvbWEgKmRlZmF1bHQqLlxuICAgKi9cbiAgZ2V0TGFuZ3VhZ2VEZWZhdWx0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2VEZWZhdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmV0b3JuYXIgYSBhYnJldmlhw6fDo28gZG8gaWRpb21hIGF0aXZvIG5hIGFwbGljYcOnw6NvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgcHRgXG4gICAqXG4gICAqICoqUmV0b3JubzoqKiBgc3RyaW5nYCBjb20gYSBzaWdsYSBhYnJldmlhZGEgZG8gaWRpb21hIGF0aXZvLlxuICAgKi9cbiAgZ2V0U2hvcnRMYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy5nZXRMYW5ndWFnZSgpO1xuICAgIGNvbnN0IHNob3J0TGFuZ3VhZ2UgPSBnZXRTaG9ydExhbmd1YWdlKGxhbmd1YWdlKTtcblxuICAgIHJldHVybiBwb0xvY2FsZXMuaW5jbHVkZXMoc2hvcnRMYW5ndWFnZSkgPyBzaG9ydExhbmd1YWdlIDogcG9Mb2NhbGVEZWZhdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIHBhcmEgc2FsdmFyIG8gaWRpb21hIGRhIGFwbGljYcOnw6NvIG5vICpzdG9yYWdlKiwgdXRpbGl6YWRvIHBlbG8gc2VydmnDp28gZG8gaTE4bi5cbiAgICpcbiAgICogPiBBbyBkZWZpbmlyIHVtIGlkaW9tYSBwb3IgZXN0ZSBtw6l0b2RvLCB0b2RvcyBvcyBtw7NkdWxvcyBkYSBhcGxpY2HDp8OjbyB1dGlsaXphcsOjbyBvIGlkaW9tYSBkZWZpbmlkby5cbiAgICpcbiAgICogQHBhcmFtIGxhbmd1YWdlIHNpZ2xhIGRvIGlkaW9tYS5cbiAgICpcbiAgICogRXN0YSBzaWdsYSBkZXZlIHNlciBjb21wb3N0YSBwb3IgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIGlkaW9tYSxcbiAgICogcG9kZW5kbyBzZXIgYWRpY2lvbmFkbyBvdXRyYXMgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIHBhw61zLCBwb3IgZXhlbXBsbzogYHB0YCwgYHB0LUJSYCwgYHB0LWJyYCwgYGVuYCBvdSBgZW4tVVNgLlxuICAgKlxuICAgKiA+IENhc28gc2VqYSBpbmZvcm1hZG8gdW0gdmFsb3IgZGlmZXJlbnRlIGRlc3RlIHBhZHLDo28sIG8gbWVzbW8gc2Vyw6EgaWdub3JhZG8uXG4gICAqL1xuICBzZXRMYW5ndWFnZShsYW5ndWFnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKCFpc0xhbmd1YWdlKGxhbmd1YWdlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHBvTG9jYWxlS2V5LCBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTcOpdG9kbyBxdWUgZGVmaW5lIG8gaWRpb21hIGNvbmZpZ3VyYWRvIGEgcGFydGlyIGRvIHBhcsOibWV0cm8gYGNvbmZpZ2AgdXRpbGl6YWRvIHBlbG8gbcOzZHVsbyBkbyBpMThuLlxuICAgKlxuICAgKiA+IEFvIGRlZmluaXIgdW0gaWRpb21hIHBvciBlc3RlIHNlcnZpw6dvLCBhcGVuYXMgbyBtw7NkdWxvIGRvIGkxOG4gcmVmZXJlbnRlIGEgZXN0YSBjb25maWd1cmHDp8OjbyB1dGlsaXphcsOhIG8gaWRpb21hIGRlZmluaWRvLlxuICAgKlxuICAgKiBAcGFyYW0gbGFuZ3VhZ2Ugc2lnbGEgZG8gaWRpb21hLlxuICAgKlxuICAgKiBFc3RhIHNpZ2xhIGRldmUgc2VyIGNvbXBvc3RhIHBvciBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gaWRpb21hLFxuICAgKiBwb2RlbmRvIHNlciBhZGljaW9uYWRvIG91dHJhcyBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gcGHDrXMsIHBvciBleGVtcGxvOiBgcHRgLCBgcHQtQlJgLCBgcHQtYnJgLCBgZW5gIG91IGBlbi1VU2AuXG4gICAqXG4gICAqID4gQ2FzbyBzZWphIGluZm9ybWFkbyB1bSB2YWxvciBkaWZlcmVudGUgZGVzdGUgcGFkcsOjbywgbyBtZXNtbyBzZXLDoSBpZ25vcmFkby5cbiAgICovXG4gIHNldExhbmd1YWdlRGVmYXVsdChsYW5ndWFnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5sYW5ndWFnZURlZmF1bHQgPSBsYW5ndWFnZTtcbiAgfVxuXG59XG4iXX0=