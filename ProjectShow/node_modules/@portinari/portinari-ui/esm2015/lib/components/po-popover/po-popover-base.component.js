/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Input } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PO_CONTROL_POSITIONS } from './../../services/po-control-position/po-control-position.constants';
/** @type {?} */
const PO_POPOVER_DEFAULT_POSITION = 'right';
/** @type {?} */
const PO_POPOVER_DEFAULT_TRIGGER = 'click';
/** @type {?} */
const PO_POPOVER_TRIGGERS = ['click', 'hover'];
/**
 * \@description
 *
 * O componente `po-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
 * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
 *
 * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
 * [**po-tooltip**](https://portinari.io/documentation/po-tooltip?view=doc).
 *
 * Para conteúdos maiores recomenda-se o uso do [**po-modal**](https://portinari.io/documentation/po-modal?view=doc).
 *
 * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
 * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
 * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
 *
 * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
 * Os eventos permitidos são: `click` e `hover`.
 *
 */
export class PoPopoverBaseComponent {
    constructor() {
        // Controla se o popover fica oculto ou visível, por padrão é oculto.
        this.isHidden = true;
        this._hideArrow = false;
        this._position = PO_POPOVER_DEFAULT_POSITION;
        this._trigger = PO_POPOVER_DEFAULT_TRIGGER;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Desabilita a seta do componente *popover*.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideArrow(value) {
        this._hideArrow = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideArrow() {
        return this._hideArrow;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a posição que o po-popover abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-popover no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-popover no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-popover no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-popover abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-popover abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-popover abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-popover no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-popover no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-popover no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-popover acima do componente alvo.
     * - `top-right`: Posiciona o po-popover acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-popover acima e à esquerda do componente alvo.
     *
     *
     * \@default right
     * @param {?} value
     * @return {?}
     */
    set position(value) {
        this._position = PO_CONTROL_POSITIONS.includes(value) ? value : PO_POPOVER_DEFAULT_POSITION;
    }
    /**
     * @return {?}
     */
    get position() {
        return this._position;
    }
    /**
     * \@description
     *
     * Define o evento que abrirá o po-popover.
     *
     * Valores válidos:
     *  - `click`: Abre ao clicar no componente alvo.
     *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
     *
     * \@default click
     * \@optional
     * @param {?} value
     * @return {?}
     */
    set trigger(value) {
        this._trigger = PO_POPOVER_TRIGGERS.includes(value) ? value : PO_POPOVER_DEFAULT_TRIGGER;
    }
    /**
     * @return {?}
     */
    get trigger() {
        return this._trigger;
    }
}
PoPopoverBaseComponent.propDecorators = {
    hideArrow: [{ type: Input, args: ['p-hide-arrow',] }],
    position: [{ type: Input, args: ['p-position',] }],
    target: [{ type: Input, args: ['p-target',] }],
    title: [{ type: Input, args: ['p-title',] }],
    trigger: [{ type: Input, args: ['p-trigger',] }]
};
if (false) {
    /** @type {?} */
    PoPopoverBaseComponent.prototype.isHidden;
    /**
     * @type {?}
     * @private
     */
    PoPopoverBaseComponent.prototype._hideArrow;
    /**
     * @type {?}
     * @private
     */
    PoPopoverBaseComponent.prototype._position;
    /**
     * @type {?}
     * @private
     */
    PoPopoverBaseComponent.prototype._trigger;
    /**
     * \@description
     *
     * ElementRef do componente de origem responsável por abrir o popover.
     * Para utilizar o po-popover deve-se colocar uma variável no componente que vai disparar o evento
     * de abertura, exemplo:
     *
     * ```
     * <po-button
     *   p-label="Open Popover">
     * </po-button>
     *
     * <po-popover
     *   [p-origin]="poButton"
     *   [p-title]="Portinari Popover">
     * </po-popover>
     * ```
     *
     * Também deve-se criar um ViewChild para cada popover, passando como referência o elemento do
     * HTML que irá disparar o evento. Exemplo:
     *
     * ```
     * \@ViewChild(PoButtonComponent, {read: ElementRef}) poButton: PoButtonComponent;
     * ```
     * @type {?}
     */
    PoPopoverBaseComponent.prototype.target;
    /**
     * Título do popover.
     * @type {?}
     */
    PoPopoverBaseComponent.prototype.title;
    /**
     * @type {?}
     * @protected
     */
    PoPopoverBaseComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @protected
     */
    PoPopoverBaseComponent.prototype.mouseEnterListener;
    /**
     * @type {?}
     * @protected
     */
    PoPopoverBaseComponent.prototype.mouseLeaveListener;
    /**
     * @type {?}
     * @protected
     */
    PoPopoverBaseComponent.prototype.resizeListener;
}
//# sourceMappingURL=data:application/json;base64,