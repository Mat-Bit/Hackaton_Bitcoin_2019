/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { PoControlPositionService } from './../../services/po-control-position/po-control-position.service';
import { PoPopoverBaseComponent } from './po-popover-base.component';
/**
 *
 * \@docsExtends PoPopoverBaseComponent
 *
 * \@example
 *
 * <example name="po-popover-basic" title="Portinari Popover Basic">
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-labs" title="Portinari Popover Labs">
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-credit-card" title="Portinari Popover - Credit Card">
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
 * </example>
 */
export class PoPopoverComponent extends PoPopoverBaseComponent {
    /**
     * @param {?} renderer
     * @param {?} poControlPosition
     */
    constructor(renderer, poControlPosition) {
        super();
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
        this.arrowDirection = 'left';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initEventListenerFunction();
        this.setElementsControlPosition();
        this.setRendererListenInit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * @return {?}
     */
    close() {
        this.isHidden = true;
    }
    /**
     * @return {?}
     */
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        () => {
            this.setPopoverPosition();
        }), 200);
    }
    /**
     * @return {?}
     */
    open() {
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setElementsControlPosition();
            this.setPopoverPosition();
            this.setOpacity(1);
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOpacity(value) {
        this.popoverElement.nativeElement.style.opacity = value;
    }
    /**
     * @return {?}
     */
    setPopoverPosition() {
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    }
    /**
     * @return {?}
     */
    setRendererListenInit() {
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!this.isHidden) {
                this.debounceResize();
            }
        }));
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.open();
            }));
            this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.close();
            }));
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.togglePopup(event);
            }));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    togglePopup(event) {
        if (!this.isHidden && !this.popoverElement.nativeElement.contains(event.target) &&
            !this.target.nativeElement.contains(event.target)) {
            this.close();
        }
        else if (this.target.nativeElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    }
    /**
     * @private
     * @return {?}
     */
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    /**
     * @private
     * @return {?}
     */
    initEventListenerFunction() {
        this.eventListenerFunction = (/**
         * @return {?}
         */
        () => {
            this.setPopoverPosition();
        });
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    /**
     * @private
     * @return {?}
     */
    setElementsControlPosition() {
        /** @type {?} */
        const popoverOffset = 8;
        this.poControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
    }
}
PoPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-popover',
                template: "<div [hidden]=\"isHidden\" class=\"po-popover\" #popoverElement>\n\n  <div *ngIf=\"!hideArrow\" class=\"po-popover-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"po-popover-content\">\n    <span *ngIf=\"title\" class=\"po-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                providers: [PoControlPositionService]
            }] }
];
/** @nocollapse */
PoPopoverComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: PoControlPositionService }
];
PoPopoverComponent.propDecorators = {
    popoverElement: [{ type: ViewChild, args: ['popoverElement', { read: ElementRef, static: true },] }]
};
if (false) {
    /** @type {?} */
    PoPopoverComponent.prototype.arrowDirection;
    /** @type {?} */
    PoPopoverComponent.prototype.timeoutResize;
    /** @type {?} */
    PoPopoverComponent.prototype.eventListenerFunction;
    /** @type {?} */
    PoPopoverComponent.prototype.popoverElement;
    /**
     * @type {?}
     * @private
     */
    PoPopoverComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoPopoverComponent.prototype.poControlPosition;
}
//# sourceMappingURL=data:application/json;base64,