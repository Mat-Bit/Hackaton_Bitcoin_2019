/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * \@description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
export class PoStepComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._status = PoStepperStatus.Disabled;
        // ID do step
        this.id = uuid();
    }
    // Estado de exibição do `po-step`.
    /**
     * @param {?} status
     * @return {?}
     */
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    /**
     * @return {?}
     */
    get status() {
        return this._status;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    /**
     * @protected
     * @return {?}
     */
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            (this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error) ? '' : 'none';
    }
}
PoStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-step',
                template: "<ng-content></ng-content>\n"
            }] }
];
/** @nocollapse */
PoStepComponent.ctorParameters = () => [
    { type: ElementRef }
];
PoStepComponent.propDecorators = {
    canActiveNextStep: [{ type: Input, args: ['p-can-active-next-step',] }],
    label: [{ type: Input, args: ['p-label',] }],
    status: [{ type: Input, args: ['p-status',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoStepComponent.prototype._status;
    /** @type {?} */
    PoStepComponent.prototype.id;
    /**
     * \@optional
     *
     * \@description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <po-step p-label="Step 1" [p-can-active-next-step]="validate.bind(this)">
     * ...
     * </po-step>
     * ```
     * @type {?}
     */
    PoStepComponent.prototype.canActiveNextStep;
    /**
     * Título que será exibido descrevendo o passo (*step*).
     * @type {?}
     */
    PoStepComponent.prototype.label;
    /**
     * @type {?}
     * @private
     */
    PoStepComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXN0ZXBwZXIvcG8tc3RlcC9wby1zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJDbEUsTUFBTSxPQUFPLGVBQWU7Ozs7SUEyQzFCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUF6Q2xDLFlBQU8sR0FBcUIsZUFBZSxDQUFDLFFBQVEsQ0FBQzs7UUFHN0QsT0FBRSxHQUFZLElBQUksRUFBRSxDQUFDO0lBc0N5QixDQUFDOzs7Ozs7SUFWL0MsSUFBdUIsTUFBTSxDQUFDLE1BQXVCO1FBQ25ELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBRXRCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7OztJQUlELGtCQUFrQjtRQUNoQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7OztJQUVTLHlCQUF5QjtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUN6QyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDcEcsQ0FBQzs7O1lBeERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsU0FBUztnQkFDbkIsdUNBQXFDO2FBQ3RDOzs7O1lBOUNxQyxVQUFVOzs7Z0NBMEU3QyxLQUFLLFNBQUMsd0JBQXdCO29CQUc5QixLQUFLLFNBQUMsU0FBUztxQkFHZixLQUFLLFNBQUMsVUFBVTs7Ozs7OztJQS9CakIsa0NBQTZEOztJQUc3RCw2QkFBcUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFzQnJCLDRDQUE2RDs7Ozs7SUFHN0QsZ0NBQWdDOzs7OztJQWFwQixxQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9TdGVwcGVyU3RhdHVzIH0gZnJvbSAnLi4vZW51bXMvcG8tc3RlcHBlci1zdGF0dXMuZW51bSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1zdGVwYCDDqSB1dGlsaXphZG8gcGFyYSBlbnZvbHZlciBlIHJlbmRlcml6YXIgbyBjb250ZcO6ZG8gZGUgdW0gcGFzc28gKCpzdGVwKikgZG8gYHBvLXN0ZXBwZXJgLCBwb3IgZXhlbXBsbzpcbiAqXG4gKiBgYGBcbiAqIDxwby1zdGVwcGVyPlxuICpcbiAqICAgIDxwby1zdGVwIHAtbGFiZWw9XCJFbmRlcmXDp29cIj5cbiAqXG4gKiAgICAgICAgPCEtLSBDb250ZcO6ZG8gcmVmZXJlbnRlIGFvIGVuZGVyZcOnbyAtLT5cbiAqXG4gKiAgICA8L3BvLXN0ZXA+XG4gKlxuICogICAgPHBvLXN0ZXAgcC1sYWJlbD1cIlBhZ2FtZW50b1wiPlxuICpcbiAqICAgICAgICA8IS0tIENvbnRlw7pkbyByZWZlcmVudGUgYW8gcGFnYW1lbnRvIC0tPlxuICpcbiAqICAgIDwvcG8tc3RlcD5cbiAqXG4gKiAgPC9wby1zdGVwcGVyPlxuICogYGBgXG4gKlxuICogQSByZW5kZXJpemHDp8OjbyBkbyBjb250ZcO6ZG8gZW52b2x2aWRvIG5hIHRlbGEgZSBvIGNvbnRyb2xlIGRvcyBzdGF0dXMgc8OjbyBmZWl0b3MgYXV0b21hdGljYW1lbnRlLiBObyBxdWFsLCBvIHByaW1laXJvXG4gKiBgcG8tc3RlcGAgZW5jb250cmFkbyBzZXLDoSBjb2xvY2FkbyBjb21vIGF0aXZvLCBvIHByw7N4aW1vIGZpY2EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiBlIG9zIGRlbWFpcyBmaWNhbVxuICogZGVzYWJpbGl0YWRvcyAoKmRpc2FibGVkKikuXG4gKlxuICogQW8gY2xpY2FyIG5vIGBwby1zdGVwYCBxdWUgZXN0w6EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiwgbyBxdWUgZXN0w6EgYXRpdm8gZmljYXLDoSBjb20gb1xuICogc3RhdHVzIGRlIGNvbmNsdcOtZG8gKCpkb25lKikgZSBvIHByw7N4aW1vIHF1ZSBlc3RhdmEgZGVzYWJpbGl0YWRvIGZpY2Fyw6EgY29tIG8gc3RhdHVzICpkZWZhdWx0KiBlIG8gcmVzdGFudGUgcGVybWFuZWNlcsOhXG4gKiBjb20gbyBzdGF0dXMgZGVzYWJpbGl0YWRvLlxuICpcbiAqID4gQW8gdXRpbGl6YXIgbyBgcG8tc3RlcGAsIG8gY29tcG9uZW50ZSBgcG8tc3RlcHBlcmAgZnVuY2lvbmFyw6EgZGUgZm9ybWEgc2VxdWVuY2lhbCwgb3Ugc2VqYSwgbsOjbyBzZXLDoSBwb3Nzw612ZWxcbiAqIHB1bGFyIHBhcmEgb3V0cm8gYHBvLXN0ZXBgIHF1ZSBlc3RlamEgY29tIG8gc3RhdHVzIGlndWFsIGEgZGVzYWJpbGl0YWRvICgqZGlzYWJsZWQqKS5cbiAqXG4gKiBBY2Vzc2UgYSBbZG9jdW1lbnRhw6fDo28gZG8gYHBvLXN0ZXBwZXJgXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwcGVyKSBwYXJhIHRlciBtYWlzIGluZm9ybWHDp8O1ZXMgc29icmUgbyBzZXUgZnVuY2lvbmFtZW50b1xuICogZSBleGVtcGxvcyBkZSB1c28uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXN0ZXAnLFxuICB0ZW1wbGF0ZVVybDogJ3BvLXN0ZXAuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvU3RlcENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuXG4gIHByaXZhdGUgX3N0YXR1cz86IFBvU3RlcHBlclN0YXR1cyA9IFBvU3RlcHBlclN0YXR1cy5EaXNhYmxlZDtcblxuICAvLyBJRCBkbyBzdGVwXG4gIGlkPzogc3RyaW5nID0gdXVpZCgpO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIGNoYW1hZGEgcXVhbmRvIG8gcHLDs3hpbW8gKnN0ZXAqIGZvciBjbGljYWRvIG91IHF1YW5kbyBvIG3DqXRvZG8gYFBvU3RlcHBlckNvbXBvbmVudC5uZXh0KClgIGZvciBjaGFtYWRvLlxuICAgKiBBbyByZXRvcm5hciBgdHJ1ZWAgZGVmaW5lIHF1ZSBlc3NlICpzdGVwKiBmaWNhcsOhIGF0aXZvIGUgbyBhdHVhbCBjb21vIGNvbmNsdcOtZG8gKCpkb25lKikuXG4gICAqXG4gICAqIEFvIHNlciBkaXNwYXJhZGEsIGEgbWVzbWEgcmVjZWJlcsOhIHBvciBwYXLDom1ldHJvIG8gYFBvU3RlcENvbXBvbmVudGAgYXR1YWwuXG4gICAqXG4gICAqIE8gY29udGV4dG8gZGEgZnVuw6fDo28gcXVlIHNlcsOhIGNoYW1hZGEsIHNlcsOhIG8gbWVzbW8gcXVlIG8gZG8gYFBvU3RlcENvbXBvbmVudGAsIGVudMOjbyBwYXJhIHBvZGVyIGFsdGVyYXJcbiAgICogcGFyYSBvIGNvbnRleHRvIGRvIGNvbXBvbmVudGUgcXVlIG8gZXN0w6EgdXRpbGl6YW5kbywgcG9kZSBzZXIgdXRpbGl6YWRvIGEgcHJvcHJpZWRhZGUgYGJpbmRgIGRvIEphdmFzY3JpcHQuXG4gICAqIFBvciBleGVtcGxvLCBwYXJhIGEgZnVuw6fDo28gYHZhbGlkYXRlYDpcbiAgICpcbiAgICogYGBgXG4gICAqIDxwby1zdGVwIHAtbGFiZWw9XCJTdGVwIDFcIiBbcC1jYW4tYWN0aXZlLW5leHQtc3RlcF09XCJ2YWxpZGF0ZS5iaW5kKHRoaXMpXCI+XG4gICAqIC4uLlxuICAgKiA8L3BvLXN0ZXA+XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLWNhbi1hY3RpdmUtbmV4dC1zdGVwJykgY2FuQWN0aXZlTmV4dFN0ZXA6IEZ1bmN0aW9uO1xuXG4gIC8qKiBUw610dWxvIHF1ZSBzZXLDoSBleGliaWRvIGRlc2NyZXZlbmRvIG8gcGFzc28gKCpzdGVwKikuICovXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XG5cbiAgLy8gRXN0YWRvIGRlIGV4aWJpw6fDo28gZG8gYHBvLXN0ZXBgLlxuICBASW5wdXQoJ3Atc3RhdHVzJykgc2V0IHN0YXR1cyhzdGF0dXM6IFBvU3RlcHBlclN0YXR1cykge1xuICAgIHRoaXMuX3N0YXR1cyA9IHN0YXR1cztcblxuICAgIHRoaXMuc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpO1xuICB9XG5cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID1cbiAgICAgICh0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkFjdGl2ZSB8fCB0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkVycm9yKSA/ICcnIDogJ25vbmUnO1xuICB9XG5cbn1cbiJdfQ==