/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ContentChildren, QueryList } from '@angular/core';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperBaseComponent } from './po-stepper-base.component';
import { PoStepperStatus } from './enums/po-stepper-status.enum';
/**
 * \@docsExtends PoStepperBaseComponent
 *
 * \@example
 *
 * <example name="po-stepper-basic" title="Portinari Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="Portinari Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="Portinari Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 */
export class PoStepperComponent extends PoStepperBaseComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    /**
     * @return {?}
     */
    get currentStepIndex() {
        return this.step - 1;
    }
    /**
     * @return {?}
     */
    get stepList() {
        return this.usePoSteps && this.poSteps || this.steps;
    }
    /**
     * @return {?}
     */
    get usePoSteps() {
        return !!this.poSteps.length;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.activeFirstStep();
        this.poSteps.changes.subscribe((/**
         * @return {?}
         */
        () => {
            this.controlStepsStatus(0, this.poSteps.first);
        }));
    }
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {?} index {number} Índice do `po-step` que se deseja ativar.
     * @return {?}
     */
    active(index) {
        if (!this.usePoSteps) {
            return;
        }
        /** @type {?} */
        const stepsArray = this.getPoSteps();
        /** @type {?} */
        const step = stepsArray[index];
        /** @type {?} */
        const isDisabledStep = step.status === PoStepperStatus.Disabled;
        /** @type {?} */
        const isErrorStep = step.status === PoStepperStatus.Error;
        if (!isDisabledStep || isErrorStep) {
            this.changeStep(index, step);
        }
    }
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    first() {
        if (!this.usePoSteps) {
            return;
        }
        /** @type {?} */
        const firstStep = this.poSteps.first;
        /** @type {?} */
        const firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    }
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    next() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        /** @type {?} */
        const nextIndex = stepIndex + 1;
        /** @type {?} */
        const nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    }
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    previous() {
        if (!this.usePoSteps) {
            return;
        }
        const { steps, stepIndex } = this.getStepsAndIndex(this.currentActiveStep);
        /** @type {?} */
        const previousIndex = stepIndex - 1;
        /** @type {?} */
        const previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    }
    /**
     * @param {?} stepIndex
     * @param {?=} step
     * @return {?}
     */
    changeStep(stepIndex, step) {
        /** @type {?} */
        const isDifferentStep = (!this.currentActiveStep || step.id !== this.currentActiveStep.id);
        if (this.usePoSteps && isDifferentStep && this.allowNextStep(stepIndex)) {
            this.controlStepsStatus(stepIndex, step);
            this.onChangeStep.emit(step);
        }
        else if (!this.usePoSteps && stepIndex !== this.currentStepIndex && this.allowNextStep(stepIndex)) {
            // if para tratamento do modelo antigo do po-stepper
            this.onChangeStep.emit(stepIndex + 1);
        }
    }
    /**
     * @param {?} step
     * @return {?}
     */
    onStepActive(step) {
        this.currentActiveStep = step;
        this.previousActiveStep = this.poSteps.find((/**
         * @param {?} stepChild
         * @return {?}
         */
        stepChild => stepChild.status === PoStepperStatus.Active && stepChild.id !== step.id));
        this.setPreviousStepAsDone();
    }
    /**
     * @param {?} step
     * @return {?}
     */
    trackByFn(step) {
        return step.id;
    }
    /**
     * @private
     * @return {?}
     */
    activeFirstStep() {
        /** @type {?} */
        const hasStepActive = this.poSteps.some((/**
         * @param {?} poStep
         * @return {?}
         */
        poStep => poStep.status === PoStepperStatus.Active));
        if (this.usePoSteps && !hasStepActive) {
            this.changeStep(0, this.poSteps.first);
        }
    }
    /**
     * @private
     * @param {?} nextStepIndex
     * @return {?}
     */
    allowNextStep(nextStepIndex) {
        if (!this.sequential) {
            return true;
        }
        if (this.usePoSteps) {
            return this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep);
        }
        return this.steps.slice(this.step, nextStepIndex).every((/**
         * @param {?} step
         * @return {?}
         */
        step => step.status === PoStepperStatus.Done));
    }
    /**
     * @private
     * @param {?=} currentActiveStep
     * @return {?}
     */
    canActiveNextStep(currentActiveStep = (/** @type {?} */ ({}))) {
        if (!currentActiveStep.canActiveNextStep) {
            return true;
        }
        /** @type {?} */
        const canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        currentActiveStep.status = this.getStepperStatusByCanActive(canActiveNextStep);
        return canActiveNextStep;
    }
    /**
     * @private
     * @param {?} stepIndex
     * @param {?} step
     * @return {?}
     */
    controlStepsStatus(stepIndex, step) {
        if (this.usePoSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    }
    /**
     * @private
     * @param {?} canActiveNextStep
     * @return {?}
     */
    getStepperStatusByCanActive(canActiveNextStep) {
        return canActiveNextStep ? PoStepperStatus.Done : PoStepperStatus.Error;
    }
    /**
     * @private
     * @param {?=} step
     * @return {?}
     */
    getStepsAndIndex(step = (/** @type {?} */ ({}))) {
        /** @type {?} */
        const steps = this.getPoSteps();
        /** @type {?} */
        const stepIndex = steps.findIndex((/**
         * @param {?} poStep
         * @return {?}
         */
        poStep => poStep.id === step.id));
        return { steps, stepIndex };
    }
    /**
     * @private
     * @return {?}
     */
    getPoSteps() {
        return this.poSteps.toArray();
    }
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    isBeforeStep(stepIndex) {
        /** @type {?} */
        const currentActiveStepIndex = (/**
         * @return {?}
         */
        () => this.getPoSteps().findIndex((/**
         * @param {?} step
         * @return {?}
         */
        step => step.id === this.currentActiveStep.id)));
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    }
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    setFinalSteppersAsDisabled(stepIndex) {
        this.getPoSteps()
            .filter((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        (step, index) => step && index >= stepIndex + 2))
            .forEach((/**
         * @param {?} step
         * @return {?}
         */
        step => step.status = PoStepperStatus.Disabled));
    }
    /**
     * @private
     * @param {?} step
     * @return {?}
     */
    setStepAsActive(step) {
        step.status = PoStepperStatus.Active;
    }
    /**
     * @private
     * @param {?} currentStep
     * @return {?}
     */
    setNextStepAsDefault(currentStep) {
        const { steps, stepIndex } = this.getStepsAndIndex(currentStep);
        /** @type {?} */
        const nextIndex = stepIndex + 1;
        if (nextIndex < this.poSteps.length) {
            steps[nextIndex].status = PoStepperStatus.Default;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setPreviousStepAsDone() {
        if (this.previousActiveStep) {
            this.previousActiveStep.status = PoStepperStatus.Done;
        }
    }
}
PoStepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-stepper',
                template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n\n  <div class=\"po-stepper-container\">\n    <po-stepper-step *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index+1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\">\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n\n</div>\n"
            }] }
];
/** @nocollapse */
PoStepperComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoStepperComponent.propDecorators = {
    poSteps: [{ type: ContentChildren, args: [PoStepComponent,] }]
};
if (false) {
    /** @type {?} */
    PoStepperComponent.prototype.poSteps;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.currentActiveStep;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.previousActiveStep;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,