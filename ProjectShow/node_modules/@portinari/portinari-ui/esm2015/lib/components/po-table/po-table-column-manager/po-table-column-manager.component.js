/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToInt, poLocaleDefault } from '../../../utils/util';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
/** @type {?} */
const PoTableColumnManagerMaxColumnsDefault = 99999;
/** @type {?} */
export const poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
export class PoTableColumnManagerComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.columnsOptions = [];
        this.literals = Object.assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault], poTableColumnManagerLiteralsDefault[browserLanguage()]);
        this.visibleColumns = [];
        this.defaultColumns = [];
        this.columns = [];
        this.visibleColumnsChange = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxColumns(value) {
        this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
    }
    /**
     * @return {?}
     */
    get maxColumns() {
        return this._maxColumns;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateColumnsOptions(this.columns);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { columns, maxColumns, target } = changes;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateColumnsOptions(this.columns);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * @param {?} checkedColumns
     * @return {?}
     */
    onChangeVisibleColumns(checkedColumns) {
        this.disableColumnsOptions(this.columnsOptions);
        /** @type {?} */
        const visibleTableColumns = this.getVisibleTableColumns(checkedColumns);
        this.visibleColumnsChange.emit(visibleTableColumns);
    }
    /**
     * @return {?}
     */
    restore() {
        this.updateColumnsOptions(this.defaultColumns);
    }
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    disableColumnsOptions(columns = []) {
        // necessario timeout para que seja possivel atualizar os columnsOptions apos a mudança do model
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.columnsOptions = columns.map((/**
             * @param {?} column
             * @return {?}
             */
            column => (Object.assign({}, column, { disabled: this.isDisableColumn(column.value) }))));
        }));
    }
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    getColumnTitleLabel(column) {
        return column.label || capitalizeFirstLetter(column.property);
    }
    /**
     * Retorna um Array de column.property das colunas que são visiveis.
     * @private
     * @param {?} columns
     * @return {?}
     */
    getVisibleColumns(columns) {
        /** @type {?} */
        const visibleColumns = [];
        columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            if (column.visible !== false && visibleColumns.length < this.maxColumns && column.type !== 'detail') {
                visibleColumns.push(column.property);
            }
        }));
        return visibleColumns;
    }
    /**
     * Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas.
     * @private
     * @param {?} visibleColumns
     * @return {?}
     */
    getVisibleTableColumns(visibleColumns) {
        return this.columns.map((/**
         * @param {?} column
         * @return {?}
         */
        column => (Object.assign({}, column, { visible: visibleColumns.includes(column.property) || column.type === 'detail' }))));
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            if (this.popover) {
                this.popover.close();
            }
        }));
    }
    /**
     * @private
     * @param {?} property
     * @return {?}
     */
    isDisableColumn(property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    }
    /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    mapTableColumnsToCheckboxOptions(columns = []) {
        /** @type {?} */
        const columnsOptions = [];
        columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: this.getColumnTitleLabel(column),
                    disabled: this.isDisableColumn(column.property)
                });
            }
        }));
        return columnsOptions;
    }
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    onChangeColumns(columns) {
        const { firstChange, currentValue = [], previousValue = [] } = columns;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (firstChange || (this.defaultColumns.length !== currentValue.length)) {
            this.defaultColumns = currentValue;
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (previousValue.length !== currentValue.length) {
            this.updateColumnsOptions(currentValue);
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    updateColumnsOptions(columns) {
        this.visibleColumns = this.getVisibleColumns(columns);
        this.columnsOptions = this.mapTableColumnsToCheckboxOptions(columns);
        this.onChangeVisibleColumns(this.visibleColumns);
    }
}
PoTableColumnManagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-table-column-manager',
                template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\">\n\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\" (click)=\"popover.close()\">\n      </button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-checkbox-group\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"onChangeVisibleColumns($event)\">\n    </po-checkbox-group>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-small\n      p-type=\"link\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\">\n    </po-button>\n  </div>\n</po-popover>\n"
            }] }
];
/** @nocollapse */
PoTableColumnManagerComponent.ctorParameters = () => [
    { type: Renderer2 }
];
PoTableColumnManagerComponent.propDecorators = {
    columns: [{ type: Input, args: ['p-columns',] }],
    maxColumns: [{ type: Input, args: ['p-max-columns',] }],
    target: [{ type: Input, args: ['p-target',] }],
    visibleColumnsChange: [{ type: Output, args: ['p-visible-columns-change',] }],
    popover: [{ type: ViewChild, args: [PoPopoverComponent, { static: false },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype._maxColumns;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.columnsOptions;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.literals;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.visibleColumns;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.defaultColumns;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.resizeListener;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.columns;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.target;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.visibleColumnsChange;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.popover;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLW1hbmFnZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4tbWFuYWdlci9wby10YWJsZS1jb2x1bW4tbWFuYWdlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQ2pELE1BQU0sRUFBK0IsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRixPQUFPLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUU1RyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQzs7TUFJckUscUNBQXFDLEdBQUcsS0FBSzs7QUFFbkQsTUFBTSxPQUFPLG1DQUFtQyxHQUFHO0lBQ2pELEVBQUUsRUFBRTtRQUNGLGNBQWMsRUFBRSxpQkFBaUI7UUFDakMsY0FBYyxFQUFFLGlCQUFpQjtLQUNsQztJQUNELEVBQUUsRUFBRTtRQUNGLGNBQWMsRUFBRSxvQkFBb0I7UUFDcEMsY0FBYyxFQUFFLHVCQUF1QjtLQUN4QztJQUNELEVBQUUsRUFBRTtRQUNGLGNBQWMsRUFBRSx3QkFBd0I7UUFDeEMsY0FBYyxFQUFFLGtCQUFrQjtLQUNuQztJQUNELEVBQUUsRUFBRTtRQUNGLGNBQWMsRUFBRSxrQkFBa0I7UUFDbEMsY0FBYyxFQUFFLGdCQUFnQjtLQUNqQztDQUNGO0FBTUQsTUFBTSxPQUFPLDZCQUE2Qjs7OztJQThCeEMsWUFBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQTVCL0IsZ0JBQVcsR0FBVyxxQ0FBcUMsQ0FBQztRQUVwRSxtQkFBYyxHQUFpQyxFQUFFLENB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U0FBQyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7Ozs7Ozs7SUExQmhELG9EQUFvRTs7SUFFcEUsdURBQWtEOztJQUNsRCxpREFHRTs7SUFDRix1REFBbUM7Ozs7O0lBRW5DLHVEQUFrRDs7Ozs7SUFDbEQsdURBQW1DOztJQUVuQyxnREFBdUQ7O0lBVXZELCtDQUFzQzs7SUFFdEMsNkRBQW9HOztJQUVwRyxnREFBOEU7Ozs7O0lBRWxFLGlEQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCxcbiAgT3V0cHV0LCBTaW1wbGVDaGFuZ2UsIFNpbXBsZUNoYW5nZXMsIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGJyb3dzZXJMYW5ndWFnZSwgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyLCBjb252ZXJ0VG9JbnQsIHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9DaGVja2JveEdyb3VwT3B0aW9uIH0gZnJvbSAnLi4vLi4vcG8tZmllbGQvcG8tY2hlY2tib3gtZ3JvdXAvaW50ZXJmYWNlcy9wby1jaGVja2JveC1ncm91cC1vcHRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUG9wb3ZlckNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3BvLXBvcG92ZXIvcG8tcG9wb3Zlci5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBQb1RhYmxlQ29sdW1uIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby10YWJsZS1jb2x1bW4uaW50ZXJmYWNlJztcblxuY29uc3QgUG9UYWJsZUNvbHVtbk1hbmFnZXJNYXhDb2x1bW5zRGVmYXVsdCA9IDk5OTk5O1xuXG5leHBvcnQgY29uc3QgcG9UYWJsZUNvbHVtbk1hbmFnZXJMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiB7XG4gICAgY29sdW1uc01hbmFnZXI6ICdDb2x1bW5zIG1hbmFnZXInLFxuICAgIHJlc3RvcmVEZWZhdWx0OiAnUmVzdG9yZSBkZWZhdWx0J1xuICB9LFxuICBlczoge1xuICAgIGNvbHVtbnNNYW5hZ2VyOiAnR2VyZW50ZSBkZSBjb2x1bW5hJyxcbiAgICByZXN0b3JlRGVmYXVsdDogJ1Jlc3RhdXJhciBwb3IgZGVmZWN0bydcbiAgfSxcbiAgcHQ6IHtcbiAgICBjb2x1bW5zTWFuYWdlcjogJ0dlcmVuY2lhZG9yIGRlIGNvbHVuYXMnLFxuICAgIHJlc3RvcmVEZWZhdWx0OiAnUmVzdGF1cmFyIHBhZHLDo28nXG4gIH0sXG4gIHJ1OiB7XG4gICAgY29sdW1uc01hbmFnZXI6ICfQvNC10L3QtdC00LbQtdGAINC60L7Qu9C+0L3QvtC6JyxcbiAgICByZXN0b3JlRGVmYXVsdDogJ9GB0LHRgNC+0YEg0L3QsNGB0YLRgNC+0LXQuidcbiAgfVxufTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdGFibGUtY29sdW1uLW1hbmFnZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFibGUtY29sdW1uLW1hbmFnZXIuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvVGFibGVDb2x1bW5NYW5hZ2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBfbWF4Q29sdW1uczogbnVtYmVyID0gUG9UYWJsZUNvbHVtbk1hbmFnZXJNYXhDb2x1bW5zRGVmYXVsdDtcblxuICBjb2x1bW5zT3B0aW9uczogQXJyYXk8UG9DaGVja2JveEdyb3VwT3B0aW9uPiA9IFtdO1xuICBsaXRlcmFscyA9IHtcbiAgICAuLi5wb1RhYmxlQ29sdW1uTWFuYWdlckxpdGVyYWxzRGVmYXVsdFtwb0xvY2FsZURlZmF1bHRdLFxuICAgIC4uLnBvVGFibGVDb2x1bW5NYW5hZ2VyTGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXVxuICB9O1xuICB2aXNpYmxlQ29sdW1uczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuXG4gIHByaXZhdGUgZGVmYXVsdENvbHVtbnM6IEFycmF5PFBvVGFibGVDb2x1bW4+ID0gW107XG4gIHByaXZhdGUgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgQElucHV0KCdwLWNvbHVtbnMnKSBjb2x1bW5zOiBBcnJheTxQb1RhYmxlQ29sdW1uPiA9IFtdO1xuXG4gIEBJbnB1dCgncC1tYXgtY29sdW1ucycpIHNldCBtYXhDb2x1bW5zKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9tYXhDb2x1bW5zID0gY29udmVydFRvSW50KHZhbHVlLCBQb1RhYmxlQ29sdW1uTWFuYWdlck1heENvbHVtbnNEZWZhdWx0KTtcbiAgfVxuXG4gIGdldCBtYXhDb2x1bW5zKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXhDb2x1bW5zO1xuICB9XG5cbiAgQElucHV0KCdwLXRhcmdldCcpIHRhcmdldDogRWxlbWVudFJlZjtcblxuICBAT3V0cHV0KCdwLXZpc2libGUtY29sdW1ucy1jaGFuZ2UnKSB2aXNpYmxlQ29sdW1uc0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8QXJyYXk8UG9UYWJsZUNvbHVtbj4+KCk7XG5cbiAgQFZpZXdDaGlsZChQb1BvcG92ZXJDb21wb25lbnQsIHsgc3RhdGljOiBmYWxzZSB9KSBwb3BvdmVyOiBQb1BvcG92ZXJDb21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudXBkYXRlQ29sdW1uc09wdGlvbnModGhpcy5jb2x1bW5zKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBjb25zdCB7IGNvbHVtbnMsIG1heENvbHVtbnMsIHRhcmdldCB9ID0gY2hhbmdlcztcblxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LmZpcnN0Q2hhbmdlKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBpZiAoY29sdW1ucykge1xuICAgICAgdGhpcy5vbkNoYW5nZUNvbHVtbnMoY29sdW1ucyk7XG4gICAgfVxuXG4gICAgaWYgKG1heENvbHVtbnMpIHtcbiAgICAgIHRoaXMudXBkYXRlQ29sdW1uc09wdGlvbnModGhpcy5jb2x1bW5zKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICB9XG5cbiAgb25DaGFuZ2VWaXNpYmxlQ29sdW1ucyhjaGVja2VkQ29sdW1uczogQXJyYXk8c3RyaW5nPikge1xuICAgIHRoaXMuZGlzYWJsZUNvbHVtbnNPcHRpb25zKHRoaXMuY29sdW1uc09wdGlvbnMpO1xuXG4gICAgY29uc3QgdmlzaWJsZVRhYmxlQ29sdW1ucyA9IHRoaXMuZ2V0VmlzaWJsZVRhYmxlQ29sdW1ucyhjaGVja2VkQ29sdW1ucyk7XG5cbiAgICB0aGlzLnZpc2libGVDb2x1bW5zQ2hhbmdlLmVtaXQodmlzaWJsZVRhYmxlQ29sdW1ucyk7XG4gIH1cblxuICByZXN0b3JlKCkge1xuICAgIHRoaXMudXBkYXRlQ29sdW1uc09wdGlvbnModGhpcy5kZWZhdWx0Q29sdW1ucyk7XG4gIH1cblxuICAvLyBkZXNhYmlsaXRhcsOhIGFzIGNvbHVuYXMsIHF1ZSBuw6NvIGVzdGl2ZXJlbSBzZWxlY2lvbmFkYXMsIGFww7NzIGV4ZWRlciBvIG51bWVybyBtYXhpbW8gZGUgY29sdW5hcy5cbiAgcHJpdmF0ZSBkaXNhYmxlQ29sdW1uc09wdGlvbnMoY29sdW1uczogQXJyYXk8UG9DaGVja2JveEdyb3VwT3B0aW9uPiA9IFtdKSB7XG4gICAgLy8gbmVjZXNzYXJpbyB0aW1lb3V0IHBhcmEgcXVlIHNlamEgcG9zc2l2ZWwgYXR1YWxpemFyIG9zIGNvbHVtbnNPcHRpb25zIGFwb3MgYSBtdWRhbsOnYSBkbyBtb2RlbFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jb2x1bW5zT3B0aW9ucyA9IGNvbHVtbnMubWFwKGNvbHVtbiA9PiAoe1xuICAgICAgICAuLi5jb2x1bW4sXG4gICAgICAgIGRpc2FibGVkOiB0aGlzLmlzRGlzYWJsZUNvbHVtbihjb2x1bW4udmFsdWUpXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldENvbHVtblRpdGxlTGFiZWwoY29sdW1uOiBQb1RhYmxlQ29sdW1uKSB7XG4gICAgcmV0dXJuIGNvbHVtbi5sYWJlbCB8fCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoY29sdW1uLnByb3BlcnR5KTtcbiAgfVxuXG4gIC8qKiBSZXRvcm5hIHVtIEFycmF5IGRlIGNvbHVtbi5wcm9wZXJ0eSBkYXMgY29sdW5hcyBxdWUgc8OjbyB2aXNpdmVpcy4gKi9cbiAgcHJpdmF0ZSBnZXRWaXNpYmxlQ29sdW1ucyhjb2x1bW5zOiBBcnJheTxQb1RhYmxlQ29sdW1uPik6IEFycmF5PHN0cmluZz4ge1xuICAgIGNvbnN0IHZpc2libGVDb2x1bW5zID0gW107XG5cbiAgICBjb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgIGlmIChjb2x1bW4udmlzaWJsZSAhPT0gZmFsc2UgJiYgdmlzaWJsZUNvbHVtbnMubGVuZ3RoIDwgdGhpcy5tYXhDb2x1bW5zICYmIGNvbHVtbi50eXBlICE9PSAnZGV0YWlsJykge1xuXG4gICAgICAgIHZpc2libGVDb2x1bW5zLnB1c2goY29sdW1uLnByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB2aXNpYmxlQ29sdW1ucztcbiAgfVxuXG4gIC8qKiBSZXRvcm5hIHVtIEFycmF5IFBvVGFibGVDb2x1bW4gYSBwYXJ0aXIgZGFzIGNvbHVuYXMgdmlzaXZlaXMgbm8gZ2VyZW5jaWFkb3IgZGUgY29sdW5hcy4gKi9cbiAgcHJpdmF0ZSBnZXRWaXNpYmxlVGFibGVDb2x1bW5zKHZpc2libGVDb2x1bW5zOiBBcnJheTxzdHJpbmc+KTogQXJyYXk8UG9UYWJsZUNvbHVtbj4ge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbnMubWFwKGNvbHVtbiA9PiAoe1xuICAgICAgLi4uY29sdW1uLFxuICAgICAgdmlzaWJsZTogdmlzaWJsZUNvbHVtbnMuaW5jbHVkZXMoY29sdW1uLnByb3BlcnR5KSB8fCBjb2x1bW4udHlwZSA9PT0gJ2RldGFpbCdcbiAgICB9KSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMucG9wb3Zlcikge1xuICAgICAgICB0aGlzLnBvcG92ZXIuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgcHJpdmF0ZSBpc0Rpc2FibGVDb2x1bW4ocHJvcGVydHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZpc2libGVDb2x1bW5zLmxlbmd0aCA+PSB0aGlzLm1heENvbHVtbnMgPyAhdGhpcy52aXNpYmxlQ29sdW1ucy5pbmNsdWRlcyhwcm9wZXJ0eSkgOiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgbWFwVGFibGVDb2x1bW5zVG9DaGVja2JveE9wdGlvbnMoY29sdW1uczogQXJyYXk8UG9UYWJsZUNvbHVtbj4gPSBbXSkge1xuICAgIGNvbnN0IGNvbHVtbnNPcHRpb25zID0gW107XG5cbiAgICBjb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgIGlmIChjb2x1bW4udHlwZSAhPT0gJ2RldGFpbCcpIHtcbiAgICAgICAgY29sdW1uc09wdGlvbnMucHVzaCh7XG4gICAgICAgICAgdmFsdWU6IGNvbHVtbi5wcm9wZXJ0eSxcbiAgICAgICAgICBsYWJlbDogdGhpcy5nZXRDb2x1bW5UaXRsZUxhYmVsKGNvbHVtbiksXG4gICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuaXNEaXNhYmxlQ29sdW1uKGNvbHVtbi5wcm9wZXJ0eSlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIHJldHVybiBjb2x1bW5zT3B0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgb25DaGFuZ2VDb2x1bW5zKGNvbHVtbnM6IFNpbXBsZUNoYW5nZSkge1xuICAgIGNvbnN0IHsgZmlyc3RDaGFuZ2UsIGN1cnJlbnRWYWx1ZSA9IFtdLCBwcmV2aW91c1ZhbHVlID0gW10gfSA9IGNvbHVtbnM7XG5cbiAgICAvLyBhdHVhbGl6YXJhIG8gZGVmYXVsdENvbHVtbnMsIHF1YW5kbyBmb3IgYSBwcmltZWlyYSB2ZXogb3UgcXVhbmRvIG8gZGVmYXVsdENvbHVtbnMgZm9yIGRpZmVyZW50ZSBkbyBjdXJyZW50VmFsdWVcbiAgICBpZiAoZmlyc3RDaGFuZ2UgfHwgKHRoaXMuZGVmYXVsdENvbHVtbnMubGVuZ3RoICE9PSBjdXJyZW50VmFsdWUubGVuZ3RoKSkge1xuICAgICAgdGhpcy5kZWZhdWx0Q29sdW1ucyA9IGN1cnJlbnRWYWx1ZTtcbiAgICB9XG5cbiAgICAvLyB2ZXJpZmljYSBzZSBvIHZhbG9yIGFudGVyaW9yIMOpIGRpZmVyZW50ZSBkbyBhdHVhbCBwYXJhIGF0dWFsaXphciBhcyBjb2x1bW5zT3B0aW9ucyBhcGVuYXMgcXVhbmRvIGZvciBuZWNlc3NhcmlvXG4gICAgaWYgKHByZXZpb3VzVmFsdWUubGVuZ3RoICE9PSBjdXJyZW50VmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbHVtbnNPcHRpb25zKGN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKHRoaXMucmVzaXplTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucmVzaXplTGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUNvbHVtbnNPcHRpb25zKGNvbHVtbnM6IEFycmF5PFBvVGFibGVDb2x1bW4+KSB7XG4gICAgdGhpcy52aXNpYmxlQ29sdW1ucyA9IHRoaXMuZ2V0VmlzaWJsZUNvbHVtbnMoY29sdW1ucyk7XG4gICAgdGhpcy5jb2x1bW5zT3B0aW9ucyA9IHRoaXMubWFwVGFibGVDb2x1bW5zVG9DaGVja2JveE9wdGlvbnMoY29sdW1ucyk7XG5cbiAgICB0aGlzLm9uQ2hhbmdlVmlzaWJsZUNvbHVtbnModGhpcy52aXNpYmxlQ29sdW1ucyk7XG4gIH1cblxufVxuIl19