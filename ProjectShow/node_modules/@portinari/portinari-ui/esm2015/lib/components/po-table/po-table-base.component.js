/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, capitalizeFirstLetter, convertToBoolean, isTypeof, sortValues, poLocaleDefault } from '../../utils/util';
import { PoTableColumnSortType } from './enums/po-table-column-sort-type.enum';
/** @type {?} */
export const poTableContainer = ['border', 'shadow'];
/** @type {?} */
export const poTableContainerDefault = 'border';
/** @type {?} */
export const poTableLiteralsDefault = {
    en: (/** @type {?} */ ({
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        noVisibleColumn: 'No visible column',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle',
        columnsManager: 'Columns manager'
    })),
    es: (/** @type {?} */ ({
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        noVisibleColumn: 'Sin columnas visibles',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo',
        columnsManager: 'Gerente de columna'
    })),
    pt: (/** @type {?} */ ({
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        noVisibleColumn: 'Nenhuma coluna visível',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa',
        columnsManager: 'Gerenciador de colunas'
    })),
    ru: (/** @type {?} */ ({
        noColumns: 'Нет определения столбца',
        noData: 'Данные не найдены',
        noVisibleColumn: 'нет видимых столбцов',
        loadingData: 'погрузка',
        loadMoreData: 'загрузка',
        seeCompleteSubtitle: 'Посмотреть полный субтитр',
        completeSubtitle: 'Полный заголовок',
        columnsManager: 'менеджер колонок'
    }))
};
/**
 * \@description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 * @abstract
 */
export class PoTableBaseComponent {
    /**
     * @param {?} poDate
     */
    constructor(poDate) {
        this.poDate = poDate;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._hideTextOverflow = false;
        this._loading = false;
        /**
         * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allSelected = new EventEmitter();
        /**
         * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allUnselected = new EventEmitter();
        /**
         * Ação executada ao selecionar uma linha do `po-table`.
         */
        this.selected = new EventEmitter();
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que está ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação executada ao ordenar colunas da tabela.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.sortBy = new EventEmitter();
        /**
         * Ação executada ao desmarcar a seleção de uma linha do `po-table`.
         */
        this.unselected = new EventEmitter();
        this.selectAll = false;
        this.sortedColumn = { property: (/** @type {?} */ (null)), ascending: true };
    }
    /**
     * \@description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     * @param {?} items
     * @return {?}
     */
    set items(items) {
        this._items = Array.isArray(items) ? items : [];
        // when haven't items, selectAll should be unchecked.
        if (!this.hasItems()) {
            this.selectAll = false;
        }
        else if (!this.hasColumns) {
            this.columns = this.getDefaultColumns(items[0]);
        }
    }
    /**
     * @return {?}
     */
    get items() {
        return this._items;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     * @param {?} columns
     * @return {?}
     */
    set columns(columns) {
        this._columns = columns || [];
        if (this._columns.length) {
            this.setColumnLink();
            this.calculateWidthHeaders();
        }
        else if (this.hasItems()) {
            this._columns = this.getDefaultColumns(this.items[0]);
        }
    }
    /**
     * @return {?}
     */
    get columns() {
        return this._columns;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Adiciona um contorno arredondado ao `po-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * \@default `border`
     * @param {?} value
     * @return {?}
     */
    set container(value) {
        this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
        this.showContainer(this._container);
    }
    /**
     * @return {?}
     */
    get container() {
        return this._container;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
     * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
     * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
     * @param {?} hideTextOverflow
     * @return {?}
     */
    set hideTextOverflow(hideTextOverflow) {
        this._hideTextOverflow = convertToBoolean(hideTextOverflow);
    }
    /**
     * @return {?}
     */
    get hideTextOverflow() {
        return this._hideTextOverflow;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     * @param {?} height
     * @return {?}
     */
    set height(height) {
        this._height = height;
        this.calculateHeightTableContainer(height);
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * \@default `false`
     * @param {?} hideDetail
     * @return {?}
     */
    set hideDetail(hideDetail) {
        this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get hideDetail() {
        return this._hideDetail;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `po-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    loadMoreData: 'Buscar mais dados',
     *    loadingData: 'Processando',
     *    noColumns: 'Sem colunas',
     *    noData: 'Sem dados',
     *    seeCompleteSubtitle: 'Mostrar legenda completa',
     *    completeSubtitle: 'Todas legendas'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-table
     *   [p-literals]="customLiterals">
     * </po-table>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, poTableLiteralsDefault[poLocaleDefault], poTableLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = poTableLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || poTableLiteralsDefault[browserLanguage()];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
     *
     * \@default `false`
     * @param {?} loading
     * @return {?}
     */
    set loading(loading) {
        this._loading = convertToBoolean(loading);
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita na primeira coluna a opção de selecionar linhas,
     * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
     * > Exemplo: `item.$selected` ou `item['$selected']`.
     * > Os itens filhos possuem comportamento independente do item pai.
     *
     * \@default `false`
     * @param {?} checkbox
     * @return {?}
     */
    set checkbox(checkbox) {
        this._checkbox = (/** @type {?} */ (checkbox)) === '' ? true : convertToBoolean(checkbox);
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get checkbox() {
        return this._checkbox;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     * @param {?} actions
     * @return {?}
     */
    set actions(actions) {
        this._actions = actions;
        this.calculateWidthHeaders();
    }
    /**
     * @return {?}
     */
    get actions() {
        return this._actions;
    }
    /**
     * @param {?} sort
     * @return {?}
     */
    set setSort(sort) {
        this.sort = sort === '' ? false : convertToBoolean(sort);
    }
    /**
     * @param {?} showMoreDisabled
     * @return {?}
     */
    set setShowMoreDisabled(showMoreDisabled) {
        this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
    }
    /**
     * @param {?} striped
     * @return {?}
     */
    set setStriped(striped) {
        this.striped = striped === '' ? false : convertToBoolean(striped);
    }
    /**
     * @param {?} hideSelectAll
     * @return {?}
     */
    set setHideSelectAll(hideSelectAll) {
        this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setSingleSelect(value) {
        this.singleSelect = value === '' ? true : convertToBoolean(value);
    }
    /**
     * @private
     * @return {?}
     */
    get sortType() {
        return this.sortedColumn.ascending ? PoTableColumnSortType.Ascending : PoTableColumnSortType.Descending;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
    }
    /**
     * @return {?}
     */
    get hasColumns() {
        return this.columns && this.columns.length > 0;
    }
    /**
     * @return {?}
     */
    selectAllRows() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.$selected = this.selectAll;
            }));
            this.emitSelectAllEvents(this.selectAll, this.items);
        }
    }
    /**
     * @param {?} row
     * @return {?}
     */
    selectRow(row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    }
    /**
     * @param {?} row
     * @return {?}
     */
    selectDetailRow(row) {
        this.emitSelectEvents(row);
    }
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    getColumnMasterDetail() {
        return this.columns.find((/**
         * @param {?} col
         * @return {?}
         */
        col => col.type === 'detail'));
    }
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    getClassColor(row, column) {
        return column.color ? `po-text-${this.getColumnColor(row, column)}` : '';
    }
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    getColumnColor(row, column) {
        /** @type {?} */
        const columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    }
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    getSubtitleColumns() {
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        col => col.type === 'subtitle'));
    }
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    getIconColumns() {
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        col => col.type === 'icon'));
    }
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    getNameColumnDetail() {
        /** @type {?} */
        const detail = this.getColumnMasterDetail();
        return detail ? detail.property : null;
    }
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     * @return {?}
     */
    getSelectedRows() {
        return this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected));
    }
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     * @return {?}
     */
    getUnselectedRows() {
        return this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => !item.$selected));
    }
    /**
     * @return {?}
     */
    hasItems() {
        return this.items && this.items.length > 0;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    toggleRowAction(row) {
        /** @type {?} */
        const toggleShowAction = row.$showAction;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item.$showAction) {
                item.$showAction = false;
            }
        }));
        row.$showAction = !toggleShowAction;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    sortColumn(column) {
        if (!this.sort || column.type === 'detail') {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortBy.emit({ column, type: this.sortType });
        this.sortedColumn.property = column;
    }
    /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    sortArray(column, ascending) {
        this.items.sort((/**
         * @param {?} leftSide
         * @param {?} rightSide
         * @return {?}
         */
        (leftSide, rightSide) => {
            if (column.type === 'date' || column.type === 'dateTime') {
                return this.poDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
            }
            else {
                return sortValues(leftSide[column.property], rightSide[column.property], ascending);
            }
        }));
    }
    /**
     * @return {?}
     */
    onShowMore() {
        /** @type {?} */
        const sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
        this.showMore.emit(sort);
    }
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    getDefaultColumns(item) {
        /** @type {?} */
        const keys = Object.keys(item);
        return keys.filter((/**
         * @param {?} key
         * @return {?}
         */
        key => (typeof item[key] !== 'object'))).map((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            return { label: capitalizeFirstLetter(key), property: key };
        }));
    }
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    configAfterSelectRow(rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    }
    /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    emitSelectAllEvents(selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    emitSelectEvents(row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    }
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    isEverySelected(items) {
        /** @type {?} */
        const someCheckedOrIndeterminate = (/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected || item.$selected === null);
        /** @type {?} */
        const everyChecked = (/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected);
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    setColumnLink() {
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        }));
    }
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    unselectOtherRows(rows, row) {
        rows.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item !== row) {
                item.$selected = false;
            }
        }));
    }
}
PoTableBaseComponent.propDecorators = {
    items: [{ type: Input, args: ['p-items',] }],
    columns: [{ type: Input, args: ['p-columns',] }],
    container: [{ type: Input, args: ['p-container',] }],
    hideTextOverflow: [{ type: Input, args: ['p-hide-text-overflow',] }],
    height: [{ type: Input, args: ['p-height',] }],
    hideDetail: [{ type: Input, args: ['p-hide-detail',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    loading: [{ type: Input, args: ['p-loading',] }],
    checkbox: [{ type: Input, args: ['p-checkbox',] }],
    actions: [{ type: Input, args: ['p-actions',] }],
    setSort: [{ type: Input, args: ['p-sort',] }],
    setShowMoreDisabled: [{ type: Input, args: ['p-show-more-disabled',] }],
    setStriped: [{ type: Input, args: ['p-striped',] }],
    setHideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
    setSingleSelect: [{ type: Input, args: ['p-single-select',] }],
    maxColumns: [{ type: Input, args: ['p-max-columns',] }],
    allSelected: [{ type: Output, args: ['p-all-selected',] }],
    allUnselected: [{ type: Output, args: ['p-all-unselected',] }],
    selected: [{ type: Output, args: ['p-selected',] }],
    showMore: [{ type: Output, args: ['p-show-more',] }],
    sortBy: [{ type: Output, args: ['p-sort-by',] }],
    unselected: [{ type: Output, args: ['p-unselected',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._checkbox;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._container;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._hideDetail;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._hideTextOverflow;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._loading;
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.sort;
    /**
     * \@description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.showMoreDisabled;
    /**
     * \@description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.striped;
    /**
     * \@description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.hideSelectAll;
    /**
     * \@description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     * @type {?}
     */
    PoTableBaseComponent.prototype.singleSelect;
    /**
     * \@optional
     *
     * \@description
     *
     * Define uma quantidade máxima de colunas que serão exibidas na tabela.
     *
     * Quando chegar no valor informado, as colunas que não estiverem selecionadas ficarão
     * desabilitadas e caso houver mais colunas visíveis do que o permitido, as excedentes
     * serão ignoradas por ordem de posição.
     * @type {?}
     */
    PoTableBaseComponent.prototype.maxColumns;
    /**
     * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    PoTableBaseComponent.prototype.allSelected;
    /**
     * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    PoTableBaseComponent.prototype.allUnselected;
    /**
     * Ação executada ao selecionar uma linha do `po-table`.
     * @type {?}
     */
    PoTableBaseComponent.prototype.selected;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que está ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     * @type {?}
     */
    PoTableBaseComponent.prototype.showMore;
    /**
     * Ação executada ao ordenar colunas da tabela.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     * @type {?}
     */
    PoTableBaseComponent.prototype.sortBy;
    /**
     * Ação executada ao desmarcar a seleção de uma linha do `po-table`.
     * @type {?}
     */
    PoTableBaseComponent.prototype.unselected;
    /** @type {?} */
    PoTableBaseComponent.prototype.selectAll;
    /** @type {?} */
    PoTableBaseComponent.prototype.sortedColumn;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype.poDate;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    PoTableBaseComponent.prototype.calculateHeightTableContainer = function (height) { };
    /**
     * @abstract
     * @return {?}
     */
    PoTableBaseComponent.prototype.calculateWidthHeaders = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} container
     * @return {?}
     */
    PoTableBaseComponent.prototype.showContainer = function (container) { };
}
//# sourceMappingURL=data:application/json;base64,