/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DecimalPipe } from '@angular/common';
import { capitalizeFirstLetter, isTypeof } from '../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por apresentar o detalhe de cada linha da tabela.
 */
export class PoTableDetailComponent {
    /**
     * @param {?} decimalPipe
     */
    constructor(decimalPipe) {
        this.decimalPipe = decimalPipe;
        /**
         * Define se a tabela possui a opção de `checkbox` habilitada.
         */
        this.hasCheckbox = false;
        /**
         * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
         */
        this.selectRow = new EventEmitter();
    }
    /**
     * Configuração da linha de detalhes.
     * @param {?} value
     * @return {?}
     */
    set detail(value) {
        this._detail = this.returnPoTableDetailObject(value);
    }
    /**
     * @return {?}
     */
    get detail() {
        return this._detail;
    }
    /**
     * @return {?}
     */
    get detailColumns() {
        return this.detail && this.detail.columns || [];
    }
    /**
     * @return {?}
     */
    get typeHeaderInline() {
        return this.detail && !this.detail['typeHeader'] || this.detail['typeHeader'] === 'inline';
    }
    /**
     * @return {?}
     */
    get typeHeaderTop() {
        return this.detail && this.detail['typeHeader'] === 'top';
    }
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    formatNumberDetail(value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    }
    /**
     * @param {?} detail
     * @return {?}
     */
    getColumnTitleLabel(detail) {
        return detail.label || capitalizeFirstLetter(detail.property);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onSelectRow(item) {
        item.$selected = !item.$selected;
        this.selectRow.emit(item);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    returnPoTableDetailObject(value) {
        if (value && isTypeof(value, 'object')) {
            if (value.columns) {
                value.columns.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                column => column.property = column.property || column.column));
            }
            if (Array.isArray(value)) {
                return { columns: value };
            }
            if (value.columns) {
                return value;
            }
        }
    }
}
PoTableDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-table-detail',
                template: "<table class=\"po-table-master-detail\">\n  <thead *ngIf=\"typeHeaderTop\">\n    <tr>\n      <th class=\"po-table-header po-table-column-checkbox\" *ngIf=\"hasCheckbox\"></th>\n      <th class=\"po-table-header po-table-header-column po-table-header-master-detail\"></th>\n      <th class=\"po-table-header po-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\n        {{ getColumnTitleLabel(detail) }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class=\"po-table-detail-row\"\n        [class.po-table-row-active]=\"item.$selected && hasCheckbox\"\n        *ngFor=\"let item of items\">\n\n      <ng-container *ngIf=\"hasCheckbox; else masterDetailSpace\">\n\n        <td class=\"po-table-column-master-detail-space-checkbox\"></td>\n        <td class=\"po-table-column po-table-column-checkbox\">\n          <input\n            class=\"po-table-checkbox\"\n            type=\"checkbox\"\n            [class.po-table-checkbox-checked]=\"item.$selected\">\n          <label class=\"po-table-checkbox-label po-clickable\" (click)=\"onSelectRow(item)\">\n          </label>\n        </td>\n\n      </ng-container>\n\n      <ng-template #masterDetailSpace>\n        <td class=\"po-table-column-master-detail-space\"></td>\n      </ng-template>\n\n      <td class=\"po-table-column-master-detail po-table-master-detail-label\"\n        (click)=\"hasCheckbox ? onSelectRow(item) : 'javascript:;'\"\n        *ngFor=\"let detail of detailColumns\">\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\n\n        <ng-container [ngSwitch]=\"detail.type\">\n          <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span>\n          <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span>\n          <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | po_time: detail.format || 'HH:mm:ss.ffffff' }}</span>\n          <span *ngSwitchCase=\"'dateTime'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}</span>\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span>\n          <span *ngSwitchDefault>{{ item[detail.property] }}</span>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
            }] }
];
/** @nocollapse */
PoTableDetailComponent.ctorParameters = () => [
    { type: DecimalPipe }
];
PoTableDetailComponent.propDecorators = {
    hasCheckbox: [{ type: Input, args: ['p-checkbox',] }],
    detail: [{ type: Input, args: ['p-detail',] }],
    items: [{ type: Input, args: ['p-items',] }],
    selectRow: [{ type: Output, args: ['p-select-row',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableDetailComponent.prototype._detail;
    /**
     * Define se a tabela possui a opção de `checkbox` habilitada.
     * @type {?}
     */
    PoTableDetailComponent.prototype.hasCheckbox;
    /**
     * Lista de itens do _detail_ da tabela.
     * @type {?}
     */
    PoTableDetailComponent.prototype.items;
    /**
     * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
     * @type {?}
     */
    PoTableDetailComponent.prototype.selectRow;
    /**
     * @type {?}
     * @private
     */
    PoTableDetailComponent.prototype.decimalPipe;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtZGV0YWlsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtZGV0YWlsL3BvLXRhYmxlLWRldGFpbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7Ozs7QUFnQnRFLE1BQU0sT0FBTyxzQkFBc0I7Ozs7SUE4QmpDLFlBQW9CLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhOzs7O1FBdkJ2QixnQkFBVyxHQUFhLEtBQUssQ0FBQzs7OztRQXFCM0IsY0FBUyxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRWpDLENBQUM7Ozs7OztJQWxCaEQsSUFBdUIsTUFBTSxDQUFDLEtBQW9CO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7OztJQWNELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDbEQsQ0FBQzs7OztJQUVELElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxRQUFRLENBQUM7SUFDN0YsQ0FBQzs7OztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQztJQUM1RCxDQUFDOzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxLQUFVLEVBQUUsTUFBYztRQUMzQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBRUQsbUJBQW1CLENBQUMsTUFBMkI7UUFDN0MsT0FBTyxNQUFNLENBQUMsS0FBSyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRSxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxJQUFJO1FBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7O0lBRU8seUJBQXlCLENBQUMsS0FBVTtRQUMxQyxJQUFJLEtBQUssSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBRXRDLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7O2dCQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUMsQ0FBQzthQUNyRjtZQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDeEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUMzQjtZQUVELElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO0lBQ0gsQ0FBQzs7O1lBaEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixnMEVBQStDO2FBQ2hEOzs7O1lBakJRLFdBQVc7OzswQkF5QmpCLEtBQUssU0FBQyxZQUFZO3FCQUtsQixLQUFLLFNBQUMsVUFBVTtvQkFXaEIsS0FBSyxTQUFDLFNBQVM7d0JBS2YsTUFBTSxTQUFDLGNBQWM7Ozs7Ozs7SUExQnRCLHlDQUErQjs7Ozs7SUFLL0IsNkNBQW1EOzs7OztJQWdCbkQsdUNBQW9DOzs7OztJQUtwQywyQ0FBZ0Y7Ozs7O0lBRXBFLDZDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEZWNpbWFsUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IGNhcGl0YWxpemVGaXJzdExldHRlciwgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9UYWJsZURldGFpbCB9IGZyb20gJy4vcG8tdGFibGUtZGV0YWlsLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RhYmxlRGV0YWlsQ29sdW1uIH0gZnJvbSAnLi9wby10YWJsZS1kZXRhaWwtY29sdW1uLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSByZXNwb25zw6F2ZWwgcG9yIGFwcmVzZW50YXIgbyBkZXRhbGhlIGRlIGNhZGEgbGluaGEgZGEgdGFiZWxhLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby10YWJsZS1kZXRhaWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFibGUtZGV0YWlsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RhYmxlRGV0YWlsQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9kZXRhaWw6IFBvVGFibGVEZXRhaWw7XG5cbiAgLyoqXG4gICAqIERlZmluZSBzZSBhIHRhYmVsYSBwb3NzdWkgYSBvcMOnw6NvIGRlIGBjaGVja2JveGAgaGFiaWxpdGFkYS5cbiAgICovXG4gIEBJbnB1dCgncC1jaGVja2JveCcpIGhhc0NoZWNrYm94PzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmHDp8OjbyBkYSBsaW5oYSBkZSBkZXRhbGhlcy5cbiAgICovXG4gIEBJbnB1dCgncC1kZXRhaWwnKSBzZXQgZGV0YWlsKHZhbHVlOiBQb1RhYmxlRGV0YWlsKSB7XG4gICAgdGhpcy5fZGV0YWlsID0gdGhpcy5yZXR1cm5Qb1RhYmxlRGV0YWlsT2JqZWN0KHZhbHVlKTtcbiAgfVxuXG4gIGdldCBkZXRhaWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RldGFpbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0YSBkZSBpdGVucyBkbyBfZGV0YWlsXyBkYSB0YWJlbGEuXG4gICAqL1xuICBASW5wdXQoJ3AtaXRlbXMnKSBpdGVtczogQXJyYXk8YW55PjtcblxuICAvKipcbiAgICogQcOnw6NvIGV4ZWN1dGFkYSBhbyBzZWxlY2lvbmFyIG91IGRlc21hcmNhciBhIHNlbGXDp8OjbyBkZSB1bWEgbGluaGEgZGUgZGV0YWxoZSBkbyBgcG8tdGFibGVgLlxuICAgKi9cbiAgQE91dHB1dCgncC1zZWxlY3Qtcm93Jykgc2VsZWN0Um93PzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRlY2ltYWxQaXBlOiBEZWNpbWFsUGlwZSkge31cblxuICBnZXQgZGV0YWlsQ29sdW1ucygpOiBBcnJheTxQb1RhYmxlRGV0YWlsQ29sdW1uPiB7XG4gICAgcmV0dXJuIHRoaXMuZGV0YWlsICYmIHRoaXMuZGV0YWlsLmNvbHVtbnMgfHwgW107XG4gIH1cblxuICBnZXQgdHlwZUhlYWRlcklubGluZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXRhaWwgJiYgIXRoaXMuZGV0YWlsWyd0eXBlSGVhZGVyJ10gfHwgdGhpcy5kZXRhaWxbJ3R5cGVIZWFkZXInXSA9PT0gJ2lubGluZSc7XG4gIH1cblxuICBnZXQgdHlwZUhlYWRlclRvcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXRhaWwgJiYgdGhpcy5kZXRhaWxbJ3R5cGVIZWFkZXInXSA9PT0gJ3RvcCc7XG4gIH1cblxuICBmb3JtYXROdW1iZXJEZXRhaWwodmFsdWU6IGFueSwgZm9ybWF0OiBzdHJpbmcpIHtcbiAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRlY2ltYWxQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgZm9ybWF0KTtcbiAgfVxuXG4gIGdldENvbHVtblRpdGxlTGFiZWwoZGV0YWlsOiBQb1RhYmxlRGV0YWlsQ29sdW1uKSB7XG4gICAgcmV0dXJuIGRldGFpbC5sYWJlbCB8fCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoZGV0YWlsLnByb3BlcnR5KTtcbiAgfVxuXG4gIG9uU2VsZWN0Um93KGl0ZW0pIHtcbiAgICBpdGVtLiRzZWxlY3RlZCA9ICFpdGVtLiRzZWxlY3RlZDtcbiAgICB0aGlzLnNlbGVjdFJvdy5lbWl0KGl0ZW0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXR1cm5Qb1RhYmxlRGV0YWlsT2JqZWN0KHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgJiYgaXNUeXBlb2YodmFsdWUsICdvYmplY3QnKSkge1xuXG4gICAgICBpZiAodmFsdWUuY29sdW1ucykge1xuICAgICAgICB2YWx1ZS5jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IGNvbHVtbi5wcm9wZXJ0eSA9IGNvbHVtbi5wcm9wZXJ0eSB8fCBjb2x1bW4uY29sdW1uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7IGNvbHVtbnM6IHZhbHVlIH07XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZS5jb2x1bW5zKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuIl19