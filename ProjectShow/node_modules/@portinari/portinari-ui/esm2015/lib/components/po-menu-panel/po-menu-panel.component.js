/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewContainerRef } from '@angular/core';
import { Location } from '@angular/common';
import { NavigationEnd, Router } from '@angular/router';
import { callFunction, getFormattedLink, openExternalLink } from '../../utils/util';
import { PoMenuPanelBaseComponent } from './po-menu-panel-base.component';
import { PoMenuPanelItemsService } from './services/po-menu-panel-items.service';
/**
 * \@docsExtends PoMenuPanelBaseComponent
 *
 * \@description
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '\@angular/core';
 *
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * \@NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * \@example
 *
 * <example name="po-menu-panel-basic" title="Portinari Menu Panel Basic">
 *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.html"> </file>
 *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-panel-labs" title="Portinari Menu Panel Labs">
 *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.html"> </file>
 *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-panel-customer" title="Portinari Menu Panel - Customers">
 *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.html"> </file>
 *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.ts"> </file>
 * </example>
 */
export class PoMenuPanelComponent extends PoMenuPanelBaseComponent {
    /**
     * @param {?} viewRef
     * @param {?} location
     * @param {?} menuItemsService
     * @param {?} router
     */
    constructor(viewRef, location, menuItemsService, router) {
        super();
        this.location = location;
        this.menuItemsService = menuItemsService;
        this.router = router;
        this.parentRef = viewRef['_view']['component'];
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    }
    /**
     * @private
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    activateMenuByUrl(urlPath, menus) {
        if (menus) {
            return menus.some((/**
             * @param {?} menu
             * @return {?}
             */
            menu => {
                if (getFormattedLink(menu.link) === urlPath) {
                    this.activateMenuItem(menu);
                    return true;
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    activateMenuItem(menu) {
        this.activeMenuItem = menu;
        this.linkActive = getFormattedLink(menu.link);
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });
    }
    /**
     * @private
     * @param {?} urlPath
     * @return {?}
     */
    checkActiveMenuByUrl(urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    }
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    clickMenuItem(menu) {
        if (menu.action) {
            callFunction(menu.action, this.parentRef, menu);
        }
        if (menu.type === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu.type === 'internalLink') {
            this.activateMenuItem(menu);
        }
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe((/**
         * @param {?} rounterEvent
         * @return {?}
         */
        rounterEvent => {
            if (rounterEvent instanceof NavigationEnd) {
                this.checkActiveMenuByUrl(this.location.path());
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToMenuItem() {
        this.itemSubscription =
            this.menuItemsService.receiveFromChildMenuClicked().subscribe((/**
             * @param {?} menu
             * @return {?}
             */
            (menu) => this.clickMenuItem(menu)));
    }
}
PoMenuPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-menu-panel',
                template: "<div class=\"po-menu-panel\">\n  <div class=\"po-menu-panel-logo-container\">\n    <a href=\"./\">\n      <div class=\"po-menu-panel-logo\"></div>\n    </a>\n  </div>\n\n  <nav class=\"po-menu-panel-container\">\n    <div class=\"po-menu-panel-inner\">\n      <div *ngFor=\"let menu of menus, let menuIndex = index;\" class=\"po-menu-panel-item-wrapper\">\n        <po-menu-panel-item\n          [class.po-menu-panel-item-first]=\"menuIndex === 0\"\n          [p-menu-item-internal]=\"menu\">\n        </po-menu-panel-item>\n      </div>\n    </div>\n  </nav>\n</div>\n"
            }] }
];
/** @nocollapse */
PoMenuPanelComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Location },
    { type: PoMenuPanelItemsService },
    { type: Router }
];
if (false) {
    /** @type {?} */
    PoMenuPanelComponent.prototype.activeMenuItem;
    /** @type {?} */
    PoMenuPanelComponent.prototype.linkActive;
    /** @type {?} */
    PoMenuPanelComponent.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.routeSubscription;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.itemSubscription;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.location;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.menuItemsService;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,