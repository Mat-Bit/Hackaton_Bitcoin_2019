/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { isTypeof } from '../../../utils/util';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
/** @type {?} */
const poToolbarActionsIconDefault = 'po-icon-more';
/**
 * \@docsPrivate
 *
 * \@usedBy PoToolbarComponent
 *
 * \@description
 *
 * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
 */
export class PoToolbarActionsComponent {
    constructor() {
        this._actionsIcon = poToolbarActionsIconDefault;
    }
    /**
     * Define o ícone das ações.
     * @param {?} icon
     * @return {?}
     */
    set actionsIcon(icon) {
        this._actionsIcon = isTypeof(icon, 'string') ? icon : poToolbarActionsIconDefault;
    }
    /**
     * @return {?}
     */
    get actionsIcon() {
        return this._actionsIcon;
    }
}
PoToolbarActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-toolbar-actions',
                template: "<div class=\"po-toolbar-actions po-clickable\" (click)=\"popup.toggle()\">\n  <span #toolbarActions class=\"po-icon {{ actionsIcon }} po-toolbar-icon\"></span>\n</div>\n\n<po-popup #popup\n  [p-actions]=\"actions\"\n  [p-target]=\"toolbarActions\">\n</po-popup>\n",
                providers: [PoControlPositionService]
            }] }
];
PoToolbarActionsComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    actionsIcon: [{ type: Input, args: ['p-actions-icon',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoToolbarActionsComponent.prototype._actionsIcon;
    /**
     * Define uma lista de ações.
     * @type {?}
     */
    PoToolbarActionsComponent.prototype.actions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdG9vbGJhci9wby10b29sYmFyLWFjdGlvbnMvcG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG1FQUFtRSxDQUFDOztNQUl2RywyQkFBMkIsR0FBRyxjQUFjOzs7Ozs7Ozs7O0FBZ0JsRCxNQUFNLE9BQU8seUJBQXlCO0lBTHRDO1FBT1UsaUJBQVksR0FBWSwyQkFBMkIsQ0FBQztJQWM5RCxDQUFDOzs7Ozs7SUFSQyxJQUE2QixXQUFXLENBQUMsSUFBWTtRQUNuRCxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUM7SUFDcEYsQ0FBQzs7OztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDOzs7WUFuQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLG1SQUFrRDtnQkFDbEQsU0FBUyxFQUFFLENBQUUsd0JBQXdCLENBQUU7YUFDeEM7OztzQkFNRSxLQUFLLFNBQUMsV0FBVzswQkFHakIsS0FBSyxTQUFDLGdCQUFnQjs7Ozs7OztJQU52QixpREFBNEQ7Ozs7O0lBRzVELDRDQUFxRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvQ29udHJvbFBvc2l0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLWNvbnRyb2wtcG9zaXRpb24vcG8tY29udHJvbC1wb3NpdGlvbi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgUG9Ub29sYmFyQWN0aW9uIH0gZnJvbSAnLi4vcG8tdG9vbGJhci1hY3Rpb24uaW50ZXJmYWNlJztcblxuY29uc3QgcG9Ub29sYmFyQWN0aW9uc0ljb25EZWZhdWx0ID0gJ3BvLWljb24tbW9yZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQHVzZWRCeSBQb1Rvb2xiYXJDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXRvb2xiYXItYWN0aW9uc2AgdGVtIGNvbW8gb2JqZXRpdm8gcmVjZWJlciB1bWEgbGlzdGEgZGUgYcOnw7VlcyBlIHVtIMOtY29uZSBxdWUgcG9kZW0gc2VyIHBlcnNvbmFsaXphZG9zLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby10b29sYmFyLWFjdGlvbnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbIFBvQ29udHJvbFBvc2l0aW9uU2VydmljZSBdXG59KVxuZXhwb3J0IGNsYXNzIFBvVG9vbGJhckFjdGlvbnNDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2FjdGlvbnNJY29uPzogc3RyaW5nID0gcG9Ub29sYmFyQWN0aW9uc0ljb25EZWZhdWx0O1xuXG4gIC8qKiBEZWZpbmUgdW1hIGxpc3RhIGRlIGHDp8O1ZXMuICovXG4gIEBJbnB1dCgncC1hY3Rpb25zJykgYWN0aW9ucz86IEFycmF5PFBvVG9vbGJhckFjdGlvbj47XG5cbiAgLyoqIERlZmluZSBvIMOtY29uZSBkYXMgYcOnw7Vlcy4gKi9cbiAgQElucHV0KCdwLWFjdGlvbnMtaWNvbicpIHNldCBhY3Rpb25zSWNvbihpY29uOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9hY3Rpb25zSWNvbiA9IGlzVHlwZW9mKGljb24sICdzdHJpbmcnKSA/IGljb24gOiBwb1Rvb2xiYXJBY3Rpb25zSWNvbkRlZmF1bHQ7XG4gIH1cblxuICBnZXQgYWN0aW9uc0ljb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGlvbnNJY29uO1xuICB9XG5cbn1cbiJdfQ==