/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoButtonGroupToggle } from './po-button-group-toggle.enum';
/** @type {?} */
const PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * \@description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
export class PoButtonGroupBaseComponent {
    constructor() {
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
        /**
         * Lista de botões.
         */
        this.buttons = [];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set small(value) {
        this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get small() {
        return this._small;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
     *
     * \@default `none`
     * @param {?} value
     * @return {?}
     */
    set toggle(value) {
        this._toggle = ((/** @type {?} */ (Object))).values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
        this.checkSelecteds(this._toggle);
    }
    /**
     * @return {?}
     */
    get toggle() {
        return this._toggle;
    }
    /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    onButtonClick(buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach((/**
             * @param {?} button
             * @param {?} index
             * @return {?}
             */
            (button, index) => button.selected = index === buttonIndex ? !buttonClicked.selected : false));
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    }
    /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    checkSelecteds(toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            /** @type {?} */
            const hasMoreOneSelected = this.buttons.filter((/**
             * @param {?} button
             * @return {?}
             */
            button => button.selected)).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    deselectAllButtons() {
        this.buttons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        button => button.selected = false));
    }
}
PoButtonGroupBaseComponent.propDecorators = {
    buttons: [{ type: Input, args: ['p-buttons',] }],
    small: [{ type: Input, args: ['p-small',] }],
    toggle: [{ type: Input, args: ['p-toggle',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoButtonGroupBaseComponent.prototype._small;
    /**
     * @type {?}
     * @private
     */
    PoButtonGroupBaseComponent.prototype._toggle;
    /**
     * Lista de botões.
     * @type {?}
     */
    PoButtonGroupBaseComponent.prototype.buttons;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1idXR0b24tZ3JvdXAvcG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXBELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDOztNQUU5RCxzQkFBc0IsR0FBRyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCckMsTUFBTSxPQUFPLDBCQUEwQjtJQUF2QztRQUVVLFdBQU0sR0FBYSxLQUFLLENBQUM7UUFDekIsWUFBTyxHQUFZLHNCQUFzQixDQUFDOzs7O1FBRzlCLFlBQU8sR0FBNkIsRUFBRSxDQUFDO0lBZ0U3RCxDQUFDOzs7Ozs7Ozs7Ozs7SUFyREMsSUFBc0IsS0FBSyxDQUFDLEtBQWM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBSyxLQUFLLEVBQUEsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7OztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7Ozs7Ozs7Ozs7OztJQWFELElBQXVCLE1BQU0sQ0FBQyxLQUFhO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxtQkFBSyxNQUFNLEVBQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztRQUUxRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7O0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Ozs7OztJQUVELGFBQWEsQ0FBQyxhQUFnQyxFQUFFLFdBQW1CO1FBQ2pFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7WUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPOzs7OztZQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQ3JDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUMsQ0FBQztTQUM5RTthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUU7WUFDdkQsYUFBYSxDQUFDLFFBQVEsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7U0FDbEQ7SUFDSCxDQUFDOzs7Ozs7SUFFTyxjQUFjLENBQUMsVUFBa0I7UUFDdkMsSUFBSSxVQUFVLEtBQUssbUJBQW1CLENBQUMsSUFBSSxFQUFFO1lBQzNDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1NBQzNCO2FBQU0sSUFBSSxVQUFVLEtBQUssbUJBQW1CLENBQUMsTUFBTSxFQUFFOztrQkFDOUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNOzs7O1lBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDcEYsSUFBSSxrQkFBa0IsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7YUFDM0I7U0FDRjtJQUNILENBQUM7Ozs7O0lBRU8sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxLQUFLLEVBQUMsQ0FBQztJQUMxRCxDQUFDOzs7c0JBOURBLEtBQUssU0FBQyxXQUFXO29CQVdqQixLQUFLLFNBQUMsU0FBUztxQkFtQmYsS0FBSyxTQUFDLFVBQVU7Ozs7Ozs7SUFsQ2pCLDRDQUFpQzs7Ozs7SUFDakMsNkNBQWtEOzs7OztJQUdsRCw2Q0FBMkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0J1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4vcG8tYnV0dG9uLWdyb3VwLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQnV0dG9uR3JvdXBUb2dnbGUgfSBmcm9tICcuL3BvLWJ1dHRvbi1ncm91cC10b2dnbGUuZW51bSc7XG5cbmNvbnN0IFBPX1RPR0dMRV9UWVBFX0RFRkFVTFQgPSAnbm9uZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1idXR0b24tZ3JvdXBgIMOpIGZvcm1hZG8gcG9yIHVtIGNvbmp1bnRvIGRlIGJvdMO1ZXMgZGlzdHJpYnXDrWRvcyBob3Jpem9udGFsbWVudGUuXG4gKiBDYWRhIGJvdMOjbyBkbyBncnVwbyDDqSB0cmF0YWRvIGRlIGZvcm1hIGluZGl2aWR1YWwsIHJlY2ViZW5kbyBhc3NpbSB1bSByw7N0dWxvLCB1bWEgYcOnw6NvIGJlbSBjb21vIHNlIGRldmVyw6EgZXN0YXIgaGFiaWxpdGFkbyBvdSBuw6NvLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBhbMOpbSBkZSBzZXJ2aXIgY29tbyB1bSBhZ3J1cGFkb3IgZGUgYm90w7VlcyBwYXJhIGHDp8OjbywgdGFtYsOpbSBwZXJtaXRlIHF1ZSBzZWphbSB1dGlsaXphZG9zXG4gKiBwYXJhIHNlbGXDp8O1ZXMgbXVsdGlwbGFzIGUgw7puaWNhcy5cbiAqXG4gKiBPIGdydXBvIGRlIGJvdMO1ZXMgZGV2ZSBzZXIgdXRpbGl6YWRvIHBhcmEgb3JnYW5pemFyIGFzIGHDp8O1ZXMgZGUgbWFuZWlyYSB1bmlmb3JtZSBlIHRyYW5zbWl0aXIgYSBpZGVpYSBkZSBxdWUgb3MgYm90w7VlcyBmYXplbVxuICogcGFydGUgZGUgdW0gbWVzbW8gY29udGV4dG8uXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xuICpcbiAqIC0gRXZpdGUgdXNhciBvIGBwby1idXR0b24tZ3JvdXBgIGNvbSBhcGVuYXMgMSBhw6fDo28sIHBhcmEgaXNzbyB1dGlsaXplIG8gYHBvLWJ1dHRvbmAuXG4gKiAtIFByb2N1cmUgdXRpbGl6YXIgbm8gbcOheGltbyAzIGHDp8O1ZXMgcGFyYSBjYWRhIGBwby1idXR0b24tZ3JvdXBgLlxuICpcbiAqID4gQXMgcmVjb21lbmRhw6fDtWVzIGRvIGBwby1idXR0b25gIHRhbWLDqW0gdmFsZW0gcGFyYSBvIGBwby1idXR0b24tZ3JvdXBgLlxuICovXG5leHBvcnQgY2xhc3MgUG9CdXR0b25Hcm91cEJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX3NtYWxsPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90b2dnbGU/OiBzdHJpbmcgPSBQT19UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gIC8qKiBMaXN0YSBkZSBib3TDtWVzLiAqL1xuICBASW5wdXQoJ3AtYnV0dG9ucycpIGJ1dHRvbnM6IEFycmF5PFBvQnV0dG9uR3JvdXBJdGVtPiA9IFtdO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRvcm5hIG8gZ3J1cG8gZGUgYm90w7VlcyBjb20gdGFtYW5obyBtaW5pZmljYWRvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Atc21hbGwnKSBzZXQgc21hbGwodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zbWFsbCA9IDxhbnk+dmFsdWUgPT09ICcnID8gdHJ1ZSA6IGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUpO1xuICB9XG5cbiAgZ2V0IHNtYWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zbWFsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBvIG1vZG8gZGUgc2VsZcOnw6NvIGRlIGJvdMO1ZXMuXG4gICAqXG4gICAqID4gVmVqYSBvcyB2YWxvcmVzIHbDoWxpZG9zIG5vICplbnVtKiBgUG9NdWx0aXNlbGVjdEZpbHRlck1vZGVgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgbm9uZWBcbiAgICovXG4gIEBJbnB1dCgncC10b2dnbGUnKSBzZXQgdG9nZ2xlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90b2dnbGUgPSAoPGFueT5PYmplY3QpLnZhbHVlcyhQb0J1dHRvbkdyb3VwVG9nZ2xlKS5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IFBPX1RPR0dMRV9UWVBFX0RFRkFVTFQ7XG5cbiAgICB0aGlzLmNoZWNrU2VsZWN0ZWRzKHRoaXMuX3RvZ2dsZSk7XG4gIH1cblxuICBnZXQgdG9nZ2xlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3RvZ2dsZTtcbiAgfVxuXG4gIG9uQnV0dG9uQ2xpY2soYnV0dG9uQ2xpY2tlZDogUG9CdXR0b25Hcm91cEl0ZW0sIGJ1dHRvbkluZGV4OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy50b2dnbGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XG4gICAgICB0aGlzLmJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uLCBpbmRleCkgPT5cbiAgICAgICAgYnV0dG9uLnNlbGVjdGVkID0gaW5kZXggPT09IGJ1dHRvbkluZGV4ID8gIWJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQgOiBmYWxzZSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnRvZ2dsZSA9PT0gUG9CdXR0b25Hcm91cFRvZ2dsZS5NdWx0aXBsZSkge1xuICAgICAgYnV0dG9uQ2xpY2tlZC5zZWxlY3RlZCA9ICFidXR0b25DbGlja2VkLnNlbGVjdGVkO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tTZWxlY3RlZHModG9nZ2xlTW9kZTogc3RyaW5nKSB7XG4gICAgaWYgKHRvZ2dsZU1vZGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuTm9uZSkge1xuICAgICAgdGhpcy5kZXNlbGVjdEFsbEJ1dHRvbnMoKTtcbiAgICB9IGVsc2UgaWYgKHRvZ2dsZU1vZGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuU2luZ2xlKSB7XG4gICAgICBjb25zdCBoYXNNb3JlT25lU2VsZWN0ZWQgPSB0aGlzLmJ1dHRvbnMuZmlsdGVyKGJ1dHRvbiA9PiBidXR0b24uc2VsZWN0ZWQpLmxlbmd0aCA+IDE7XG4gICAgICBpZiAoaGFzTW9yZU9uZVNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuZGVzZWxlY3RBbGxCdXR0b25zKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkZXNlbGVjdEFsbEJ1dHRvbnMoKSB7XG4gICAgdGhpcy5idXR0b25zLmZvckVhY2goYnV0dG9uID0+IGJ1dHRvbi5zZWxlY3RlZCA9IGZhbHNlKTtcbiAgfVxuXG59XG4iXX0=