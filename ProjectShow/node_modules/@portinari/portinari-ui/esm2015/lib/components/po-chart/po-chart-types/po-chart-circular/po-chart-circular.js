/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { poChartAngleStepInterval, poChartCompleteCircle, poChartPadding, poChartStartAngle } from './po-chart-circular.constant';
import { PoChartDynamicTypeComponent } from '../po-chart-dynamic-type.component';
import { PoChartType } from '../../enums/po-chart-type.enum';
import { PoSeriesTextBlack } from '../../po-chart-colors.constant';
/** @type {?} */
const poChartBlackColor = '#000000';
/** @type {?} */
const poChartWhiteColor = '#ffffff';
export class PoChartCircular extends PoChartDynamicTypeComponent {
    /**
     * @param {?} el
     * @param {?} ngZone
     * @param {?} renderer
     */
    constructor(el, ngZone, renderer) {
        super();
        this.el = el;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.chartItemsEndAngleList = [];
        this.svgPathElementsList = [];
        this.svgTextElementsList = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set series(value) {
        this._series = this.getSeriesWithValue(value);
    }
    /**
     * @return {?}
     */
    get series() {
        return this._series;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    static calculateEndAngle(value, totalValue) {
        return value / totalValue * (Math.PI * 2);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeWindowResizeListener();
        this.removeWindowScrollListener();
        this.animationRunning = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.chartInitSetup();
        this.setEventListeners();
    }
    /**
     * @private
     * @return {?}
     */
    animationSetup() {
        this.chartItemStartAngle = poChartStartAngle;
        this.chartItemEndAngle = this.chartItemsEndAngleList[0];
        this.animationRunning = true;
        this.drawPathInit();
    }
    /**
     * @private
     * @return {?}
     */
    calculateAngleRadians() {
        this.series.forEach((/**
         * @param {?} serie
         * @param {?} index
         * @return {?}
         */
        (serie, index) => this.chartItemsEndAngleList[index] = PoChartCircular.calculateEndAngle(serie.value, this.totalValue)));
    }
    /**
     * @private
     * @param {?} angleCurrentPosition
     * @return {?}
     */
    calculateCurrentEndAngle(angleCurrentPosition) {
        /** @type {?} */
        const isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
        if (isSerieDrawCompleted) {
            return (this.chartItemStartAngle + this.chartItemEndAngle) - poChartCompleteCircle;
        }
        else {
            return this.chartItemStartAngle + angleCurrentPosition;
        }
    }
    /**
     * @private
     * @return {?}
     */
    calculateSVGDimensions() {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.setInnerRadius();
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    changeTooltipPosition(event) {
        if (this.tooltipElement && this.tooltipElement.classList.contains('po-invisible')) {
            this.showTooltip();
        }
        /** @type {?} */
        const tooltipPositions = this.setTooltipPositions(event);
        this.renderer.setStyle(this.tooltipElement, 'left', `${tooltipPositions.left}px`);
        this.renderer.setStyle(this.tooltipElement, 'top', `${tooltipPositions.top}px`);
    }
    /**
     * @private
     * @return {?}
     */
    chartInitSetup() {
        this.calculateSVGDimensions();
        this.calculateTotalValue();
        this.calculateAngleRadians();
        this.createSVGElements();
        this.animationSetup();
    }
    /**
     * @private
     * @return {?}
     */
    checkingIfScrollsWithPoPage() {
        /** @type {?} */
        const poPageContent = document.getElementsByClassName('po-page-content');
        return poPageContent.length ? poPageContent[0] : window;
    }
    /**
     * @private
     * @param {?} serie
     * @param {?} svgPathsWrapper
     * @return {?}
     */
    createPath(serie, svgPathsWrapper) {
        /** @type {?} */
        const svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'po-path-item');
        this.renderer.setAttribute(svgPath, 'fill', serie.color);
        this.setTooltipAttributes(svgPath, serie);
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        this.svgPathElementsList.push(svgPath);
    }
    /**
     * @private
     * @return {?}
     */
    createPaths() {
        /** @type {?} */
        const svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
        this.series.forEach((/**
         * @param {?} serie
         * @return {?}
         */
        serie => this.createPath(serie, svgPathsWrapper)));
    }
    /**
     * @private
     * @param {?} serie
     * @return {?}
     */
    createText(serie) {
        const { value } = serie;
        /** @type {?} */
        const svgG = this.renderer.createElement('svg:g', 'svg');
        /** @type {?} */
        const svgText = this.renderer.createElement('svg:text', 'svg');
        /** @type {?} */
        const fontSize = this.getFontSize();
        /** @type {?} */
        const textColor = this.getTextColor(serie.color);
        svgText.textContent = this.getPercentValue(value, this.totalValue) + '%';
        this.renderer.setAttribute(svgText, 'class', 'po-path-item');
        this.renderer.setAttribute(svgText, 'fill', textColor);
        this.renderer.setAttribute(svgText, 'font-size', fontSize);
        this.renderer.setAttribute(svgText, 'fill-opacity', '0');
        this.setTooltipAttributes(svgText, serie);
        this.renderer.appendChild(svgG, svgText);
        this.renderer.appendChild(this.svgElement, svgG);
        this.svgTextElementsList.push(svgText);
    }
    /**
     * @private
     * @return {?}
     */
    createTexts() {
        if (this.type === PoChartType.Donut) {
            this.series.forEach((/**
             * @param {?} serie
             * @return {?}
             */
            serie => this.createText(serie)));
        }
    }
    /**
     * @private
     * @return {?}
     */
    createSVGElements() {
        this.svgElement = this.renderer.createElement('svg:svg', 'svg');
        this.renderer.setAttribute(this.svgElement, 'viewBox', `0 0 ${this.chartWrapper} ${this.centerX * 2}`);
        this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', 'xMidYMin meet');
        this.renderer.setAttribute(this.svgElement, 'class', 'po-chart-svg-element');
        this.renderer.setAttribute(this.svgElement, 'width', `${this.chartWrapper - poChartPadding * 2}`);
        this.renderer.setAttribute(this.svgElement, 'height', `${this.svgHeight}`);
        this.svgContainer.nativeElement.appendChild(this.svgElement);
        this.createPaths();
        this.createTexts();
    }
    /**
     * @private
     * @param {?} path
     * @param {?} chartItemStartAngle
     * @param {?} chartItemEndAngle
     * @return {?}
     */
    drawPath(path, chartItemStartAngle, chartItemEndAngle) {
        /** @type {?} */
        const largeArc = chartItemEndAngle - chartItemStartAngle > Math.PI;
        /** @type {?} */
        const sinAlpha = Math.sin(chartItemStartAngle);
        /** @type {?} */
        const cosAlpha = Math.cos(chartItemStartAngle);
        /** @type {?} */
        const sinBeta = Math.sin(chartItemEndAngle);
        /** @type {?} */
        const cosBeta = Math.cos(chartItemEndAngle);
        /** @type {?} */
        const startX = this.centerX + cosAlpha * this.centerX;
        /** @type {?} */
        const startY = this.centerX + sinAlpha * this.centerX;
        /** @type {?} */
        const endX = this.centerX + cosBeta * this.centerX;
        /** @type {?} */
        const endY = this.centerX + sinBeta * this.centerX;
        /** @type {?} */
        const startInnerX = this.centerX + cosAlpha * this.innerRadius;
        /** @type {?} */
        const startInnerY = this.centerX + sinAlpha * this.innerRadius;
        /** @type {?} */
        const endInnerX = this.centerX + cosBeta * this.innerRadius;
        /** @type {?} */
        const endInnerY = this.centerX + sinBeta * this.innerRadius;
        /** @type {?} */
        const pathCoordinates = [
            'M', startX, startY,
            'A', this.centerX, this.centerX, 0, largeArc ? '1,1' : '0,1', endX, endY,
            'L', endInnerX, endInnerY,
            'A', this.innerRadius, this.innerRadius, 0, largeArc ? '1,0' : '0,0', startInnerX, startInnerY,
            'Z'
        ].join(' ');
        return path.setAttribute('d', pathCoordinates);
    }
    /**
     * @private
     * @return {?}
     */
    drawPathInit() {
        if (!this.animationRunning) {
            return;
        }
        else {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => this.drawSeries()));
        }
    }
    /**
     * @private
     * @param {?=} currentSerieIndex
     * @param {?=} angleCurrentPosition
     * @return {?}
     */
    drawSeries(currentSerieIndex = 0, angleCurrentPosition = 0) {
        /** @type {?} */
        const isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
        /** @type {?} */
        const isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
        if (isFinishedDrawingAllSeries) {
            return;
        }
        if (isFinishedDrawingCurrentSeries) {
            this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
            currentSerieIndex++;
            this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
            angleCurrentPosition = 0;
        }
        else {
            angleCurrentPosition += poChartAngleStepInterval;
            this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
            this.setTextProperties(this.svgTextElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
        }
        window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    emitEventOnEnter(event) {
        this.onSerieHover.next(event);
    }
    /**
     * @private
     * @return {?}
     */
    getFontSize() {
        /** @type {?} */
        const fontSizePorcent = 0.04;
        /** @type {?} */
        const fontSize = fontSizePorcent * this.chartWrapper;
        return `${fontSize.toFixed(0)}px`;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    getPercentValue(value, totalValue) {
        /** @type {?} */
        const percentValue = (value / totalValue) * 100;
        // caso tiver mais que duas casas decimais, fixa até duas, ex: 10.6575 => 10.65
        // se não retorna o valor com parsefloat que remove casa decimal desencessaria, ex: 10.60 => 10.6
        /** @type {?} */
        const floatPercentValue = this.isMoreThanTwoDecimalsPlaces(percentValue) ?
            parseFloat(percentValue.toFixed(2)) : parseFloat((/** @type {?} */ (percentValue)));
        return String(floatPercentValue).replace('.', ',');
    }
    /**
     * @private
     * @param {?} series
     * @return {?}
     */
    getSeriesWithValue(series) {
        /** @type {?} */
        const newSeries = [];
        series.forEach((/**
         * @param {?} serie
         * @param {?} index
         * @return {?}
         */
        (serie, index) => {
            if (serie.value > 0) {
                newSeries.push(Object.assign({}, serie, { color: this.colors[index] }));
            }
        }));
        return newSeries;
    }
    /**
     * @private
     * @param {?} color
     * @return {?}
     */
    getTextColor(color) {
        if (PoSeriesTextBlack.includes(color)) {
            return poChartBlackColor;
        }
        return poChartWhiteColor;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    getTooltipValue(value) {
        if (this.type === PoChartType.Pie) {
            return value.toString();
        }
        return this.getPercentValue(value, this.totalValue) + '%';
    }
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    isMoreThanTwoDecimalsPlaces(value = 0) {
        const [, valueAfterDot] = value.toString().split('.');
        return valueAfterDot && valueAfterDot.length > 2;
    }
    /**
     * @private
     * @return {?}
     */
    onMouseClick() {
        /** @type {?} */
        const serieOnClick = { category: this.chartElementCategory, value: this.chartElementValue };
        this.onSerieClick.next(serieOnClick);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.tooltipElement = this.chartBody.nativeElement.lastChild;
        this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');
        this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');
        this.tooltipText = event.target.getAttributeNS(null, 'data-tooltip-text');
        this.showTooltip();
        this.changeTooltipPosition(event);
        /** @type {?} */
        const serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };
        this.emitEventOnEnter(serieOnEnter);
    }
    /**
     * @private
     * @return {?}
     */
    onWindowResize() {
        this.calculateSVGDimensions();
        this.renderer.setAttribute(this.svgElement, 'width', `${this.chartWrapper - poChartPadding * 2}`);
        this.renderer.setAttribute(this.svgElement, 'height', `${this.svgHeight}`);
    }
    /**
     * @private
     * @return {?}
     */
    removeTooltip() {
        if (this.tooltipElement) {
            this.renderer.addClass(this.tooltipElement, 'po-invisible');
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeWindowResizeListener() {
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeWindowScrollListener() {
        if (this.windowScrollListener) {
            this.windowScrollListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setEventListeners() {
        /** @type {?} */
        let chartSeries = this.el.nativeElement.querySelectorAll('.po-path-item');
        chartSeries = Array.from(chartSeries);
        chartSeries.forEach((/**
         * @param {?} serie
         * @return {?}
         */
        serie => {
            this.renderer.listen(serie, 'click', this.onMouseClick.bind(this));
            this.renderer.listen(serie, 'mouseenter', this.onMouseEnter.bind(this));
            this.renderer.listen(serie, 'mousemove', this.changeTooltipPosition.bind(this));
            this.renderer.listen(serie, 'mouseleave', this.removeTooltip.bind(this));
        }));
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
        this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithPoPage(), 'scroll', this.removeTooltip.bind(this));
    }
    /**
     * @private
     * @return {?}
     */
    setInnerRadius() {
        // tamanho da largua da serie proporcional ao grafico, o valor 0.27 fica proximo de 32px
        /** @type {?} */
        const serieWidth = 0.27;
        this.innerRadius = this.type === PoChartType.Pie ? 0 : this.centerX - (this.centerX * serieWidth);
    }
    /**
     * @private
     * @param {?} text
     * @param {?} startAngle
     * @param {?} endAngle
     * @return {?}
     */
    setTextProperties(text, startAngle, endAngle) {
        if (this.type === PoChartType.Donut) {
            // utilizado para recuperar o angulo do meio, entre o inicio e fim para centralizar o texto
            /** @type {?} */
            const centerAngle = (startAngle + endAngle) / 2;
            /** @type {?} */
            const textBox = text.getBBox();
            /** @type {?} */
            const halfTextWidth = textBox.width / 2;
            /** @type {?} */
            const halfTextHeight = textBox.height / 2;
            // radius interno (circulo branco) + a metade da diferença entre tamanho do centro e radius interno
            /** @type {?} */
            const radius = this.innerRadius + (this.centerX - this.innerRadius) / 2;
            /** @type {?} */
            const xCoordinate = radius * Math.cos(centerAngle) + this.centerX - (halfTextWidth);
            /** @type {?} */
            const yCoordinate = radius * Math.sin(centerAngle) + this.centerX + (halfTextHeight / 2);
            text.setAttribute('x', xCoordinate);
            text.setAttribute('y', yCoordinate);
            text.setAttribute('fill-opacity', '1');
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    setTooltipPositions(event) {
        /** @type {?} */
        const displacement = 8;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    }
    /**
     * @private
     * @param {?} svgElement
     * @param {?} serie
     * @return {?}
     */
    setTooltipAttributes(svgElement, serie) {
        const { value, category, tooltip } = serie;
        /** @type {?} */
        const tooltipValue = this.getTooltipValue(value);
        this.renderer.setAttribute(svgElement, 'data-tooltip-category', category);
        this.renderer.setAttribute(svgElement, 'data-tooltip-value', `${value}`);
        this.renderer.setAttribute(svgElement, 'data-tooltip-text', tooltip || `${category}: ${tooltipValue}`);
    }
    /**
     * @private
     * @return {?}
     */
    showTooltip() {
        this.renderer.removeClass(this.tooltipElement, 'po-invisible');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype._series;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.animationRunning;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemEndAngle;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemStartAngle;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemsEndAngleList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.svgPathElementsList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.svgTextElementsList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.el;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,