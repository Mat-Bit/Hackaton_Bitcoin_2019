/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, HostListener, IterableDiffers, ViewChild, ViewContainerRef } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartBaseComponent } from './po-chart-base.component';
import { PoChartColors } from './po-chart-colors.constant';
import { PoChartDonutComponent } from './po-chart-types/po-chart-donut/po-chart-donut.component';
import { PoChartPieComponent } from './po-chart-types/po-chart-pie/po-chart-pie.component';
import { PoChartType } from './enums/po-chart-type.enum';
/**
 * \@docsExtends PoChartBaseComponent
 *
 * \@example
 *
 * <example name="po-chart-basic" title="Portinari Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="Portinari Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="Portinari Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
export class PoChartComponent extends PoChartBaseComponent {
    /**
     * @param {?} changeDetector
     * @param {?} componentFactoryResolver
     * @param {?} differs
     */
    constructor(changeDetector, componentFactoryResolver, differs) {
        super();
        this.changeDetector = changeDetector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.differs = differs;
        this.calculatedElement = false;
        this.initialized = false;
        this.windowResizeListener = new Subject();
        this.mappings = {
            [PoChartType.Pie]: PoChartPieComponent,
            [PoChartType.Donut]: PoChartDonutComponent
        };
        this.colors = [];
        this.onResize = (/**
         * @return {?}
         */
        () => this.windowResizeListener.next());
        this.differ = this.differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initialized = true;
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visÃ­vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeWindowResizeListener();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getSeriesColor();
    }
    /**
     * @return {?}
     */
    rebuildComponent() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.dynamicComponentSetting();
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkingForSerieChanges() {
        if (this.componentRef && this.differ) {
            /** @type {?} */
            const changeSeries = this.differ.diff(this.series);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    createComponent() {
        /** @type {?} */
        const componentType = this.getComponentType(this.type);
        /** @type {?} */
        const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        /** @type {?} */
        const instance = (/** @type {?} */ (this.componentRef.instance));
        this.setChartProperties(instance);
        return instance;
    }
    /**
     * @private
     * @return {?}
     */
    dynamicComponentSetting() {
        /** @type {?} */
        const instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    }
    /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    getComponentType(typeName) {
        return this.mappings[typeName];
    }
    /**
     * @private
     * @return {?}
     */
    getSeriesColor() {
        /** @type {?} */
        const colorsLength = PoChartColors.length - 1;
        if (!this.series) {
            return this.colors = PoChartColors[colorsLength];
        }
        /** @type {?} */
        const seriesLength = this.series.length - 1;
        if (seriesLength > colorsLength) {
            /** @type {?} */
            let colors = PoChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            /** @type {?} */
            const quantityDuplicates = seriesLength / colorsLength;
            for (let i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoChartColors[colorsLength]);
            }
            return this.colors = colors;
        }
        return this.colors = PoChartColors[seriesLength];
    }
    /**
     * @private
     * @return {?}
     */
    removeWindowResizeListener() {
        if (this.onResize) {
            this.onResize = (/**
             * @return {?}
             */
            () => { });
        }
    }
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    setChartProperties(instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = Array.isArray(this.colors) ? [...this.colors] : [];
        instance.height = this.height;
        instance.series = this.series || [];
        instance.type = this.type;
    }
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    setClickSubscribe(instance) {
        instance.onSerieClick.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.onSeriesClick(event);
        }));
    }
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    setHoverSubscribe(instance) {
        instance.onSerieHover.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.onSeriesHover(event);
        }));
    }
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    setResizeListenerSubscribe(instance) {
        this.windowResizeListener.subscribe((/**
         * @return {?}
         */
        () => {
            instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
            instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        }));
    }
}
PoChartComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-chart',
                template: "<div #chartWrapper class=\"po-chart-wrapper\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n  <div #chartLegend class=\"po-chart-legend\">\n    <div class=\"po-chart-legend-container\">\n      <div class=\"po-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\n        <div class=\"po-chart-legend-square\" [style.background]=\"colors[i]\"></div>\n        <span class=\"po-chart-legend-text\">{{ serie.category }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
PoChartComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ComponentFactoryResolver },
    { type: IterableDiffers }
];
PoChartComponent.propDecorators = {
    chartContainer: [{ type: ViewChild, args: ['chartContainer', { read: ViewContainerRef, static: true },] }],
    chartHeader: [{ type: ViewChild, args: ['chartHeader', { static: true },] }],
    chartLegend: [{ type: ViewChild, args: ['chartLegend', { static: true },] }],
    chartWrapper: [{ type: ViewChild, args: ['chartWrapper', { static: true },] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.windowResizeListener;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.mappings;
    /** @type {?} */
    PoChartComponent.prototype.colors;
    /** @type {?} */
    PoChartComponent.prototype.chartContainer;
    /** @type {?} */
    PoChartComponent.prototype.chartHeader;
    /** @type {?} */
    PoChartComponent.prototype.chartLegend;
    /** @type {?} */
    PoChartComponent.prototype.chartWrapper;
    /** @type {?} */
    PoChartComponent.prototype.onResize;
    /** @type {?} */
    PoChartComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.differs;
}
//# sourceMappingURL=data:application/json;base64,