/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToInt, isTypeof } from '../../utils/util';
import { PoChartType } from './enums/po-chart-type.enum';
/** @type {?} */
const poChartDefaultHeight = 400;
/** @type {?} */
const poChartMinHeight = 200;
/** @type {?} */
const poChartTypeDefault = PoChartType.Pie;
/**
 * \@description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Este componente também possibilita a definição das seguintes propriedades:
 *  - altura
 *  - series
 *  - tipo
 *  - título
 *
 * Além das definições de propriedades, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 *
 * @abstract
 */
export class PoChartBaseComponent {
    constructor() {
        this._height = poChartDefaultHeight;
        this._type = poChartTypeDefault;
        this.poChartType = PoChartType;
        /**
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesClick = new EventEmitter();
        /**
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesHover = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a altura do gráfico.
     *
     * > O valor mínimo que pode ser informado é 200.
     *
     * \@default `400px`
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        /** @type {?} */
        const intValue = convertToInt(value);
        /** @type {?} */
        let height;
        if (isTypeof(value, 'number')) {
            height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
        }
        else {
            height = poChartDefaultHeight;
        }
        this._height = height;
        this.rebuildComponent();
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o tipo de gráfico.
     *
     * > Veja os valores válidos no *enum* `PoChartType`.
     *
     * \@default `PoChartType.Pie`
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = ((/** @type {?} */ (Object))).values(PoChartType).includes(value) ? value : poChartTypeDefault;
        this.rebuildComponent();
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSeriesClick(event) {
        this.seriesClick.emit(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSeriesHover(event) {
        this.seriesHover.emit(event);
    }
}
PoChartBaseComponent.propDecorators = {
    height: [{ type: Input, args: ['p-height',] }],
    series: [{ type: Input, args: ['p-series',] }],
    title: [{ type: Input, args: ['p-title',] }],
    type: [{ type: Input, args: ['p-type',] }],
    seriesClick: [{ type: Output, args: ['p-series-click',] }],
    seriesHover: [{ type: Output, args: ['p-series-hover',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoChartBaseComponent.prototype._type;
    /** @type {?} */
    PoChartBaseComponent.prototype.poChartType;
    /**
     * \@description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     *
     * > A coleção de objetos deve implementar alguma das interfaces abaixo:
     * - `PoDonutChartSeries`
     * - `PoPieChartSeries`
     * @type {?}
     */
    PoChartBaseComponent.prototype.series;
    /**
     * Define o título do gráfico.
     * @type {?}
     */
    PoChartBaseComponent.prototype.title;
    /**
     * Evento executado quando o usuário clicar sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    PoChartBaseComponent.prototype.seriesClick;
    /**
     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    PoChartBaseComponent.prototype.seriesHover;
    /**
     * @abstract
     * @return {?}
     */
    PoChartBaseComponent.prototype.rebuildComponent = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWNoYXJ0L3BvLWNoYXJ0LWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7O01BSW5ELG9CQUFvQixHQUFHLEdBQUc7O01BQzFCLGdCQUFnQixHQUFHLEdBQUc7O01BQ3RCLGtCQUFrQixHQUFHLFdBQVcsQ0FBQyxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0IxQyxNQUFNLE9BQWdCLG9CQUFvQjtJQUExQztRQUVVLFlBQU8sR0FBWSxvQkFBb0IsQ0FBQztRQUN4QyxVQUFLLEdBQWdCLGtCQUFrQixDQUFDO1FBRWhDLGdCQUFXLEdBQUcsV0FBVyxDQUFDOzs7Ozs7UUF5RTFDLGdCQUFXLEdBQXVCLElBQUksWUFBWSxFQUFPLENBQUM7Ozs7OztRQVExRCxnQkFBVyxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBWTVELENBQUM7Ozs7Ozs7Ozs7Ozs7O0lBaEZDLElBQXVCLE1BQU0sQ0FBQyxLQUFhOztjQUNuQyxRQUFRLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQzs7WUFDaEMsTUFBYztRQUVsQixJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxHQUFHLFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztTQUNyRTthQUFNO1lBQ0wsTUFBTSxHQUFHLG9CQUFvQixDQUFDO1NBQy9CO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFdEIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOzs7Ozs7Ozs7Ozs7OztJQTJCRCxJQUFxQixJQUFJLENBQUMsS0FBa0I7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztRQUU1RixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBa0JELGFBQWEsQ0FBQyxLQUFVO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLEtBQVU7UUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7O3FCQTVFQSxLQUFLLFNBQUMsVUFBVTtxQkE0QmhCLEtBQUssU0FBQyxVQUFVO29CQUdoQixLQUFLLFNBQUMsU0FBUzttQkFhZixLQUFLLFNBQUMsUUFBUTswQkFlZCxNQUFNLFNBQUMsZ0JBQWdCOzBCQVF2QixNQUFNLFNBQUMsZ0JBQWdCOzs7Ozs7O0lBbkZ4Qix1Q0FBZ0Q7Ozs7O0lBQ2hELHFDQUFnRDs7SUFFaEQsMkNBQTBDOzs7Ozs7Ozs7OztJQXlDMUMsc0NBQXdFOzs7OztJQUd4RSxxQ0FBaUM7Ozs7Ozs7SUE0QmpDLDJDQUMwRDs7Ozs7OztJQU8xRCwyQ0FDMEQ7Ozs7O0lBVTFELGtFQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9JbnQsIGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvQ2hhcnRUeXBlIH0gZnJvbSAnLi9lbnVtcy9wby1jaGFydC10eXBlLmVudW0nO1xuaW1wb3J0IHsgUG9Eb251dENoYXJ0U2VyaWVzIH0gZnJvbSAnLi9wby1jaGFydC10eXBlcy9wby1jaGFydC1kb251dC9wby1jaGFydC1kb251dC1zZXJpZXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGllQ2hhcnRTZXJpZXMgfSBmcm9tICcuL3BvLWNoYXJ0LXR5cGVzL3BvLWNoYXJ0LXBpZS9wby1jaGFydC1waWUtc2VyaWVzLmludGVyZmFjZSc7XG5cbmNvbnN0IHBvQ2hhcnREZWZhdWx0SGVpZ2h0ID0gNDAwO1xuY29uc3QgcG9DaGFydE1pbkhlaWdodCA9IDIwMDtcbmNvbnN0IHBvQ2hhcnRUeXBlRGVmYXVsdCA9IFBvQ2hhcnRUeXBlLlBpZTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGBwby1jaGFydGAgw6kgdW0gY29tcG9uZW50ZSBwYXJhIHJlbmRlcml6YcOnw6NvIGRlIGRhZG9zIGF0cmF2w6lzIGRlIGdyw6FmaWNvcywgY29tIGlzc28gZmFjaWxpdGFuZG8gYSBjb21wcmVlbnPDo28gZSB0b3JuYW5kbyBhXG4gKiB2aXN1YWxpemHDp8OjbyBkZXN0ZXMgZGFkb3MgbWFpcyBhZ3JhZMOhdmVsLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSB0YW1iw6ltIHBvc3NpYmlsaXRhIGEgZGVmaW5pw6fDo28gZGFzIHNlZ3VpbnRlcyBwcm9wcmllZGFkZXM6XG4gKiAgLSBhbHR1cmFcbiAqICAtIHNlcmllc1xuICogIC0gdGlwb1xuICogIC0gdMOtdHVsb1xuICpcbiAqIEFsw6ltIGRhcyBkZWZpbmnDp8O1ZXMgZGUgcHJvcHJpZWRhZGVzLCB0YW1iw6ltIMOpIHBvc3PDrXZlbCBkZWZpbmlyIHVtYSBhw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBhbyBjbGljYXIgZW0gZGV0ZXJtaW5hZG8gZWxlbWVudG8gZG8gZ3LDoWZpY29cbiAqIGUgb3V0cmEgcXVlIHNlcsOhIGV4ZWN1dGFkYSBhbyBwYXNzYXIgbyAqbW91c2UqIHNvYnJlIG8gZWxlbWVudG8uXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xuICpcbiAqIC0gUGFyYSBxdWUgbyBncsOhZmljbyBuw6NvIGZpcXVlIGlsZWfDrXZlbCBlIGluY29tcHJlZW5zw612ZWwsIGV2aXRlIHVtYSBxdWFudGlhIGV4Y2Vzc2l2YSBkZSBzw6lyaWVzLlxuICpcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2hhcnRCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9oZWlnaHQ/OiBudW1iZXIgPSBwb0NoYXJ0RGVmYXVsdEhlaWdodDtcbiAgcHJpdmF0ZSBfdHlwZTogUG9DaGFydFR5cGUgPSBwb0NoYXJ0VHlwZURlZmF1bHQ7XG5cbiAgcHVibGljIHJlYWRvbmx5IHBvQ2hhcnRUeXBlID0gUG9DaGFydFR5cGU7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIGEgYWx0dXJhIGRvIGdyw6FmaWNvLlxuICAgKlxuICAgKiA+IE8gdmFsb3IgbcOtbmltbyBxdWUgcG9kZSBzZXIgaW5mb3JtYWRvIMOpIDIwMC5cbiAgICpcbiAgICogQGRlZmF1bHQgYDQwMHB4YFxuICAgKi9cbiAgQElucHV0KCdwLWhlaWdodCcpIHNldCBoZWlnaHQodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IGludFZhbHVlID0gY29udmVydFRvSW50KHZhbHVlKTtcbiAgICBsZXQgaGVpZ2h0OiBudW1iZXI7XG5cbiAgICBpZiAoaXNUeXBlb2YodmFsdWUsICdudW1iZXInKSkge1xuICAgICAgaGVpZ2h0ID0gaW50VmFsdWUgPD0gcG9DaGFydE1pbkhlaWdodCA/IHBvQ2hhcnRNaW5IZWlnaHQgOiBpbnRWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVpZ2h0ID0gcG9DaGFydERlZmF1bHRIZWlnaHQ7XG4gICAgfVxuXG4gICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgdGhpcy5yZWJ1aWxkQ29tcG9uZW50KCk7XG4gIH1cblxuICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIG9zIGVsZW1lbnRvcyBkbyBncsOhZmljbyBxdWUgc2Vyw6NvIGNyaWFkb3MgZGluYW1pY2FtZW50ZS5cbiAgICpcbiAgICogPiBBIGNvbGXDp8OjbyBkZSBvYmpldG9zIGRldmUgaW1wbGVtZW50YXIgYWxndW1hIGRhcyBpbnRlcmZhY2VzIGFiYWl4bzpcbiAgICogLSBgUG9Eb251dENoYXJ0U2VyaWVzYFxuICAgKiAtIGBQb1BpZUNoYXJ0U2VyaWVzYFxuICAgKi9cbiAgQElucHV0KCdwLXNlcmllcycpIHNlcmllczogQXJyYXk8UG9Eb251dENoYXJ0U2VyaWVzIHwgUG9QaWVDaGFydFNlcmllcz47XG5cbiAgLyoqIERlZmluZSBvIHTDrXR1bG8gZG8gZ3LDoWZpY28uICovXG4gIEBJbnB1dCgncC10aXRsZScpIHRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBvIHRpcG8gZGUgZ3LDoWZpY28uXG4gICAqXG4gICAqID4gVmVqYSBvcyB2YWxvcmVzIHbDoWxpZG9zIG5vICplbnVtKiBgUG9DaGFydFR5cGVgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgUG9DaGFydFR5cGUuUGllYFxuICAgKi9cbiAgQElucHV0KCdwLXR5cGUnKSBzZXQgdHlwZSh2YWx1ZTogUG9DaGFydFR5cGUpIHtcbiAgICB0aGlzLl90eXBlID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoUG9DaGFydFR5cGUpLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogcG9DaGFydFR5cGVEZWZhdWx0O1xuXG4gICAgdGhpcy5yZWJ1aWxkQ29tcG9uZW50KCk7XG4gIH1cblxuICBnZXQgdHlwZSgpOiBQb0NoYXJ0VHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gIH1cblxuICAvKipcbiAgICogRXZlbnRvIGV4ZWN1dGFkbyBxdWFuZG8gbyB1c3XDoXJpbyBjbGljYXIgc29icmUgdW0gZWxlbWVudG8gZG8gZ3LDoWZpY28uXG4gICAqXG4gICAqID4gU2Vyw6EgcGFzc2FkbyBwb3IgcGFyw6JtZXRybyB1bSBvYmpldG8gY29udGVuZG8gYSBjYXRlZ29yaWEgZSB2YWxvciBkYSBzw6lyaWUuXG4gICAqL1xuICBAT3V0cHV0KCdwLXNlcmllcy1jbGljaycpXG4gIHNlcmllc0NsaWNrPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvKipcbiAgICogRXZlbnRvIGV4ZWN1dGFkbyBxdWFuZG8gbyB1c3XDoXJpbyBwYXNzYXIgbyAqbW91c2UqIHNvYnJlIHVtIGVsZW1lbnRvIGRvIGdyw6FmaWNvLlxuICAgKlxuICAgKiA+IFNlcsOhIHBhc3NhZG8gcG9yIHBhcsOibWV0cm8gdW0gb2JqZXRvIGNvbnRlbmRvIGEgY2F0ZWdvcmlhIGUgdmFsb3IgZGEgc8OpcmllLlxuICAgKi9cbiAgQE91dHB1dCgncC1zZXJpZXMtaG92ZXInKVxuICBzZXJpZXNIb3Zlcj86IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgb25TZXJpZXNDbGljayhldmVudDogYW55KTogdm9pZCB7XG4gICAgdGhpcy5zZXJpZXNDbGljay5lbWl0KGV2ZW50KTtcbiAgfVxuXG4gIG9uU2VyaWVzSG92ZXIoZXZlbnQ6IGFueSk6IHZvaWQge1xuICAgIHRoaXMuc2VyaWVzSG92ZXIuZW1pdChldmVudCk7XG4gIH1cblxuICBhYnN0cmFjdCByZWJ1aWxkQ29tcG9uZW50KCk6IHZvaWQ7XG5cbn1cbiJdfQ==