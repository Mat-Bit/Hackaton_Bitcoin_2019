/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
/** @type {?} */
export const poLoadingOverlayLiteralsDefault = {
    en: (/** @type {?} */ ({
        loading: 'Loading',
    })),
    es: (/** @type {?} */ ({
        loading: 'Cargando',
    })),
    pt: (/** @type {?} */ ({
        loading: 'Carregando',
    })),
    ru: (/** @type {?} */ ({
        loading: 'погрузка',
    }))
};
/**
 *
 * \@description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
export class PoLoadingOverlayBaseComponent {
    /**
     * @param {?} languageService
     */
    constructor(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        if (!this.text) {
            this.text = this.getTextDefault();
        }
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define se o _overlay_ será aplicado a um container ou a página inteira.
     *
     * \@default `false`
     * @param {?} screenLock
     * @return {?}
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    /**
     * @return {?}
     */
    get screenLock() {
        return this._screenLock;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * \@default `Carregando`
     * @param {?} value
     * @return {?}
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    /**
     * @return {?}
     */
    get text() {
        return this._text;
    }
    /**
     * @private
     * @return {?}
     */
    getTextDefault() {
        /** @type {?} */
        const language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    }
}
PoLoadingOverlayBaseComponent.propDecorators = {
    screenLock: [{ type: Input, args: ['p-screen-lock',] }],
    text: [{ type: Input, args: ['p-text',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype._screenLock;
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype._text;
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1sb2FkaW5nL3BvLWxvYWRpbmctb3ZlcmxheS9wby1sb2FkaW5nLW92ZXJsYXktYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBTXpELE1BQU0sT0FBTywrQkFBK0IsR0FBRztJQUM3QyxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLE9BQU8sRUFBRSxTQUFTO0tBQ25CLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLE9BQU8sRUFBRSxZQUFZO0tBQ3RCLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLE9BQU8sRUFBRSxVQUFVO0tBQ3BCLEVBQUE7Q0FDRjs7Ozs7Ozs7QUFTRCxNQUFNLE9BQU8sNkJBQTZCOzs7O0lBeUN4QyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUF2QzlDLGdCQUFXLEdBQWEsS0FBSyxDQUFDO1FBd0NwQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQzs7Ozs7Ozs7Ozs7O0lBL0JELElBQTRCLFVBQVUsQ0FBQyxVQUFtQjtRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUFhRCxJQUFxQixJQUFJLENBQUMsS0FBYTtRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDOUMsQ0FBQzs7OztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOzs7OztJQVFPLGNBQWM7O2NBQ2QsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUU7UUFFeEQsT0FBTywrQkFBK0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDM0QsQ0FBQzs7O3lCQXJDQSxLQUFLLFNBQUMsZUFBZTttQkFtQnJCLEtBQUssU0FBQyxRQUFROzs7Ozs7O0lBL0JmLG9EQUFzQzs7Ozs7SUFDdEMsOENBQXVCOzs7OztJQXNDWCx3REFBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgUG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWxvYWRpbmctb3ZlcmxheS1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgcG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM+IHtcbiAgICBsb2FkaW5nOiAnTG9hZGluZycsXG4gIH0sXG4gIGVzOiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ0NhcmdhbmRvJyxcbiAgfSxcbiAgcHQ6IDxQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM+IHtcbiAgICBsb2FkaW5nOiAnQ2FycmVnYW5kbycsXG4gIH0sXG4gIHJ1OiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ9C/0L7Qs9GA0YPQt9C60LAnLFxuICB9XG59O1xuXG4vKipcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgbW9zdHJhIGFvIHVzdcOhcmlvIHVtYSBpbWFnZW0gZGUgX2xvYWRpbmdfIGUgYmxvcXVlaWEgYSBww6FnaW5hIGludGVpcmEgb3UgbyBjb250YWluZXIgZXNjb2xoaWRvLFxuICogZW5xdWFudG8gYWd1YXJkYSBhIHJlc3Bvc3RhIGRlIGFsZ3VtYSByZXF1aXNpw6fDo28uXG4gKi9cbmV4cG9ydCBjbGFzcyBQb0xvYWRpbmdPdmVybGF5QmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfc2NyZWVuTG9jaz86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdGV4dD86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgc2UgbyBfb3ZlcmxheV8gc2Vyw6EgYXBsaWNhZG8gYSB1bSBjb250YWluZXIgb3UgYSBww6FnaW5hIGludGVpcmEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1zY3JlZW4tbG9jaycpIHNldCBzY3JlZW5Mb2NrKHNjcmVlbkxvY2s6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zY3JlZW5Mb2NrID0gY29udmVydFRvQm9vbGVhbihzY3JlZW5Mb2NrKTtcbiAgfVxuXG4gIGdldCBzY3JlZW5Mb2NrKCkge1xuICAgIHJldHVybiB0aGlzLl9zY3JlZW5Mb2NrO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGV4dG8gYSBzZXIgZXhpYmlkbyBubyBjb21wb25lbnRlLlxuICAgKlxuICAgKiA+IE8gdmFsb3IgcGFkcsOjbyBzZXLDoSB0cmFkdXppZG8gYWNvcmRvIGNvbSBvIGlkaW9tYSBjb25maWd1cmFkbyBubyBbKipQb0kxOG4qKl0oL2RvY3VtZW50YXRpb24vcG8taTE4bikgb3UgbmF2ZWdhZG9yLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgQ2FycmVnYW5kb2BcbiAgICovXG4gIEBJbnB1dCgncC10ZXh0Jykgc2V0IHRleHQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3RleHQgPSB2YWx1ZSB8fCB0aGlzLmdldFRleHREZWZhdWx0KCk7XG4gIH1cblxuICBnZXQgdGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90ZXh0O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgaWYgKCF0aGlzLnRleHQpIHtcbiAgICAgIHRoaXMudGV4dCA9IHRoaXMuZ2V0VGV4dERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFRleHREZWZhdWx0KCk6IHN0cmluZyB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG5cbiAgICByZXR1cm4gcG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzRGVmYXVsdFtsYW5ndWFnZV0ubG9hZGluZztcbiAgfVxuXG59XG4iXX0=