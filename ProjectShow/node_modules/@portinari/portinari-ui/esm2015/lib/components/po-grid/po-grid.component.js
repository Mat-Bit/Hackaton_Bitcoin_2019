/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
/**
 * \@description
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * \@example
 *
 * <example name="po-grid-basic" title="Portinari Grid Basic">
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
 * </example>
 */
export class PoGridComponent {
    /**
     * @param {?} changeDetectorRef
     * @param {?} elRef
     * @param {?} renderer
     */
    constructor(changeDetectorRef, elRef, renderer) {
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        this.lastCell = '0-0';
        this.lastRow = 0;
        this.lastColumn = 0;
        this.currencyCell = '0-0';
        this.currencyRow = 0;
        this.currencyColumn = 0;
        this.logger = false;
        this.width = '100%';
        this.widporeeze = 0;
        this.widthActions = 0;
        this._columns = [];
        /**
         * \@description
         *
         * Ações disparadas quando uma linha do grid é manipulada.
         */
        this.rowActions = {};
        /**
         * Lista com os dados que serão exibidos no grid.
         */
        this.data = [];
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.debounceResize();
        }));
    }
    /**
     * Colunas exibidas no grid.
     * @param {?} value
     * @return {?}
     */
    set columns(value) {
        this._columns = [...value];
        this._columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            column.label = column.label || column.property;
            if (column.freeze === true) {
                column.cssWidth = `${column.width || 100}px`;
            }
            else {
                column.cssWidth = column.width ? `${column.width}px` : '100%';
            }
        }));
    }
    /**
     * @return {?}
     */
    get columns() {
        return this._columns.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => column.freeze !== true && column.action !== true));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const widthTableWrapper = this.tableWrapper.nativeElement.offsetWidth;
            this.width = `${widthTableWrapper - (this.widporeeze + 8) - this.widthActions}px`;
        }), 100);
    }
    /**
     * @return {?}
     */
    get freezeColumns() {
        /** @type {?} */
        const freezeColumns = this._columns.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => column.freeze === true));
        this.widporeeze = freezeColumns.reduce((/**
         * @param {?} prev
         * @param {?} current
         * @return {?}
         */
        (prev, current) => prev + (current.width || 100)), 0);
        return freezeColumns;
    }
    /**
     * @return {?}
     */
    get actionColumns() {
        /** @type {?} */
        const actionsColumns = this._columns.filter((/**
         * @param {?} column
         * @return {?}
         */
        column => column.action === true));
        this.widthActions = actionsColumns.length > 0 ? 56 : 0;
        return actionsColumns;
    }
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    cancelRow(event, row) {
        /** @type {?} */
        const el = event.path.find((/**
         * @param {?} element
         * @return {?}
         */
        element => element.id));
        if (!el) {
            return;
        }
        const [x] = (el.id).split('-');
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout((/**
             * @return {?}
             */
            () => this.selectCell(this.currencyRow, this.currencyColumn)));
        }
    }
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    removeRow(event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        /** @type {?} */
        const index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if ((this.data.length === 0) || (index === this.data.length)) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    }
    /**
     * @param {?} event
     * @param {?} direction
     * @return {?}
     */
    tableKeydown(event, direction) {
        let [row, col] = event.target.id.split('-');
        row = +row;
        col = +col;
        /** @type {?} */
        let prow = +row;
        /** @type {?} */
        let pcol = +col;
        // event.preventDefault();
        // event.stopPropagation();
        // debugger;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if ((direction === 'up') && (row > 0)) {
            prow--;
        }
        else if ((direction === 'left') && (col > 0)) {
            pcol--;
        }
        else if ((direction === 'right') && (col < this._columns.length - 1)) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === `${prow}-${pcol}`) {
            // console.log('vazou');
            return;
        }
        // debugger;
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('mudou de linha');
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    tableClick(event) {
        /** @type {?} */
        const el = event.path.find((/**
         * @param {?} element
         * @return {?}
         */
        element => element.id));
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        const [row, col] = (el.id).split('-');
        /** @type {?} */
        const prow = +row;
        /** @type {?} */
        const pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('>>>>>>> ', prow - 1);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    saveRow(row) {
        // console.log(this.data[row - 1]);
        // console.log(this.data[row - 1]);
        /** @type {?} */
        const obj = this.data[row - 1];
        if (!Object.keys(obj).some((/**
         * @param {?} prop
         * @return {?}
         */
        prop => obj[prop] !== this.currencyObj[prop]))) {
            // console.log('tudo igual');
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        /** @type {?} */
        const requireds = [];
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        column => {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        }));
        return requireds.length === 0;
    }
    /**
     * @return {?}
     */
    insertRow() {
        /** @type {?} */
        const obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        // this.currencyObj = Object.assign({}, obj);
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    isEmptyRow(row) {
        /** @type {?} */
        const obj = this.data[row - 1];
        if (!obj) { // title
            return false;
        }
        /** @type {?} */
        const filled = Object.keys(obj).some((/**
         * @param {?} property
         * @return {?}
         */
        property => obj[property]));
        return !filled;
    }
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    selectCell(row, col) {
        /** @type {?} */
        const nextCell = this.elRef.nativeElement.querySelector(`[id='${row}-${col}']`);
        if (nextCell) {
            this.currencyCell = `${row}-${col}`;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    }
}
PoGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-grid',
                template: "<div class=\"po-grid-wrapper po-grid-row-wrapper\" #wrapper>\n\n  <div *ngIf=\"logger\">\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br>\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br>\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br>\n    <hr>\n    currencyObj: {{ currencyObj | json }}\n    <hr>\n  </div>\n\n  <div class=\"po-grid\">\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\"\n        #table\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\n        (click)=\"tableClick($event)\"\n        (contextmenu)=\"tableClick($event)\"\n        (dblclick)=\"tableClick($event)\">\n\n        <div class=\"po-grid-cell po-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-normal\"\n          [style.width]=\"width\" [style.max-width]=\"width\" [style.min-width]=\"width\">\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- <div class=\"po-grid-footer-wrapper\">\n    <div class=\"po-grid-footer\">\n      <div class=\"links\"><a href=\"#\">RODAP\u00C9</a></div>\n    </div>\n  </div> -->\n\n</div>\n\n<!-- Coluna com as colunas congeladas -->\n<ng-template #divFreezeColumns>\n  <div class=\"po-grid po-grid-freeze\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head *ngFor=\"let column of freezeColumns; index as i\" class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          p-position=\"{{ '0-' + i }}\"\n          [p-width]=\"column.width\"\n          [p-align]=\"column.align\"\n          [p-title]=\"column.label\">\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <po-grid-cell *ngFor=\"let column of freezeColumns; index as i\" class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ (j + 1) + '-' + i }}\"\n          [p-width]=\"column.width\"\n          [(p-value)]=\"row[column.property]\">\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas congeladas -->\n\n<!-- Coluna com as colunas nornais -->\n<ng-template #divColumns>\n  <div class=\"po-grid po-grid-normal\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head *ngFor=\"let column of columns; index as i\" class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-width]=\"column.width\">\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <po-grid-cell *ngFor=\"let column of columns; index as i\" class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length) }}\"\n          [(p-value)]=\"row[column.property]\"\n          [p-width]=\"column.width\">\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas nornais -->\n\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\n<ng-template #divActionColumns>\n    <div class=\"po-grid po-grid-actions\">\n      <div class=\"po-grid-header-group\">\n        <div class=\"po-grid-row\">\n          <po-grid-head *ngFor=\"let column of actionColumns; index as i\" class=\"po-grid-title\"\n            p-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\n            [p-title]=\"column.label\"\n            [p-align]=\"column.align\">\n          </po-grid-head>\n        </div>\n      </div>\n\n      <div class=\"po-grid-body\">\n        <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n          (keydown.control.delete)=\"removeRow($event, row)\"\n          (keydown.esc)=\"cancelRow($event, row)\">\n          <po-grid-cell-action *ngFor=\"let column of actionColumns; index as i\" class=\"po-grid-cell\"\n            p-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length + columns.length) }}\"\n            [p-value]=\"row[column.property]\">\n          </po-grid-cell-action>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\n",
                styles: [`
  .po-grid-wrapper {
    /* margin: 30px; */
    overflow: auto;
    border: 1px solid #eceeee;
    /* width: 100%; */
    /* border: 1px solid red; */
    /* display: table-cell; */
  }

  .po-grid {
    display: table;
    border-right: none;
    border-bottom: none;
  }

  .po-grid-cell-normal::-webkit-scrollbar, .po-grid-row-wrapper::-webkit-scrollbar {
    border-radius: 2px;
    height: 4px;
    opacity: 0.5;
    width: 4px;
  }
  .po-grid-cell-normal::-webkit-scrollbar-thumb, .po-grid-row-wrapper::-webkit-scrollbar-thumb {
    background-color: #0c9abe;
  }

  .po-grid .fixed {
    display: table;
  }

  .po-grid-header-group {
    display: table-header-group;
  }

  .po-grid-body {
    display: table-row-group;
  }

  .po-grid-row {
    display: table-row;
  }

  .po-grid-title, .po-grid-cell {
    display: table-cell;
    border: none;
  }

  .po-grid-cell-freeze {
    border-right: 2px solid #ceeaf2;
  }

  .po-grid-cell-action {
    color: blue;
    border-left: 2px solid #ceeaf2;
  }

  .po-grid-freeze, .po-grid-actions {
    width: 100%;
  }

  .po-grid-normal {
    width: 100%;
  }

  .po-grid-cell-normal {
    overflow: auto;
  }

  .po-grid-footer {
    display: table-footer-group;
  }

  .po-grid-footer-wrapper {
    border: 1px solid #eceeee;
    border-top: none;
  }
  `]
            }] }
];
/** @nocollapse */
PoGridComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: Renderer2 }
];
PoGridComponent.propDecorators = {
    tableElement: [{ type: ViewChild, args: ['table', { static: true },] }],
    tableWrapper: [{ type: ViewChild, args: ['wrapper', { static: true },] }],
    rowActions: [{ type: Input, args: ['p-row-actions',] }],
    columns: [{ type: Input, args: ['p-columns',] }],
    data: [{ type: Input, args: ['p-data',] }]
};
if (false) {
    /** @type {?} */
    PoGridComponent.prototype.lastCell;
    /** @type {?} */
    PoGridComponent.prototype.lastRow;
    /** @type {?} */
    PoGridComponent.prototype.lastColumn;
    /** @type {?} */
    PoGridComponent.prototype.currencyCell;
    /** @type {?} */
    PoGridComponent.prototype.currencyRow;
    /** @type {?} */
    PoGridComponent.prototype.currencyColumn;
    /** @type {?} */
    PoGridComponent.prototype.currencyObj;
    /** @type {?} */
    PoGridComponent.prototype.logger;
    /** @type {?} */
    PoGridComponent.prototype.width;
    /** @type {?} */
    PoGridComponent.prototype.widporeeze;
    /** @type {?} */
    PoGridComponent.prototype.widthActions;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype.resizeListener;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype.timeoutResize;
    /** @type {?} */
    PoGridComponent.prototype.tableElement;
    /** @type {?} */
    PoGridComponent.prototype.tableWrapper;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype._columns;
    /**
     * \@description
     *
     * Ações disparadas quando uma linha do grid é manipulada.
     * @type {?}
     */
    PoGridComponent.prototype.rowActions;
    /**
     * Lista com os dados que serão exibidos no grid.
     * @type {?}
     */
    PoGridComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype.elRef;
}
//# sourceMappingURL=data:application/json;base64,