/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoDynamicViewComponent
 *
 * \@docsExtends PoDynamicField
 *
 * \@description
 *
 * Interface para definição das propriedades dos campos de visualização que serão criados dinamicamente.
 * @record
 */
export function PoDynamicViewField() { }
if (false) {
    /**
     * Indica se o campo será um `po-tag`.
     *
     * \@default `false`
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.tag;
    /**
     * Define uma cor para o campo do tipo *tag*.
     *
     * Valores válidos:
     *  - <span class="dot po-color-01"></span> `color-01`
     *  - <span class="dot po-color-02"></span> `color-02`
     *  - <span class="dot po-color-03"></span> `color-03`
     *  - <span class="dot po-color-04"></span> `color-04`
     *  - <span class="dot po-color-05"></span> `color-05`
     *  - <span class="dot po-color-06"></span> `color-06`
     *  - <span class="dot po-color-07"></span> `color-07`
     *  - <span class="dot po-color-08"></span> `color-08`
     *  - <span class="dot po-color-09"></span> `color-09`
     *  - <span class="dot po-color-10"></span> `color-10`
     *  - <span class="dot po-color-11"></span> `color-11`
     *  - <span class="dot po-color-12"></span> `color-12`
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.color;
    /**
     * Define um ícone que será exibido ao lado do valor para o campo do tipo *tag*.
     *
     * > Veja os valores válidos na [biblioteca de ícones](guides/icons).
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.icon;
    /**
     * Possibilita a inversão de cores para o campo do tipo `tag`,
     * tornando possível uma visualização de status ativo e inativo.
     *
     * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `color` ou a cor default,
     * e a cor do fundo fica branca.
     *
     * \@default `false`
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.inverse;
    /**
     * Formato de exibição do valor do campo.
     *
     * Aplicado para casos específicos de acordo com o tipo do campo.
     *
     * **types**:
     * - `currency`: Aceita valores definidos para a propriedade `currencyCode` do
     *  [**CurrencyPipe**](https://angular.io/api/common/CurrencyPipe)
     * + Exemplos: 'BRL', 'USD'.
     * - `date`: Aceita valores definidos para a propriedade `format` do [**DatePipe**](https://angular.io/api/common/DatePipe)
     * e também aceita os caracteres de dia(dd), mês(MM ou mm) e ano (yyyy ou yy),
     * caso não seja informado um formato o mesmo será 'dd/MM/yyyy'. Exemplos: 'dd/MM/yyyy', 'dd-MM-yy', 'mm/dd/yyyy'.
     * - `time`: Aceita apenas os caracteres de hora(HH), minutos(mm), segundos(ss) e
     *  milisegundos(f-ffffff), os milisegundos são opcionais, caso não seja informado um formato o mesmo será
     * 'HH:mm:ss'. Exemplos: 'HH:mm', 'HH:mm:ss.ffffff', 'HH:mm:ss.ff', 'mm:ss.fff'.
     * - `number`: Aceita valores definidos para a propriedade `digitsInfo` do [**DecimalPipe**](https://angular.io/api/common/DecimalPipe)
     *  para formatação, e caso não seja informado, o número será exibido na sua forma original.
     *
     *  + Exemplo: com o valor de entrada: `50` e a valor para formatação: `'1.2-5'` o resultado será: `50.00`.
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.format;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy12aWV3LWZpZWxkLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLXZpZXcvcG8tZHluYW1pYy12aWV3LWZpZWxkLmludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQVdBLHdDQW9FQzs7Ozs7Ozs7SUE3REMsaUNBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFtQmQsbUNBQWU7Ozs7Ozs7SUFPZixrQ0FBYzs7Ozs7Ozs7Ozs7SUFXZCxxQ0FBa0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFzQmxCLG9DQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvRHluYW1pY0ZpZWxkIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1maWVsZC5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEB1c2VkQnkgUG9EeW5hbWljVmlld0NvbXBvbmVudFxuICpcbiAqIEBkb2NzRXh0ZW5kcyBQb0R5bmFtaWNGaWVsZFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBwYXJhIGRlZmluacOnw6NvIGRhcyBwcm9wcmllZGFkZXMgZG9zIGNhbXBvcyBkZSB2aXN1YWxpemHDp8OjbyBxdWUgc2Vyw6NvIGNyaWFkb3MgZGluYW1pY2FtZW50ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQb0R5bmFtaWNWaWV3RmllbGQgZXh0ZW5kcyBQb0R5bmFtaWNGaWVsZCB7XG5cbiAgLyoqXG4gICAqIEluZGljYSBzZSBvIGNhbXBvIHNlcsOhIHVtIGBwby10YWdgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICB0YWc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdW1hIGNvciBwYXJhIG8gY2FtcG8gZG8gdGlwbyAqdGFnKi5cbiAgICpcbiAgICogVmFsb3JlcyB2w6FsaWRvczpcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDFcIj48L3NwYW4+IGBjb2xvci0wMWBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDJcIj48L3NwYW4+IGBjb2xvci0wMmBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDNcIj48L3NwYW4+IGBjb2xvci0wM2BcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDRcIj48L3NwYW4+IGBjb2xvci0wNGBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDVcIj48L3NwYW4+IGBjb2xvci0wNWBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDZcIj48L3NwYW4+IGBjb2xvci0wNmBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDdcIj48L3NwYW4+IGBjb2xvci0wN2BcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDhcIj48L3NwYW4+IGBjb2xvci0wOGBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDlcIj48L3NwYW4+IGBjb2xvci0wOWBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMTBcIj48L3NwYW4+IGBjb2xvci0xMGBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMTFcIj48L3NwYW4+IGBjb2xvci0xMWBcbiAgICogIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMTJcIj48L3NwYW4+IGBjb2xvci0xMmBcbiAgICovXG4gIGNvbG9yPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdW0gw61jb25lIHF1ZSBzZXLDoSBleGliaWRvIGFvIGxhZG8gZG8gdmFsb3IgcGFyYSBvIGNhbXBvIGRvIHRpcG8gKnRhZyouXG4gICAqXG4gICAqID4gVmVqYSBvcyB2YWxvcmVzIHbDoWxpZG9zIG5hIFtiaWJsaW90ZWNhIGRlIMOtY29uZXNdKGd1aWRlcy9pY29ucykuXG4gICAqL1xuICBpY29uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBQb3NzaWJpbGl0YSBhIGludmVyc8OjbyBkZSBjb3JlcyBwYXJhIG8gY2FtcG8gZG8gdGlwbyBgdGFnYCxcbiAgICogdG9ybmFuZG8gcG9zc8OtdmVsIHVtYSB2aXN1YWxpemHDp8OjbyBkZSBzdGF0dXMgYXRpdm8gZSBpbmF0aXZvLlxuICAgKlxuICAgKiA+IEEgY29yIGRvIHRleHRvLCBkbyDDrWNvbmUgZSBkYSBib3JkYSBmaWNhbSBjb20gYSBjb3IgdXRpbGl6YWRhIG5hIHByb3ByaWVkYWRlIGBjb2xvcmAgb3UgYSBjb3IgZGVmYXVsdCxcbiAgICogZSBhIGNvciBkbyBmdW5kbyBmaWNhIGJyYW5jYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgaW52ZXJzZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEZvcm1hdG8gZGUgZXhpYmnDp8OjbyBkbyB2YWxvciBkbyBjYW1wby5cbiAgICpcbiAgICogQXBsaWNhZG8gcGFyYSBjYXNvcyBlc3BlY8OtZmljb3MgZGUgYWNvcmRvIGNvbSBvIHRpcG8gZG8gY2FtcG8uXG4gICAqXG4gICAqICoqdHlwZXMqKjpcbiAgICogLSBgY3VycmVuY3lgOiBBY2VpdGEgdmFsb3JlcyBkZWZpbmlkb3MgcGFyYSBhIHByb3ByaWVkYWRlIGBjdXJyZW5jeUNvZGVgIGRvXG4gICAqICBbKipDdXJyZW5jeVBpcGUqKl0oaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9jb21tb24vQ3VycmVuY3lQaXBlKVxuICAgKiArIEV4ZW1wbG9zOiAnQlJMJywgJ1VTRCcuXG4gICAqIC0gYGRhdGVgOiBBY2VpdGEgdmFsb3JlcyBkZWZpbmlkb3MgcGFyYSBhIHByb3ByaWVkYWRlIGBmb3JtYXRgIGRvIFsqKkRhdGVQaXBlKipdKGh0dHBzOi8vYW5ndWxhci5pby9hcGkvY29tbW9uL0RhdGVQaXBlKVxuICAgKiBlIHRhbWLDqW0gYWNlaXRhIG9zIGNhcmFjdGVyZXMgZGUgZGlhKGRkKSwgbcOqcyhNTSBvdSBtbSkgZSBhbm8gKHl5eXkgb3UgeXkpLFxuICAgKiBjYXNvIG7Do28gc2VqYSBpbmZvcm1hZG8gdW0gZm9ybWF0byBvIG1lc21vIHNlcsOhICdkZC9NTS95eXl5Jy4gRXhlbXBsb3M6ICdkZC9NTS95eXl5JywgJ2RkLU1NLXl5JywgJ21tL2RkL3l5eXknLlxuICAgKiAtIGB0aW1lYDogQWNlaXRhIGFwZW5hcyBvcyBjYXJhY3RlcmVzIGRlIGhvcmEoSEgpLCBtaW51dG9zKG1tKSwgc2VndW5kb3Moc3MpIGVcbiAgICogIG1pbGlzZWd1bmRvcyhmLWZmZmZmZiksIG9zIG1pbGlzZWd1bmRvcyBzw6NvIG9wY2lvbmFpcywgY2FzbyBuw6NvIHNlamEgaW5mb3JtYWRvIHVtIGZvcm1hdG8gbyBtZXNtbyBzZXLDoVxuICAgKiAnSEg6bW06c3MnLiBFeGVtcGxvczogJ0hIOm1tJywgJ0hIOm1tOnNzLmZmZmZmZicsICdISDptbTpzcy5mZicsICdtbTpzcy5mZmYnLlxuICAgKiAtIGBudW1iZXJgOiBBY2VpdGEgdmFsb3JlcyBkZWZpbmlkb3MgcGFyYSBhIHByb3ByaWVkYWRlIGBkaWdpdHNJbmZvYCBkbyBbKipEZWNpbWFsUGlwZSoqXShodHRwczovL2FuZ3VsYXIuaW8vYXBpL2NvbW1vbi9EZWNpbWFsUGlwZSlcbiAgICogIHBhcmEgZm9ybWF0YcOnw6NvLCBlIGNhc28gbsOjbyBzZWphIGluZm9ybWFkbywgbyBuw7ptZXJvIHNlcsOhIGV4aWJpZG8gbmEgc3VhIGZvcm1hIG9yaWdpbmFsLlxuICAgKlxuICAgKiAgKyBFeGVtcGxvOiBjb20gbyB2YWxvciBkZSBlbnRyYWRhOiBgNTBgIGUgYSB2YWxvciBwYXJhIGZvcm1hdGHDp8OjbzogYCcxLjItNSdgIG8gcmVzdWx0YWRvIHNlcsOhOiBgNTAuMDBgLlxuICAgKi9cbiAgZm9ybWF0Pzogc3RyaW5nO1xuXG59XG4iXX0=