/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { PoTimePipe } from '../../../pipes/po-time/po-time.pipe';
import { PoDynamicViewBaseComponent } from './po-dynamic-view-base.component';
/**
 * \@docsExtends PoDynamicViewBaseComponent
 *
 * \@example
 *
 * <example name="po-dynamic-view-basic" title="Portinari Dynamic View Basic">
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee" title="Portinari Dynamic View - Employee">
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.ts"> </file>
 * </example>
 */
export class PoDynamicViewComponent extends PoDynamicViewBaseComponent {
    /**
     * @param {?} currencyPipe
     * @param {?} datePipe
     * @param {?} decimalPipe
     * @param {?} timePipe
     * @param {?} titleCasePipe
     */
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        super(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.fields || changes.value || changes.showAllValue) {
            this.visibleFields = this.getVisibleFields();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getVisibleFields() {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    }
}
PoDynamicViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-dynamic-view',
                template: "<div class=\"po-row\" *ngIf=\"visibleFields.length\">\n\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\n\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\">\n    </po-divider>\n\n    <ng-container *ngTemplateOutlet=\"!field.tag ? poInfo : poTag; context: { $implicit: field }\">\n    </ng-container>\n\n  </ng-template>\n\n</div>\n\n<ng-template #poInfo let-field>\n  <po-info [ngClass]=\"field.cssClass\"\n    [p-label]=\"field.label\"\n    [p-value]=\"field.value\">\n  </po-info>\n</ng-template>\n\n<ng-template #poTag let-field>\n  <po-tag [ngClass]=\"field.cssClass\"\n    [p-color]=\"field.color\"\n    [p-icon]=\"field.icon\"\n    [p-inverse]=\"field.inverse\"\n    [p-label]=\"field.label\"\n    [p-value]=\"field.value\">\n  </po-tag>\n</ng-template>\n"
            }] }
];
/** @nocollapse */
PoDynamicViewComponent.ctorParameters = () => [
    { type: CurrencyPipe },
    { type: DatePipe },
    { type: DecimalPipe },
    { type: PoTimePipe },
    { type: TitleCasePipe }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLXZpZXcvcG8tZHluYW1pYy12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXJGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVqRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztBQXFCOUUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLDBCQUEwQjs7Ozs7Ozs7SUFFcEUsWUFDRSxZQUEwQixFQUMxQixRQUFrQixFQUNsQixXQUF3QixFQUN4QixRQUFvQixFQUNwQixhQUE0QjtRQUU1QixLQUFLLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDM0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUM5QztJQUNILENBQUM7Ozs7O0lBRU8sZ0JBQWdCO1FBQ3RCLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixPQUFPLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUMvQjtRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMvRixDQUFDOzs7WUE1QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLGkwQkFBK0M7YUFDaEQ7Ozs7WUF4QlEsWUFBWTtZQUFFLFFBQVE7WUFBRSxXQUFXO1lBRW5DLFVBQVU7WUFGMkIsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDdXJyZW5jeVBpcGUsIERhdGVQaXBlLCBEZWNpbWFsUGlwZSwgVGl0bGVDYXNlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFBvVGltZVBpcGUgfSBmcm9tICcuLi8uLi8uLi9waXBlcy9wby10aW1lL3BvLXRpbWUucGlwZSc7XG5cbmltcG9ydCB7IFBvRHluYW1pY1ZpZXdCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby1keW5hbWljLXZpZXctYmFzZS5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBQb0R5bmFtaWNWaWV3QmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWR5bmFtaWMtdmlldy1iYXNpY1wiIHRpdGxlPVwiUG9ydGluYXJpIER5bmFtaWMgVmlldyBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZHluYW1pYy12aWV3LWJhc2ljL3NhbXBsZS1wby1keW5hbWljLXZpZXctYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZHluYW1pYy12aWV3LWJhc2ljL3NhbXBsZS1wby1keW5hbWljLXZpZXctYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tZHluYW1pYy12aWV3LWVtcGxveWVlXCIgdGl0bGU9XCJQb3J0aW5hcmkgRHluYW1pYyBWaWV3IC0gRW1wbG95ZWVcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWR5bmFtaWMtdmlldy1lbXBsb3llZS9zYW1wbGUtcG8tZHluYW1pYy12aWV3LWVtcGxveWVlLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWR5bmFtaWMtdmlldy1lbXBsb3llZS9zYW1wbGUtcG8tZHluYW1pYy12aWV3LWVtcGxveWVlLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWR5bmFtaWMtdmlldycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1keW5hbWljLXZpZXcuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvRHluYW1pY1ZpZXdDb21wb25lbnQgZXh0ZW5kcyBQb0R5bmFtaWNWaWV3QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY3VycmVuY3lQaXBlOiBDdXJyZW5jeVBpcGUsXG4gICAgZGF0ZVBpcGU6IERhdGVQaXBlLFxuICAgIGRlY2ltYWxQaXBlOiBEZWNpbWFsUGlwZSxcbiAgICB0aW1lUGlwZTogUG9UaW1lUGlwZSxcbiAgICB0aXRsZUNhc2VQaXBlOiBUaXRsZUNhc2VQaXBlKSB7XG5cbiAgICBzdXBlcihjdXJyZW5jeVBpcGUsIGRhdGVQaXBlLCBkZWNpbWFsUGlwZSwgdGltZVBpcGUsIHRpdGxlQ2FzZVBpcGUpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmZpZWxkcyB8fCBjaGFuZ2VzLnZhbHVlIHx8IGNoYW5nZXMuc2hvd0FsbFZhbHVlKSB7XG4gICAgICB0aGlzLnZpc2libGVGaWVsZHMgPSB0aGlzLmdldFZpc2libGVGaWVsZHMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFZpc2libGVGaWVsZHMoKSB7XG4gICAgaWYgKHRoaXMuc2hvd0FsbFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRNZXJnZWRGaWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy52YWx1ZSAmJiB0aGlzLmZpZWxkcy5sZW5ndGggPyB0aGlzLmdldENvbmZpZ3VyZWRGaWVsZHMoKSA6IHRoaXMuZ2V0VmFsdWVGaWVsZHMoKTtcbiAgfVxuXG59XG4iXX0=