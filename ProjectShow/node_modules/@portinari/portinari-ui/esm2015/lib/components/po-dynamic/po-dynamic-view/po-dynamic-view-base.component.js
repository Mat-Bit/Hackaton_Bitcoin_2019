/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { convertToBoolean, isTypeof } from '../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../po-dynamic.util';
/**
 *
 * \@description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
 *
 */
export class PoDynamicViewBaseComponent {
    /**
     * @param {?} currencyPipe
     * @param {?} datePipe
     * @param {?} decimalPipe
     * @param {?} timePipe
     * @param {?} titleCasePipe
     */
    constructor(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this._fields = [];
        this._showAllValue = false;
        this._value = {};
        this.visibleFields = [];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de objetos que implementam a interface `PoDynamicView`.
     *
     * > Ex: `[ { property: 'age' } ]`
     *
     * Regras de tipagem e formatação dos valores exibidos:
     *
     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
     * como formato padrão.
     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
     *
     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
     *
     * \@default `[]`
     * @param {?} fields
     * @return {?}
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set showAllValue(value) {
        this._showAllValue = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get showAllValue() {
        return this._showAllValue;
    }
    /**
     * \@description
     *
     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
     * dos objetos contidos na propridade `p-fields`.
     *
     * > Ex: `{ age: '35' }`
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    // retorna os fields com os valores recuperados do objeto value.
    /**
     * @protected
     * @return {?}
     */
    getConfiguredFields() {
        /** @type {?} */
        const newFields = [];
        this.fields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            if (isVisibleField(field)) {
                newFields.push(this.createField(field));
            }
        }));
        return newFields;
    }
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    /**
     * @protected
     * @return {?}
     */
    getMergedFields() {
        /** @type {?} */
        const mergedFields = [...this.getConfiguredFields()];
        this.getValueFields().forEach((/**
         * @param {?} valueField
         * @return {?}
         */
        valueField => {
            /** @type {?} */
            const fieldIndex = mergedFields.findIndex((/**
             * @param {?} field
             * @return {?}
             */
            field => field.property === valueField.property));
            /** @type {?} */
            const property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(this.createField({ property }));
            }
        }));
        return mergedFields;
    }
    // retorna o objeto value como fields.
    /**
     * @protected
     * @return {?}
     */
    getValueFields() {
        return Object.keys(this.value).map((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            return this.createField({ property });
        }));
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    createField(field) {
        /** @type {?} */
        const property = field.property;
        /** @type {?} */
        const value = this.transformValue(field.type, this.value[property], field.format);
        /** @type {?} */
        const classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return Object.assign({ property,
            value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
    }
    /**
     * @private
     * @param {?} type
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    transformValue(type, value, format) {
        /** @type {?} */
        let transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    }
}
PoDynamicViewBaseComponent.propDecorators = {
    fields: [{ type: Input, args: ['p-fields',] }],
    showAllValue: [{ type: Input, args: ['p-show-all-value',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype._showAllValue;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype._value;
    /** @type {?} */
    PoDynamicViewBaseComponent.prototype.visibleFields;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.currencyPipe;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.datePipe;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.decimalPipe;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.timePipe;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.titleCasePipe;
}
//# sourceMappingURL=data:application/json;base64,