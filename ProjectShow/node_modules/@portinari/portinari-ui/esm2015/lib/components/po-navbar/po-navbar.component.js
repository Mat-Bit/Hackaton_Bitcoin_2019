/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { PoNavbarBaseComponent } from './po-navbar-base.component';
import { PoNavbarItemsComponent } from './po-navbar-items/po-navbar-items.component';
/** @type {?} */
const poNavbarNavigationWidth = 88;
/** @type {?} */
const poNavbarMenuMedia = 768;
/** @type {?} */
const poNavbarMatchMedia = `(max-width: ${poNavbarMenuMedia}px)`;
/** @type {?} */
const poNavbarTiming = '250ms ease';
/**
 * \@docsExtends PoNavbarBaseComponent
 */
export class PoNavbarComponent extends PoNavbarBaseComponent {
    /**
     * @param {?} renderer
     * @param {?} builder
     * @param {?} changeDetector
     */
    constructor(renderer, builder, changeDetector) {
        super();
        this.renderer = renderer;
        this.builder = builder;
        this.changeDetector = changeDetector;
        this.showItemsNavigation = false;
        this.offset = 0;
        this.onMediaQueryChange = (/**
         * @param {?} changed
         * @return {?}
         */
        changed => {
            this.changeNavbarMenuItems(changed.matches, this.menuItems, this.items, this.literals.navbarLinks);
        });
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));
    }
    /**
     * @return {?}
     */
    get navbarItemNavigationDisableLeft() {
        return this.offset === 0;
    }
    /**
     * @return {?}
     */
    get navbarItemNavigationDisableRight() {
        return this.disableRight && this.offset !== 0;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.displayItemsNavigation();
        if (this.menu) {
            this.initNavbarMenu();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
    }
    /**
     * @param {?} orientation
     * @return {?}
     */
    navigateItems(orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    }
    /**
     * @private
     * @return {?}
     */
    allNavbarItemsWidth() {
        return this.navbarItems.allNavbarItems.reduce((/**
         * @param {?} previous
         * @param {?} current
         * @return {?}
         */
        (previous, current) => previous + current.nativeElement.offsetWidth), 0);
    }
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    animate(offset) {
        /** @type {?} */
        const animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    }
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    buildTransitionAnimation(offset) {
        return this.builder.build([
            animate(poNavbarTiming, keyframes([style({ transform: `translateX(${-offset}px)` })]))
        ]);
    }
    /**
     * @private
     * @param {?} isCollapsedMedia
     * @param {?} menuItems
     * @param {?} navbarItems
     * @param {?} label
     * @return {?}
     */
    changeNavbarMenuItems(isCollapsedMedia, menuItems, navbarItems, label) {
        if (isCollapsedMedia) {
            /** @type {?} */
            const subItems = [{ label, subItems: navbarItems }];
            this.menu.menus = [...subItems, ...menuItems];
        }
        else {
            this.menu.menus = menuItems;
        }
    }
    /**
     * @private
     * @return {?}
     */
    calculateLeftNavigation() {
        /** @type {?} */
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        navbarItem => {
            /** @type {?} */
            const navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            /** @type {?} */
            const navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= this.offset) {
                calculatedOffset = navbarItemOffset - (this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        }));
        return calculatedOffset;
    }
    /**
     * @private
     * @param {?} itemBreakPoint
     * @return {?}
     */
    calculateRightNavigation(itemBreakPoint) {
        /** @type {?} */
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        navbarItem => {
            /** @type {?} */
            const offsetLeft = navbarItem.nativeElement.offsetLeft;
            /** @type {?} */
            const finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        }));
        return calculatedOffset;
    }
    /**
     * @private
     * @return {?}
     */
    displayItemsNavigation() {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    }
    /**
     * @private
     * @return {?}
     */
    initNavbarMenu() {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        this.menuItems = this.menu.menus;
        if (window.innerWidth < poNavbarMenuMedia) {
            this.changeNavbarMenuItems(true, this.menuItems, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    }
    /**
     * @private
     * @return {?}
     */
    navbarItemsWidth() {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    }
    /**
     * @private
     * @return {?}
     */
    navigateLeft() {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    }
    /**
     * @private
     * @return {?}
     */
    navigateRight() {
        /** @type {?} */
        const maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        /** @type {?} */
        const itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    }
    /**
     * @private
     * @return {?}
     */
    setOffsetToZero() {
        this.offset = 0;
    }
    /**
     * @private
     * @param {?} maxAllowedOffset
     * @return {?}
     */
    validateMaxOffset(maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    }
    /**
     * @protected
     * @return {?}
     */
    validateMenuLogo() {
        if (this.menu.logo && this.logo) {
            this.menu.logo = undefined;
            this.menu.changeDetector.detectChanges();
        }
    }
}
PoNavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-navbar',
                template: "<header class=\"po-navbar\"\n  [ngClass]=\"{'po-navbar-shadow' : shadow}\">\n\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{'po-navbar-logo-menu' : !!menu, 'po-navbar-no-logo' : !logo }\"\n    [p-logo]=\"logo\">\n  </po-navbar-logo>\n\n  <po-navbar-items\n    class=\"po-navbar-items\"\n    [p-items]=\"items\">\n  </po-navbar-items>\n\n  <po-navbar-item-navigation *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\">\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions\n    class=\"po-navbar-actions\"\n    [p-icon-actions]=\"iconActions\">\n  </po-navbar-actions>\n\n</header>\n\n<po-menu *ngIf=\"!menu\"\n  [p-menus]=\"items\">\n</po-menu>"
            }] }
];
/** @nocollapse */
PoNavbarComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: AnimationBuilder },
    { type: ChangeDetectorRef }
];
PoNavbarComponent.propDecorators = {
    navbarItemsElement: [{ type: ViewChild, args: [PoNavbarItemsComponent, { read: ElementRef, static: true },] }],
    navbarItems: [{ type: ViewChild, args: [PoNavbarItemsComponent, { static: true },] }]
};
if (false) {
    /** @type {?} */
    PoNavbarComponent.prototype.disableRight;
    /** @type {?} */
    PoNavbarComponent.prototype.showItemsNavigation;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.mediaQuery;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.offset;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.menuItems;
    /**
     * @type {?}
     * @protected
     */
    PoNavbarComponent.prototype.windowResizeListener;
    /** @type {?} */
    PoNavbarComponent.prototype.navbarItemsElement;
    /** @type {?} */
    PoNavbarComponent.prototype.navbarItems;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.onMediaQueryChange;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.builder;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,