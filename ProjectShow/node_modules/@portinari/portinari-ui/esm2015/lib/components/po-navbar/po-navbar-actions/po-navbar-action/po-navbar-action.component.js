/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { callFunction, isExternalLink, openExternalLink } from '../../../../utils/util';
export class PoNavbarActionComponent {
    /**
     * @param {?} viewContainerRef
     * @param {?} router
     */
    constructor(viewContainerRef, router) {
        this.router = router;
        this.parentRef = viewContainerRef['_view']['component'];
    }
    /**
     * @return {?}
     */
    click() {
        if (this.action) {
            callFunction(this.action, this.parentRef || this);
            return;
        }
        if (this.link) {
            return this.openUrl(this.link);
        }
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
}
PoNavbarActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-navbar-action',
                template: "<div \n  tabindex=\"0\"\n  class=\"po-navbar-action-content po-clickable\"\n  (click)=\"click()\">\n\n  <span\n    class=\"po-icon {{ icon }}\"\n    [p-tooltip]=\"tooltip\">\n  </span>\n\n</div>\n"
            }] }
];
/** @nocollapse */
PoNavbarActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router }
];
PoNavbarActionComponent.propDecorators = {
    action: [{ type: Input, args: ['p-action',] }],
    icon: [{ type: Input, args: ['p-icon',] }],
    label: [{ type: Input, args: ['p-label',] }],
    link: [{ type: Input, args: ['p-link',] }],
    tooltip: [{ type: Input, args: ['p-tooltip-text',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoNavbarActionComponent.prototype.parentRef;
    /** @type {?} */
    PoNavbarActionComponent.prototype.action;
    /** @type {?} */
    PoNavbarActionComponent.prototype.icon;
    /** @type {?} */
    PoNavbarActionComponent.prototype.label;
    /** @type {?} */
    PoNavbarActionComponent.prototype.link;
    /** @type {?} */
    PoNavbarActionComponent.prototype.tooltip;
    /**
     * @type {?}
     * @private
     */
    PoNavbarActionComponent.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLW5hdmJhci9wby1uYXZiYXItYWN0aW9ucy9wby1uYXZiYXItYWN0aW9uL3BvLW5hdmJhci1hY3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekMsT0FBTyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQU14RixNQUFNLE9BQU8sdUJBQXVCOzs7OztJQWNsQyxZQUFZLGdCQUFrQyxFQUFVLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ3BFLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELEtBQUs7UUFDSCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDO1lBQ2xELE9BQU87U0FDUjtRQUVELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDOzs7Ozs7SUFFTyxPQUFPLENBQUMsR0FBVztRQUV6QixJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN2QixPQUFPLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO1FBRUQsSUFBSSxHQUFHLEVBQUU7WUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7OztZQTFDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsZ05BQWdEO2FBQ2pEOzs7O1lBUjBCLGdCQUFnQjtZQUNsQyxNQUFNOzs7cUJBWVosS0FBSyxTQUFDLFVBQVU7bUJBRWhCLEtBQUssU0FBQyxRQUFRO29CQUVkLEtBQUssU0FBQyxTQUFTO21CQUVmLEtBQUssU0FBQyxRQUFRO3NCQUVkLEtBQUssU0FBQyxnQkFBZ0I7Ozs7Ozs7SUFWdkIsNENBQXVCOztJQUV2Qix5Q0FBcUM7O0lBRXJDLHVDQUE4Qjs7SUFFOUIsd0NBQWdDOztJQUVoQyx1Q0FBK0I7O0lBRS9CLDBDQUEwQzs7Ozs7SUFFTSx5Q0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBjYWxsRnVuY3Rpb24sIGlzRXh0ZXJuYWxMaW5rLCBvcGVuRXh0ZXJuYWxMaW5rIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLW5hdmJhci1hY3Rpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tbmF2YmFyLWFjdGlvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9OYXZiYXJBY3Rpb25Db21wb25lbnQge1xuXG4gIHByaXZhdGUgcGFyZW50UmVmOiBhbnk7XG5cbiAgQElucHV0KCdwLWFjdGlvbicpIGFjdGlvbj86IEZ1bmN0aW9uO1xuXG4gIEBJbnB1dCgncC1pY29uJykgaWNvbjogc3RyaW5nO1xuXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XG5cbiAgQElucHV0KCdwLWxpbmsnKSBsaW5rPzogc3RyaW5nO1xuXG4gIEBJbnB1dCgncC10b29sdGlwLXRleHQnKSB0b29sdGlwPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHtcbiAgICB0aGlzLnBhcmVudFJlZiA9IHZpZXdDb250YWluZXJSZWZbJ192aWV3J11bJ2NvbXBvbmVudCddO1xuICB9XG5cbiAgY2xpY2soKSB7XG4gICAgaWYgKHRoaXMuYWN0aW9uKSB7XG4gICAgICBjYWxsRnVuY3Rpb24odGhpcy5hY3Rpb24sIHRoaXMucGFyZW50UmVmIHx8IHRoaXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxpbmspIHtcbiAgICAgIHJldHVybiB0aGlzLm9wZW5VcmwodGhpcy5saW5rKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9wZW5VcmwodXJsOiBzdHJpbmcpIHtcblxuICAgIGlmIChpc0V4dGVybmFsTGluayh1cmwpKSB7XG4gICAgICByZXR1cm4gb3BlbkV4dGVybmFsTGluayh1cmwpO1xuICAgIH1cblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHJldHVybiB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbdXJsXSk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==