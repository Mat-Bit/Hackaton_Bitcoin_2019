/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
const poCalendarServiceFirstWeekDayDefault = 0;
export class PoCalendarService {
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        const weeks = [];
        /** @type {?} */
        let week = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    monthDays(year, month) {
        /** @type {?} */
        const getDayOrZero = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date.getMonth() === month ? date : 0;
        });
        return this.monthDates(year, month, getDayOrZero);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    weekStartDate(date) {
        /** @type {?} */
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
}
PoCalendarService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2FsZW5kYXIvc2VydmljZXMvcG8tY2FsZW5kYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7TUFFckMsb0NBQW9DLEdBQVcsQ0FBQztBQUd0RCxNQUFNLE9BQU8saUJBQWlCOzs7Ozs7OztJQUU1QixVQUFVLENBQUMsSUFBUyxFQUFFLEtBQVUsRUFBRSxlQUFvQixJQUFJLEVBQUUsZ0JBQXFCLElBQUk7UUFDbkYsSUFBSSxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxFQUFFO1lBQzlELE1BQU0sS0FBSyxDQUFDLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1NBQ3BEOztjQUVLLEtBQUssR0FBZSxFQUFFOztZQUN4QixJQUFJLEdBQWUsRUFBRTs7WUFDckIsQ0FBQyxHQUFHLENBQUM7O1lBQ0wsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBRW5DLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsR0FBRyxFQUFFO1lBQzNCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEI7UUFFRCxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoQyxHQUFHO1lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2xDO1lBQ0QsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkQsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNYLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUU7UUFDdEUsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsSUFBUyxFQUFFLEtBQVU7O2NBQ3ZCLFlBQVk7Ozs7UUFBRyxVQUFTLElBQVM7WUFDckMsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUE7UUFDRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxJQUFTOztjQUNmLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDMUMsT0FBTyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssb0NBQW9DLEVBQUU7WUFDbEUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7WUE1Q0YsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgcG9DYWxlbmRhclNlcnZpY2VGaXJzdFdlZWtEYXlEZWZhdWx0OiBudW1iZXIgPSAwO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9DYWxlbmRhclNlcnZpY2Uge1xuXG4gIG1vbnRoRGF0ZXMoeWVhcjogYW55LCBtb250aDogYW55LCBkYXlGb3JtYXR0ZXI6IGFueSA9IG51bGwsIHdlZWtGb3JtYXR0ZXI6IGFueSA9IG51bGwpIHtcbiAgICBpZiAoKHR5cGVvZiBtb250aCAhPT0gJ251bWJlcicpIHx8IChtb250aCA8IDApIHx8IChtb250aCA+IDExKSkge1xuICAgICAgdGhyb3cgRXJyb3IoKCdtb250aCBtdXN0IGJlIGEgbnVtYmVyIChKYW4gaXMgMCknKSk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2Vla3M6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgd2VlazogQXJyYXk8YW55PiA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKTtcblxuICAgIGlmICh5ZWFyID49IDAgJiYgeWVhciA8IDEwMCkge1xuICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyKTtcbiAgICB9XG5cbiAgICBkYXRlID0gdGhpcy53ZWVrU3RhcnREYXRlKGRhdGUpO1xuXG4gICAgZG8ge1xuICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICB3ZWVrLnB1c2goZGF5Rm9ybWF0dGVyID8gZGF5Rm9ybWF0dGVyKGRhdGUpIDogZGF0ZSk7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDEpO1xuICAgICAgfVxuICAgICAgd2Vla3MucHVzaCh3ZWVrRm9ybWF0dGVyID8gd2Vla0Zvcm1hdHRlcih3ZWVrKSA6IHdlZWspO1xuICAgICAgd2VlayA9IFtdO1xuICAgIH0gd2hpbGUgKChkYXRlLmdldE1vbnRoKCkgPD0gbW9udGgpICYmIChkYXRlLmdldEZ1bGxZZWFyKCkgPT09IHllYXIpKTtcbiAgICByZXR1cm4gd2Vla3M7XG4gIH1cblxuICBtb250aERheXMoeWVhcjogYW55LCBtb250aDogYW55KSB7XG4gICAgY29uc3QgZ2V0RGF5T3JaZXJvID0gZnVuY3Rpb24oZGF0ZTogYW55KSB7XG4gICAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpID09PSBtb250aCA/IGRhdGUgOiAwO1xuICAgIH07XG4gICAgcmV0dXJuIHRoaXMubW9udGhEYXRlcyh5ZWFyLCBtb250aCwgZ2V0RGF5T3JaZXJvKTtcbiAgfVxuXG4gIHdlZWtTdGFydERhdGUoZGF0ZTogYW55KSB7XG4gICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgIHdoaWxlIChzdGFydERhdGUuZ2V0RGF5KCkgIT09IHBvQ2FsZW5kYXJTZXJ2aWNlRmlyc3RXZWVrRGF5RGVmYXVsdCkge1xuICAgICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnREYXRlO1xuICB9XG5cbn1cbiJdfQ==