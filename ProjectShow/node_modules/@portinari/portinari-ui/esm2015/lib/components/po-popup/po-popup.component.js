/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { callFunction, isExternalLink, isTypeof, openExternalLink } from '../../utils/util';
import { PoControlPositionService } from '../../services/po-control-position/po-control-position.service';
import { PoPopupBaseComponent } from './po-popup-base.component';
/**
 *
 * \@docsExtends PoPopupBaseComponent
 *
 * \@example
 *
 * <example name="po-popup-basic" title="Portinari Popup - Basic">
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.html"> </file>
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-labs" title="Portinari Popup - Labs">
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.html"> </file>
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-email" title="Portinari Popup Email">
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.html"> </file>
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.ts"> </file>
 * </example>
 *
 */
export class PoPopupComponent extends PoPopupBaseComponent {
    /**
     * @param {?} viewContainerRef
     * @param {?} renderer
     * @param {?} router
     * @param {?} poControlPosition
     * @param {?} changeDetector
     */
    constructor(viewContainerRef, renderer, router, poControlPosition, changeDetector) {
        super();
        this.renderer = renderer;
        this.router = router;
        this.poControlPosition = poControlPosition;
        this.changeDetector = changeDetector;
        this.onScroll = (/**
         * @return {?}
         */
        () => {
            if (this.showPopup) {
                this.close();
            }
        });
        this.parentRef = viewContainerRef['_view']['component'];
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     * @return {?}
     */
    close() {
        this.removeListeners();
        this.showPopup = false;
    }
    /**
     * @param {?} popupAction
     * @return {?}
     */
    onActionClick(popupAction) {
        /** @type {?} */
        const actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            return callFunction(popupAction.action, this.parentRef, this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    }
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    open(param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    }
    /**
     * @param {?} popupAction
     * @param {?} property
     * @return {?}
     */
    returnBooleanValue(popupAction, property) {
        return isTypeof(popupAction[property], 'function') ? popupAction[property](this.param || popupAction) : popupAction[property];
    }
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    toggle(param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    clickedOutDisabledItem(event) {
        /** @type {?} */
        const containsItemDisabled = this.elementContains(event.target, 'po-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'po-popup-item-disabled');
        return !containsItemDisabled;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    clickedOutHeaderTemplate(event) {
        /** @type {?} */
        const popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[p-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    clickedOutTarget(event) {
        return this.target && !this.target.contains(event.target);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    closePopupOnClickout(event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    }
    /**
     * @private
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    elementContains(element, className) {
        return element && element.classList.contains(className);
    }
    /**
     * @private
     * @return {?}
     */
    hasContentToShow() {
        return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            this.close();
        }));
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.closePopupOnClickout(event);
        }));
        window.addEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    setPosition() {
        this.poControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    }
    /**
     * @private
     * @return {?}
     */
    validateInitialContent() {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    }
}
PoPopupComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-popup',
                template: "<div #popupRef class=\"po-popup\" *ngIf=\"showPopup\">\n\n  <div *ngIf=\"!hideArrow\" class=\"po-popup-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <ng-content select=\"[p-popup-header-template]\"></ng-content>\n\n  <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\n    <div *ngIf=\"action.visible !== false\"\n      [class.po-popup-item-default]=\"action.type !== 'danger'\"\n      [class.po-popup-item-danger]=\"action.type === 'danger'\"\n      [class.po-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\n      [class.po-popup-item-separator]=\"action.separator && actionIndex !== 0\"\n      [class.po-popup-item-selected]=\"action.selected\"\n      (click)=\"onActionClick(action)\">\n\n      <span *ngIf=\"action.icon\" class=\"po-icon {{ action.icon }} po-popup-icon-item\"></span>\n      {{ action.label }}\n\n    </div>\n  </ng-container>\n\n</div>\n",
                providers: [PoControlPositionService]
            }] }
];
/** @nocollapse */
PoPopupComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Renderer2 },
    { type: Router },
    { type: PoControlPositionService },
    { type: ChangeDetectorRef }
];
PoPopupComponent.propDecorators = {
    popupRef: [{ type: ViewChild, args: ['popupRef', { read: ElementRef, static: false },] }]
};
if (false) {
    /** @type {?} */
    PoPopupComponent.prototype.popupRef;
    /**
     * @type {?}
     * @private
     */
    PoPopupComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    PoPopupComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoPopupComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPopupComponent.prototype.poControlPosition;
    /** @type {?} */
    PoPopupComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,