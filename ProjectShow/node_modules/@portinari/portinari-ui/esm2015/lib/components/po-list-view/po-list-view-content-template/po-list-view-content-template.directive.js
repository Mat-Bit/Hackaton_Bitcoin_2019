/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * \@usedBy PoListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="[{id: 1, name: "Register", email: register\@portinari.com}]">
 *
 *   <ng-template p-list-view-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="[{id: 1, name: "Register", email: register\@portinari.com}]">
 *
 *    <div *p-list-view-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **p-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `p-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <po-list-view
 *        [p-items]="items">
 *        <ng-template p-list-view-content-template let-item [p-title]="customTitle">
 *          <div class="po-row">
 *            <po-info class="po-md-12" p-label="Customer" [p-value]="item.customer"></po-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
export class PoListViewContentTemplateDirective {
    // Necessário manter templateRef para o funcionamento do row template.
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
PoListViewContentTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[p-list-view-content-template]'
            },] }
];
/** @nocollapse */
PoListViewContentTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
PoListViewContentTemplateDirective.propDecorators = {
    title: [{ type: Input, args: ['p-title',] }]
};
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `string`, que será utilizado como o título de cada item da lista.
     *
     * > Por parâmetro será enviado o item corrente, onde poderá utilizá-lo para recuperar dados sobre o mesmo.
     * @type {?}
     */
    PoListViewContentTemplateDirective.prototype.title;
    /** @type {?} */
    PoListViewContentTemplateDirective.prototype.templateRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1saXN0LXZpZXcvcG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUvcG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUY5RCxNQUFNLE9BQU8sa0NBQWtDOzs7OztJQWM3QyxZQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBSSxDQUFDOzs7WUFqQnRELFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO2FBQzNDOzs7O1lBdEYwQixXQUFXOzs7b0JBa0duQyxLQUFLLFNBQUMsU0FBUzs7Ozs7Ozs7Ozs7OztJQUFoQixtREFBMEM7O0lBRzlCLHlEQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb0xpc3RWaWV3Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphbSBhcHJlc2VudGFkYXMgaW5mb3JtYcOnw7VlcyBlc3NlbmNpYWlzIGRlIGNhZGEgaXRlbS5cbiAqXG4gKiBEZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBhIHJlZmVyw6puY2lhIGRvIGl0ZW0gZS9vdSDDrW5kaWNlLCBzZW5kbyBwb3IgcGFkcsOjbyBvIGl0ZW0uXG4gKiAgLSBJdGVtOiBgaXRlbWAgZGV0ZXJtaW5hIG8gaXRlbSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqICAtIMONbmRpY2U6IGBpbmRleGAgZGV0ZXJtaW5hIG8gw61uZGljZSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBvZGUgc2VyIHVzYWRhIGRlIGR1YXMgZm9ybWFzOiBleHBsw61jaXRhIG91ICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby1saXN0LXZpZXdcbiAqICAgcC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICBbcC1pdGVtc109XCJbe2lkOiAxLCBuYW1lOiBcIlJlZ2lzdGVyXCIsIGVtYWlsOiByZWdpc3RlckBwb3J0aW5hcmkuY29tfV1cIj5cbiAqXG4gKiAgIDxuZy10ZW1wbGF0ZSBwLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlIGxldC1pdGVtIGxldC1jb2RlPVwiaW5kZXhcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwicG8tcm93XCI+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTZcIiBwLWxhYmVsPVwiQ29kZVwiIFtwLXZhbHVlXT1cImNvZGVcIj48L3BvLWluZm8+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTZcIiBwLWxhYmVsPVwiRW1haWxcIiBbcC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC9wby1pbmZvPlxuICogICAgIDwvZGl2PlxuICogICA8L25nLXRlbXBsYXRlPlxuICpcbiAqIDwvcG8tbGlzdC12aWV3PlxuICpcbiAqIC4uLlxuICogYGBgXG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby1saXN0LXZpZXdcbiAqICAgIHAtcHJvcGVydHktdGl0bGU9XCJuYW1lXCJcbiAqICAgIFtwLWl0ZW1zXT1cIlt7aWQ6IDEsIG5hbWU6IFwiUmVnaXN0ZXJcIiwgZW1haWw6IHJlZ2lzdGVyQHBvcnRpbmFyaS5jb219XVwiPlxuICpcbiAqICAgIDxkaXYgKnAtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGU9XCJsZXQgaXRlbSwgbGV0IGk9aW5kZXhcIiBjbGFzcz1cInBvLXJvd1wiPlxuICogICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTEyXCIgcC1sYWJlbD1cIkVtYWlsXCIgW3AtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvcG8taW5mbz5cbiAqICAgIDwvZGl2PlxuICogPC9wby1saXN0LXZpZXc+XG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqXG4gKiBBIGRpcmV0aXZhICoqcC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZSoqLCBwb3NzaWJpbGl0YSB0YW1iw6ltIGFsdGVyYXIgbyB0w610dWxvIGRvcyBpdGVucy4gUGFyYSBpc3RvLFxuICogw6kgbmVjZXNzw6FyaW8gYXRyaWJ1aXIgYSByZWZlcsOqbmNpYSBkYSBmdW7Dp8OjbyBxdWUgZmF6IGEgYWx0ZXJhw6fDo28sIMOgIHByb3ByaWVkYWRlIGBwLXRpdGxlYCxcbiAqIGEgbWVzbWEgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvICpzdHJpbmcqLiBWZWphIG8gZXhlbXBsbyBhIHNlZ3VpcjpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogQENvbXBvbmVudCh7XG4gKiAgICBzZWxlY3RvcjogJ2FwcC1yb290JyxcbiAqICAgIHRlbXBsYXRlOiBgXG4gKiAgICAgIC4uLlxuICogICAgICA8cG8tbGlzdC12aWV3XG4gKiAgICAgICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgICAgICA8bmctdGVtcGxhdGUgcC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZSBsZXQtaXRlbSBbcC10aXRsZV09XCJjdXN0b21UaXRsZVwiPlxuICogICAgICAgICAgPGRpdiBjbGFzcz1cInBvLXJvd1wiPlxuICogICAgICAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTEyXCIgcC1sYWJlbD1cIkN1c3RvbWVyXCIgW3AtdmFsdWVdPVwiaXRlbS5jdXN0b21lclwiPjwvcG8taW5mbz5cbiAqICAgICAgICAgIDwvZGl2PlxuICogICAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgIC4uLlxuICogICAgYFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICAgcHVibGljIGl0ZW1zID0gW3tcbiAqICAgICAgY29kZTogMTIwMCxcbiAqICAgICAgcHJvZHVjdDogJ1JpY2UnLFxuICogICAgICBjdXN0b21lcjogJ1N1cGVybWFya2V0IDEnLFxuICogICAgfSwge1xuICogICAgICBjb2RlOiAxMzU1LFxuICogICAgICBwcm9kdWN0OiAnQmVhbicsXG4gKiAgICAgIGN1c3RvbWVyOiAnU3VwZXJtYXJrZXQgMidcbiAqICAgIH1dO1xuICpcbiAqICAgIGN1c3RvbVRpdGxlKGl0ZW0pIHtcbiAqICAgICAgcmV0dXJuIGAke2l0ZW0uY29kZX0gLSAke2l0ZW0ucHJvZHVjdH1gO1xuICogICAgfVxuICogfVxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgUG9MaXN0Vmlld0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgZG8gdGlwbyBgc3RyaW5nYCwgcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIG8gdMOtdHVsbyBkZSBjYWRhIGl0ZW0gZGEgbGlzdGEuXG4gICAqXG4gICAqID4gUG9yIHBhcsOibWV0cm8gc2Vyw6EgZW52aWFkbyBvIGl0ZW0gY29ycmVudGUsIG9uZGUgcG9kZXLDoSB1dGlsaXrDoS1sbyBwYXJhIHJlY3VwZXJhciBkYWRvcyBzb2JyZSBvIG1lc21vLlxuICAgKi9cbiAgQElucHV0KCdwLXRpdGxlJykgdGl0bGU6IChpdGVtKSA9PiBzdHJpbmc7XG5cbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cblxufVxuIl19