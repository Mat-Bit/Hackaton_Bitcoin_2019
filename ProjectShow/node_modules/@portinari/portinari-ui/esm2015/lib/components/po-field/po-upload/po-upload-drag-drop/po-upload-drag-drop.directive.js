/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { PoI18nPipe } from '../../../../services/po-i18n/po-i18n.pipe';
import { PoNotificationService } from '../../../../services/po-notification/po-notification.service';
export class PoUploadDragDropDirective {
    /**
     * @param {?} i18nPipe
     * @param {?} notification
     */
    constructor(i18nPipe, notification) {
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.dragLeave = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.fileChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.timeout = setTimeout((/**
         * @return {?}
         */
        () => this.dragLeave.emit()), 30);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.timeout);
        if (!this.disabled) {
            this.dragOver.emit();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFilesFromDataTransferItems(event);
        this.dragLeave.emit();
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    getFilesFromDataTransferItems(event) {
        if (!this.disabled) {
            this.invalidFileType = 0;
            if (this.directoryCompatible) {
                this.getOnlyDirectories(event.dataTransfer.items).then((/**
                 * @return {?}
                 */
                () => {
                    this.sendFiles(event, this.files);
                }));
            }
            else {
                /** @type {?} */
                const files = this.getOnlyFiles(event.dataTransfer.files);
                this.sendFiles(event, files);
            }
        }
    }
    // analisa as entradas recursivamente
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    getFilesFromEntry(entry) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (entry.isFile) {
                /** @type {?} */
                const file = yield this.readFile(entry);
                return [file];
            }
            else if (entry.isDirectory) {
                return yield this.readDirectory(entry);
            }
        });
    }
    /**
     * @private
     * @param {?} dataTransferItems
     * @return {?}
     */
    getOnlyDirectories(dataTransferItems) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const entries = [];
            // lista todas as entradas antes de analisá-las
            for (const item of dataTransferItems) {
                entries.push(item.webkitGetAsEntry());
            }
            this.files = [];
            for (const entry of entries) {
                if (entry.isFile) {
                    this.invalidFileType++;
                }
                else {
                    /** @type {?} */
                    const newFiles = yield this.getFilesFromEntry(entry);
                    this.files = this.files.concat(newFiles);
                }
            }
        });
    }
    // return only files. If it is a directory, invalidFileType counts.
    /**
     * @private
     * @param {?} fileList
     * @return {?}
     */
    getOnlyFiles(fileList) {
        return Array.from(fileList).reduce((/**
         * @param {?} newFiles
         * @param {?} file
         * @return {?}
         */
        (newFiles, file) => {
            if (file.type) {
                return newFiles.concat(file);
            }
            else {
                this.invalidFileType++;
            }
            return newFiles;
        }), []);
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    readFile(entry) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            entry.file((/**
             * @param {?} file
             * @return {?}
             */
            file => {
                resolve(file);
            }));
        }));
    }
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    readDirectory(entry) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const dirReader = entry.createReader();
            /** @type {?} */
            let files = [];
            /** @type {?} */
            let newFiles;
            newFiles = yield this.readDirectoryEntries(dirReader);
            files = files.concat(newFiles);
            return files;
        });
    }
    /**
     * @private
     * @param {?} dirReader
     * @return {?}
     */
    readDirectoryEntries(dirReader) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            dirReader.readEntries((/**
             * @param {?} entries
             * @return {?}
             */
            (entries) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                /** @type {?} */
                let files = [];
                for (const entry of entries) {
                    /** @type {?} */
                    const itemFiles = yield this.getFilesFromEntry(entry);
                    files = files.concat(itemFiles);
                }
                resolve(files);
            })));
        }));
    }
    /**
     * @private
     * @param {?} invalidFiles
     * @return {?}
     */
    sendFeedback(invalidFiles) {
        if (invalidFiles) {
            this.setPipeArguments('invalidFileType', invalidFiles);
        }
    }
    /**
     * @private
     * @param {?} event
     * @param {?} files
     * @return {?}
     */
    sendFiles(event, files) {
        if (this.areaElement.contains(event.target)) {
            if (files.length > 0) {
                this.fileChange.emit(files);
            }
            this.sendFeedback(this.invalidFileType);
        }
        else {
            /** @type {?} */
            const invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
            this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
        }
    }
    // método responsável por setar os argumentos do i18nPipe.
    /**
     * @private
     * @param {?} literalAttributes
     * @param {?=} args
     * @return {?}
     */
    setPipeArguments(literalAttributes, args) {
        /** @type {?} */
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
        this.notification.information(pipeArguments);
    }
}
PoUploadDragDropDirective.decorators = [
    { type: Directive, args: [{
                selector: '[p-upload-drag-drop]',
                providers: [PoI18nPipe]
            },] }
];
/** @nocollapse */
PoUploadDragDropDirective.ctorParameters = () => [
    { type: PoI18nPipe },
    { type: PoNotificationService }
];
PoUploadDragDropDirective.propDecorators = {
    areaElement: [{ type: Input, args: ['p-area-element',] }],
    directoryCompatible: [{ type: Input, args: ['p-directory-compatible',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    dragLeave: [{ type: Output, args: ['p-drag-leave',] }],
    dragOver: [{ type: Output, args: ['p-drag-over',] }],
    fileChange: [{ type: Output, args: ['p-file-change',] }],
    onDragLeave: [{ type: HostListener, args: ['document:dragleave', ['$event'],] }],
    onDragOver: [{ type: HostListener, args: ['document:dragover', ['$event'],] }],
    onDrop: [{ type: HostListener, args: ['document:drop', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PoUploadDragDropDirective.prototype.timeout;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropDirective.prototype.files;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropDirective.prototype.invalidFileType;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.areaElement;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.directoryCompatible;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.disabled;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.literals;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.dragLeave;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.dragOver;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.fileChange;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropDirective.prototype.i18nPipe;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropDirective.prototype.notification;
}
//# sourceMappingURL=data:application/json;base64,