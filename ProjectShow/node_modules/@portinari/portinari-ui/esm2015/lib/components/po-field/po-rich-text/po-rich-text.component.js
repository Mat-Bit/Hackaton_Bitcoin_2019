/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoRichTextBaseComponent } from './po-rich-text-base.component';
import { PoRichTextBodyComponent } from './po-rich-text-body/po-rich-text-body.component';
/**
 * \@docsExtends PoRichTextBaseComponent
 *
 * \@example
 *
 * <example name="po-rich-text-basic" title="Portinari Rich Text Basic">
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.html"> </file>
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-labs" title="Portinari Rich Text Labs">
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.html"> </file>
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-recipe" title="Portinari Rich Text Recipe">
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe-image-base-64.ts"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.html"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.ts"> </file>
 * </example>
 */
export class PoRichTextComponent extends PoRichTextBaseComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        super();
        this.element = element;
        this.listener = this.validateClassesForRequired.bind(this);
    }
    /**
     * @return {?}
     */
    get errorMsg() {
        return (this.errorMessage !== '' && !this.value && this.required && this.invalid) ? this.errorMessage : '';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        if (!this.onChangeModel) {
            this.element.nativeElement.addEventListener('keyup', this.listener);
            this.element.nativeElement.addEventListener('keydown', this.listener);
            this.element.nativeElement.addEventListener('cut', this.listener);
            this.element.nativeElement.addEventListener('paste', this.listener);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (!this.onChangeModel) {
            this.element.nativeElement.removeEventListener('keyup', this.listener);
            this.element.nativeElement.removeEventListener('keydown', this.listener);
            this.element.nativeElement.removeEventListener('cut', this.listener);
            this.element.nativeElement.removeEventListener('paste', this.listener);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRichTextComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
     *
     * focusRichText() {
     *   this.richText.focus();
     * }
     * ```
     * @return {?}
     */
    focus() {
        this.bodyElement.focus();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChangeValue(value) {
        this.change.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        this.value = value;
        this.invalid = !value;
        this.controlChangeModelEmitter(this.value);
        this.updateModel(this.value);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    /**
     * @private
     * @return {?}
     */
    validateClassesForRequired() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const value = this.value;
            /** @type {?} */
            const element = this.element.nativeElement;
            if (!value && this.required) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        }));
    }
}
PoRichTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text',
                template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n\n    <po-rich-text-body #richTextBody\n      [p-height]=\"height\"\n      [p-model-value]=\"value\"\n      [p-placeholder]=\"placeholder\"\n      [p-readonly]=\"readonly\"\n      (p-change)=\"onChangeValue($event)\"\n      (p-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (p-shortcut-command)=\"richTextToolbar.shortcutTrigger()\"\n      (p-value)=\"updateValue($event)\">\n    </po-rich-text-body>\n\n    <po-rich-text-toolbar #richTextToolbar\n      [p-readonly]=\"readonly\"\n      (p-command)=\"richTextBody.executeCommand($event)\"\n      (p-modal)=\"richTextModal.openModal($event)\">\n    </po-rich-text-toolbar>\n\n    <po-rich-text-modal #richTextModal\n      (p-command)=\"richTextBody.executeCommand($event)\">\n    </po-rich-text-modal>\n\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"errorMsg\"></po-field-container-bottom>\n\n</po-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PoRichTextComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PoRichTextComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
PoRichTextComponent.ctorParameters = () => [
    { type: ElementRef }
];
PoRichTextComponent.propDecorators = {
    bodyElement: [{ type: ViewChild, args: [PoRichTextBodyComponent, { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRichTextComponent.prototype.listener;
    /**
     * @type {?}
     * @private
     */
    PoRichTextComponent.prototype.modelLastUpdate;
    /** @type {?} */
    PoRichTextComponent.prototype.bodyElement;
    /**
     * @type {?}
     * @private
     */
    PoRichTextComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,