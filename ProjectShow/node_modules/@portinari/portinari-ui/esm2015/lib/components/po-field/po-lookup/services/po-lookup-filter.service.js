/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
export class PoLookupFilterService {
    /**
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} filteredItemsParams
     * @return {?}
     */
    getFilteredItems(filteredItemsParams) {
        const { filterParams } = filteredItemsParams, restFilteredItemsParams = tslib_1.__rest(filteredItemsParams, ["filterParams"]);
        /** @type {?} */
        const validatedFilterParams = this.validateParams(filterParams);
        /** @type {?} */
        const params = Object.assign({}, restFilteredItemsParams, validatedFilterParams);
        return this.httpClient.get(this.url, { params });
    }
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    getObjectByValue(value, filterParams) {
        /** @type {?} */
        const validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(`${this.url}/${value}`, { params: validatedFilterParams });
    }
    /**
     * @param {?} url
     * @return {?}
     */
    setUrl(url) {
        this.url = url;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
}
PoLookupFilterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoLookupFilterService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLookupFilterService.prototype.url;
    /**
     * @type {?}
     * @private
     */
    PoLookupFilterService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvc2VydmljZXMvcG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7Ozs7OztBQWFsRCxNQUFNLE9BQU8scUJBQXFCOzs7O0lBSWhDLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBRyxDQUFDOzs7OztJQUU5QyxnQkFBZ0IsQ0FBQyxtQkFBZ0Q7Y0FDekQsRUFBRSxZQUFZLEtBQWlDLG1CQUFtQixFQUFsRCwrRUFBMEI7O2NBRTFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDOztjQUV6RCxNQUFNLHFCQUFRLHVCQUF1QixFQUFLLHFCQUFxQixDQUFFO1FBRXZFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsS0FBYSxFQUFFLFlBQWtCOztjQUMxQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQztRQUUvRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsR0FBVztRQUNoQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFFTyxjQUFjLENBQUMsTUFBVztRQUNoQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNuRixDQUFDOzs7WUE3QkYsVUFBVTs7OztZQWpCRixVQUFVOzs7Ozs7O0lBb0JqQixvQ0FBb0I7Ozs7O0lBRVIsMkNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtZmlsdGVyZWQtaXRlbXMtcGFyYW1zLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcGFkcsOjbyB1dGlsaXphZG8gcGFyYSBmaWx0cmFyIG9zIGRhZG9zIGRvIGNvbXBvbmVudGUgcG8tbG9va3VwLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9Mb29rdXBGaWx0ZXJTZXJ2aWNlIGltcGxlbWVudHMgUG9Mb29rdXBGaWx0ZXIge1xuXG4gIHByaXZhdGUgdXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7fVxuXG4gIGdldEZpbHRlcmVkSXRlbXMoZmlsdGVyZWRJdGVtc1BhcmFtczogUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB7IGZpbHRlclBhcmFtcywgLi4ucmVzdEZpbHRlcmVkSXRlbXNQYXJhbXMgfSA9IGZpbHRlcmVkSXRlbXNQYXJhbXM7XG5cbiAgICBjb25zdCB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGZpbHRlclBhcmFtcyk7XG5cbiAgICBjb25zdCBwYXJhbXMgPSB7IC4uLnJlc3RGaWx0ZXJlZEl0ZW1zUGFyYW1zLCAuLi52YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KHRoaXMudXJsLCB7IHBhcmFtcyB9KTtcbiAgfVxuXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZywgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGZpbHRlclBhcmFtcyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldChgJHt0aGlzLnVybH0vJHt2YWx1ZX1gLCB7IHBhcmFtczogdmFsaWRhdGVkRmlsdGVyUGFyYW1zIH0pO1xuICB9XG5cbiAgc2V0VXJsKHVybDogc3RyaW5nKSB7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlUGFyYW1zKHBhcmFtczogYW55KSB7XG4gICAgcmV0dXJuIGlzVHlwZW9mKHBhcmFtcywgJ29iamVjdCcpICYmICFBcnJheS5pc0FycmF5KHBhcmFtcykgPyBwYXJhbXMgOiB1bmRlZmluZWQ7XG4gIH1cblxufVxuIl19