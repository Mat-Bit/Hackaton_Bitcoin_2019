/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoLookupComponent
 *
 * \@description
 *
 * Define o tipo de busca utilizado no po-lookup.
 * @record
 */
export function PoLookupFilter() { }
if (false) {
    /**
     * **Deprecated**
     *
     * Método responsável por enviar um filtro para o serviço e receber os dados.
     *
     * Os parâmetros page e pageSize seguem o guia de implementação das APIs TOTVS, são utilizados para controlar a busca dos dados em cada
     * requisição do botão 'Carregar mais resultados'.
     *
     * Este método deve retornar um *Observable* com a resposta da API no formato da interface `PoLookupResponseApi`.
     *
     * > Este método está depreciado, deve-se utilizar a método `getFilteredItems`.
     *
     *
     * @deprecated 4.x.x
     *
     * @param {?} filter
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} filterParams
     * @return {?}
     */
    PoLookupFilter.prototype.getFilteredData = function (filter, page, pageSize, filterParams) { };
    /**
     * Método que será disparado ao filtrar a lista de itens ou carregar mais resultados no componente, deve-se retornar
     * um *Observable* com a resposta da API no formato da interface `PoLookupResponseApi`.
     *
     * > Esta propriedade será priorizada se houver também o método `getFilteredData`.
     *
     * @param {?} params
     * @return {?}
     */
    PoLookupFilter.prototype.getFilteredItems = function (params) { };
    /**
     * Método responsável por enviar um valor que será buscado no serviço.
     *
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    PoLookupFilter.prototype.getObjectByValue = function (value, filterParams) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9pbnRlcmZhY2VzL3BvLWxvb2t1cC1maWx0ZXIuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVlBLG9DQTBDQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFwQkMsK0ZBQW9IOzs7Ozs7Ozs7O0lBVXBILGtFQUF3Rjs7Ozs7Ozs7SUFReEYsK0VBQXFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMgfSBmcm9tICcuL3BvLWxvb2t1cC1maWx0ZXJlZC1pdGVtcy1wYXJhbXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTG9va3VwUmVzcG9uc2VBcGkgfSBmcm9tICcuL3BvLWxvb2t1cC1yZXNwb25zZS1hcGkuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAdXNlZEJ5IFBvTG9va3VwQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRGVmaW5lIG8gdGlwbyBkZSBidXNjYSB1dGlsaXphZG8gbm8gcG8tbG9va3VwLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBvTG9va3VwRmlsdGVyIHtcblxuICAvKipcbiAgICogKipEZXByZWNhdGVkKipcbiAgICpcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGVudmlhciB1bSBmaWx0cm8gcGFyYSBvIHNlcnZpw6dvIGUgcmVjZWJlciBvcyBkYWRvcy5cbiAgICpcbiAgICogT3MgcGFyw6JtZXRyb3MgcGFnZSBlIHBhZ2VTaXplIHNlZ3VlbSBvIGd1aWEgZGUgaW1wbGVtZW50YcOnw6NvIGRhcyBBUElzIFRPVFZTLCBzw6NvIHV0aWxpemFkb3MgcGFyYSBjb250cm9sYXIgYSBidXNjYSBkb3MgZGFkb3MgZW0gY2FkYVxuICAgKiByZXF1aXNpw6fDo28gZG8gYm90w6NvICdDYXJyZWdhciBtYWlzIHJlc3VsdGFkb3MnLlxuICAgKlxuICAgKiBFc3RlIG3DqXRvZG8gZGV2ZSByZXRvcm5hciB1bSAqT2JzZXJ2YWJsZSogY29tIGEgcmVzcG9zdGEgZGEgQVBJIG5vIGZvcm1hdG8gZGEgaW50ZXJmYWNlIGBQb0xvb2t1cFJlc3BvbnNlQXBpYC5cbiAgICpcbiAgICogPiBFc3RlIG3DqXRvZG8gZXN0w6EgZGVwcmVjaWFkbywgZGV2ZS1zZSB1dGlsaXphciBhIG3DqXRvZG8gYGdldEZpbHRlcmVkSXRlbXNgLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gZmlsdGVyIFV0aWxpemFkbyBwZWxvIHNlcnZpw6dvIHBhcmEgZmlsdHJhciBvcyBkYWRvcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2UgQ29udHJvbGEgYSBwYWdpbmHDp8OjbyBkb3MgZGFkb3MgZSByZWNlYmUgdmFsb3IgYXV0b21hdGljYW1lbnRlIGEgY2FkYSBjbGlxdWUgbm8gYm90w6NvICdDYXJyZWdhciBtYWlzIHJlc3VsdGFkb3MnLlxuICAgKiBAcGFyYW0ge251bWJlcn0gcGFnZVNpemUgUXVhbnRpZGFkZSBkZSBpdGVucyByZXRvcm5hZG9zIGNhZGEgdmV6IHF1ZSBvIHNlcnZpw6dvIMOpIGNoYW1hZG8sIHBvciBwYWRyw6NvIMOpIDEwLlxuICAgKiBAcGFyYW0ge2FueX0gZmlsdGVyUGFyYW1zIFZhbG9yIGluZm9ybWFkbyBhdHJhdsOpcyBkYSBwcm9wcmllZGFkZSBgcC1maWx0ZXItcGFyYW1zYC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgNC54LnhcbiAgICpcbiAgICovXG4gIGdldEZpbHRlcmVkRGF0YT8oZmlsdGVyOiBhbnksIHBhZ2U6IG51bWJlciwgcGFnZVNpemU/OiBudW1iZXIsIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8UG9Mb29rdXBSZXNwb25zZUFwaT47XG5cbiAgLyoqXG4gICAqIE3DqXRvZG8gcXVlIHNlcsOhIGRpc3BhcmFkbyBhbyBmaWx0cmFyIGEgbGlzdGEgZGUgaXRlbnMgb3UgY2FycmVnYXIgbWFpcyByZXN1bHRhZG9zIG5vIGNvbXBvbmVudGUsIGRldmUtc2UgcmV0b3JuYXJcbiAgICogdW0gKk9ic2VydmFibGUqIGNvbSBhIHJlc3Bvc3RhIGRhIEFQSSBubyBmb3JtYXRvIGRhIGludGVyZmFjZSBgUG9Mb29rdXBSZXNwb25zZUFwaWAuXG4gICAqXG4gICAqID4gRXN0YSBwcm9wcmllZGFkZSBzZXLDoSBwcmlvcml6YWRhIHNlIGhvdXZlciB0YW1iw6ltIG8gbcOpdG9kbyBgZ2V0RmlsdGVyZWREYXRhYC5cbiAgICpcbiAgICogQHBhcmFtIHtQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXN9IHBhcmFtcyBPYmpldG8gZW52aWFkbyBwb3IgcGFyw6JtZXRybyBxdWUgaW1wbGVtZW50YSBhIGludGVyZmFjZSBgUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zYC5cbiAgICovXG4gIGdldEZpbHRlcmVkSXRlbXM/KHBhcmFtczogUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zKTogT2JzZXJ2YWJsZTxQb0xvb2t1cFJlc3BvbnNlQXBpPjtcblxuICAvKipcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGVudmlhciB1bSB2YWxvciBxdWUgc2Vyw6EgYnVzY2FkbyBubyBzZXJ2acOnby5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbG9yIMO6bmljbyBhIHNlciBidXNjYWRvIG5hIGZvbnRlIGRlIGRhZG9zLlxuICAgKiBAcGFyYW0ge2FueX0gZmlsdGVyUGFyYW1zIFZhbG9yIGluZm9ybWFkbyBhdHJhdsOpcyBkYSBwcm9wcmllZGFkZSBgcC1maWx0ZXItcGFyYW1zYC5cbiAgICovXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZywgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+O1xuXG59XG4iXX0=