/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, HostListener, Input, Renderer2, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { formatYear, isMobile, setYearFrom0To100 } from '../../../utils/util';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoCalendarComponent } from './po-calendar/po-calendar.component';
import { PoDatepickerBaseComponent } from './po-datepicker-base.component';
/** @type {?} */
const poCalendarContentOffset = 8;
/** @type {?} */
const poCalendarPositionDefault = 'bottom-left';
/**
 * \@docsExtends PoDatepickerBaseComponent
 *
 * \@example
 *
 * <example name="po-datepicker-basic" title="Portinari Datepicker Basic">
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.ts"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.po.ts"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.e2e-spec.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-labs" title="Portinari Datepicker Labs">
 *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-airfare" title="Portinari Datepicker - Airfare">
 *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.html"> </file>
 *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-airfare-reactive-form" title="Portinari Datepicker - Airfare Reactive Form">
 *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.html"> </file>
 *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.ts"> </file>
 * </example>
 */
export class PoDatepickerComponent extends PoDatepickerBaseComponent {
    /**
     * @param {?} controlPosition
     * @param {?} renderer
     * @param {?} el
     */
    constructor(controlPosition, renderer, el) {
        super();
        this.controlPosition = controlPosition;
        this.renderer = renderer;
        this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
        this.onScroll = (/**
         * @return {?}
         */
        () => {
            this.controlPosition.adjustPosition(poCalendarPositionDefault);
        });
        this.el = el;
    }
    /**
     * @return {?}
     */
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setDialogPickerStyleDisplay('none');
        // Põe o foco no Input, setado pelo p-focus
        if (this.autofocus) {
            this.inputEl.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListeners();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoDatepickerComponent, { static: true }) datepicker: PoDatepickerComponent;
     *
     * focusDatepicker() {
     *   this.datepicker.focus();
     * }
     * ```
     * @return {?}
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    togglePicker() {
        if (this.disabled || this.readonly) {
            return;
        }
        if (!this.calendar.visible) {
            this.calendar.init();
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.inputEl.nativeElement.disabled = false;
            this.closeCalendar();
        }
    }
    /**
     * @return {?}
     */
    dateSelected() {
        if (!this.verifyMobile()) {
            this.inputEl.nativeElement.focus();
        }
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.controlModel(this.date);
        this.controlChangeEmitter();
        this.closeCalendar();
    }
    // Esconde Picker quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    wasClickedOnPicker(event) {
        if (!this.dialogPicker || !this.iconDatepicker) {
            return;
        }
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target) && !this.hasAttrCalendar(event.target)) {
            this.closeCalendar();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeyup($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onKeydown($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keydown($event);
    }
    /**
     * @return {?}
     */
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    /**
     * @return {?}
     */
    getErrorPattern() {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    }
    /**
     * @return {?}
     */
    clear() {
        this.valueBeforeChange = this.formatToDate(this.date);
        this.date = undefined;
        this.controlModel(this.date);
        this.controlChangeEmitter();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    eventOnBlur($event) {
        /** @type {?} */
        const date = this.inputEl.nativeElement.value;
        /** @type {?} */
        const newDate = date ? this.getDateFromString(date) : undefined;
        this.objMask.blur($event);
        this.onblur.emit();
        if (this.objMask.valueToModel) {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(newDate);
                this.date = newDate;
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
            this.callOnChange(this.date);
        }
        this.controlChangeEmitter();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    eventOnClick($event) {
        if (this.verifyMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout((/**
             * @return {?}
             */
            () => this.togglePicker()), 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatToDate(value) {
        if (!value) {
            return undefined;
        }
        /** @type {?} */
        let dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    refreshValue(value) {
        if (value) {
            this.inputEl.nativeElement.value = this.formatToDate(value);
        }
    }
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                /** @type {?} */
                const dateString = value.toString();
                this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                if (this.isValidDateIso(value)) {
                    this.isExtendedISO = false;
                }
                else {
                    this.hour = value.substring(10, 25);
                    this.isExtendedISO = true;
                }
                /** @type {?} */
                const day = parseInt(value.substring(8, 10), 10);
                /** @type {?} */
                const month = parseInt(value.substring(5, 7), 10) - 1;
                /** @type {?} */
                const year = parseInt(value.substring(0, 4), 10);
                /** @type {?} */
                const dateTemp = new Date(year, month, day);
                setYearFrom0To100(dateTemp, year);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            else {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.controlModel(this.date);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = '';
            this.date = undefined;
        }
        this.valueBeforeChange = this.formatToDate(this.date);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isValidDateIso(value) {
        return this.dateRegex.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    isValidExtendedIso(value) {
        return this.isoRegex.test(value);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    hasOverlayClass(element) {
        return element.classList.contains('po-calendar-overlay');
    }
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    verifyMobile() {
        return isMobile();
    }
    /**
     * @private
     * @return {?}
     */
    closeCalendar() {
        this.calendar.close();
        this.removeListeners();
        this.setDialogPickerStyleDisplay('none');
    }
    /**
     * @private
     * @return {?}
     */
    controlChangeEmitter() {
        /** @type {?} */
        const dateModelFormatted = this.formatToDate(this.date);
        if (dateModelFormatted !== this.valueBeforeChange) {
            this.valueBeforeChange = dateModelFormatted;
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout((/**
             * @return {?}
             */
            () => {
                this.onchange.emit(dateModelFormatted);
            }), 200);
        }
    }
    /**
     * @private
     * @param {?} element
     * @return {?}
     */
    hasAttrCalendar(element) {
        /** @type {?} */
        const attrCalendar = 'attr-calendar';
        return (element && element.hasAttribute(attrCalendar)) || (element.parentElement && element.parentElement.hasAttribute(attrCalendar));
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.clickListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.wasClickedOnPicker(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            this.closeCalendar();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setDialogPickerStyleDisplay(value) {
        this.dialogPicker.nativeElement.style.display = value;
    }
    /**
     * @private
     * @return {?}
     */
    setCalendarPosition() {
        this.setDialogPickerStyleDisplay('block');
        this.controlPosition.setElements(this.dialogPicker.nativeElement, poCalendarContentOffset, this.inputEl, ['top-left', 'bottom-left'], false, true);
        this.controlPosition.adjustPosition(poCalendarPositionDefault);
    }
}
PoDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-datepicker',
                template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n\n    <input #inp\n      class=\"po-input po-datepicker\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear()\"></po-clean>\n\n      <span #iconDatepicker\n        class=\"po-icon po-field-icon po-icon-calendar\"\n        [class.po-field-icon]=\"!disabled && !readonly\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"togglePicker()\">\n      </span>\n    </div>\n  </div>\n\n  <div #dialogPicker [class.po-datepicker-popup-calendar]=\"!verifyMobile()\">\n    <po-calendar #calendar\n      [p-date-end]=\"maxDate\"\n      [p-date-start]=\"minDate\"\n      [p-locale]=\"locale\"\n      [(p-selected-date)]=\"date\"\n      (p-submit)=\"dateSelected()\">\n    </po-calendar>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"></po-field-container-bottom>\n\n</po-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PoDatepickerComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PoDatepickerComponent)),
                        multi: true,
                    },
                    PoControlPositionService
                ]
            }] }
];
/** @nocollapse */
PoDatepickerComponent.ctorParameters = () => [
    { type: PoControlPositionService },
    { type: Renderer2 },
    { type: ElementRef }
];
PoDatepickerComponent.propDecorators = {
    calendar: [{ type: ViewChild, args: ['calendar', { static: true },] }],
    dialogPicker: [{ type: ViewChild, args: ['dialogPicker', { read: ElementRef, static: true },] }],
    iconDatepicker: [{ type: ViewChild, args: ['iconDatepicker', { read: ElementRef, static: true },] }],
    inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
    label: [{ type: Input, args: ['p-label',] }],
    help: [{ type: Input, args: ['p-help',] }],
    onKeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PoDatepickerComponent.prototype.date;
    /** @type {?} */
    PoDatepickerComponent.prototype.el;
    /** @type {?} */
    PoDatepickerComponent.prototype.hour;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.clickListener;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.dateRegex;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.isoRegex;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.timeoutChange;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.valueBeforeChange;
    /** @type {?} */
    PoDatepickerComponent.prototype.eventListenerFunction;
    /** @type {?} */
    PoDatepickerComponent.prototype.eventResizeListener;
    /** @type {?} */
    PoDatepickerComponent.prototype.calendar;
    /** @type {?} */
    PoDatepickerComponent.prototype.dialogPicker;
    /** @type {?} */
    PoDatepickerComponent.prototype.iconDatepicker;
    /** @type {?} */
    PoDatepickerComponent.prototype.inputEl;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    PoDatepickerComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoDatepickerComponent.prototype.help;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,