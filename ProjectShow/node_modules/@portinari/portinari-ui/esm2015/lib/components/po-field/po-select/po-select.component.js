/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, Component, ElementRef, forwardRef, HostListener, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { isMobile, removeDuplicatedOptions, removeUndefinedAndNullOptions, validValue } from '../../../utils/util';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoSelectBaseComponent } from './po-select-base.component';
import { PoSelectOptionTemplateDirective } from './po-select-option-template/po-select-option-template.directive';
/** @type {?} */
const poSelectContentOffset = 8;
/** @type {?} */
const poSelectContentPositionDefault = 'bottom';
/**
 * \@docsExtends PoSelectBaseComponent
 *
 * \@example
 *
 * <example name="po-select-basic" title="Portinari Select Basic">
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-labs" title="Portinari Select Labs">
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-customer-registration" title="Portinari Select - Customer registration">
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
 * </example>
 */
export class PoSelectComponent extends PoSelectBaseComponent {
    /**
     * @param {?} element
     * @param {?} changeDetector
     * @param {?} differs
     * @param {?} renderer
     * @param {?} controlPosition
     */
    constructor(element, changeDetector, differs, renderer, controlPosition) {
        super(element, changeDetector);
        this.renderer = renderer;
        this.controlPosition = controlPosition;
        this.isMobile = isMobile();
        this.open = false;
        this.selectIcon = 'po-icon-arrow-down';
        this.onScroll = (/**
         * @return {?}
         */
        () => {
            this.controlPosition.adjustPosition(poSelectContentPositionDefault);
        });
        this.differ = differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    get isInvisibleSelectNative() {
        return this.readonly && this.isMobile;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onKeydown($event) {
        /** @type {?} */
        const charCode = $event.which || $event.keyCode;
        // Tratamentos para quando o readonly for ativado.
        if (this.readonly) {
            // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
            if (charCode !== PoKeyCodeEnum.tab) {
                this.disableDefaultEventAndToggleButton();
                $event.preventDefault();
            }
            return;
        }
        // Seleciona os itens com as teclas "up" e "down"
        if ((!this.open || $event.altKey) && (charCode === PoKeyCodeEnum.arrowDown || charCode === PoKeyCodeEnum.arrowUp)) {
            this.disableDefaultEventAndToggleButton();
        }
        // Abre o po-select com as teclas "enter" e "espaço"
        if (charCode === PoKeyCodeEnum.enter || charCode === PoKeyCodeEnum.space) {
            this.disableDefaultEventAndToggleButton();
        }
        // Fecha o po-select com a tecla "tab"
        if (this.open && charCode === PoKeyCodeEnum.tab) {
            $event.preventDefault();
            this.toggleButton();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
            removeUndefinedAndNullOptions(this.options);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     * @return {?}
     */
    focus() {
        if (!this.disabled) {
            this.selectElement.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    hideDropDown() {
        this.selectIcon = 'po-icon-arrow-down';
        this.selector('.po-select-container').classList.remove('po-select-show');
        this.open = false;
        this.changeDetector.markForCheck();
        this.selectElement.nativeElement.focus();
        this.removeListeners();
    }
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    isEqual(value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = `${value}`; // Transformando em string
        }
        return value === inputValue;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    onOptionClick(option) {
        this.updateModel(option);
        this.toggleButton();
    }
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    onSelectChange(value) {
        if (value && this.options && this.options.length) {
            /** @type {?} */
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.updateModel(optionFound);
                this.setScrollPosition(optionFound.value);
            }
        }
    }
    /**
     * @return {?}
     */
    onUpdateOptions() {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    }
    /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    scrollValue(index, clientHeight) {
        /** @type {?} */
        const heightScrollValue = (index) * this.getSelectItemHeight();
        return this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0;
    }
    /**
     * @param {?} query
     * @return {?}
     */
    selector(query) {
        return this.element.nativeElement.querySelector(query);
    }
    /**
     * @return {?}
     */
    toggleButton() {
        this.open ? this.hideDropDown() : this.showDropdown();
    }
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    updateModel(option) {
        if (this.selectedValue !== option.value) {
            this.selectedValue = option.value;
            this.selectElement.nativeElement.value = option.value;
            this.callModelChange(option.value);
            this.displayValue = option.label;
            this.onChange(option.value);
        }
    }
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    wasClickedOnToggle(event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    }
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        const optionFound = this.findOptionValue(value);
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound.value;
            this.displayValue = (optionFound.label);
            this.setScrollPosition(optionFound.value);
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.callModelChange(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    }
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    disableDefaultEventAndToggleButton() {
        this.selectElement.nativeElement.style.display = 'none';
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.selectElement.nativeElement.style.display = 'block';
            this.toggleButton();
        }));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    findOptionValue(value) {
        return this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        option => this.isEqual(option.value, value)));
    }
    /**
     * @private
     * @return {?}
     */
    getSelectItemHeight() {
        /** @type {?} */
        const selectItem = this.selector('div.po-select-item');
        return selectItem && selectItem.clientHeight;
    }
    /**
     * @private
     * @return {?}
     */
    initializeListeners() {
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.wasClickedOnToggle(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        () => {
            this.hideDropDown();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    removeListeners() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        this.eventResizeListener();
        window.removeEventListener('scroll', this.onScroll, true);
    }
    /**
     * @private
     * @return {?}
     */
    setPositionDropdown() {
        this.controlPosition.setElements(this.contentList.nativeElement, poSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
        this.controlPosition.adjustPosition(poSelectContentPositionDefault);
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setScrollPosition(value) {
        /** @type {?} */
        const ulDropdpwn = this.element.nativeElement.querySelector('ul.po-select-content');
        if (value && this.options && this.options.length) {
            /** @type {?} */
            const optionFound = this.findOptionValue(value);
            if (optionFound) {
                /** @type {?} */
                const index = this.options.indexOf(optionFound);
                ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    showDropdown() {
        if (!this.readonly) {
            this.selectElement.nativeElement.focus();
            this.selectIcon = 'po-icon-arrow-up';
            this.selector('.po-select-container').classList.add('po-select-show');
            this.open = true;
            this.changeDetector.markForCheck();
            this.setPositionDropdown();
            this.initializeListeners();
            if (this.options && this.options.length) {
                this.setScrollPosition(this.selectedValue);
            }
        }
    }
}
PoSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-select',
                template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <select #select\n    class=\"po-select\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{'po-select-mobile' : isMobile, 'po-invisible': isInvisibleSelectNative}\"\n    [required]=\"required\"\n    (change)=\"onSelectChange($event.target.value)\">\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\n    <option *ngFor=\"let option of options\"\n      [disabled]=\"readonly\"\n      [value]=\"option.value\"\n      (click)=\"onOptionClick(option)\">\n        {{option?.label}}\n    </option>\n  </select>\n\n  <div class=\"po-select-container\">\n    <div #selectButton\n      class=\"po-select-button\"\n      [ngClass]=\"{'po-select-button-disabled' : disabled, 'po-select-button-readonly' : readonly}\"\n      (click)=\"toggleButton()\">\n\n      <span>{{displayValue || placeholder}}</span>\n\n      <div class=\"po-field-icon-container-right\">\n        <span #icon\n          class=\"po-icon {{selectIcon}} po-field-icon\"\n          [ngClass]=\"{'po-field-icon-disabled' : disabled, 'po-field-icon-readonly' : readonly}\"></span>\n      </div>\n    </div>\n\n    <ul #contentList\n      class=\"po-select-content\"\n      [ngClass]=\"{'po-invisible': isMobile}\">\n\n      <li *ngFor=\"let option of options\"\n        [class.po-select-item-selected]=\"selectedValue == option.value\"\n        [value]=\"option.value\"\n        (click)=\"onOptionClick(option)\">\n        <div class=\"po-select-item\">\n\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n          <ng-template #defaultOptionTemplate>\n            <span>{{option?.label}}</span>\n          </ng-template>\n\n          <ng-template #optionTemplate\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{$implicit: option}\">\n          </ng-template>\n\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PoSelectComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PoSelectComponent)),
                        multi: true,
                    },
                    PoControlPositionService
                ]
            }] }
];
/** @nocollapse */
PoSelectComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: IterableDiffers },
    { type: Renderer2 },
    { type: PoControlPositionService }
];
PoSelectComponent.propDecorators = {
    selectOptionTemplate: [{ type: ContentChild, args: [PoSelectOptionTemplateDirective, { static: true },] }],
    contentList: [{ type: ViewChild, args: ['contentList', { read: ElementRef, static: true },] }],
    iconElement: [{ type: ViewChild, args: ['icon', { read: ElementRef, static: true },] }],
    selectElement: [{ type: ViewChild, args: ['select', { read: ElementRef, static: true },] }],
    selectButtonElement: [{ type: ViewChild, args: ['selectButton', { read: ElementRef, static: true },] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PoSelectComponent.prototype.displayValue;
    /** @type {?} */
    PoSelectComponent.prototype.isMobile;
    /** @type {?} */
    PoSelectComponent.prototype.modelValue;
    /** @type {?} */
    PoSelectComponent.prototype.open;
    /** @type {?} */
    PoSelectComponent.prototype.selectedValue;
    /** @type {?} */
    PoSelectComponent.prototype.selectIcon;
    /** @type {?} */
    PoSelectComponent.prototype.scrollPosition;
    /**
     * @type {?}
     * @private
     */
    PoSelectComponent.prototype.differ;
    /** @type {?} */
    PoSelectComponent.prototype.eventListenerFunction;
    /** @type {?} */
    PoSelectComponent.prototype.eventResizeListener;
    /** @type {?} */
    PoSelectComponent.prototype.selectOptionTemplate;
    /** @type {?} */
    PoSelectComponent.prototype.contentList;
    /** @type {?} */
    PoSelectComponent.prototype.iconElement;
    /** @type {?} */
    PoSelectComponent.prototype.selectElement;
    /** @type {?} */
    PoSelectComponent.prototype.selectButtonElement;
    /**
     * @type {?}
     * @private
     */
    PoSelectComponent.prototype.onScroll;
    /** @type {?} */
    PoSelectComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoSelectComponent.prototype.controlPosition;
}
//# sourceMappingURL=data:application/json;base64,