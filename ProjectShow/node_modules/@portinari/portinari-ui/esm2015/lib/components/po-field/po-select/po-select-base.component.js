/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions } from '../../../utils/util';
import { requiredFailed } from '../validators';
/**
 * \@description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.
 * @abstract
 */
export class PoSelectBaseComponent {
    /**
     * @param {?} element
     * @param {?} changeDetector
     */
    constructor(element, changeDetector) {
        this.element = element;
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        this.readyToValidation = false;
        this.element = element;
        this.changeDetector = changeDetector;
    }
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface PoSelectOption.
     * Caso esta lista estiver vazia, o model será undefined.
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = options;
        removeDuplicatedOptions(this._options);
        removeUndefinedAndNullOptions(this._options);
        this.onUpdateOptions();
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será desabilitado.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será somente para leitura.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get readonly() {
        return this._readonly;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será obrigatório.
     *
     * \@default `false`
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    callModelChange(value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
        this.change.emit(value);
    }
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    validate(abstractControl) {
        if (requiredFailed(this._required, this._disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
        return null;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /**
     * @private
     * @return {?}
     */
    validateModel() {
        if (this.onValidatorChange) {
            this.onValidatorChange();
        }
    }
}
PoSelectBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    name: [{ type: Input, args: ['name',] }],
    help: [{ type: Input, args: ['p-help',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    options: [{ type: Input, args: ['p-options',] }],
    change: [{ type: Output, args: ['p-change',] }],
    ngModelChange: [{ type: Output, args: ['ngModelChange',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    readonly: [{ type: Input, args: ['p-readonly',] }],
    required: [{ type: Input, args: ['p-required',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype.onValidatorChange;
    /**
     * Adiciona uma label no componente.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.label;
    /**
     * Nome do componente.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.name;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.help;
    /**
     * Mensagem que aparecerá enquanto nenhuma opção estiver selecionada.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.placeholder;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoSelectBaseComponent.prototype.optional;
    /**
     * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.change;
    /** @type {?} */
    PoSelectBaseComponent.prototype.ngModelChange;
    /** @type {?} */
    PoSelectBaseComponent.prototype.changeDetector;
    /** @type {?} */
    PoSelectBaseComponent.prototype.onModelChange;
    /** @type {?} */
    PoSelectBaseComponent.prototype.onModelTouched;
    /** @type {?} */
    PoSelectBaseComponent.prototype.readyToValidation;
    /**
     * @type {?}
     * @protected
     */
    PoSelectBaseComponent.prototype.clickoutListener;
    /** @type {?} */
    PoSelectBaseComponent.prototype.element;
    /**
     * @abstract
     * @return {?}
     */
    PoSelectBaseComponent.prototype.onUpdateOptions = function () { };
    /**
     * @abstract
     * @param {?} selectOption
     * @return {?}
     */
    PoSelectBaseComponent.prototype.updateModel = function (selectOption) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoSelectBaseComponent.prototype.writeValue = function (value) { };
}
//# sourceMappingURL=data:application/json;base64,