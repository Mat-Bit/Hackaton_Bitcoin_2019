/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { setYearFrom0To100 } from '../../../../utils/util';
export class PoCalendarService {
    constructor() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    weekStartDate(date) {
        /** @type {?} */
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        const weeks = [];
        /** @type {?} */
        let week = [];
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    }
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    monthDays(year, month) {
        /** @type {?} */
        const getDayOrZero = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date.getMonth() === month ? date : 0;
        });
        return this.monthDates(year, month, getDayOrZero);
    }
}
PoCalendarService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoCalendarService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    PoCalendarService.prototype.firstWeekDay;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tZGF0ZXBpY2tlci9wby1jYWxlbmRhci9wby1jYWxlbmRhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRzNELE1BQU0sT0FBTyxpQkFBaUI7SUFHNUI7UUFDRSxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLGFBQWE7SUFDdEMsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsSUFBUzs7Y0FDZixTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzFDLE9BQU8sU0FBUyxDQUFDLE1BQU0sRUFBRSxLQUFLLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDL0MsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7Ozs7OztJQUVELFVBQVUsQ0FBQyxJQUFTLEVBQUUsS0FBVSxFQUFFLGVBQW9CLElBQUksRUFBRSxnQkFBcUIsSUFBSTtRQUNuRixJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUU7WUFDOUQsTUFBTSxLQUFLLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7O2NBRUssS0FBSyxHQUFlLEVBQUU7O1lBQ3hCLElBQUksR0FBZSxFQUFFOztZQUNyQixDQUFDLEdBQUcsQ0FBQzs7WUFDTCxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDbkMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhDLEdBQUc7WUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BELElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbEM7WUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtRQUN0RSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxJQUFTLEVBQUUsS0FBVTs7Y0FDdkIsWUFBWTs7OztRQUFHLFVBQVMsSUFBUztZQUNyQyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQTtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3BELENBQUM7OztZQTdDRixVQUFVOzs7Ozs7SUFFVCx5Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHNldFllYXJGcm9tMFRvMTAwIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyU2VydmljZSB7XG4gIGZpcnN0V2Vla0RheTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZmlyc3RXZWVrRGF5ID0gMDsgLy8gMCA9IHN1bmRheVxuICB9XG5cbiAgd2Vla1N0YXJ0RGF0ZShkYXRlOiBhbnkpIHtcbiAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgd2hpbGUgKHN0YXJ0RGF0ZS5nZXREYXkoKSAhPT0gdGhpcy5maXJzdFdlZWtEYXkpIHtcbiAgICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0RGF0ZTtcbiAgfVxuXG4gIG1vbnRoRGF0ZXMoeWVhcjogYW55LCBtb250aDogYW55LCBkYXlGb3JtYXR0ZXI6IGFueSA9IG51bGwsIHdlZWtGb3JtYXR0ZXI6IGFueSA9IG51bGwpIHtcbiAgICBpZiAoKHR5cGVvZiBtb250aCAhPT0gJ251bWJlcicpIHx8IChtb250aCA8IDApIHx8IChtb250aCA+IDExKSkge1xuICAgICAgdGhyb3cgRXJyb3IoKCdtb250aCBtdXN0IGJlIGEgbnVtYmVyIChKYW4gaXMgMCknKSk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2Vla3M6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgd2VlazogQXJyYXk8YW55PiA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCAxKTtcbiAgICBzZXRZZWFyRnJvbTBUbzEwMChkYXRlLCB5ZWFyKTtcbiAgICBkYXRlID0gdGhpcy53ZWVrU3RhcnREYXRlKGRhdGUpO1xuXG4gICAgZG8ge1xuICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICB3ZWVrLnB1c2goZGF5Rm9ybWF0dGVyID8gZGF5Rm9ybWF0dGVyKGRhdGUpIDogZGF0ZSk7XG4gICAgICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDEpO1xuICAgICAgfVxuICAgICAgd2Vla3MucHVzaCh3ZWVrRm9ybWF0dGVyID8gd2Vla0Zvcm1hdHRlcih3ZWVrKSA6IHdlZWspO1xuICAgICAgd2VlayA9IFtdO1xuICAgIH0gd2hpbGUgKChkYXRlLmdldE1vbnRoKCkgPD0gbW9udGgpICYmIChkYXRlLmdldEZ1bGxZZWFyKCkgPT09IHllYXIpKTtcbiAgICByZXR1cm4gd2Vla3M7XG4gIH1cblxuICBtb250aERheXMoeWVhcjogYW55LCBtb250aDogYW55KSB7XG4gICAgY29uc3QgZ2V0RGF5T3JaZXJvID0gZnVuY3Rpb24oZGF0ZTogYW55KSB7XG4gICAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpID09PSBtb250aCA/IGRhdGUgOiAwO1xuICAgIH07XG4gICAgcmV0dXJuIHRoaXMubW9udGhEYXRlcyh5ZWFyLCBtb250aCwgZ2V0RGF5T3JaZXJvKTtcbiAgfVxufVxuIl19