/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, HostListener, ViewChild } from '@angular/core';
import { PoInputBaseComponent } from '../po-input/po-input-base.component';
/**
 * @abstract
 */
export class PoInputGeneric extends PoInputBaseComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        super();
        this.type = 'text';
        this.el = el;
    }
    /**
     * @return {?}
     */
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.afterViewInit();
    }
    /**
     * @return {?}
     */
    afterViewInit() {
        this.putFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    }
    /**
     * @return {?}
     */
    focus() {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    setPaddingInput() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            /** @type {?} */
            let icons = this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (this.clean) {
                icons++;
            }
            if (icons) {
                this.inputEl.nativeElement.style.paddingRight = `${icons * 36}px`;
            }
        }));
    }
    /**
     * @return {?}
     */
    putFocus() {
        if (this.autofocus) {
            this.focus();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeydown(e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyup(e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    eventOnInput(e) {
        if (!this.mask) {
            /** @type {?} */
            const value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
            this.callOnChange(value);
        }
    }
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    validMaxLength(maxlength, value) {
        return ((maxlength || maxlength === 0) && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    eventOnFocus(e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    eventOnBlur(e) {
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    }
    /**
     * @return {?}
     */
    controlChangeEmitter() {
        /** @type {?} */
        const elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout((/**
             * @return {?}
             */
            () => {
                this.change.emit(elementValue);
            }), 200);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    eventOnClick(e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    }
    /**
     * @return {?}
     */
    hasInvalidClass() {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    }
    /**
     * @return {?}
     */
    getErrorPattern() {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    }
    /**
     * @return {?}
     */
    validateClassesForPattern() {
        /** @type {?} */
        const value = this.getScreenValue();
        /** @type {?} */
        const element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    }
    /**
     * @param {?} pattern
     * @param {?} value
     * @return {?}
     */
    verifyPattern(pattern, value) {
        return new RegExp(pattern).test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    clear(value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValueModel(value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.changeModel.emit(value);
        }
    }
    /**
     * @return {?}
     */
    getScreenValue() {
        /** @type {?} */
        const screenValue = this.inputEl && this.inputEl.nativeElement.value || undefined;
        if (this.type === 'number') {
            /** @type {?} */
            const parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    }
}
PoInputGeneric.propDecorators = {
    inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    onKeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PoInputGeneric.prototype.inputEl;
    /** @type {?} */
    PoInputGeneric.prototype.type;
    /** @type {?} */
    PoInputGeneric.prototype.el;
    /** @type {?} */
    PoInputGeneric.prototype.valueBeforeChange;
    /** @type {?} */
    PoInputGeneric.prototype.timeoutChange;
    /**
     * @abstract
     * @param {?} c
     * @return {?}
     */
    PoInputGeneric.prototype.extraValidation = function (c) { };
}
//# sourceMappingURL=data:application/json;base64,