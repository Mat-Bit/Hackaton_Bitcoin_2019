/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt, removeDuplicatedOptions } from '../../../utils/util';
import { requiredFailed } from '../validators';
/** @type {?} */
const poRadioGroupColumnsDefaultLength = 6;
/** @type {?} */
const poRadioGroupColumnsTotalLength = 12;
/**
 * \@description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 * @abstract
 */
export class PoRadioGroupBaseComponent {
    constructor() {
        this._columns = poRadioGroupColumnsDefaultLength;
        this._disabled = false;
        this._required = false;
        this.mdColumns = poRadioGroupColumnsDefaultLength;
        this.onChangePropagate = null;
        /**
         * Evento ao alterar valor do campo.
         */
        this.change = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a quantidade de colunas para exibição das opções.
     *
     * **Considerações:**
     *  - É possível exibir as opções entre `1` e `4` colunas.
     *  - O número máximo de colunas é invariável nas seguintes resoluções:
     *    + `sm`: `1`
     *    + `md`: `2`
     *
     * \@default `2`
     * @param {?} value
     * @return {?}
     */
    set columns(value) {
        /** @type {?} */
        const columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
        this._columns = this.getGridSystemColumns(columns, 4);
        this.mdColumns = this.getGridSystemColumns(columns, 2);
    }
    /**
     * @return {?}
     */
    get columns() {
        return this._columns;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será desabilitado.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
        this.validateModel();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será obrigatório.
     *
     * \@default `false`
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * Lista de opções que serão exibidas.
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
     * @param {?} value
     * @return {?}
     */
    set options(value) {
        this._options = value;
        removeDuplicatedOptions(this.options);
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    /**
     * @param {?} changedValue
     * @return {?}
     */
    changeValue(changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangePropagate = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    }
    /**
     * @param {?} modelValue
     * @return {?}
     */
    writeValue(modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        /** @type {?} */
        const element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    }
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    checkColumnsRange(columns, maxColumns) {
        /** @type {?} */
        const minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    }
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    getGridSystemColumns(columns, maxColumns) {
        /** @type {?} */
        const gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
    }
    /**
     * @private
     * @return {?}
     */
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
PoRadioGroupBaseComponent.propDecorators = {
    name: [{ type: Input, args: ['name',] }],
    columns: [{ type: Input, args: ['p-columns',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    required: [{ type: Input, args: ['p-required',] }],
    options: [{ type: Input, args: ['p-options',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    change: [{ type: Output, args: ['p-change',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype._required;
    /** @type {?} */
    PoRadioGroupBaseComponent.prototype.mdColumns;
    /** @type {?} */
    PoRadioGroupBaseComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype.onChangePropagate;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype.validatorChange;
    /**
     * Nome das opções.
     * @type {?}
     */
    PoRadioGroupBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoRadioGroupBaseComponent.prototype.optional;
    /**
     * Evento ao alterar valor do campo.
     * @type {?}
     */
    PoRadioGroupBaseComponent.prototype.change;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.getElementByValue = function (value) { };
}
//# sourceMappingURL=data:application/json;base64,