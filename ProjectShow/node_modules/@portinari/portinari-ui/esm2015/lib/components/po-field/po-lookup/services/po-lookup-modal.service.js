/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, EventEmitter } from '@angular/core';
import { PoComponentInjectorService } from '../../../../services/po-component-injector/po-component-injector.service';
import { PoLookupModalComponent } from '../po-lookup-modal/po-lookup-modal.component';
/**
 * \@docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
export class PoLookupModalService {
    /**
     * @param {?} poComponentInjector
     */
    constructor(poComponentInjector) {
        this.poComponentInjector = poComponentInjector;
        this.componentRef = null;
        this.selectValueEvent = new EventEmitter();
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    openModal(params) {
        const { service, columns, filterParams, title, literals } = params;
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => {
            this.selectValue($event);
        }));
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    }
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    selectValue(value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    }
}
PoLookupModalService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoLookupModalService.ctorParameters = () => [
    { type: PoComponentInjectorService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLookupModalService.prototype.componentRef;
    /** @type {?} */
    PoLookupModalService.prototype.selectValueEvent;
    /**
     * @type {?}
     * @private
     */
    PoLookupModalService.prototype.poComponentInjector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9zZXJ2aWNlcy9wby1sb29rdXAtbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBFQUEwRSxDQUFDO0FBSXRILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDOzs7Ozs7QUFRdEYsTUFBTSxPQUFPLG9CQUFvQjs7OztJQU0vQixZQUFvQixtQkFBK0M7UUFBL0Msd0JBQW1CLEdBQW5CLG1CQUFtQixDQUE0QjtRQUozRCxpQkFBWSxHQUFzQixJQUFJLENBQUM7UUFFL0MscUJBQWdCLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFUSxDQUFDOzs7Ozs7O0lBV3ZFLFNBQVMsQ0FBQyxNQU1UO2NBQ08sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTTtRQUVsRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2xHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUM3QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxFQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBRXpDLENBQUM7Ozs7OztJQUdELFdBQVcsQ0FBQyxLQUFLO1FBQ2YsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7WUEvQ0YsVUFBVTs7OztZQVhGLDBCQUEwQjs7Ozs7OztJQWNqQyw0Q0FBK0M7O0lBRS9DLGdEQUE4RDs7Ozs7SUFFbEQsbURBQXVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zZXJ2aWNlcy9wby1jb21wb25lbnQtaW5qZWN0b3IvcG8tY29tcG9uZW50LWluamVjdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBDb2x1bW4gfSBmcm9tICcuLi8uLi8uLi8uLi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9pbnRlcmZhY2VzL3BvLWxvb2t1cC1jb2x1bW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTG9va3VwRmlsdGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvaW50ZXJmYWNlcy9wby1sb29rdXAtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cExpdGVyYWxzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtbGl0ZXJhbHMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTG9va3VwTW9kYWxDb21wb25lbnQgfSBmcm9tICcuLi9wby1sb29rdXAtbW9kYWwvcG8tbG9va3VwLW1vZGFsLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogU2VydmnDp28gcmVzcG9uc8OhdmVsIHBvciBjb250cm9sYXIgYSBhYmVydHVyYSBkbyBjb21wb25lbnRlIFBvIExvb2t1cCBNb2RhbC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvTG9va3VwTW9kYWxTZXJ2aWNlIHtcblxuICBwcml2YXRlIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4gPSBudWxsO1xuXG4gIHNlbGVjdFZhbHVlRXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwb0NvbXBvbmVudEluamVjdG9yOiBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZSkge31cblxuICAvKipcbiAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGFicmlyIGEgbW9kYWwgZGUgYnVzY2EgZGFzIGluZm9ybWHDp8O1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSBzZXJ2aWNlIHtQb0xvb2t1cEZpbHRlcn0gU2VydmnDp28gcmVzcG9uc8OhdmVsIHBvciByZWFsaXphciBhIGJ1c2NhIG5vIHNlcnZpw6dvIGRvcyBkYWRvcy5cbiAgICogQHBhcmFtIGNvbHVtbnMge0FycmF5PFBvTG9va3VwQ29sdW1uPn0gRGVmaW5pw6fDo28gZGFzIGNvbHVuYXMgbmEgbW9kYWwgZGUgYnVzY2EuXG4gICAqIEBwYXJhbSBmaWx0ZXJQYXJhbXMge2FueX0gVmFsb3IgcXVlIHNlcsOhIHJlcGFzc2FkbyBhb3MgbcOpdG9kb3MgZG8gc2VydmnDp28gcGFyYSBhdXhpbGlhciBubyBmaWx0cm8gZG9zIGRhZG9zLlxuICAgKiBAcGFyYW0gdGl0bGUge3N0cmluZ30gRGVmaW5pw6fDo28gZG8gdMOtdHVsbyBkYSBtb2RhbC5cbiAgICogQHBhcmFtIGxpdGVyYWxzIHtQb0xvb2t1cExpdGVyYWxzfSBMaXRlcmFpcyB1dGlsaXphZGFzIG5vIGNvbXBvbmVudGUuXG4gICAqL1xuICBvcGVuTW9kYWwocGFyYW1zOiB7XG4gICAgc2VydmljZTogUG9Mb29rdXBGaWx0ZXIsXG4gICAgY29sdW1uczogQXJyYXk8UG9Mb29rdXBDb2x1bW4+LFxuICAgIGZpbHRlclBhcmFtczogYW55LFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgbGl0ZXJhbHM6IFBvTG9va3VwTGl0ZXJhbHNcbiAgfSk6IHZvaWQge1xuICAgIGNvbnN0IHsgc2VydmljZSwgY29sdW1ucywgZmlsdGVyUGFyYW1zLCB0aXRsZSwgbGl0ZXJhbHMgfSA9IHBhcmFtcztcblxuICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5wb0NvbXBvbmVudEluamVjdG9yLmNyZWF0ZUNvbXBvbmVudEluQXBwbGljYXRpb24oUG9Mb29rdXBNb2RhbENvbXBvbmVudCk7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb2x1bW5zID0gY29sdW1ucztcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5maWx0ZXJTZXJ2aWNlID0gc2VydmljZTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5maWx0ZXJQYXJhbXMgPSBmaWx0ZXJQYXJhbXM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UubGl0ZXJhbHMgPSBsaXRlcmFscztcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5tb2RlbC5zdWJzY3JpYmUoJGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuc2VsZWN0VmFsdWUoJGV2ZW50KTtcbiAgICB9KTtcbiAgICB0aGlzLmNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2Uub3Blbk1vZGFsKCk7XG5cbiAgfVxuXG4gIC8vIEVzdGUgbWV0b2RvIMOpIGNoYW1hZG8gcXVhbmRvIMOpIHNlbGVjaW9uYWRvIHVtIGl0ZW0gbmEgbG9va3VwIG1vZGFsLlxuICBzZWxlY3RWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5zZWxlY3RWYWx1ZUV2ZW50LmVtaXQodmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG4gIH1cbn1cbiJdfQ==