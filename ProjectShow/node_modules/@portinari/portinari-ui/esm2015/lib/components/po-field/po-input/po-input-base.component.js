/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed, maxlengpoailed, minlengpoailed, patternFailed } from './../validators';
import { PoMask } from './po-mask';
/**
 * \@description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
 * @abstract
 */
export class PoInputBaseComponent {
    constructor() {
        this._noAutocomplete = false;
        this._placeholder = '';
        this.passedWriteValue = false;
        /**
         * \@description
         *
         * Se verdadeiro, desabilita o campo.
         *
         * \@default `false`
         */
        this.disabled = false;
        /**
         * Indica que o campo será somente leitura.
         */
        this.readonly = false;
        /**
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
         *
         * \@default `false`
         */
        this.required = false;
        /**
         * Se verdadeiro, o campo receberá um botão para ser limpo.
         */
        this.clean = false;
        /**
         * \@description
         *
         * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
        /**
         * \@description
         *
         * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
         * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
         * através da propriedade p-pattern.
         * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
         * mesmo quando desabilitado.
         */
        this.mask = '';
        /**
         * \@description
         *
         * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
         *
         * \@default `false`
         */
        this.maskFormatModel = false;
        /**
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
        this.onChangePropagate = null;
        this.onTouched = null;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * \@default ''
     * @param {?} value
     * @return {?}
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    set setDisabled(disabled) {
        this.disabled = disabled === '' ? true : convertToBoolean(disabled);
        this.validateModel();
    }
    /**
     * @param {?} readonly
     * @return {?}
     */
    set setReadonly(readonly) {
        this.readonly = readonly === '' ? true : convertToBoolean(readonly);
    }
    /**
     * @param {?} required
     * @return {?}
     */
    set setRequired(required) {
        this.required = required === '' ? true : convertToBoolean(required);
        this.validateModel();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * \@default `false`
     * @param {?} focus
     * @return {?}
     */
    set autofocus(focus) {
        this._autofocus = convertToBoolean(focus);
    }
    /**
     * @return {?}
     */
    get autofocus() {
        return this._autofocus;
    }
    /**
     * @param {?} clean
     * @return {?}
     */
    set setClean(clean) {
        this.clean = clean === '' ? true : convertToBoolean(clean);
    }
    /**
     * @param {?} pattern
     * @return {?}
     */
    set setPattern(pattern) {
        this.pattern = pattern;
        this.validateModel();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     * @param {?} value
     * @return {?}
     */
    set maxlength(value) {
        if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
            this._maxlength = parseInt((/** @type {?} */ (value)), 10);
            this.validateModel();
        }
        else if (!value) {
            this._maxlength = undefined;
            this.validateModel();
        }
    }
    /**
     * @return {?}
     */
    get maxlength() {
        return this._maxlength;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     * @param {?} value
     * @return {?}
     */
    set minlength(value) {
        if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
            this._minlength = parseInt((/** @type {?} */ (value)), 10);
            this.validateModel();
        }
        else if (!value) {
            this._minlength = undefined;
            this.validateModel();
        }
    }
    /**
     * @return {?}
     */
    get minlength() {
        return this._minlength;
    }
    /**
     * @param {?} mask
     * @return {?}
     */
    set setMask(mask) {
        this.mask = mask;
        // Atualiza Máscara do Campo
        this.objMask = new PoMask(this.mask, this.maskFormatModel);
        this.validateModel();
    }
    /**
     * @param {?} maskFormatModel
     * @return {?}
     */
    set setMaskFormatModel(maskFormatModel) {
        this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
        if (this.objMask instanceof PoMask) {
            this.objMask.formatModel = this.maskFormatModel;
            this.validateModel();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    callOnChange(value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    callUpdateModelWithTimeout(value) {
        setTimeout((/**
         * @return {?}
         */
        () => this.updateModel(value)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    registerOnTouched(func) {
        this.onTouched = func;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateModel(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return { required: {
                    valid: false,
                } };
        }
        if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
            return { maxlength: {
                    valid: false,
                } };
        }
        if (minlengpoailed(this.minlength, this.getScreenValue())) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return { pattern: {
                    valid: false,
                } };
        }
        return this.extraValidation(c);
    }
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.writeValueModel(value);
    }
    /**
     * @protected
     * @return {?}
     */
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    validatePatternOnWriteValue(value) {
        if (value && this.passedWriteValue) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.updateModel(value);
            }));
            this.passedWriteValue = false;
        }
    }
}
PoInputBaseComponent.propDecorators = {
    icon: [{ type: Input, args: ['p-icon',] }],
    label: [{ type: Input, args: ['p-label',] }],
    help: [{ type: Input, args: ['p-help',] }],
    name: [{ type: Input, args: ['name',] }],
    noAutocomplete: [{ type: Input, args: ['p-no-autocomplete',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    setDisabled: [{ type: Input, args: ['p-disabled',] }],
    setReadonly: [{ type: Input, args: ['p-readonly',] }],
    setRequired: [{ type: Input, args: ['p-required',] }],
    autofocus: [{ type: Input, args: ['p-focus',] }],
    setClean: [{ type: Input, args: ['p-clean',] }],
    setPattern: [{ type: Input, args: ['p-pattern',] }],
    errorPattern: [{ type: Input, args: ['p-error-pattern',] }],
    maxlength: [{ type: Input, args: ['p-maxlength',] }],
    minlength: [{ type: Input, args: ['p-minlength',] }],
    setMask: [{ type: Input, args: ['p-mask',] }],
    setMaskFormatModel: [{ type: Input, args: ['p-mask-format-model',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    blur: [{ type: Output, args: ['p-blur',] }],
    enter: [{ type: Output, args: ['p-enter',] }],
    change: [{ type: Output, args: ['p-change',] }],
    changeModel: [{ type: Output, args: ['p-change-model',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._autofocus;
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._maxlength;
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._minlength;
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._noAutocomplete;
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._placeholder;
    /**
     * @type {?}
     * @protected
     */
    PoInputBaseComponent.prototype.passedWriteValue;
    /**
     * @type {?}
     * @protected
     */
    PoInputBaseComponent.prototype.validatorChange;
    /**
     * \@optional
     *
     * \@description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     * @type {?}
     */
    PoInputBaseComponent.prototype.icon;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.help;
    /**
     * Nome e identificador do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.name;
    /**
     * \@description
     *
     * Se verdadeiro, desabilita o campo.
     *
     * \@default `false`
     * @type {?}
     */
    PoInputBaseComponent.prototype.disabled;
    /**
     * Indica que o campo será somente leitura.
     * @type {?}
     */
    PoInputBaseComponent.prototype.readonly;
    /**
     * \@description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
     *
     * \@default `false`
     * @type {?}
     */
    PoInputBaseComponent.prototype.required;
    /**
     * Se verdadeiro, o campo receberá um botão para ser limpo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.clean;
    /**
     * \@description
     *
     * Expressão regular para validar o campo.
     * Quando o campo possuir uma máscara `(p-mask)` será automaticamente validado por ela, porém
     * é possível definir um p-pattern para substituir a validação da máscara.
     * @type {?}
     */
    PoInputBaseComponent.prototype.pattern;
    /**
     * \@description
     *
     * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
     * @type {?}
     */
    PoInputBaseComponent.prototype.errorPattern;
    /**
     * \@description
     *
     * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
     * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
     * através da propriedade p-pattern.
     * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
     * mesmo quando desabilitado.
     * @type {?}
     */
    PoInputBaseComponent.prototype.mask;
    /**
     * \@description
     *
     * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
     *
     * \@default `false`
     * @type {?}
     */
    PoInputBaseComponent.prototype.maskFormatModel;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoInputBaseComponent.prototype.optional;
    /**
     * Evento disparado ao sair do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.blur;
    /**
     * Evento disparado ao entrar do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.enter;
    /**
     * Evento disparado ao alterar valor e deixar o campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.change;
    /**
     * Evento disparado ao alterar valor do model.
     * @type {?}
     */
    PoInputBaseComponent.prototype.changeModel;
    /** @type {?} */
    PoInputBaseComponent.prototype.type;
    /** @type {?} */
    PoInputBaseComponent.prototype.onChangePropagate;
    /** @type {?} */
    PoInputBaseComponent.prototype.onTouched;
    /** @type {?} */
    PoInputBaseComponent.prototype.objMask;
    /** @type {?} */
    PoInputBaseComponent.prototype.modelLastUpdate;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoNomeDoComponenteComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoNomeDoComponenteComponent, { static: true }) nomeDoComponente: PoNomeDoComponenteComponent;
     *
     * focusComponent() {
     *   this.nomeDoComponente.focus();
     * }
     * ```
     * @abstract
     * @return {?}
     */
    PoInputBaseComponent.prototype.focus = function () { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoInputBaseComponent.prototype.writeValueModel = function (value) { };
    /**
     * @abstract
     * @param {?} c
     * @return {?}
     */
    PoInputBaseComponent.prototype.extraValidation = function (c) { };
    /**
     * @abstract
     * @return {?}
     */
    PoInputBaseComponent.prototype.getScreenValue = function () { };
}
//# sourceMappingURL=data:application/json;base64,