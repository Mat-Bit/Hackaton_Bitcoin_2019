/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isIE } from '../../../../utils/util';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextModalType } from '../enums/po-rich-text-modal-type.enum';
/** @type {?} */
const poRichTextDefaultColor = '#000000';
export class PoRichTextToolbarComponent {
    /**
     * @param {?} languageService
     */
    constructor(languageService) {
        this.languageService = languageService;
        this.selection = document.getSelection();
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'po-icon-align-left',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'po-icon-align-center',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'po-icon-align-right',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'po-icon-align-justify',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'po-icon-text-bold',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'po-icon-text-italic',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'po-icon-text-underline',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'po-icon-list',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.linkButtons = [
            {
                command: 'Createlink',
                icon: 'po-icon-link',
                tooltip: `${this.literals.insertLink} (Ctrl + L)`,
                action: (/**
                 * @return {?}
                 */
                () => this.modal.emit(PoRichTextModalType.Link))
            }
        ];
        this.mediaButtons = [
            {
                tooltip: this.literals.insertImage,
                icon: 'po-icon-picture',
                action: (/**
                 * @return {?}
                 */
                () => this.modal.emit(PoRichTextModalType.Image))
            }
        ];
        this.command = new EventEmitter();
        this.modal = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set readonly(value) {
        this._readonly = value;
        this.toggleDisableButtons(this._readonly);
    }
    /**
     * @return {?}
     */
    get readonly() {
        return this._readonly;
    }
    /**
     * @return {?}
     */
    get isInternetExplorer() {
        return isIE();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.removeButtonFocus();
        this.setColorInColorPicker(poRichTextDefaultColor);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    changeTextColor(value) {
        /** @type {?} */
        const command = 'foreColor';
        this.command.emit({ command, value });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setButtonsStates(obj) {
        if (!this.readonly) {
            this.alignButtons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            button => button.selected = obj.commands.includes(button.command)));
            this.formatButtons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            button => button.selected = obj.commands.includes(button.command)));
            this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
            this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
            this.setColorInColorPicker(obj.hexColor);
        }
    }
    /**
     * @return {?}
     */
    shortcutTrigger() {
        this.modal.emit(PoRichTextModalType.Link);
    }
    /**
     * @private
     * @param {?} command
     * @return {?}
     */
    emitAlignCommand(command) {
        /** @type {?} */
        const index = this.alignButtons.findIndex((/**
         * @param {?} btn
         * @return {?}
         */
        btn => btn.command === command));
        if (this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    }
    /**
     * @private
     * @param {?} command
     * @return {?}
     */
    emitCommand(command) {
        this.command.emit(command);
    }
    /**
     * @private
     * @return {?}
     */
    removeButtonFocus() {
        /** @type {?} */
        const buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        button => button.setAttribute('tabindex', '-1')));
    }
    /**
     * @private
     * @param {?} color
     * @return {?}
     */
    setColorInColorPicker(color) {
        this.colorPickerInput.nativeElement.value = color;
    }
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    toggleDisableButtons(state) {
        this.alignButtons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        button => button.disabled = state));
        this.formatButtons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        button => button.disabled = state));
        this.listButtons[0].disabled = state;
        this.linkButtons[0].disabled = state;
        this.mediaButtons[0].disabled = state;
    }
}
PoRichTextToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-toolbar',
                template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\">\n    </po-button-group>\n  </div>\n\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\">\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\n      <button class=\"po-button po-text-ellipsis po-rich-text-toolbar-color-picker-button\"\n        [disabled]=\"readonly\"\n        [p-tooltip]=\"literals.textColor\">\n        <input\n          #colorPickerInput\n          class=\"po-rich-text-toolbar-color-picker-input\"\n          type=\"color\"\n          [disabled]=\"readonly\"\n          (change)=\"changeTextColor($event.target.value)\">\n      </button>\n    </div>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\">\n    </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\">\n    </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"linkButtons\">\n    </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"mediaButtons\">\n    </po-button-group>\n  </div>\n\n</div>\n\n\n"
            }] }
];
/** @nocollapse */
PoRichTextToolbarComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoRichTextToolbarComponent.propDecorators = {
    colorPickerInput: [{ type: ViewChild, args: ['colorPickerInput', { read: ElementRef, static: false },] }],
    toolbarElement: [{ type: ViewChild, args: ['toolbarElement', { static: true },] }],
    readonly: [{ type: Input, args: ['p-readonly',] }],
    command: [{ type: Output, args: ['p-command',] }],
    modal: [{ type: Output, args: ['p-modal',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRichTextToolbarComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    PoRichTextToolbarComponent.prototype.selection;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.literals;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.alignButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.formatButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.listButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.linkButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.mediaButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.colorPickerInput;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.toolbarElement;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.command;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.modal;
    /**
     * @type {?}
     * @private
     */
    PoRichTextToolbarComponent.prototype.languageService;
}
//# sourceMappingURL=data:application/json;base64,