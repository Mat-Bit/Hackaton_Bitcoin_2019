/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { PoSwitchLabelPosition } from './po-switch-label-position.enum';
/**
 * \@description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
export class PoSwitchBaseComponent {
    constructor() {
        this._disabled = false;
        this.switchValue = false;
        /**
         * Texto exibido quando o valor do componente for `true`.
         *
         * \@default `true`
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o valor do componente for `false`.
         *
         * \@default `false`
         */
        this.labelOff = 'false';
        /**
         * \@optional
         *
         * \@description
         *
         * Posição de exibição do rótulo.
         *
         * > Por padrão exibe à direita.
         */
        this.labelPosition = PoSwitchLabelPosition.Right;
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    /**
     * @param {?} label
     * @return {?}
     */
    set setLabelOn(label) {
        this.labelOn = label || 'true';
    }
    /**
     * @param {?} label
     * @return {?}
     */
    set setLabelOff(label) {
        this.labelOff = label || 'false';
    }
    /**
     * @param {?} position
     * @return {?}
     */
    set setLabelPosition(position) {
        this.labelPosition = (position in PoSwitchLabelPosition) ? parseInt((/** @type {?} */ (position)), 10) : PoSwitchLabelPosition.Right;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica se o campo será desabilitado.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    changeValue(value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(this.switchValue);
        }
    }
    /**
     * @return {?}
     */
    eventClick() {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    }
}
PoSwitchBaseComponent.propDecorators = {
    name: [{ type: Input, args: ['name',] }],
    label: [{ type: Input, args: ['p-label',] }],
    help: [{ type: Input, args: ['p-help',] }],
    setLabelOn: [{ type: Input, args: ['p-label-on',] }],
    setLabelOff: [{ type: Input, args: ['p-label-off',] }],
    setLabelPosition: [{ type: Input, args: ['p-label-position',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    change: [{ type: Output, args: ['p-change',] }],
    ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoSwitchBaseComponent.prototype._disabled;
    /** @type {?} */
    PoSwitchBaseComponent.prototype.propagateChange;
    /** @type {?} */
    PoSwitchBaseComponent.prototype.switchValue;
    /**
     * Nome do componente.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.name;
    /**
     * Rótulo exibido pelo componente.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.help;
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * \@default `true`
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.labelOn;
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * \@default `false`
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.labelOff;
    /**
     * \@optional
     *
     * \@description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.labelPosition;
    /**
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.change;
    /** @type {?} */
    PoSwitchBaseComponent.prototype.ngModelChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3dpdGNoLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1zd2l0Y2gvcG8tc3dpdGNoLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7Ozs7Ozs7Ozs7O0FBZXhFLE1BQU0sT0FBTyxxQkFBcUI7SUFBbEM7UUFFVSxjQUFTLEdBQWEsS0FBSyxDQUFDO1FBR3BDLGdCQUFXLEdBQVksS0FBSyxDQUFDOzs7Ozs7UUFnQjdCLFlBQU8sR0FBWSxNQUFNLENBQUM7Ozs7OztRQVUxQixhQUFRLEdBQVksT0FBTyxDQUFDOzs7Ozs7Ozs7O1FBYzVCLGtCQUFhLEdBQTJCLHFCQUFxQixDQUFDLEtBQUssQ0FBQzs7OztRQXVCaEQsV0FBTSxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDOztRQUdoRCxrQkFBYSxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBaUN2RixDQUFDOzs7OztJQWxGQyxJQUF5QixVQUFVLENBQUMsS0FBYTtRQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssSUFBSSxNQUFNLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFRRCxJQUEwQixXQUFXLENBQUMsS0FBYTtRQUNqRCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssSUFBSSxPQUFPLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFZRCxJQUErQixnQkFBZ0IsQ0FBQyxRQUErQjtRQUM3RSxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsUUFBUSxJQUFJLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxtQkFBSyxRQUFRLEVBQUEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDO0lBQ3ZILENBQUM7Ozs7Ozs7Ozs7OztJQVdELElBQXlCLFFBQVEsQ0FBQyxRQUFpQjtRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFRRCxXQUFXLENBQUMsS0FBVTtRQUNwQixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssS0FBSyxFQUFFO1lBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBRXpCLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM3QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQztZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7Ozs7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLEVBQU8sSUFBVSxDQUFDOzs7OztJQUVwQyxVQUFVLENBQUMsS0FBVTtRQUNuQixJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzlCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztTQUM1QjtJQUNILENBQUM7OzttQkE5RkEsS0FBSyxTQUFDLE1BQU07b0JBR1osS0FBSyxTQUFDLFNBQVM7bUJBR2YsS0FBSyxTQUFDLFFBQVE7eUJBUWQsS0FBSyxTQUFDLFlBQVk7MEJBVWxCLEtBQUssU0FBQyxhQUFhOytCQWNuQixLQUFLLFNBQUMsa0JBQWtCO3VCQWF4QixLQUFLLFNBQUMsWUFBWTtxQkFTbEIsTUFBTSxTQUFDLFVBQVU7NEJBR2pCLE1BQU0sU0FBQyxlQUFlOzs7Ozs7O0lBckV2QiwwQ0FBb0M7O0lBRXBDLGdEQUFxQjs7SUFDckIsNENBQTZCOzs7OztJQUc3QixxQ0FBNEI7Ozs7O0lBRzVCLHNDQUFpQzs7Ozs7SUFHakMscUNBQStCOzs7Ozs7O0lBTy9CLHdDQUEwQjs7Ozs7OztJQVUxQix5Q0FBNEI7Ozs7Ozs7Ozs7O0lBYzVCLDhDQUFvRTs7Ozs7SUF1QnBFLHVDQUF5RTs7SUFHekUsOENBQXFGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1N3aXRjaExhYmVsUG9zaXRpb24gfSBmcm9tICcuL3BvLXN3aXRjaC1sYWJlbC1wb3NpdGlvbi5lbnVtJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXN3aXRjaGAgw6kgdW0gW2NoZWNrYm94XSgvZG9jdW1lbnRhdGlvbi9wby1jaGVja2JveC1ncm91cCkgbWFpcyBpbnR1aXRpdm8sIHBvaXMgZmF6IGFuYWxvZ2lhIGEgdW0gaW50ZXJydXB0b3IuXG4gKiBEZXZlIHNlciB1c2FkbyBxdWFuZG8gZGVzZWphLXNlIHRyYW5zbWl0aXIgYSBpZGVpYSBkZSBsaWdhciAvIGRlc2xpZ2FyIHVtYSBmdW5jaW9uYWxpZGFkZSBlc3BlY8OtZmljYS5cbiAqXG4gKiBQb2RlLXNlIGxpZ2FyIG91IGRlbGlnYXIgbyBib3TDo28gdXRpbGl6YW5kbyBhIHRlY2xhIGRlIGVzcGHDp28gb3UgbyBjbGlxdWUgZG8gbW91c2UuXG4gKlxuICogTyB0ZXh0byBleGliaWRvIHBvZGUgc2VyIGFsdGVyYWRvIGRlIGFjb3JkbyBjb20gbyB2YWxvciBzZXRhZG8gYXVtZW50YW5kbyBhcyBwb3NzaWJpbGlkYWRlcyBkZSB1c28gZG8gY29tcG9uZW50ZSxcbiAqIHBvcnRhbnRvLCByZWNvbWVuZGEtc2UgaW5mb3JtYXIgdGV4dG9zIHF1ZSBjb250ZXh0dWFsaXplbSBzZXUgdXNvIHBhcmEgcXVlIGZhY2lsaXRlIGEgY29tcHJlZW5zw6NvIGRvIHVzdcOhcmlvLlxuICpcbiAqID4gTyBjb21wb25lbnRlIG7Do28gYWx0ZXJhIG8gdmFsb3IgaW5jaWFsIGluZm9ybWFkbyBubyAqbW9kZWwqLCBwb3J0YW50byBpbmRpY2Etc2UgaW5pY2lhbGl6YS1sbyBjYXNvIHRlciBuZWNlc3NpZGFkZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvU3dpdGNoQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcblxuICBwcml2YXRlIF9kaXNhYmxlZD86IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcm9wYWdhdGVDaGFuZ2U6IGFueTtcbiAgc3dpdGNoVmFsdWU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogTm9tZSBkbyBjb21wb25lbnRlLiAqL1xuICBASW5wdXQoJ25hbWUnKSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqIFLDs3R1bG8gZXhpYmlkbyBwZWxvIGNvbXBvbmVudGUuICovXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKiBUZXh0byBkZSBhcG9pbyBwYXJhIG8gY2FtcG8uICovXG4gIEBJbnB1dCgncC1oZWxwJykgaGVscD86IHN0cmluZztcblxuICAvKipcbiAgICogVGV4dG8gZXhpYmlkbyBxdWFuZG8gbyB2YWxvciBkbyBjb21wb25lbnRlIGZvciBgdHJ1ZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGB0cnVlYFxuICAgKi9cbiAgbGFiZWxPbj86IHN0cmluZyA9ICd0cnVlJztcbiAgQElucHV0KCdwLWxhYmVsLW9uJykgc2V0IHNldExhYmVsT24obGFiZWw6IHN0cmluZykge1xuICAgIHRoaXMubGFiZWxPbiA9IGxhYmVsIHx8ICd0cnVlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXh0byBleGliaWRvIHF1YW5kbyBvIHZhbG9yIGRvIGNvbXBvbmVudGUgZm9yIGBmYWxzZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIGxhYmVsT2ZmPzogc3RyaW5nID0gJ2ZhbHNlJztcbiAgQElucHV0KCdwLWxhYmVsLW9mZicpIHNldCBzZXRMYWJlbE9mZihsYWJlbDogc3RyaW5nKSB7XG4gICAgdGhpcy5sYWJlbE9mZiA9IGxhYmVsIHx8ICdmYWxzZSc7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBQb3Npw6fDo28gZGUgZXhpYmnDp8OjbyBkbyByw7N0dWxvLlxuICAgKlxuICAgKiA+IFBvciBwYWRyw6NvIGV4aWJlIMOgIGRpcmVpdGEuXG4gICAqL1xuICBsYWJlbFBvc2l0aW9uPzogUG9Td2l0Y2hMYWJlbFBvc2l0aW9uID0gUG9Td2l0Y2hMYWJlbFBvc2l0aW9uLlJpZ2h0O1xuICBASW5wdXQoJ3AtbGFiZWwtcG9zaXRpb24nKSBzZXQgc2V0TGFiZWxQb3NpdGlvbihwb3NpdGlvbjogUG9Td2l0Y2hMYWJlbFBvc2l0aW9uKSB7XG4gICAgdGhpcy5sYWJlbFBvc2l0aW9uID0gKHBvc2l0aW9uIGluIFBvU3dpdGNoTGFiZWxQb3NpdGlvbikgPyBwYXJzZUludCg8YW55PnBvc2l0aW9uLCAxMCkgOiBQb1N3aXRjaExhYmVsUG9zaXRpb24uUmlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJbmRpY2Egc2UgbyBjYW1wbyBzZXLDoSBkZXNhYmlsaXRhZG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1kaXNhYmxlZCcpIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29udmVydFRvQm9vbGVhbihkaXNhYmxlZCk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgLyoqIEV2ZW50byBkaXNwYXJhZG8gYW8gYWx0ZXJhciB2YWxvciBkbyBjYW1wby4gKi9cbiAgQE91dHB1dCgncC1jaGFuZ2UnKSBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8vIEZ1bsOnw6NvIHBhcmEgYXR1YWxpemFyIG8gbmdNb2RlbCBkbyBjb21wb25lbnRlLCBuZWNlc3PDoXJpbyBxdWFuZG8gbsOjbyBmb3IgdXRpbGl6YWRvIGRlbnRybyBkYSB0YWcgZm9ybS5cbiAgQE91dHB1dCgnbmdNb2RlbENoYW5nZScpIG5nTW9kZWxDaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNoYW5nZVZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodGhpcy5zd2l0Y2hWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuc3dpdGNoVmFsdWUgPSB2YWx1ZTtcblxuICAgICAgaWYgKHRoaXMucHJvcGFnYXRlQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubmdNb2RlbENoYW5nZS5lbWl0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2hhbmdlLmVtaXQodGhpcy5zd2l0Y2hWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZXZlbnRDbGljaygpIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuY2hhbmdlVmFsdWUoIXRoaXMuc3dpdGNoVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlID0gZm47XG4gIH1cblxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7IH1cblxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuc3dpdGNoVmFsdWUpIHtcbiAgICAgIHRoaXMuc3dpdGNoVmFsdWUgPSAhIXZhbHVlO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=