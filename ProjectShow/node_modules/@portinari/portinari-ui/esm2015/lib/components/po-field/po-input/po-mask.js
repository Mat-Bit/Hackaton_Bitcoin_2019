/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Para usar o po-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
export class PoMask {
    /**
     * @param {?} mask
     * @param {?} formatModel
     */
    constructor(mask, formatModel) {
        this.mask = '';
        this.formatModel = false;
        // controle de posição
        this.initialPosition = 0;
        this.finalPosition = 0;
        this.pattern = '';
        this.mask = mask;
        this.formatModel = formatModel;
        this.pattern = this.getRegexFromMask(mask);
    }
    /**
     * @return {?}
     */
    get getPattern() {
        return this.pattern;
    }
    /**
     * @return {?}
     */
    get getValueToInput() {
        return this.valueToInput;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setValueToInput(value) {
        this.valueToInput = value;
    }
    /**
     * @return {?}
     */
    get getValueToModel() {
        return this.valueToModel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setValueToModel(value) {
        this.valueToModel = value;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    keyup($event) {
        if (this.mask) {
            /** @type {?} */
            const value = $event.target.value;
            // formata o valor quando for colado com control + v e reposiciona o cursor
            if ($event.keyCode === 17 || $event.keyCode === 91) {
                $event.target.value = this.controlFormatting(value);
                this.resetPositions($event);
            }
            $event.preventDefault();
            switch ($event.keyCode) {
                case 37: // seta esquerda
                    if (this.initialPosition > 0) {
                        this.initialPosition--;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 39: // seta direita
                    if (this.initialPosition < value.toString().length) {
                        this.initialPosition++;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 35: // end
                    this.finalPosition = value.toString().length;
                    if ($event.shiftKey) {
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = this.finalPosition;
                        this.setPositions($event);
                    }
                    break;
                case 36: // HOME
                    if ($event.shiftKey) {
                        this.finalPosition = this.initialPosition;
                        this.initialPosition = 0;
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = 0;
                        this.finalPosition = 0;
                        this.setPositions($event);
                    }
                    break;
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    setPositionNotShiftKey($event) {
        if (!$event.shiftKey) {
            this.finalPosition = this.initialPosition;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    setSelectionRange($event) {
        if (this.initialPosition > this.finalPosition) {
            $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
        }
        else {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    keydown($event) {
        if (this.mask) {
            /** @type {?} */
            let value = $event.target.value;
            if ($event.keyCode === 9) {
                return;
            }
            if (!$event.ctrlKey && !$event.metaKey) {
                $event.preventDefault();
            }
            // Não faz nada quando for digitado CTRL ou COMMAND e V
            // Já está sendo tratado no evento keyup
            if ($event.ctrlKey || $event.metaKey && ($event.keyCode !== 86) ||
                ($event.keyCode >= 37 && $event.keyCode <= 40) || $event.keyCode === 16 || $event.keyCode === 9) {
                return;
            }
            // Valida a tecla digitada
            if (this.isKeyValid($event.keyCode)) {
                if (this.finalPosition === null) {
                    this.finalPosition = this.initialPosition;
                }
                this.revertPositions(this.initialPosition, this.finalPosition);
                switch ($event.keyCode) {
                    case 8: // backspace
                        this.getPosition($event);
                        if (this.initialPosition < 0) {
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskBefore($event, -1);
                            if (this.initialPosition !== 0) {
                                value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.changePosition($event, -1);
                                this.checkMaskBefore($event, -1);
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                        }
                        else {
                            this.clearRangeSelection(value, $event, true);
                        }
                        this.setPositions($event);
                        break;
                    case 46: // delete
                        this.getPosition($event);
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskAfter($event, 1);
                            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.setPositions($event);
                            this.resetPositions($event);
                        }
                        else {
                            this.clearRangeSelection(value, $event, false);
                        }
                        this.setPositions($event);
                        break;
                    default: // qualquer outra tecla válida
                        value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                        value = this.controlFormatting(value);
                        $event.target.value = value;
                        this.changePosition($event, 1);
                        this.checkMaskBefore($event, 1);
                        this.setPositions($event);
                        this.resetPositions($event);
                        this.setPositions($event);
                }
            }
        }
    }
    /**
     * @param {?} value
     * @param {?} $event
     * @param {?} isBackspace
     * @return {?}
     */
    clearRangeSelection(value, $event, isBackspace) {
        value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
        value = this.controlFormatting(value);
        $event.target.value = value;
        if (isBackspace) {
            this.checkMaskBefore($event, -1);
        }
        this.setPositions($event);
        this.resetPositions($event);
    }
    // passa a posição do click para o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    click($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    blur($event) {
        // Se houver algum valor definido na máscara
        if (this.mask) {
            // pega o valor do campo, formata e passa para o model
            /** @type {?} */
            let value = $event.target.value;
            value = this.controlFormatting(value);
            $event.target.value = value;
        }
    }
    /**
     * @param {?} initialPosition
     * @param {?} finalPosition
     * @return {?}
     */
    revertPositions(initialPosition, finalPosition) {
        if (initialPosition > finalPosition) {
            // inverte o controle de posição caso o inicial esteja maior que o final
            /** @type {?} */
            let tempPosition;
            tempPosition = initialPosition;
            this.initialPosition = finalPosition;
            this.finalPosition = tempPosition;
        }
    }
    // reseta o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    resetPositions($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = this.initialPosition;
    }
    // posiciona o cursor de acordo com o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    setPositions($event) {
        $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
    }
    // muda a posição do cursor e atualiza o controle de posição
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    changePosition($event, value) {
        this.initialPosition = this.initialPosition + value;
        this.finalPosition = this.finalPosition + value;
        this.setPositions($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    getPosition($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
        this.setPositions($event);
    }
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    /**
     * @param {?} value
     * @return {?}
     */
    controlFormatting(value) {
        // Se o valor for vazio, retorna vazio
        if (!value) {
            this.valueToInput = '';
            this.valueToModel = '';
            return '';
        }
        /** @type {?} */
        let valueProcessed;
        /** @type {?} */
        let maskTmp = this.mask;
        // Array que será usado para armazenar todas as máscaras possíveis para
        // quando houver um valor opcional (?)
        /** @type {?} */
        const arrMasks = [];
        /** @type {?} */
        let contMasks = 0;
        // Enquanto houver algum 9? na máscara
        while (this.hasOptionalNumber(maskTmp)) {
            arrMasks.push(maskTmp);
            maskTmp = this.replaceOptionalNumber(maskTmp);
        }
        arrMasks.push(maskTmp);
        // Inverte o array
        arrMasks.reverse();
        // Informa que a formatação ainda não chegou ao fim
        this.formattingEnds = false;
        while (!this.formattingEnds) {
            // Seta a formatação como terminada
            // Então o método formatValue irá setar como não terminado caso haja
            this.formattingEnds = true;
            // Se não existe mais nenhuma máscara possível, então encerra a formatação
            if (!arrMasks[contMasks]) {
                break;
            }
            // Chama a formatação passando a máscara e o valor
            valueProcessed = this.formatValue(value, arrMasks[contMasks]);
            contMasks++;
        }
        return valueProcessed;
    }
    // Função que formata a máscara com o valor passado
    /**
     * @param {?} value
     * @param {?} mask
     * @return {?}
     */
    formatValue(value, mask) {
        // Remove as marcas de valor opciona (?)
        mask = mask.replace(/\?/g, '');
        // Substitui todos os caracteres que não são fixos da máscara por _
        /** @type {?} */
        const guide = mask.replace(this.listValidKeys(), '_');
        // Contador usado para percorrer o guide
        /** @type {?} */
        let contGuide = 0;
        // String final formatada
        /** @type {?} */
        let valueProcessed = '';
        // Remove do valor todos os caracteres fixos como ()/-+
        value = this.removeFormattingValue(value);
        // Percorre todo o valor e coloca a formatação de acordo com a máscara
        for (let i = 0; i < value.length; i++) {
            /** @type {?} */
            const charValue = value[i];
            // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
            // tente formatar com outra possível máscara
            if (!guide[contGuide]) {
                this.formattingEnds = false;
                break;
            }
            // Percorre o Guide enquanto tem caracteres fixos
            while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                valueProcessed += guide[contGuide];
                contGuide++;
            }
            // É um caracter válido de acordo com a máscara
            if (this.isKeyValidMask(charValue, mask[contGuide])) {
                valueProcessed += charValue;
                contGuide++;
            }
            else {
                // Se não é um caracter válido, deve interromper.
                break;
            }
        }
        if (this.formatModel) {
            this.valueToInput = valueProcessed;
            this.valueToModel = valueProcessed;
        }
        else {
            this.valueToInput = valueProcessed;
            this.valueToModel = this.removeFormattingValue(valueProcessed);
        }
        return valueProcessed;
    }
    // verifica se tem algum caracter de mascara antes do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    checkMaskBefore($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
            this.changePosition($event, position);
            this.checkMaskBefore($event, position);
        }
    }
    // verifica se tem algum caracter de mascara depois do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    checkMaskAfter($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
            this.changePosition($event, position);
            this.checkMaskAfter($event, position);
        }
    }
    // Retorna a máscara sem um valor opcional
    /**
     * @param {?} mask
     * @return {?}
     */
    replaceOptionalNumber(mask) {
        /** @type {?} */
        let i = 9;
        while (i >= 0) {
            if (mask.indexOf(i + '?') > -1) {
                return mask.replace(i + '?', '');
            }
            i--;
        }
        return mask;
    }
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    /**
     * @param {?} key
     * @return {?}
     */
    isFixedCharacterGuide(key) {
        return this.testRegex(key, this.getFixedCharacterGuide());
    }
    // Retorna caracteres permitidos somente na máscara \/() +-
    /**
     * @return {?}
     */
    getFixedCharacterGuide() {
        return /[\\\/() +-.\:]/g;
    }
    // Caracteres permitidos de serem digitados
    /**
     * @return {?}
     */
    listValidKeys() {
        return /[a-zA-Z0-9]/g;
    }
    // Se é um dígito válido
    /**
     * @param {?} keyCode
     * @return {?}
     */
    isKeyValid(keyCode) {
        return this.isKeyCodeValid(keyCode);
    }
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    /**
     * @param {?} keyCode
     * @return {?}
     */
    isKeyCodeValid(keyCode) {
        return ((keyCode >= 48 && keyCode <= 57) ||
            (keyCode >= 65 && keyCode <= 90) ||
            (keyCode >= 96 && keyCode <= 105) ||
            (keyCode === 8) || keyCode === 9 ||
            (keyCode === 46));
    }
    // Se está de acordo com a máscara
    /**
     * @param {?} key
     * @param {?} keyMask
     * @return {?}
     */
    isKeyValidMask(key, keyMask) {
        return this.testRegex(key, this.replaceMask(keyMask));
    }
    // Retorna se a chave foi aprovada pela expressão regular
    /**
     * @param {?} key
     * @param {?} regex
     * @return {?}
     */
    testRegex(key, regex) {
        return regex.test(key);
    }
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    /**
     * @param {?} value
     * @return {?}
     */
    removeFormattingValue(value) {
        return value.replace(this.getFixedCharacterGuide(), '');
    }
    // Verifica se contém valor opcional na máscara 0-9?
    /**
     * @param {?} mask
     * @return {?}
     */
    hasOptionalNumber(mask) {
        return mask.match(/\d\?/g);
    }
    // Retorna a expressão regular correspondente ao comando passado
    /**
     * @param {?} char
     * @return {?}
     */
    replaceMask(char) {
        /** @type {?} */
        let regex = /./;
        switch (char) {
            case '0':
                regex = /[0]/;
                break;
            case '1':
                regex = /[0-1]/;
                break;
            case '2':
                regex = /[0-2]/;
                break;
            case '3':
                regex = /[0-3]/;
                break;
            case '4':
                regex = /[0-4]/;
                break;
            case '5':
                regex = /[0-5]/;
                break;
            case '6':
                regex = /[0-6]/;
                break;
            case '7':
                regex = /[0-7]/;
                break;
            case '8':
                regex = /[0-8]/;
                break;
            case '9':
                regex = /[0-9]/;
                break;
            case ' ':
                regex = /\s/;
                break;
            case '@':
                regex = /[a-zA-Z]/;
                break;
            case 'w':
                regex = /[a-zA-Z0-9]/;
                break;
        }
        return regex;
    }
    /**
     * @param {?} mask
     * @return {?}
     */
    getRegexFromMask(mask) {
        if (mask) {
            /** @type {?} */
            let pattern;
            if (this.formatModel) {
                pattern = mask.replace(/\\/g, '\\\\');
                pattern = pattern.replace(/\+/g, '\\+');
                pattern = pattern.replace(/\./g, '\\.');
                pattern = pattern.replace(/-/g, '-');
                pattern = pattern.replace(/\(/g, '\\(');
                pattern = pattern.replace(/\)/g, '\\)');
                pattern = pattern.replace(/\//g, '\\/');
                pattern = pattern.replace(/\s/g, '\\s');
                pattern = pattern.replace(/:/g, '\\:');
                pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            else {
                pattern = mask.replace(/\\/g, '');
                pattern = pattern.replace(/\+/g, '');
                pattern = pattern.replace(/\./g, '');
                pattern = pattern.replace(/-/g, '');
                pattern = pattern.replace(/\(/g, '');
                pattern = pattern.replace(/\)/g, '');
                pattern = pattern.replace(/\//g, '');
                pattern = pattern.replace(/\s/g, '');
                pattern = pattern.replace(/:/g, '');
                pattern = pattern.replace(/\@/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            return pattern;
        }
        else {
            return null;
        }
    }
}
if (false) {
    /** @type {?} */
    PoMask.prototype.mask;
    /** @type {?} */
    PoMask.prototype.formatModel;
    /** @type {?} */
    PoMask.prototype.initialPosition;
    /** @type {?} */
    PoMask.prototype.finalPosition;
    /** @type {?} */
    PoMask.prototype.pattern;
    /** @type {?} */
    PoMask.prototype.valueToInput;
    /** @type {?} */
    PoMask.prototype.valueToModel;
    /** @type {?} */
    PoMask.prototype.formattingEnds;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbWFzay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8taW5wdXQvcG8tbWFzay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFLQSxNQUFNLE9BQU8sTUFBTTs7Ozs7SUE4QmpCLFlBQVksSUFBWSxFQUFFLFdBQW9CO1FBN0I5QyxTQUFJLEdBQVcsRUFBRSxDQUFDO1FBQ2xCLGdCQUFXLEdBQVksS0FBSyxDQUFDOztRQUU3QixvQkFBZSxHQUFXLENBQUMsQ0FBQztRQUM1QixrQkFBYSxHQUFXLENBQUMsQ0FBQztRQUUxQixZQUFPLEdBQVcsRUFBRSxDQUFDO1FBd0JuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7O0lBMUJELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOzs7O0lBR0QsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDOzs7OztJQUNELElBQUksZUFBZSxDQUFDLEtBQWE7UUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQzs7OztJQUdELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFDRCxJQUFJLGVBQWUsQ0FBQyxLQUFhO1FBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBVUQsS0FBSyxDQUFDLE1BQVc7UUFDZixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7O2tCQUNQLEtBQUss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SyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNsQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDckMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDckMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNyQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3JDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDcEMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUN4QyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDekM7WUFDRCxPQUFPLE9BQU8sQ0FBQztTQUNoQjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7Q0FFRjs7O0lBOWVDLHNCQUFrQjs7SUFDbEIsNkJBQTZCOztJQUU3QixpQ0FBNEI7O0lBQzVCLCtCQUEwQjs7SUFFMUIseUJBQXFCOztJQUtyQiw4QkFBcUI7O0lBUXJCLDhCQUFxQjs7SUFRckIsZ0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQYXJhIHVzYXIgbyBwby1tYXNrIMOpIHByZWNpc28gaW5zdGFuY2lhciBlc3RhIGNsYXNzZSBwYXNzYW5kbyBhIG3DoXNjYXJhIGNvbW9cbiAqIHByaW1laXJvIHBhcsOibWV0cm8sIGUgbm8gc2VndW5kbyBwYXLDom1ldHJvLCBkZXZlIHNlIGluZm9ybWFkbyB0cnVlLCBjYXNvIHF1ZWlyYVxuICogcXVlIG8gbW9kZWwgc2VqYSBmb3JtYXRhZG8gb3UgZmFsc2UgcGFyYSBvIHF1ZSBvIG1vZGVsIHNlamEgbGltcG8uXG4gKi9cbmV4cG9ydCBjbGFzcyBQb01hc2sge1xuICBtYXNrOiBzdHJpbmcgPSAnJztcbiAgZm9ybWF0TW9kZWw6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLy8gY29udHJvbGUgZGUgcG9zacOnw6NvXG4gIGluaXRpYWxQb3NpdGlvbjogbnVtYmVyID0gMDtcbiAgZmluYWxQb3NpdGlvbjogbnVtYmVyID0gMDtcblxuICBwYXR0ZXJuOiBzdHJpbmcgPSAnJztcbiAgZ2V0IGdldFBhdHRlcm4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wYXR0ZXJuO1xuICB9XG5cbiAgdmFsdWVUb0lucHV0OiBzdHJpbmc7XG4gIGdldCBnZXRWYWx1ZVRvSW5wdXQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVRvSW5wdXQ7XG4gIH1cbiAgc2V0IHNldFZhbHVlVG9JbnB1dCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy52YWx1ZVRvSW5wdXQgPSB2YWx1ZTtcbiAgfVxuXG4gIHZhbHVlVG9Nb2RlbDogc3RyaW5nO1xuICBnZXQgZ2V0VmFsdWVUb01vZGVsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVUb01vZGVsO1xuICB9XG4gIHNldCBzZXRWYWx1ZVRvTW9kZWwodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMudmFsdWVUb01vZGVsID0gdmFsdWU7XG4gIH1cblxuICBmb3JtYXR0aW5nRW5kczogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihtYXNrOiBzdHJpbmcsIGZvcm1hdE1vZGVsOiBib29sZWFuKSB7XG4gICAgdGhpcy5tYXNrID0gbWFzaztcbiAgICB0aGlzLmZvcm1hdE1vZGVsID0gZm9ybWF0TW9kZWw7XG4gICAgdGhpcy5wYXR0ZXJuID0gdGhpcy5nZXRSZWdleEZyb21NYXNrKG1hc2spO1xuICB9XG5cbiAga2V5dXAoJGV2ZW50OiBhbnkpIHtcbiAgICBpZiAodGhpcy5tYXNrKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9ICRldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAvLyBmb3JtYXRhIG8gdmFsb3IgcXVhbmRvIGZvciBjb2xhZG8gY29tIGNvbnRyb2wgKyB2IGUgcmVwb3NpY2lvbmEgbyBjdXJzb3JcbiAgICAgIGlmICgkZXZlbnQua2V5Q29kZSA9PT0gMTcgfHwgJGV2ZW50LmtleUNvZGUgPT09IDkxKSB7XG4gICAgICAgICRldmVudC50YXJnZXQudmFsdWUgPSB0aGlzLmNvbnRyb2xGb3JtYXR0aW5nKHZhbHVlKTtcbiAgICAgICAgdGhpcy5yZXNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgc3dpdGNoICgkZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDM3OiAvLyBzZXRhIGVzcXVlcmRhXG4gICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbFBvc2l0aW9uID4gMCkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsUG9zaXRpb24tLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbk5vdFNoaWZ0S2V5KCRldmVudCk7XG4gICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25SYW5nZSgkZXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzk6IC8vIHNldGEgZGlyZWl0YVxuICAgICAgICAgIGlmICh0aGlzLmluaXRpYWxQb3NpdGlvbiA8IHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxQb3NpdGlvbisrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uTm90U2hpZnRLZXkoJGV2ZW50KTtcbiAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvblJhbmdlKCRldmVudCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzNTogLy8gZW5kXG4gICAgICAgICAgdGhpcy5maW5hbFBvc2l0aW9uID0gdmFsdWUudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICAgICAgaWYgKCRldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSB0aGlzLmZpbmFsUG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDM2OiAvLyBIT01FXG4gICAgICAgICAgaWYgKCRldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5maW5hbFBvc2l0aW9uID0gdGhpcy5pbml0aWFsUG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICB0aGlzLmZpbmFsUG9zaXRpb24gPSAwO1xuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0UG9zaXRpb25Ob3RTaGlmdEtleSgkZXZlbnQ6IGFueSkge1xuICAgIGlmICghJGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICB0aGlzLmZpbmFsUG9zaXRpb24gPSB0aGlzLmluaXRpYWxQb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICBzZXRTZWxlY3Rpb25SYW5nZSgkZXZlbnQ6IGFueSkge1xuICAgIGlmICh0aGlzLmluaXRpYWxQb3NpdGlvbiA+IHRoaXMuZmluYWxQb3NpdGlvbikge1xuICAgICAgJGV2ZW50LnRhcmdldC5zZXRTZWxlY3Rpb25SYW5nZSh0aGlzLmZpbmFsUG9zaXRpb24sIHRoaXMuaW5pdGlhbFBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGV2ZW50LnRhcmdldC5zZXRTZWxlY3Rpb25SYW5nZSh0aGlzLmluaXRpYWxQb3NpdGlvbiwgdGhpcy5maW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gIH1cblxuICBrZXlkb3duKCRldmVudDogYW55KSB7XG4gICAgaWYgKHRoaXMubWFzaykge1xuICAgICAgbGV0IHZhbHVlOiBzdHJpbmcgPSAkZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgaWYgKCRldmVudC5rZXlDb2RlID09PSA5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCEkZXZlbnQuY3RybEtleSAmJiAhJGV2ZW50Lm1ldGFLZXkpIHtcbiAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE7Do28gZmF6IG5hZGEgcXVhbmRvIGZvciBkaWdpdGFkbyBDVFJMIG91IENPTU1BTkQgZSBWXG4gICAgICAvLyBKw6EgZXN0w6Egc2VuZG8gdHJhdGFkbyBubyBldmVudG8ga2V5dXBcbiAgICAgIGlmICgkZXZlbnQuY3RybEtleSB8fCAkZXZlbnQubWV0YUtleSAmJiAoJGV2ZW50LmtleUNvZGUgIT09IDg2KSB8fFxuICAgICAgICAoJGV2ZW50LmtleUNvZGUgPj0gMzcgJiYgJGV2ZW50LmtleUNvZGUgPD0gNDApIHx8ICRldmVudC5rZXlDb2RlID09PSAxNiB8fCAkZXZlbnQua2V5Q29kZSA9PT0gOSApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBWYWxpZGEgYSB0ZWNsYSBkaWdpdGFkYVxuICAgICAgaWYgKHRoaXMuaXNLZXlWYWxpZCgkZXZlbnQua2V5Q29kZSkpIHtcbiAgICAgICAgaWYgKHRoaXMuZmluYWxQb3NpdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuZmluYWxQb3NpdGlvbiA9IHRoaXMuaW5pdGlhbFBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmV2ZXJ0UG9zaXRpb25zKHRoaXMuaW5pdGlhbFBvc2l0aW9uLCB0aGlzLmZpbmFsUG9zaXRpb24pO1xuXG4gICAgICAgIHN3aXRjaCAoJGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICBjYXNlIDg6IC8vIGJhY2tzcGFjZVxuICAgICAgICAgICAgdGhpcy5nZXRQb3NpdGlvbigkZXZlbnQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbFBvc2l0aW9uIDwgMCkge1xuICAgICAgICAgICAgICB0aGlzLmluaXRpYWxQb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsUG9zaXRpb24gPT09IHRoaXMuZmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgICB0aGlzLmNoZWNrTWFza0JlZm9yZSgkZXZlbnQsIC0xKTtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdGlhbFBvc2l0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCB0aGlzLmluaXRpYWxQb3NpdGlvbiAtIDEpICsgdmFsdWUuc2xpY2UodGhpcy5maW5hbFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuY29udHJvbEZvcm1hdHRpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVBvc2l0aW9uKCRldmVudCAsIC0xKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrTWFza0JlZm9yZSgkZXZlbnQsIC0xKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jbGVhclJhbmdlU2VsZWN0aW9uKHZhbHVlLCAkZXZlbnQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSA0NjogLy8gZGVsZXRlXG4gICAgICAgICAgICB0aGlzLmdldFBvc2l0aW9uKCRldmVudCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsUG9zaXRpb24gPT09IHRoaXMuZmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgICB0aGlzLmNoZWNrTWFza0FmdGVyKCRldmVudCwgMSk7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgdGhpcy5pbml0aWFsUG9zaXRpb24pICsgdmFsdWUuc2xpY2UodGhpcy5maW5hbFBvc2l0aW9uICsgMSk7XG4gICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb250cm9sRm9ybWF0dGluZyh2YWx1ZSk7XG4gICAgICAgICAgICAgICRldmVudC50YXJnZXQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgdGhpcy5zZXRQb3NpdGlvbnMoJGV2ZW50KTtcbiAgICAgICAgICAgICAgdGhpcy5yZXNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jbGVhclJhbmdlU2VsZWN0aW9uKHZhbHVlLCAkZXZlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6IC8vIHF1YWxxdWVyIG91dHJhIHRlY2xhIHbDoWxpZGFcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgdGhpcy5pbml0aWFsUG9zaXRpb24pICsgJGV2ZW50LmtleSArIHZhbHVlLnNsaWNlKHRoaXMuZmluYWxQb3NpdGlvbik7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuY29udHJvbEZvcm1hdHRpbmcodmFsdWUpO1xuICAgICAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VQb3NpdGlvbigkZXZlbnQsIDEpO1xuICAgICAgICAgICAgdGhpcy5jaGVja01hc2tCZWZvcmUoJGV2ZW50LCAxKTtcbiAgICAgICAgICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xlYXJSYW5nZVNlbGVjdGlvbih2YWx1ZTogc3RyaW5nLCAkZXZlbnQ6IGFueSwgaXNCYWNrc3BhY2U6IGJvb2xlYW4pIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIHRoaXMuaW5pdGlhbFBvc2l0aW9uKSArIHZhbHVlLnNsaWNlKHRoaXMuZmluYWxQb3NpdGlvbik7XG4gICAgdmFsdWUgPSB0aGlzLmNvbnRyb2xGb3JtYXR0aW5nKHZhbHVlKTtcbiAgICAkZXZlbnQudGFyZ2V0LnZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoaXNCYWNrc3BhY2UpIHtcbiAgICAgIHRoaXMuY2hlY2tNYXNrQmVmb3JlKCRldmVudCwgLTEpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gICAgdGhpcy5yZXNldFBvc2l0aW9ucygkZXZlbnQpO1xuICB9XG5cbiAgLy8gcGFzc2EgYSBwb3Npw6fDo28gZG8gY2xpY2sgcGFyYSBvIGNvbnRyb2xlIGRlIHBvc2nDp8Ojb1xuICBjbGljaygkZXZlbnQ6IGFueSkge1xuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gJGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydDtcbiAgICB0aGlzLmZpbmFsUG9zaXRpb24gPSAkZXZlbnQudGFyZ2V0LnNlbGVjdGlvbkVuZDtcbiAgfVxuXG4gIGJsdXIoJGV2ZW50OiBhbnkpIHtcbiAgICAvLyBTZSBob3V2ZXIgYWxndW0gdmFsb3IgZGVmaW5pZG8gbmEgbcOhc2NhcmFcbiAgICBpZiAodGhpcy5tYXNrKSB7XG4gICAgICAvLyBwZWdhIG8gdmFsb3IgZG8gY2FtcG8sIGZvcm1hdGEgZSBwYXNzYSBwYXJhIG8gbW9kZWxcbiAgICAgIGxldCB2YWx1ZSA9ICRldmVudC50YXJnZXQudmFsdWU7XG4gICAgICB2YWx1ZSA9IHRoaXMuY29udHJvbEZvcm1hdHRpbmcodmFsdWUpO1xuICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldmVydFBvc2l0aW9ucyhpbml0aWFsUG9zaXRpb246IG51bWJlciwgZmluYWxQb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgaWYgKGluaXRpYWxQb3NpdGlvbiA+IGZpbmFsUG9zaXRpb24pIHtcbiAgICAgIC8vIGludmVydGUgbyBjb250cm9sZSBkZSBwb3Npw6fDo28gY2FzbyBvIGluaWNpYWwgZXN0ZWphIG1haW9yIHF1ZSBvIGZpbmFsXG4gICAgICBsZXQgdGVtcFBvc2l0aW9uO1xuICAgICAgdGVtcFBvc2l0aW9uID0gaW5pdGlhbFBvc2l0aW9uO1xuICAgICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSBmaW5hbFBvc2l0aW9uO1xuICAgICAgdGhpcy5maW5hbFBvc2l0aW9uID0gdGVtcFBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIC8vIHJlc2V0YSBvIGNvbnRyb2xlIGRlIHBvc2nDp8Ojb1xuICByZXNldFBvc2l0aW9ucygkZXZlbnQ6IGFueSkge1xuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gJGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydDtcbiAgICB0aGlzLmZpbmFsUG9zaXRpb24gPSB0aGlzLmluaXRpYWxQb3NpdGlvbjtcbiAgfVxuXG4gIC8vIHBvc2ljaW9uYSBvIGN1cnNvciBkZSBhY29yZG8gY29tIG8gY29udHJvbGUgZGUgcG9zacOnw6NvXG4gIHNldFBvc2l0aW9ucygkZXZlbnQ6IGFueSkge1xuICAgICRldmVudC50YXJnZXQuc2V0U2VsZWN0aW9uUmFuZ2UodGhpcy5pbml0aWFsUG9zaXRpb24sIHRoaXMuZmluYWxQb3NpdGlvbik7XG4gIH1cblxuICAvLyBtdWRhIGEgcG9zacOnw6NvIGRvIGN1cnNvciBlIGF0dWFsaXphIG8gY29udHJvbGUgZGUgcG9zacOnw6NvXG4gIGNoYW5nZVBvc2l0aW9uKCRldmVudDogYW55LCB2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5pbml0aWFsUG9zaXRpb24gPSB0aGlzLmluaXRpYWxQb3NpdGlvbiArIHZhbHVlO1xuICAgIHRoaXMuZmluYWxQb3NpdGlvbiA9IHRoaXMuZmluYWxQb3NpdGlvbiArIHZhbHVlO1xuICAgIHRoaXMuc2V0UG9zaXRpb25zKCRldmVudCk7XG4gIH1cblxuICBnZXRQb3NpdGlvbigkZXZlbnQ6IGFueSkge1xuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gJGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydDtcbiAgICB0aGlzLmZpbmFsUG9zaXRpb24gPSAkZXZlbnQudGFyZ2V0LnNlbGVjdGlvbkVuZDtcbiAgICB0aGlzLnNldFBvc2l0aW9ucygkZXZlbnQpO1xuICB9XG5cbiAgLy8gTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGNvbnRyb2xhciBhIGZvcm1hdGHDp8OjbyBlIGFwbGljYXIgdG9kYXMgYXMgbcOhc2NhcmEgcG9zc8OtdmVpc1xuICAvLyBxdWFuZG8gaG91dmVyIHZhbG9yZXMgb3BjaW9uYWlzICg/KVxuICBjb250cm9sRm9ybWF0dGluZyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgLy8gU2UgbyB2YWxvciBmb3IgdmF6aW8sIHJldG9ybmEgdmF6aW9cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlVG9JbnB1dCA9ICcnO1xuICAgICAgdGhpcy52YWx1ZVRvTW9kZWwgPSAnJztcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgbGV0IHZhbHVlUHJvY2Vzc2VkO1xuICAgIGxldCBtYXNrVG1wID0gdGhpcy5tYXNrO1xuXG4gICAgLy8gQXJyYXkgcXVlIHNlcsOhIHVzYWRvIHBhcmEgYXJtYXplbmFyIHRvZGFzIGFzIG3DoXNjYXJhcyBwb3Nzw612ZWlzIHBhcmFcbiAgICAvLyBxdWFuZG8gaG91dmVyIHVtIHZhbG9yIG9wY2lvbmFsICg/KVxuICAgIGNvbnN0IGFyck1hc2tzOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IGNvbnRNYXNrcyA9IDA7XG5cbiAgICAvLyBFbnF1YW50byBob3V2ZXIgYWxndW0gOT8gbmEgbcOhc2NhcmFcbiAgICB3aGlsZSAodGhpcy5oYXNPcHRpb25hbE51bWJlcihtYXNrVG1wKSkge1xuICAgICAgYXJyTWFza3MucHVzaChtYXNrVG1wKTtcbiAgICAgIG1hc2tUbXAgPSB0aGlzLnJlcGxhY2VPcHRpb25hbE51bWJlcihtYXNrVG1wKTtcbiAgICB9XG4gICAgYXJyTWFza3MucHVzaChtYXNrVG1wKTtcblxuICAgIC8vIEludmVydGUgbyBhcnJheVxuICAgIGFyck1hc2tzLnJldmVyc2UoKTtcblxuICAgIC8vIEluZm9ybWEgcXVlIGEgZm9ybWF0YcOnw6NvIGFpbmRhIG7Do28gY2hlZ291IGFvIGZpbVxuICAgIHRoaXMuZm9ybWF0dGluZ0VuZHMgPSBmYWxzZTtcblxuICAgIHdoaWxlICghdGhpcy5mb3JtYXR0aW5nRW5kcykge1xuICAgICAgLy8gU2V0YSBhIGZvcm1hdGHDp8OjbyBjb21vIHRlcm1pbmFkYVxuICAgICAgLy8gRW50w6NvIG8gbcOpdG9kbyBmb3JtYXRWYWx1ZSBpcsOhIHNldGFyIGNvbW8gbsOjbyB0ZXJtaW5hZG8gY2FzbyBoYWphXG4gICAgICB0aGlzLmZvcm1hdHRpbmdFbmRzID0gdHJ1ZTtcblxuICAgICAgLy8gU2UgbsOjbyBleGlzdGUgbWFpcyBuZW5odW1hIG3DoXNjYXJhIHBvc3PDrXZlbCwgZW50w6NvIGVuY2VycmEgYSBmb3JtYXRhw6fDo29cbiAgICAgIGlmICghYXJyTWFza3NbY29udE1hc2tzXSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gQ2hhbWEgYSBmb3JtYXRhw6fDo28gcGFzc2FuZG8gYSBtw6FzY2FyYSBlIG8gdmFsb3JcbiAgICAgIHZhbHVlUHJvY2Vzc2VkID0gdGhpcy5mb3JtYXRWYWx1ZSh2YWx1ZSwgYXJyTWFza3NbY29udE1hc2tzXSk7XG4gICAgICBjb250TWFza3MrKztcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVQcm9jZXNzZWQ7XG4gIH1cblxuICAvLyBGdW7Dp8OjbyBxdWUgZm9ybWF0YSBhIG3DoXNjYXJhIGNvbSBvIHZhbG9yIHBhc3NhZG9cbiAgZm9ybWF0VmFsdWUodmFsdWU6IHN0cmluZywgbWFzazogc3RyaW5nKSB7XG5cbiAgICAvLyBSZW1vdmUgYXMgbWFyY2FzIGRlIHZhbG9yIG9wY2lvbmEgKD8pXG4gICAgbWFzayA9IG1hc2sucmVwbGFjZSgvXFw/L2csICcnKTtcblxuICAgIC8vIFN1YnN0aXR1aSB0b2RvcyBvcyBjYXJhY3RlcmVzIHF1ZSBuw6NvIHPDo28gZml4b3MgZGEgbcOhc2NhcmEgcG9yIF9cbiAgICBjb25zdCBndWlkZSA9IG1hc2sucmVwbGFjZSh0aGlzLmxpc3RWYWxpZEtleXMoKSwgJ18nKTtcblxuICAgIC8vIENvbnRhZG9yIHVzYWRvIHBhcmEgcGVyY29ycmVyIG8gZ3VpZGVcbiAgICBsZXQgY29udEd1aWRlOiBudW1iZXIgPSAwO1xuXG4gICAgLy8gU3RyaW5nIGZpbmFsIGZvcm1hdGFkYVxuICAgIGxldCB2YWx1ZVByb2Nlc3NlZDogc3RyaW5nID0gJyc7XG5cbiAgICAvLyBSZW1vdmUgZG8gdmFsb3IgdG9kb3Mgb3MgY2FyYWN0ZXJlcyBmaXhvcyBjb21vICgpLy0rXG4gICAgdmFsdWUgPSB0aGlzLnJlbW92ZUZvcm1hdHRpbmdWYWx1ZSh2YWx1ZSk7XG5cbiAgICAvLyBQZXJjb3JyZSB0b2RvIG8gdmFsb3IgZSBjb2xvY2EgYSBmb3JtYXRhw6fDo28gZGUgYWNvcmRvIGNvbSBhIG3DoXNjYXJhXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2hhclZhbHVlID0gdmFsdWVbaV07XG5cbiAgICAgIC8vIFNlIG8gZ3VpZGUgYWNhYm91LCBzZXRhIGEgZm9ybWF0YcOnw6NvIGNvbW8gbsOjbyB0ZXJtaW5hZGEgcGFyYSBxdWUgbyBtw6l0b2RvIGNvbnRyb2xGb3JtYXR0aW5nXG4gICAgICAvLyB0ZW50ZSBmb3JtYXRhciBjb20gb3V0cmEgcG9zc8OtdmVsIG3DoXNjYXJhXG4gICAgICBpZiAoIWd1aWRlW2NvbnRHdWlkZV0pIHtcbiAgICAgICAgdGhpcy5mb3JtYXR0aW5nRW5kcyA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gUGVyY29ycmUgbyBHdWlkZSBlbnF1YW50byB0ZW0gY2FyYWN0ZXJlcyBmaXhvc1xuICAgICAgd2hpbGUgKHRoaXMuaXNGaXhlZENoYXJhY3Rlckd1aWRlKGd1aWRlW2NvbnRHdWlkZV0pICYmIGd1aWRlW2NvbnRHdWlkZV0pIHtcbiAgICAgICAgdmFsdWVQcm9jZXNzZWQgKz0gZ3VpZGVbY29udEd1aWRlXTtcbiAgICAgICAgY29udEd1aWRlKys7XG4gICAgICB9XG5cbiAgICAgIC8vIMOJIHVtIGNhcmFjdGVyIHbDoWxpZG8gZGUgYWNvcmRvIGNvbSBhIG3DoXNjYXJhXG4gICAgICBpZiAodGhpcy5pc0tleVZhbGlkTWFzayhjaGFyVmFsdWUsIG1hc2tbY29udEd1aWRlXSkpIHtcbiAgICAgICAgdmFsdWVQcm9jZXNzZWQgKz0gY2hhclZhbHVlO1xuICAgICAgICBjb250R3VpZGUrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNlIG7Do28gw6kgdW0gY2FyYWN0ZXIgdsOhbGlkbywgZGV2ZSBpbnRlcnJvbXBlci5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZm9ybWF0TW9kZWwpIHtcbiAgICAgIHRoaXMudmFsdWVUb0lucHV0ID0gdmFsdWVQcm9jZXNzZWQ7XG4gICAgICB0aGlzLnZhbHVlVG9Nb2RlbCA9IHZhbHVlUHJvY2Vzc2VkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlVG9JbnB1dCA9IHZhbHVlUHJvY2Vzc2VkO1xuICAgICAgdGhpcy52YWx1ZVRvTW9kZWwgPSB0aGlzLnJlbW92ZUZvcm1hdHRpbmdWYWx1ZSh2YWx1ZVByb2Nlc3NlZCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVByb2Nlc3NlZDtcbiAgfVxuICAvLyB2ZXJpZmljYSBzZSB0ZW0gYWxndW0gY2FyYWN0ZXIgZGUgbWFzY2FyYSBhbnRlcyBkbyBjdXJzb3JcbiAgY2hlY2tNYXNrQmVmb3JlKCRldmVudDogYW55LCBwb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuaXNGaXhlZENoYXJhY3Rlckd1aWRlKCRldmVudC50YXJnZXQudmFsdWUudG9TdHJpbmcoKS5jaGFyQXQodGhpcy5pbml0aWFsUG9zaXRpb24gLSAxKSkpIHtcbiAgICAgIHRoaXMuY2hhbmdlUG9zaXRpb24oJGV2ZW50LCBwb3NpdGlvbik7XG4gICAgICB0aGlzLmNoZWNrTWFza0JlZm9yZSgkZXZlbnQsIHBvc2l0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvLyB2ZXJpZmljYSBzZSB0ZW0gYWxndW0gY2FyYWN0ZXIgZGUgbWFzY2FyYSBkZXBvaXMgZG8gY3Vyc29yXG4gIGNoZWNrTWFza0FmdGVyKCRldmVudDogYW55LCBwb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuaXNGaXhlZENoYXJhY3Rlckd1aWRlKCRldmVudC50YXJnZXQudmFsdWUudG9TdHJpbmcoKS5jaGFyQXQodGhpcy5pbml0aWFsUG9zaXRpb24pKSkge1xuICAgICAgdGhpcy5jaGFuZ2VQb3NpdGlvbigkZXZlbnQsIHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuY2hlY2tNYXNrQWZ0ZXIoJGV2ZW50LCBwb3NpdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0b3JuYSBhIG3DoXNjYXJhIHNlbSB1bSB2YWxvciBvcGNpb25hbFxuICByZXBsYWNlT3B0aW9uYWxOdW1iZXIobWFzazogc3RyaW5nKSB7XG4gICAgbGV0IGkgPSA5O1xuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIGlmIChtYXNrLmluZGV4T2YoaSArICc/JykgPiAtMSkge1xuICAgICAgICByZXR1cm4gbWFzay5yZXBsYWNlKGkgKyAnPycsICcnKTtcbiAgICAgIH1cbiAgICAgIGktLTtcbiAgICB9XG4gICAgcmV0dXJuIG1hc2s7XG4gIH1cblxuICAvLyBWZXJpZmljYSBzZSBjb250w6ltIGNhcmFjdGVyZXMgcGVybWl0aWRvcyBzb21lbnRlIG5hIG3DoXNjYXJhIFxcLygpICstXG4gIGlzRml4ZWRDaGFyYWN0ZXJHdWlkZShrZXk6IGFueSkge1xuICAgIHJldHVybiB0aGlzLnRlc3RSZWdleChrZXksIHRoaXMuZ2V0Rml4ZWRDaGFyYWN0ZXJHdWlkZSgpKTtcbiAgfVxuXG4gIC8vIFJldG9ybmEgY2FyYWN0ZXJlcyBwZXJtaXRpZG9zIHNvbWVudGUgbmEgbcOhc2NhcmEgXFwvKCkgKy1cbiAgZ2V0Rml4ZWRDaGFyYWN0ZXJHdWlkZSgpIHtcbiAgICByZXR1cm4gL1tcXFxcXFwvKCkgKy0uXFw6XS9nO1xuICB9XG5cbiAgLy8gQ2FyYWN0ZXJlcyBwZXJtaXRpZG9zIGRlIHNlcmVtIGRpZ2l0YWRvc1xuICBsaXN0VmFsaWRLZXlzKCkge1xuICAgIHJldHVybiAvW2EtekEtWjAtOV0vZztcbiAgfVxuXG4gIC8vIFNlIMOpIHVtIGTDrWdpdG8gdsOhbGlkb1xuICBpc0tleVZhbGlkKGtleUNvZGU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmlzS2V5Q29kZVZhbGlkKGtleUNvZGUpO1xuICB9XG5cbiAgLy8gVmVyaWZpY2Egc2UgYSB0ZWNsYSBkaWdpdGFkYSDDqSBwZXJtaXRpZGFcbiAgLy8gUGVybWl0ZSBhcGVuYXMgbsO6bWVyb3MsIGxldHJhcywgYmFja3NwYWNlIGUgZGVsXG4gIGlzS2V5Q29kZVZhbGlkKGtleUNvZGU6IG51bWJlcikge1xuICAgIHJldHVybiAoXG4gICAgICAoa2V5Q29kZSA+PSA0OCAmJiBrZXlDb2RlIDw9IDU3KSB8fFxuICAgICAgKGtleUNvZGUgPj0gNjUgJiYga2V5Q29kZSA8PSA5MCkgfHxcbiAgICAgIChrZXlDb2RlID49IDk2ICYmIGtleUNvZGUgPD0gMTA1KSB8fFxuICAgICAgKGtleUNvZGUgPT09IDgpIHx8IGtleUNvZGUgPT09IDkgfHxcbiAgICAgIChrZXlDb2RlID09PSA0NilcbiAgICApO1xuICB9XG5cbiAgLy8gU2UgZXN0w6EgZGUgYWNvcmRvIGNvbSBhIG3DoXNjYXJhXG4gIGlzS2V5VmFsaWRNYXNrKGtleTogYW55LCBrZXlNYXNrOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy50ZXN0UmVnZXgoa2V5LCB0aGlzLnJlcGxhY2VNYXNrKGtleU1hc2spKTtcbiAgfVxuXG4gIC8vIFJldG9ybmEgc2UgYSBjaGF2ZSBmb2kgYXByb3ZhZGEgcGVsYSBleHByZXNzw6NvIHJlZ3VsYXJcbiAgdGVzdFJlZ2V4KGtleTogYW55LCByZWdleDogYW55KSB7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3Qoa2V5KTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBhIGZvcm1hdGFjw6NvIGRvIHZhbG9yXG4gIC8vIMOJIHBvc3PDrXZlbCBzZXIgbWVsaG9yYWRvIHBhcmEgcmVtb3ZlciBwb250dWFsbWVudGUgb3MgY2FyYWN0ZXJlcyBmaXhvcyBkZSBhY29yZG8gY29tIGEgbcOhc2NhcmFcbiAgcmVtb3ZlRm9ybWF0dGluZ1ZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSh0aGlzLmdldEZpeGVkQ2hhcmFjdGVyR3VpZGUoKSwgJycpO1xuICB9XG5cbiAgLy8gVmVyaWZpY2Egc2UgY29udMOpbSB2YWxvciBvcGNpb25hbCBuYSBtw6FzY2FyYSAwLTk/XG4gIGhhc09wdGlvbmFsTnVtYmVyKG1hc2s6IHN0cmluZykge1xuICAgIHJldHVybiBtYXNrLm1hdGNoKC9cXGRcXD8vZyk7XG4gIH1cblxuICAvLyBSZXRvcm5hIGEgZXhwcmVzc8OjbyByZWd1bGFyIGNvcnJlc3BvbmRlbnRlIGFvIGNvbWFuZG8gcGFzc2Fkb1xuICByZXBsYWNlTWFzayhjaGFyOiBzdHJpbmcpIHtcbiAgICBsZXQgcmVnZXggPSAvLi87XG4gICAgc3dpdGNoIChjaGFyKSB7XG4gICAgICBjYXNlICcwJzogcmVnZXggPSAvWzBdLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzEnOiByZWdleCA9IC9bMC0xXS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICcyJzogcmVnZXggPSAvWzAtMl0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnMyc6IHJlZ2V4ID0gL1swLTNdLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzQnOiByZWdleCA9IC9bMC00XS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc1JzogcmVnZXggPSAvWzAtNV0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnNic6IHJlZ2V4ID0gL1swLTZdLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJzcnOiByZWdleCA9IC9bMC03XS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc4JzogcmVnZXggPSAvWzAtOF0vO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnOSc6IHJlZ2V4ID0gL1swLTldLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyAnOiByZWdleCA9IC9cXHMvO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQCc6IHJlZ2V4ID0gL1thLXpBLVpdLztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3cnOiByZWdleCA9IC9bYS16QS1aMC05XS87XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZWdleDtcbiAgfVxuXG4gIGdldFJlZ2V4RnJvbU1hc2sobWFzazogc3RyaW5nKSB7XG4gICAgaWYgKG1hc2spIHtcbiAgICAgIGxldCBwYXR0ZXJuO1xuICAgICAgaWYgKHRoaXMuZm9ybWF0TW9kZWwpIHtcbiAgICAgICAgcGF0dGVybiA9IG1hc2sucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwrL2csICdcXFxcKycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXC4vZywgJ1xcXFwuJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoLy0vZywgJy0nKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwoL2csICdcXFxcKCcpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXCkvZywgJ1xcXFwpJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcLy9nLCAnXFxcXC8nKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFxzL2csICdcXFxccycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC86L2csICdcXFxcOicpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXEAoPyFcXHMpL2csICdcXFxcdycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXGQvZywgJ1xcXFx3Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXR0ZXJuID0gbWFzay5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwrL2csICcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvXFwuL2csICcnKTtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvLS9nLCAnJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcKC9nLCAnJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcKS9nLCAnJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcLy9nLCAnJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoLzovZywgJycpO1xuICAgICAgICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKC9cXEAvZywgJ1xcXFx3Jyk7XG4gICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcZC9nLCAnXFxcXHcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxufVxuIl19