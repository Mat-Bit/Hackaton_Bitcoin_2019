/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2, ViewChild } from '@angular/core';
export class PoUploadDragDropAreaOverlayComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.areaElement = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.target) {
            this.setPosition(this.target);
        }
        this.areaElement.emit(this.DragDropAreaFixed.nativeElement);
    }
    /**
     * @private
     * @param {?} targetElement
     * @return {?}
     */
    setPosition(targetElement) {
        /** @type {?} */
        const boundingClientRect = targetElement.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const clientRectKeys = ['bottom', 'left', 'height', 'right', 'top', 'width'];
        clientRectKeys.forEach((/**
         * @param {?} clientRectKey
         * @return {?}
         */
        clientRectKey => {
            /** @type {?} */
            const clientRectValue = boundingClientRect[clientRectKey];
            this.renderer.setStyle(this.DragDropAreaFixed.nativeElement, clientRectKey, `${clientRectValue}px`);
        }));
    }
}
PoUploadDragDropAreaOverlayComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-upload-drag-drop-area-overlay',
                template: "<div class=\"po-overlay-fixed\">\n\n  <po-upload-drag-drop-area #DragDropAreaFixed\n    class=\"po-upload-drag-drop-area-overlay\"\n    [p-directory-compatible]=\"directoryCompatible\"\n    [p-disabled]=\"disabled\"\n    [p-literals]=\"literals\"\n    [p-overlay]=\"true\">\n  </po-upload-drag-drop-area>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PoUploadDragDropAreaOverlayComponent.ctorParameters = () => [
    { type: Renderer2 }
];
PoUploadDragDropAreaOverlayComponent.propDecorators = {
    DragDropAreaFixed: [{ type: ViewChild, args: ['DragDropAreaFixed', { read: ElementRef, static: true },] }],
    directoryCompatible: [{ type: Input, args: ['p-directory-compatible',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    target: [{ type: Input, args: ['p-target',] }],
    areaElement: [{ type: Output, args: ['p-area-element',] }]
};
if (false) {
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.DragDropAreaFixed;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.directoryCompatible;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.disabled;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.literals;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.target;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.areaElement;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropAreaOverlayComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWRyYWctZHJvcC1hcmVhLW92ZXJsYXkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby11cGxvYWQvcG8tdXBsb2FkLWRyYWctZHJvcC9wby11cGxvYWQtZHJhZy1kcm9wLWFyZWEtb3ZlcmxheS9wby11cGxvYWQtZHJhZy1kcm9wLWFyZWEtb3ZlcmxheS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBaUIsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQzlHLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVNqQyxNQUFNLE9BQU8sb0NBQW9DOzs7O0lBYy9DLFlBQW9CLFFBQW1CO1FBQW5CLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGYixnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRXhDLENBQUM7Ozs7SUFFNUMsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7OztJQUVPLFdBQVcsQ0FBQyxhQUF5Qjs7Y0FDckMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRTs7Y0FDeEUsY0FBYyxHQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUM7UUFFNUUsY0FBYyxDQUFDLE9BQU87Ozs7UUFBQyxhQUFhLENBQUMsRUFBRTs7a0JBQy9CLGVBQWUsR0FBRyxrQkFBa0IsQ0FBQyxhQUFhLENBQUM7WUFFekQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxhQUFhLEVBQUUsR0FBRyxlQUFlLElBQUksQ0FBQyxDQUFDO1FBQ3RHLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBckNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0NBQWtDO2dCQUM1Qyx3VUFBOEQ7Z0JBQzlELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7O1lBVG9HLFNBQVM7OztnQ0FZM0csU0FBUyxTQUFDLG1CQUFtQixFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2tDQUVqRSxLQUFLLFNBQUMsd0JBQXdCO3VCQUU5QixLQUFLLFNBQUMsWUFBWTt1QkFFbEIsS0FBSyxTQUFDLFlBQVk7cUJBRWxCLEtBQUssU0FBQyxVQUFVOzBCQUVoQixNQUFNLFNBQUMsZ0JBQWdCOzs7O0lBVnhCLGlFQUFrRzs7SUFFbEcsbUVBQThEOztJQUU5RCx3REFBdUM7O0lBRXZDLHdEQUFnRDs7SUFFaEQsc0RBQXNDOztJQUV0QywyREFBbUY7Ozs7O0lBRXZFLHdEQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgUmVuZGVyZXIyLFxuVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvVXBsb2FkTGl0ZXJhbHMgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL3BvLXVwbG9hZC1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby11cGxvYWQtZHJhZy1kcm9wLWFyZWEtb3ZlcmxheScsXG4gIHRlbXBsYXRlVXJsOiAncG8tdXBsb2FkLWRyYWctZHJvcC1hcmVhLW92ZXJsYXkuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQb1VwbG9hZERyYWdEcm9wQXJlYU92ZXJsYXlDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICBAVmlld0NoaWxkKCdEcmFnRHJvcEFyZWFGaXhlZCcsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiB0cnVlIH0pIERyYWdEcm9wQXJlYUZpeGVkOiBFbGVtZW50UmVmO1xuXG4gIEBJbnB1dCgncC1kaXJlY3RvcnktY29tcGF0aWJsZScpIGRpcmVjdG9yeUNvbXBhdGlibGU6IGJvb2xlYW47XG5cbiAgQElucHV0KCdwLWRpc2FibGVkJykgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgQElucHV0KCdwLWxpdGVyYWxzJykgbGl0ZXJhbHM6IFBvVXBsb2FkTGl0ZXJhbHM7XG5cbiAgQElucHV0KCdwLXRhcmdldCcpIHRhcmdldDogRWxlbWVudFJlZjtcblxuICBAT3V0cHV0KCdwLWFyZWEtZWxlbWVudCcpIGFyZWFFbGVtZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLnRhcmdldCk7XG4gICAgfVxuICAgIHRoaXMuYXJlYUVsZW1lbnQuZW1pdCh0aGlzLkRyYWdEcm9wQXJlYUZpeGVkLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRQb3NpdGlvbih0YXJnZXRFbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gICAgY29uc3QgYm91bmRpbmdDbGllbnRSZWN0ID0gdGFyZ2V0RWxlbWVudC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGNsaWVudFJlY3RLZXlzID0gWydib3R0b20nLCAnbGVmdCcsICdoZWlnaHQnLCAncmlnaHQnLCAndG9wJywgJ3dpZHRoJ107XG5cbiAgICBjbGllbnRSZWN0S2V5cy5mb3JFYWNoKGNsaWVudFJlY3RLZXkgPT4ge1xuICAgICAgY29uc3QgY2xpZW50UmVjdFZhbHVlID0gYm91bmRpbmdDbGllbnRSZWN0W2NsaWVudFJlY3RLZXldO1xuXG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuRHJhZ0Ryb3BBcmVhRml4ZWQubmF0aXZlRWxlbWVudCwgY2xpZW50UmVjdEtleSwgYCR7Y2xpZW50UmVjdFZhbHVlfXB4YCk7XG4gICAgfSk7XG4gIH1cblxufVxuIl19