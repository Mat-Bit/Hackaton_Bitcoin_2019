/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef, Input, IterableDiffers, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { removeDuplicatedOptions } from '../../../utils/util';
import { PoRadioGroupBaseComponent } from './po-radio-group-base.component';
/**
 * \@docsExtends PoRadioGroupBaseComponent
 *
 * \@example
 *
 * <example name="po-radio-group-basic" title="Portinari Radio Group Basic">
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.html"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-labs" title="Portinari Radio Group Labs">
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.html"> </file>
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator" title="Portinari Radio Group - Translator">
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.html"> </file>
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator-reactive-form" title="Portinari Radio Group - Translator Reactive Form">
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.html"> </file>
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.ts"> </file>
 * </example>
 *
 */
export class PoRadioGroupComponent extends PoRadioGroupBaseComponent {
    /**
     * @param {?} differs
     */
    constructor(differs) {
        super();
        this.differ = differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
        }
    }
    /**
     * @param {?} value
     * @param {?} disabled
     * @return {?}
     */
    eventClick(value, disabled) {
        if (!disabled) {
            this.changeValue(value);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRadioGroupComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
     *
     * focusRadio() {
     *   this.radio.focus();
     * }
     * ```
     * @return {?}
     */
    focus() {
        if (this.radioLabels && !this.disabled) {
            /** @type {?} */
            const radioLabel = this.radioLabels.find((/**
             * @param {?} _
             * @param {?} index
             * @return {?}
             */
            (_, index) => !this.options[index].disabled));
            if (radioLabel) {
                radioLabel.nativeElement.focus();
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getElementByValue(value) {
        return this.inputEl.nativeElement.querySelector(`input[value='${value}']`);
    }
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    onKeyUp(event, value) {
        /** @type {?} */
        const key = event.keyCode || event.which;
        if (this.isArrowKey(key)) {
            this.changeValue(value);
        }
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    isArrowKey(key) {
        return key >= 37 && key <= 40;
    }
}
PoRadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-radio-group',
                template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-row po-pt-1 po-pb-1\" #inp>\n    <div *ngFor=\"let option of options\"\n      class=\"po-radio-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\">\n\n      <input #inputRadio\n        class=\"po-radio-group-input\"\n        type=\"radio\"\n        [attr.name]=\"name\"\n        [checked]=\"value === option.value\"\n        [class.po-radio-group-input-checked]=\"value === option.value\"\n        [disabled]=\"option.disabled === true || disabled\"\n        [required]=\"required\"\n        [value]=\"option.value\"\n        (keyup)=\"onKeyUp($event, option.value)\">\n        <label\n          class=\"po-radio-group-label\"\n          [class.po-clickable]=\"!inputRadio.disabled\"\n          [for]=\"name\"\n          (click)=\"eventClick(option.value, option.disabled === true || disabled)\">\n        {{ option.label }}\n      </label>\n    </div>\n  </div>\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PoRadioGroupComponent)),
                        multi: true,
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => PoRadioGroupComponent)),
                        multi: true,
                    }
                ]
            }] }
];
/** @nocollapse */
PoRadioGroupComponent.ctorParameters = () => [
    { type: IterableDiffers }
];
PoRadioGroupComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    help: [{ type: Input, args: ['p-help',] }],
    inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
    radioLabels: [{ type: ViewChildren, args: ['inputRadio',] }]
};
if (false) {
    /**
     * Label do campo.
     * @type {?}
     */
    PoRadioGroupComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoRadioGroupComponent.prototype.help;
    /** @type {?} */
    PoRadioGroupComponent.prototype.inputEl;
    /** @type {?} */
    PoRadioGroupComponent.prototype.radioLabels;
    /** @type {?} */
    PoRadioGroupComponent.prototype.differ;
}
//# sourceMappingURL=data:application/json;base64,