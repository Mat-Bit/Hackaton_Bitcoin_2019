/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isIE } from './../../../../utils/util';
import { PoKeyCodeEnum } from './../../../../enums/po-key-code.enum';
/** @type {?} */
const poRichTextBodyCommands = [
    'bold', 'italic', 'underline', 'justifyleft', 'justifycenter', 'justifyright', 'justifyfull', 'insertUnorderedList', 'Createlink'
];
export class PoRichTextBodyComponent {
    constructor() {
        this.change = new EventEmitter();
        this.commands = new EventEmitter();
        this.shortcutCommand = new EventEmitter();
        this.value = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.bodyElement.nativeElement.designMode = 'on';
        // timeout necessário para setar o valor vindo do writeValue do componente principal.
        setTimeout((/**
         * @return {?}
         */
        () => this.updateValueWithModelValue()));
    }
    /**
     * @param {?} command
     * @return {?}
     */
    executeCommand(command) {
        this.bodyElement.nativeElement.focus();
        if (typeof (command) === 'object') {
            if (command.command === 'InsertHTML') {
                const { command: linkCommand, value: { urlLink }, value: { urlLinkText } } = command;
                this.handleCommandLink(linkCommand, urlLink, urlLinkText);
            }
            else {
                document.execCommand(command.command, false, command.value);
            }
        }
        else {
            document.execCommand(command, false, null);
        }
        this.updateModel();
        this.value.emit(this.modelValue);
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.modelValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout((/**
             * @return {?}
             */
            () => {
                this.change.emit(this.modelValue);
            }), 200);
        }
    }
    /**
     * @return {?}
     */
    focus() {
        this.bodyElement.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.emitSelectionCommands();
    }
    /**
     * @return {?}
     */
    onFocus() {
        this.valueBeforeChange = this.modelValue;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        /** @type {?} */
        const keyL = event.keyCode === PoKeyCodeEnum.keyL;
        if (keyL && event.ctrlKey || keyL && event.metaKey) {
            event.preventDefault();
            this.shortcutCommand.emit();
        }
    }
    /**
     * @return {?}
     */
    onKeyUp() {
        // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
        /** @type {?} */
        const bodyElement = this.bodyElement.nativeElement;
        if (!bodyElement.innerText.trim() && bodyElement.childNodes.length === 1 && bodyElement.querySelector('br')) {
            bodyElement.querySelector('br').remove();
        }
        this.updateModel();
        this.emitSelectionCommands();
    }
    /**
     * @return {?}
     */
    update() {
        setTimeout((/**
         * @return {?}
         */
        () => this.updateModel()));
        setTimeout((/**
         * @return {?}
         */
        () => this.onKeyUp()));
    }
    /**
     * @private
     * @return {?}
     */
    cursorPositionedInALink() {
        /** @type {?} */
        const link = document.getSelection();
        return link.focusNode.parentElement.tagName === 'A';
    }
    /**
     * @private
     * @return {?}
     */
    emitSelectionCommands() {
        /** @type {?} */
        const commands = poRichTextBodyCommands.filter((/**
         * @param {?} command
         * @return {?}
         */
        command => document.queryCommandState(command)));
        /** @type {?} */
        const rgbColor = document.queryCommandValue('ForeColor');
        /** @type {?} */
        const hexColor = this.rgbToHex(rgbColor);
        if (this.cursorPositionedInALink()) {
            commands.push('Createlink');
        }
        this.commands.emit({ commands, hexColor });
    }
    /**
     * @private
     * @param {?} linkCommand
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    handleCommandLink(linkCommand, urlLink, urlLinkText) {
        if (isIE()) {
            this.insertHtmlLinkElement(urlLink, urlLinkText);
        }
        else {
            // necessário '&nbsp;' no fim pois o Firefox mantém o cursor dentro da tag;
            /** @type {?} */
            const linkValue = `<a class="po-rich-text-link" href="${urlLink}" target="_blank">${urlLinkText || urlLink}</a>`;
            document.execCommand(linkCommand, false, linkValue);
        }
    }
    // tratamento específico para IE pois não suporta o comando 'insertHTML'.
    /**
     * @private
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    insertHtmlLinkElement(urlLink, urlLinkText) {
        /** @type {?} */
        const selection = document.getSelection();
        /** @type {?} */
        const selectionRange = selection.getRangeAt(0);
        /** @type {?} */
        const elementLink = document.createElement('a');
        /** @type {?} */
        const elementlinkText = document.createTextNode(urlLinkText);
        elementLink.appendChild(elementlinkText);
        elementLink.href = urlLink;
        elementLink.setAttribute('target', '_blank');
        elementLink.classList.add('po-rich-text-link');
        selectionRange.deleteContents();
        selectionRange.insertNode(elementLink);
    }
    /**
     * @private
     * @param {?} rgb
     * @return {?}
     */
    rgbToHex(rgb) {
        // Tratamento necessário para converter o código rgb para hexadecimal.
        /** @type {?} */
        const sep = rgb.indexOf(',') > -1 ? ',' : ' ';
        rgb = rgb.substr(4).split(')')[0].split(sep);
        /** @type {?} */
        let r = (+rgb[0]).toString(16);
        /** @type {?} */
        let g = (+rgb[1]).toString(16);
        /** @type {?} */
        let b = (+rgb[2]).toString(16);
        if (r.length === 1) {
            r = '0' + r;
        }
        if (g.length === 1) {
            g = '0' + g;
        }
        if (b.length === 1) {
            b = '0' + b;
        }
        return '#' + r + g + b;
    }
    /**
     * @private
     * @return {?}
     */
    updateModel() {
        this.modelValue = this.bodyElement.nativeElement.innerHTML;
        this.value.emit(this.modelValue);
    }
    /**
     * @private
     * @return {?}
     */
    updateValueWithModelValue() {
        if (this.modelValue) {
            this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
        }
    }
}
PoRichTextBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-body',
                template: "<div #bodyElement\n  class=\"po-rich-text-body\"\n  tabindex=\"0\"\n  [attr.contenteditable]=\"!readonly\"\n  [attr.data-placeholder]=\"placeholder\"\n  [style.height.px]=\"height\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (cut)=\"update()\"\n  (focus)=\"onFocus()\"\n  (keydown)=\"onKeyDown($event)\"\n  (keyup)=\"onKeyUp()\"\n  (paste)=\"update()\">\n</div>\n"
            }] }
];
PoRichTextBodyComponent.propDecorators = {
    bodyElement: [{ type: ViewChild, args: ['bodyElement', { static: true },] }],
    height: [{ type: Input, args: ['p-height',] }],
    modelValue: [{ type: Input, args: ['p-model-value',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    readonly: [{ type: Input, args: ['p-readonly',] }],
    change: [{ type: Output, args: ['p-change',] }],
    commands: [{ type: Output, args: ['p-commands',] }],
    shortcutCommand: [{ type: Output, args: ['p-shortcut-command',] }],
    value: [{ type: Output, args: ['p-value',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRichTextBodyComponent.prototype.timeoutChange;
    /**
     * @type {?}
     * @private
     */
    PoRichTextBodyComponent.prototype.valueBeforeChange;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.bodyElement;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.height;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.modelValue;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.placeholder;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.readonly;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.change;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.commands;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.shortcutCommand;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LWJvZHkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1yaWNoLXRleHQvcG8tcmljaC10ZXh0LWJvZHkvcG8tcmljaC10ZXh0LWJvZHkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEcsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7TUFFL0Qsc0JBQXNCLEdBQUc7SUFDN0IsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixFQUFFLFlBQVk7Q0FDbEk7QUFNRCxNQUFNLE9BQU8sdUJBQXVCO0lBSnBDO1FBbUJzQixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUUvQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUUzQixvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFckQsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUEySnJELENBQUM7Ozs7SUF6SkMsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFFakQscUZBQXFGO1FBQ3JGLFVBQVU7OztRQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxFQUFDLENBQUM7SUFDckQsQ0FBQzs7Ozs7SUFFRCxjQUFjLENBQUMsT0FBeUQ7UUFDdEUsSUFBSSxD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LGtEQUF3RTs7SUFFeEUsd0NBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzSUUgfSBmcm9tICcuLy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9LZXlDb2RlRW51bSB9IGZyb20gJy4vLi4vLi4vLi4vLi4vZW51bXMvcG8ta2V5LWNvZGUuZW51bSc7XG5cbmNvbnN0IHBvUmljaFRleHRCb2R5Q29tbWFuZHMgPSBbXG4gICdib2xkJywgJ2l0YWxpYycsICd1bmRlcmxpbmUnLCAnanVzdGlmeWxlZnQnLCAnanVzdGlmeWNlbnRlcicsICdqdXN0aWZ5cmlnaHQnLCAnanVzdGlmeWZ1bGwnLCAnaW5zZXJ0VW5vcmRlcmVkTGlzdCcsICdDcmVhdGVsaW5rJ1xuXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tcmljaC10ZXh0LWJvZHknLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tcmljaC10ZXh0LWJvZHkuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvUmljaFRleHRCb2R5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwcml2YXRlIHRpbWVvdXRDaGFuZ2U6IGFueTtcbiAgcHJpdmF0ZSB2YWx1ZUJlZm9yZUNoYW5nZTogYW55O1xuXG4gIEBWaWV3Q2hpbGQoJ2JvZHlFbGVtZW50JywgeyBzdGF0aWM6IHRydWUgfSkgYm9keUVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgQElucHV0KCdwLWhlaWdodCcpIGhlaWdodD86IHN0cmluZztcblxuICBASW5wdXQoJ3AtbW9kZWwtdmFsdWUnKSBtb2RlbFZhbHVlPzogc3RyaW5nO1xuXG4gIEBJbnB1dCgncC1wbGFjZWhvbGRlcicpIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuXG4gIEBJbnB1dCgncC1yZWFkb25seScpIHJlYWRvbmx5Pzogc3RyaW5nO1xuXG4gIEBPdXRwdXQoJ3AtY2hhbmdlJykgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgncC1jb21tYW5kcycpIGNvbW1hbmRzID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgncC1zaG9ydGN1dC1jb21tYW5kJykgc2hvcnRjdXRDb21tYW5kID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgncC12YWx1ZScpIHZhbHVlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5ib2R5RWxlbWVudC5uYXRpdmVFbGVtZW50LmRlc2lnbk1vZGUgPSAnb24nO1xuXG4gICAgLy8gdGltZW91dCBuZWNlc3PDoXJpbyBwYXJhIHNldGFyIG8gdmFsb3IgdmluZG8gZG8gd3JpdGVWYWx1ZSBkbyBjb21wb25lbnRlIHByaW5jaXBhbC5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudXBkYXRlVmFsdWVXaXRoTW9kZWxWYWx1ZSgpKTtcbiAgfVxuXG4gIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IChzdHJpbmcgfCB7IGNvbW1hbmQ6IGFueSwgdmFsdWU6IHN0cmluZyB8IGFueSB9KSkge1xuICAgIHRoaXMuYm9keUVsZW1lbnQubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXG4gICAgaWYgKHR5cGVvZiAoY29tbWFuZCkgPT09ICdvYmplY3QnKSB7XG5cbiAgICAgIGlmIChjb21tYW5kLmNvbW1hbmQgPT09ICdJbnNlcnRIVE1MJykge1xuICAgICAgICBjb25zdCB7IGNvbW1hbmQ6IGxpbmtDb21tYW5kLCB2YWx1ZSA6IHsgdXJsTGluayB9LCB2YWx1ZSA6IHsgdXJsTGlua1RleHR9IH0gPSBjb21tYW5kO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlQ29tbWFuZExpbmsobGlua0NvbW1hbmQsIHVybExpbmssIHVybExpbmtUZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKGNvbW1hbmQuY29tbWFuZCwgZmFsc2UsIGNvbW1hbmQudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChjb21tYW5kLCBmYWxzZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVNb2RlbCgpO1xuICAgIHRoaXMudmFsdWUuZW1pdCh0aGlzLm1vZGVsVmFsdWUpO1xuICB9XG5cbiAgb25CbHVyKCkge1xuICAgIGlmICh0aGlzLm1vZGVsVmFsdWUgIT09IHRoaXMudmFsdWVCZWZvcmVDaGFuZ2UpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRDaGFuZ2UpO1xuICAgICAgdGhpcy50aW1lb3V0Q2hhbmdlID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuY2hhbmdlLmVtaXQodGhpcy5tb2RlbFZhbHVlKTtcbiAgICAgIH0sIDIwMCk7XG4gICAgfVxuICB9XG5cbiAgZm9jdXMoKTogdm9pZCB7XG4gICAgdGhpcy5ib2R5RWxlbWVudC5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG4gIH1cblxuICBvbkNsaWNrKCkge1xuICAgIHRoaXMuZW1pdFNlbGVjdGlvbkNvbW1hbmRzKCk7XG4gIH1cblxuICBvbkZvY3VzKCkge1xuICAgIHRoaXMudmFsdWVCZWZvcmVDaGFuZ2UgPSB0aGlzLm1vZGVsVmFsdWU7XG4gIH1cblxuICBvbktleURvd24oZXZlbnQpIHtcbiAgICBjb25zdCBrZXlMID0gZXZlbnQua2V5Q29kZSA9PT0gUG9LZXlDb2RlRW51bS5rZXlMO1xuXG4gICAgaWYgKGtleUwgJiYgZXZlbnQuY3RybEtleSB8fCBrZXlMICYmIGV2ZW50Lm1ldGFLZXkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnNob3J0Y3V0Q29tbWFuZC5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgb25LZXlVcCgpIHtcbiAgICAvLyBUcmF0YW1lbnRvIG5lY2Vzc8OhcmlvIHBhcmEgZWxpbWluYXIgYSB0YWcgPGJyPiBjcmlhZGEgbm8gZmlyZWZveCBxdWFuZG8gbyBib2R5IGZvciBsaW1wby5cbiAgICBjb25zdCBib2R5RWxlbWVudCA9IHRoaXMuYm9keUVsZW1lbnQubmF0aXZlRWxlbWVudDtcblxuICAgIGlmICghYm9keUVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKSAmJiBib2R5RWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiBib2R5RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdicicpKSB7XG4gICAgICBib2R5RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdicicpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlTW9kZWwoKTtcbiAgICB0aGlzLmVtaXRTZWxlY3Rpb25Db21tYW5kcygpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVNb2RlbCgpKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMub25LZXlVcCgpKTtcbiAgfVxuXG4gIHByaXZhdGUgY3Vyc29yUG9zaXRpb25lZEluQUxpbmsoKSB7XG4gICAgY29uc3QgbGluayA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuXG4gICAgcmV0dXJuIGxpbmsuZm9jdXNOb2RlLnBhcmVudEVsZW1lbnQudGFnTmFtZSA9PT0gJ0EnO1xuICB9XG5cbiAgcHJpdmF0ZSBlbWl0U2VsZWN0aW9uQ29tbWFuZHMoKSB7XG4gICAgY29uc3QgY29tbWFuZHMgPSBwb1JpY2hUZXh0Qm9keUNvbW1hbmRzLmZpbHRlcihjb21tYW5kID0+IGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKGNvbW1hbmQpKTtcbiAgICBjb25zdCByZ2JDb2xvciA9IGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFZhbHVlKCdGb3JlQ29sb3InKTtcbiAgICBjb25zdCBoZXhDb2xvciA9IHRoaXMucmdiVG9IZXgocmdiQ29sb3IpO1xuXG4gICAgaWYgKHRoaXMuY3Vyc29yUG9zaXRpb25lZEluQUxpbmsoKSkge1xuICAgICAgY29tbWFuZHMucHVzaCgnQ3JlYXRlbGluaycpO1xuICAgIH1cblxuICAgIHRoaXMuY29tbWFuZHMuZW1pdCh7Y29tbWFuZHMsIGhleENvbG9yfSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNvbW1hbmRMaW5rKGxpbmtDb21tYW5kOiBzdHJpbmcsIHVybExpbms6IHN0cmluZywgdXJsTGlua1RleHQ6IHN0cmluZykge1xuICAgIGlmIChpc0lFKCkpIHtcbiAgICAgIHRoaXMuaW5zZXJ0SHRtbExpbmtFbGVtZW50KHVybExpbmssIHVybExpbmtUZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbmVjZXNzw6FyaW8gJyZuYnNwOycgbm8gZmltIHBvaXMgbyBGaXJlZm94IG1hbnTDqW0gbyBjdXJzb3IgZGVudHJvIGRhIHRhZztcbiAgICAgIGNvbnN0IGxpbmtWYWx1ZSA9IGA8YSBjbGFzcz1cInBvLXJpY2gtdGV4dC1saW5rXCIgaHJlZj1cIiR7dXJsTGlua31cIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke3VybExpbmtUZXh0IHx8IHVybExpbmt9PC9hPmA7XG5cbiAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKGxpbmtDb21tYW5kLCBmYWxzZSwgbGlua1ZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvLyB0cmF0YW1lbnRvIGVzcGVjw61maWNvIHBhcmEgSUUgcG9pcyBuw6NvIHN1cG9ydGEgbyBjb21hbmRvICdpbnNlcnRIVE1MJy5cbiAgcHJpdmF0ZSBpbnNlcnRIdG1sTGlua0VsZW1lbnQodXJsTGluazogc3RyaW5nLCB1cmxMaW5rVGV4dDogc3RyaW5nKSB7XG4gICAgY29uc3TCoHNlbGVjdGlvbsKgPcKgZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgY29uc3Qgc2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgICBjb25zdCBlbGVtZW50TGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBjb25zdCBlbGVtZW50bGlua1RleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh1cmxMaW5rVGV4dCk7XG5cbiAgICBlbGVtZW50TGluay5hcHBlbmRDaGlsZChlbGVtZW50bGlua1RleHQpO1xuICAgIGVsZW1lbnRMaW5rLmhyZWYgPSB1cmxMaW5rO1xuICAgIGVsZW1lbnRMaW5rLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgJ19ibGFuaycpO1xuICAgIGVsZW1lbnRMaW5rLmNsYXNzTGlzdC5hZGQoJ3BvLXJpY2gtdGV4dC1saW5rJyk7XG5cbiAgICBzZWxlY3Rpb25SYW5nZS5kZWxldGVDb250ZW50cygpO1xuICAgIHNlbGVjdGlvblJhbmdlLmluc2VydE5vZGUoZWxlbWVudExpbmspO1xuICB9XG5cbiAgcHJpdmF0ZSByZ2JUb0hleChyZ2IpIHtcbiAgICAvLyBUcmF0YW1lbnRvIG5lY2Vzc8OhcmlvIHBhcmEgY29udmVydGVyIG8gY8OzZGlnbyByZ2IgcGFyYSBoZXhhZGVjaW1hbC5cbiAgICBjb25zdCBzZXAgPSByZ2IuaW5kZXhPZignLCcpID4gLTEgPyAnLCcgOiAnICc7XG4gICAgcmdiID0gcmdiLnN1YnN0cig0KS5zcGxpdCgnKScpWzBdLnNwbGl0KHNlcCk7XG5cbiAgICBsZXQgciA9ICgrcmdiWzBdKS50b1N0cmluZygxNik7XG4gICAgbGV0IGcgPSAoK3JnYlsxXSkudG9TdHJpbmcoMTYpO1xuICAgIGxldCBiID0gKCtyZ2JbMl0pLnRvU3RyaW5nKDE2KTtcblxuICAgIGlmIChyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgciA9ICcwJyArIHI7XG4gICAgfVxuICAgIGlmIChnLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZyA9ICcwJyArIGc7XG4gICAgfVxuICAgIGlmIChiLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYiA9ICcwJyArIGI7XG4gICAgfVxuXG4gICAgcmV0dXJuICcjJyArIHIgKyBnICsgYjtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTW9kZWwoKSB7XG4gICAgdGhpcy5tb2RlbFZhbHVlID0gdGhpcy5ib2R5RWxlbWVudC5uYXRpdmVFbGVtZW50LmlubmVySFRNTDtcblxuICAgIHRoaXMudmFsdWUuZW1pdCh0aGlzLm1vZGVsVmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVWYWx1ZVdpdGhNb2RlbFZhbHVlKCkge1xuICAgIGlmICh0aGlzLm1vZGVsVmFsdWUpIHtcbiAgICAgIHRoaXMuYm9keUVsZW1lbnQubmF0aXZlRWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCB0aGlzLm1vZGVsVmFsdWUpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=