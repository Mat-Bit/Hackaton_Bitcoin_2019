/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isMobile, setYearFrom0To100, validateDateRange } from '../../../../utils/util';
import { PoCalendarLangService } from './po-calendar.lang.service';
import { PoCalendarService } from './po-calendar.service';
/** @type {?} */
const poCalendarLocaleDefault = 'pt';
/** @type {?} */
const poCalendarLocales = ['pt', 'en', 'es'];
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendário de uso interno
 */
export class PoCalendarComponent {
    /**
     * @param {?} poCalendarService
     * @param {?} poCalendarLangService
     */
    constructor(poCalendarService, poCalendarLangService) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.monthVisible = false;
        this.overlayInvisible = true;
        this.visible = false;
        this.yearVisible = false;
        this.isMobile = isMobile;
        this.today = new Date();
        this.selectedDateChange = new EventEmitter();
        this.submit = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Data máxima possível de ser selecionada no calendário.
     * @param {?} val
     * @return {?}
     */
    set dateEnd(val) {
        if (val && val instanceof Date) {
            /** @type {?} */
            const year = val.getFullYear();
            /** @type {?} */
            const month = val.getMonth();
            /** @type {?} */
            const day = val.getDate();
            /** @type {?} */
            const date = new Date(year, month, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            this._dateEnd = date;
        }
        else {
            this._dateEnd = undefined;
        }
    }
    /**
     * @return {?}
     */
    get dateEnd() {
        return this._dateEnd;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     * @param {?} locale
     * @return {?}
     */
    set locale(locale) {
        this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
        this.initializeLanguage();
    }
    /**
     * @return {?}
     */
    get locale() {
        return this._locale;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Data selecionada no calendário.
     * @param {?} selectedDate
     * @return {?}
     */
    set selectedDate(selectedDate) {
        this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
    }
    /**
     * @return {?}
     */
    get selectedDate() {
        return this._selectedDate;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Data mínima possível de ser selecionada no calendário.
     * @param {?} val
     * @return {?}
     */
    set dateStart(val) {
        if (val && val instanceof Date) {
            /** @type {?} */
            const year = val.getFullYear();
            /** @type {?} */
            const month = val.getMonth();
            /** @type {?} */
            const day = val.getDate();
            /** @type {?} */
            const date = new Date(year, month, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            this._dateStart = date;
        }
        else {
            this._dateStart = undefined;
        }
    }
    /**
     * @return {?}
     */
    get dateStart() {
        return this._dateStart;
    }
    /**
     * @return {?}
     */
    close() {
        this.overlayInvisible = true;
        this.visible = false;
    }
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    getArrayDecade(year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    }
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    getBackgroundColor(displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayBackgroundColor(date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-background-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-background-today';
        }
        else if (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-background';
            }
            else {
                return 'po-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayForegroundColor(date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-foreground-today';
        }
        else {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-foreground';
            }
            else {
                return 'po-calendar-box-foreground-disabled';
            }
        }
    }
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    getForegroundColor(displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    }
    /**
     * @return {?}
     */
    getWordMonth() {
        return this.poCalendarLangService.getWordMonth();
    }
    /**
     * @return {?}
     */
    getWordYear() {
        return this.poCalendarLangService.getWordYear();
    }
    /**
     * @return {?}
     */
    init() {
        this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
        if (this.isMobile()) {
            this.overlayInvisible = false;
        }
        this.visible = true;
    }
    /**
     * @return {?}
     */
    initializeLanguage() {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.poCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.poCalendarLangService.getArrayMonths();
    }
    /**
     * @return {?}
     */
    onNextMonth() {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    }
    /**
     * @return {?}
     */
    onPrevMonth() {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    }
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    onSelectDate(date) {
        if (validateDateRange(date, this.dateStart, this.dateEnd)) {
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.submit.emit(date);
        }
    }
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    onSelectMonth(year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    }
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    onSelectYear(year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    }
    /**
     * @return {?}
     */
    selectDay() {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    }
    /**
     * @return {?}
     */
    selectMonth() {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    }
    /**
     * @return {?}
     */
    selectYear() {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    }
    /**
     * @return {?}
     */
    setMobileVisualization() {
        return this.isMobile() ? 'po-calendar po-calendar-mobile' : 'po-calendar';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateYear(value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    }
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    addAllYearsInDecade(year) {
        /** @type {?} */
        let i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    }
    /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    equalsDate(date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    updateDate(date) {
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    }
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    updateDecade(year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    }
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    updateDisplay(year, month) {
        /** @type {?} */
        const calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    }
}
PoCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-calendar',
                template: "<div class=\"po-calendar-overlay\" [class.po-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\" class=\"po-calendar-day po-calendar-box-background\" (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"po-calendar-month\"\n        (click)=\"onSelectMonth(displayYear, i)\"\n        [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span (click)=\"updateYear(10)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"po-calendar-year\"\n        (click)=\"onSelectYear(year, displayMonthNumber)\"\n        [ngClass]=\"getBackgroundColor(year, currentYear)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                providers: [PoCalendarService, PoCalendarLangService]
            }] }
];
/** @nocollapse */
PoCalendarComponent.ctorParameters = () => [
    { type: PoCalendarService },
    { type: PoCalendarLangService }
];
PoCalendarComponent.propDecorators = {
    elDays: [{ type: ViewChild, args: ['days', { read: ElementRef, static: true },] }],
    elMonths: [{ type: ViewChild, args: ['months', { read: ElementRef, static: true },] }],
    elYears: [{ type: ViewChild, args: ['years', { read: ElementRef, static: true },] }],
    dateEnd: [{ type: Input, args: ['p-date-end',] }],
    locale: [{ type: Input, args: ['p-locale',] }],
    selectedDate: [{ type: Input, args: ['p-selected-date',] }],
    dateStart: [{ type: Input, args: ['p-date-start',] }],
    selectedDateChange: [{ type: Output, args: ['p-selected-dateChange',] }],
    submit: [{ type: Output, args: ['p-submit',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype._dateEnd;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype._dateStart;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype._selectedDate;
    /** @type {?} */
    PoCalendarComponent.prototype.currentYear;
    /** @type {?} */
    PoCalendarComponent.prototype.dayVisible;
    /** @type {?} */
    PoCalendarComponent.prototype.displayDays;
    /** @type {?} */
    PoCalendarComponent.prototype.displayDecade;
    /** @type {?} */
    PoCalendarComponent.prototype.displayFinalDecade;
    /** @type {?} */
    PoCalendarComponent.prototype.displayMonth;
    /** @type {?} */
    PoCalendarComponent.prototype.displayMonthNumber;
    /** @type {?} */
    PoCalendarComponent.prototype.displayMonths;
    /** @type {?} */
    PoCalendarComponent.prototype.displayStartDecade;
    /** @type {?} */
    PoCalendarComponent.prototype.displayWeedDays;
    /** @type {?} */
    PoCalendarComponent.prototype.displayYear;
    /** @type {?} */
    PoCalendarComponent.prototype.monthVisible;
    /** @type {?} */
    PoCalendarComponent.prototype.overlayInvisible;
    /** @type {?} */
    PoCalendarComponent.prototype.visible;
    /** @type {?} */
    PoCalendarComponent.prototype.yearVisible;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.currentMonthNumber;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.isMobile;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.lastDisplay;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.today;
    /** @type {?} */
    PoCalendarComponent.prototype.elDays;
    /** @type {?} */
    PoCalendarComponent.prototype.elMonths;
    /** @type {?} */
    PoCalendarComponent.prototype.elYears;
    /** @type {?} */
    PoCalendarComponent.prototype.selectedDateChange;
    /** @type {?} */
    PoCalendarComponent.prototype.submit;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.poCalendarService;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.poCalendarLangService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1kYXRlcGlja2VyL3BvLWNhbGVuZGFyL3BvLWNhbGVuZGFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlGLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7TUFFcEQsdUJBQXVCLEdBQUcsSUFBSTs7TUFDOUIsaUJBQWlCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQzs7Ozs7Ozs7QUFjNUMsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7SUF1SDlCLFlBQ1UsaUJBQW9DLEVBQ3BDLHFCQUE0QztRQUQ1QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFqSHRELGVBQVUsR0FBWSxLQUFLLENBQUM7UUFNNUIsa0JBQWEsR0FBZSxLQUFLLEVBQUUsQ0FBQztRQUVwQyxvQkFBZSxHQUFlLEtBQUssRUFBRSxDQUFDO1FBRXRDLGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBQzlCLHFCQUFnQixHQUFZLElBQUksQ0FBQztRQUNqQyxZQUFPLEdBQVksS0FBSyxDQUFDO1FBQ3pCLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBR3JCLGFBQVEsR0FBUSxRQUFRLENBQUM7UUFFekIsVUFBSyxH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SUFDcEIseUNBQTRCOztJQUM1QiwwQ0FBMkI7O0lBQzNCLDRDQUE2Qjs7SUFDN0IsaURBQTJCOztJQUMzQiwyQ0FBa0I7O0lBQ2xCLGlEQUEyQjs7SUFDM0IsNENBQW9DOztJQUNwQyxpREFBMkI7O0lBQzNCLDhDQUFzQzs7SUFDdEMsMENBQW9COztJQUNwQiwyQ0FBOEI7O0lBQzlCLCtDQUFpQzs7SUFDakMsc0NBQXlCOztJQUN6QiwwQ0FBNkI7Ozs7O0lBRTdCLGlEQUFtQzs7Ozs7SUFDbkMsdUNBQWlDOzs7OztJQUNqQywwQ0FBNEI7Ozs7O0lBQzVCLG9DQUFpQzs7SUFFakMscUNBQTBFOztJQUMxRSx1Q0FBOEU7O0lBQzlFLHNDQUE0RTs7SUFzRjVFLGlEQUErRTs7SUFDL0UscUNBQXNEOzs7OztJQUdwRCxnREFBNEM7Ozs7O0lBQzVDLG9EQUFvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgaXNNb2JpbGUsIHNldFllYXJGcm9tMFRvMTAwLCB2YWxpZGF0ZURhdGVSYW5nZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9DYWxlbmRhckxhbmdTZXJ2aWNlIH0gZnJvbSAnLi9wby1jYWxlbmRhci5sYW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9DYWxlbmRhclNlcnZpY2UgfSBmcm9tICcuL3BvLWNhbGVuZGFyLnNlcnZpY2UnO1xuXG5jb25zdCBwb0NhbGVuZGFyTG9jYWxlRGVmYXVsdCA9ICdwdCc7XG5jb25zdCBwb0NhbGVuZGFyTG9jYWxlcyA9IFsncHQnLCAnZW4nLCAnZXMnXTtcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIGRlIGNhbGVuZMOhcmlvIGRlIHVzbyBpbnRlcm5vXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWNhbGVuZGFyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWNhbGVuZGFyLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbUG9DYWxlbmRhclNlcnZpY2UsIFBvQ2FsZW5kYXJMYW5nU2VydmljZSBdXG59KVxuZXhwb3J0IGNsYXNzIFBvQ2FsZW5kYXJDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2RhdGVFbmQ6IERhdGU7XG4gIHByaXZhdGUgX2RhdGVTdGFydDogRGF0ZTtcbiAgcHJpdmF0ZSBfbG9jYWxlOiBzdHJpbmc7XG4gIHByaXZhdGUgX3NlbGVjdGVkRGF0ZT86IERhdGU7XG5cbiAgY3VycmVudFllYXI6IG51bWJlcjtcbiAgZGF5VmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBkaXNwbGF5RGF5czogQXJyYXk8bnVtYmVyPjtcbiAgZGlzcGxheURlY2FkZTogQXJyYXk8bnVtYmVyPjtcbiAgZGlzcGxheUZpbmFsRGVjYWRlOiBudW1iZXI7XG4gIGRpc3BsYXlNb250aDogYW55O1xuICBkaXNwbGF5TW9udGhOdW1iZXI6IG51bWJlcjtcbiAgZGlzcGxheU1vbnRoczogQXJyYXk8YW55PiA9IEFycmF5KCk7XG4gIGRpc3BsYXlTdGFydERlY2FkZTogbnVtYmVyO1xuICBkaXNwbGF5V2VlZERheXM6IEFycmF5PGFueT4gPSBBcnJheSgpO1xuICBkaXNwbGF5WWVhcjogbnVtYmVyO1xuICBtb250aFZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgb3ZlcmxheUludmlzaWJsZTogYm9vbGVhbiA9IHRydWU7XG4gIHZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgeWVhclZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIGN1cnJlbnRNb250aE51bWJlcjogbnVtYmVyO1xuICBwcml2YXRlIGlzTW9iaWxlOiBhbnkgPSBpc01vYmlsZTtcbiAgcHJpdmF0ZSBsYXN0RGlzcGxheTogc3RyaW5nO1xuICBwcml2YXRlIHRvZGF5OiBEYXRlID0gbmV3IERhdGUoKTtcblxuICBAVmlld0NoaWxkKCdkYXlzJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgZWxEYXlzOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdtb250aHMnLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSBlbE1vbnRoczogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgneWVhcnMnLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSBlbFllYXJzOiBFbGVtZW50UmVmO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERhdGEgbcOheGltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhIG5vIGNhbGVuZMOhcmlvLlxuICAgKi9cbiAgQElucHV0KCdwLWRhdGUtZW5kJykgc2V0IGRhdGVFbmQodmFsOiBEYXRlKSB7XG4gICAgaWYgKHZhbCAmJiB2YWwgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICBjb25zdCB5ZWFyID0gdmFsLmdldEZ1bGxZZWFyKCk7XG4gICAgICBjb25zdCBtb250aCA9IHZhbC5nZXRNb250aCgpO1xuICAgICAgY29uc3QgZGF5ID0gdmFsLmdldERhdGUoKTtcblxuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXksIDIzLCA1OSwgNTkpO1xuICAgICAgc2V0WWVhckZyb20wVG8xMDAoZGF0ZSwgeWVhcik7XG5cbiAgICAgIHRoaXMuX2RhdGVFbmQgPSBkYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kYXRlRW5kID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBnZXQgZGF0ZUVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0ZUVuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIElkaW9tYSBkbyBjYWxlbmTDoXJpby5cbiAgICpcbiAgICogVmFsb3JlcyB2w6FsaWRvczpcbiAgICogIC0gYHB0YFxuICAgKiAgLSBgZW5gXG4gICAqICAtIGBlc2BcbiAgICovXG4gIEBJbnB1dCgncC1sb2NhbGUnKSBzZXQgbG9jYWxlKGxvY2FsZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fbG9jYWxlID0gcG9DYWxlbmRhckxvY2FsZXMuaW5jbHVkZXMobG9jYWxlKSA/IGxvY2FsZSA6IHBvQ2FsZW5kYXJMb2NhbGVEZWZhdWx0O1xuICAgIHRoaXMuaW5pdGlhbGl6ZUxhbmd1YWdlKCk7XG4gIH1cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGF0YSBzZWxlY2lvbmFkYSBubyBjYWxlbmTDoXJpby5cbiAgICovXG4gIEBJbnB1dCgncC1zZWxlY3RlZC1kYXRlJykgc2V0IHNlbGVjdGVkRGF0ZShzZWxlY3RlZERhdGU6IERhdGUpIHtcbiAgICB0aGlzLl9zZWxlY3RlZERhdGUgID0gc2VsZWN0ZWREYXRlICYmIHNlbGVjdGVkRGF0ZSBpbnN0YW5jZW9mIERhdGUgPyBzZWxlY3RlZERhdGUgOiB1bmRlZmluZWQ7XG4gIH1cbiAgZ2V0IHNlbGVjdGVkRGF0ZSgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWREYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGF0YSBtw61uaW1hIHBvc3PDrXZlbCBkZSBzZXIgc2VsZWNpb25hZGEgbm8gY2FsZW5kw6FyaW8uXG4gICAqL1xuICBASW5wdXQoJ3AtZGF0ZS1zdGFydCcpIHNldCBkYXRlU3RhcnQodmFsOiBEYXRlKSB7XG4gICAgaWYgKHZhbCAmJiB2YWwgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICBjb25zdCB5ZWFyID0gdmFsLmdldEZ1bGxZZWFyKCk7XG4gICAgICBjb25zdCBtb250aCA9IHZhbC5nZXRNb250aCgpO1xuICAgICAgY29uc3QgZGF5ID0gdmFsLmdldERhdGUoKTtcblxuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXksIDAsIDAsIDApO1xuICAgICAgc2V0WWVhckZyb20wVG8xMDAoZGF0ZSwgeWVhcik7XG5cbiAgICAgIHRoaXMuX2RhdGVTdGFydCA9IGRhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RhdGVTdGFydCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgZ2V0IGRhdGVTdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0ZVN0YXJ0O1xuICB9XG5cbiAgQE91dHB1dCgncC1zZWxlY3RlZC1kYXRlQ2hhbmdlJykgc2VsZWN0ZWREYXRlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxEYXRlPigpO1xuICBAT3V0cHV0KCdwLXN1Ym1pdCcpIHN1Ym1pdCA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0ZT4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHBvQ2FsZW5kYXJTZXJ2aWNlOiBQb0NhbGVuZGFyU2VydmljZSxcbiAgICBwcml2YXRlIHBvQ2FsZW5kYXJMYW5nU2VydmljZTogUG9DYWxlbmRhckxhbmdTZXJ2aWNlKSB7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLm92ZXJsYXlJbnZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgLy8gT2J0w6ltIHVtIGFycmF5IGRlIHRvZG9zIG9zIGFub3MgZGVzdGEgZMOpY2FkYVxuICBnZXRBcnJheURlY2FkZSh5ZWFyKSB7XG4gICAgdGhpcy5kaXNwbGF5RGVjYWRlID0gQXJyYXkoKTtcblxuICAgIGlmICh5ZWFyICUgMTAgIT09IDApIHtcbiAgICAgIHdoaWxlICh5ZWFyICUgMTAgIT09IDApIHtcbiAgICAgICAgeWVhci0tO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnVwZGF0ZURlY2FkZSh5ZWFyKTtcbiAgfVxuXG4gIGdldEJhY2tncm91bmRDb2xvcihkaXNwbGF5VmFsdWU6IG51bWJlciwgcHJvcGVydHlWYWx1ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChkaXNwbGF5VmFsdWUgPT09IHByb3BlcnR5VmFsdWUpID8gJ3BvLWNhbGVuZGFyLWJveC1iYWNrZ3JvdW5kLXNlbGVjdGVkJyA6ICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZCc7XG4gIH1cblxuICBnZXREYXlCYWNrZ3JvdW5kQ29sb3IoZGF0ZTogRGF0ZSkge1xuICAgIGlmICh0aGlzLmVxdWFsc0RhdGUoZGF0ZSwgdGhpcy5zZWxlY3RlZERhdGUpKSB7XG4gICAgICByZXR1cm4gJ3BvLWNhbGVuZGFyLWJveC1iYWNrZ3JvdW5kLXNlbGVjdGVkJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXF1YWxzRGF0ZShkYXRlLCB0aGlzLnRvZGF5KSkge1xuICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC10b2RheSc7XG4gICAgfSBlbHNlIGlmIChkYXRlKSB7XG4gICAgICBpZiAodmFsaWRhdGVEYXRlUmFuZ2UoZGF0ZSwgdGhpcy5kYXRlU3RhcnQsIHRoaXMuZGF0ZUVuZCkpIHtcbiAgICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3BvLWNhbGVuZGFyLWJveC1iYWNrZ3JvdW5kLWRpc2FibGVkJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIGdldERheUZvcmVncm91bmRDb2xvcihkYXRlOiBEYXRlKSB7XG4gICAgaWYgKHRoaXMuZXF1YWxzRGF0ZShkYXRlLCB0aGlzLnNlbGVjdGVkRGF0ZSkpIHtcbiAgICAgIHJldHVybiAncG8tY2FsZW5kYXItYm94LWZvcmVncm91bmQtc2VsZWN0ZWQnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lcXVhbHNEYXRlKGRhdGUsIHRoaXMudG9kYXkpKSB7XG4gICAgICByZXR1cm4gJ3BvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXRvZGF5JztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZhbGlkYXRlRGF0ZVJhbmdlKGRhdGUsIHRoaXMuZGF0ZVN0YXJ0LCB0aGlzLmRhdGVFbmQpKSB7XG4gICAgICAgIHJldHVybiAncG8tY2FsZW5kYXItYm94LWZvcmVncm91bmQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtZm9yZWdyb3VuZC1kaXNhYmxlZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0Rm9yZWdyb3VuZENvbG9yKGRpc3BsYXlWYWx1ZTogbnVtYmVyLCBwcm9wZXJ0eVZhbHVlOiBudW1iZXIpIHtcbiAgICByZXR1cm4gKGRpc3BsYXlWYWx1ZSA9PT0gcHJvcGVydHlWYWx1ZSkgPyAncG8tY2FsZW5kYXItYm94LWZvcmVncm91bmQtc2VsZWN0ZWQnIDogJ3BvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kJztcbiAgfVxuXG4gIGdldFdvcmRNb250aCgpIHtcbiAgICByZXR1cm4gdGhpcy5wb0NhbGVuZGFyTGFuZ1NlcnZpY2UuZ2V0V29yZE1vbnRoKCk7XG4gIH1cblxuICBnZXRXb3JkWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5wb0NhbGVuZGFyTGFuZ1NlcnZpY2UuZ2V0V29yZFllYXIoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5zZWxlY3RlZERhdGUgPyB0aGlzLnVwZGF0ZURhdGUodGhpcy5zZWxlY3RlZERhdGUpIDogdGhpcy51cGRhdGVEYXRlKHRoaXMudG9kYXkpO1xuXG4gICAgdGhpcy5pbml0aWFsaXplTGFuZ3VhZ2UoKTtcblxuICAgIHRoaXMuc2VsZWN0RGF5KCk7XG5cbiAgICBpZiAodGhpcy5pc01vYmlsZSgpKSB7XG4gICAgICB0aGlzLm92ZXJsYXlJbnZpc2libGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICB9XG5cbiAgaW5pdGlhbGl6ZUxhbmd1YWdlKCkge1xuICAgIHRoaXMucG9DYWxlbmRhckxhbmdTZXJ2aWNlLnNldExhbmd1YWdlKHRoaXMubG9jYWxlKTtcbiAgICB0aGlzLmRpc3BsYXlXZWVkRGF5cyA9IHRoaXMucG9DYWxlbmRhckxhbmdTZXJ2aWNlLmdldEFycmF5V2Vla0RheXMoKTtcbiAgICB0aGlzLmRpc3BsYXlNb250aHMgPSB0aGlzLnBvQ2FsZW5kYXJMYW5nU2VydmljZS5nZXRBcnJheU1vbnRocygpO1xuICB9XG5cbiAgb25OZXh0TW9udGgoKSB7XG4gICAgaWYgKHRoaXMuZGlzcGxheU1vbnRoTnVtYmVyIDwgMTEpIHtcbiAgICAgIHRoaXMudXBkYXRlRGlzcGxheSh0aGlzLmRpc3BsYXlZZWFyLCB0aGlzLmRpc3BsYXlNb250aE51bWJlciArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5kaXNwbGF5WWVhciArIDEsIDApO1xuICAgIH1cbiAgfVxuXG4gIG9uUHJldk1vbnRoKCkge1xuICAgIGlmICh0aGlzLmRpc3BsYXlNb250aE51bWJlciA+IDApIHtcbiAgICAgIHRoaXMudXBkYXRlRGlzcGxheSh0aGlzLmRpc3BsYXlZZWFyLCB0aGlzLmRpc3BsYXlNb250aE51bWJlciAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5kaXNwbGF5WWVhciAtIDEsIDExKTtcbiAgICB9XG4gIH1cblxuICAvLyBBbyBzZWxlY2lvbmFyIHVtYSBkYXRhXG4gIG9uU2VsZWN0RGF0ZShkYXRlOiBEYXRlKSB7XG4gICAgaWYgKHZhbGlkYXRlRGF0ZVJhbmdlKGRhdGUsIHRoaXMuZGF0ZVN0YXJ0LCB0aGlzLmRhdGVFbmQpKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IGRhdGU7XG4gICAgICB0aGlzLnNlbGVjdGVkRGF0ZUNoYW5nZS5lbWl0KGRhdGUpO1xuICAgICAgdGhpcy5zdWJtaXQuZW1pdChkYXRlKTtcbiAgICB9XG4gIH1cblxuICAvLyBBbyBzZWxlY2lvbmFyIHVtIG3DqnNcbiAgb25TZWxlY3RNb250aCh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpIHtcbiAgICB0aGlzLnNlbGVjdERheSgpO1xuICAgIHRoaXMudXBkYXRlRGlzcGxheSh5ZWFyLCBtb250aCk7XG4gIH1cblxuICAvLyBBbyBzZWxlY2lvbmFyIHVtIGFub1xuICBvblNlbGVjdFllYXIoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSB7XG4gICAgLy8gU2UgdmVpbyBkYSB0ZWxhIGRlIHNlbGXDp8OjbyBkZSBtw6pzXG4gICAgdGhpcy5sYXN0RGlzcGxheSA9PT0gJ21vbnRoJyA/IHRoaXMuc2VsZWN0TW9udGgoKSA6IHRoaXMuc2VsZWN0RGF5KCk7XG5cbiAgICB0aGlzLmN1cnJlbnRZZWFyID0geWVhcjtcbiAgICB0aGlzLnVwZGF0ZURpc3BsYXkoeWVhciwgbW9udGgpO1xuICB9XG5cbiAgc2VsZWN0RGF5KCkge1xuICAgIHRoaXMuZGF5VmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5tb250aFZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnllYXJWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0RGlzcGxheSA9ICdkYXknO1xuICB9XG5cbiAgc2VsZWN0TW9udGgoKSB7XG4gICAgdGhpcy5kYXlWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5tb250aFZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMueWVhclZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLmxhc3REaXNwbGF5ID0gJ21vbnRoJztcbiAgfVxuXG4gIHNlbGVjdFllYXIoKSB7XG4gICAgdGhpcy5kYXlWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5tb250aFZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLnllYXJWaXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIHNldE1vYmlsZVZpc3VhbGl6YXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNNb2JpbGUoKSA/ICdwby1jYWxlbmRhciBwby1jYWxlbmRhci1tb2JpbGUnIDogJ3BvLWNhbGVuZGFyJztcbiAgfVxuXG4gIHVwZGF0ZVllYXIodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMudXBkYXRlRGlzcGxheSh0aGlzLmRpc3BsYXlZZWFyICsgdmFsdWUsIHRoaXMuZGlzcGxheU1vbnRoTnVtYmVyKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkQWxsWWVhcnNJbkRlY2FkZSh5ZWFyOiBudW1iZXIpIHtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSB5ZWFyOyBpIDwgeWVhciArIDEwOyBpKyspIHtcbiAgICAgIHRoaXMuZGlzcGxheURlY2FkZS5wdXNoKGkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZXF1YWxzRGF0ZShkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRhdGUxLmdldEZ1bGxZZWFyKCkgPT09IGRhdGUyLmdldEZ1bGxZZWFyKCkgJiZcbiAgICAgICAgZGF0ZTEuZ2V0TW9udGgoKSA9PT0gZGF0ZTIuZ2V0TW9udGgoKSAmJlxuICAgICAgICBkYXRlMS5nZXREYXRlKCkgPT09IGRhdGUyLmdldERhdGUoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlRGF0ZShkYXRlOiBEYXRlKSB7XG4gICAgdGhpcy5jdXJyZW50TW9udGhOdW1iZXIgPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgdGhpcy5jdXJyZW50WWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5jdXJyZW50WWVhciwgdGhpcy5jdXJyZW50TW9udGhOdW1iZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVEZWNhZGUoeWVhcjogbnVtYmVyKSB7XG4gICAgdGhpcy5hZGRBbGxZZWFyc0luRGVjYWRlKHllYXIpO1xuICAgIHRoaXMuZGlzcGxheVN0YXJ0RGVjYWRlID0geWVhcjtcbiAgICB0aGlzLmRpc3BsYXlGaW5hbERlY2FkZSA9IHllYXIgKyA5O1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVEaXNwbGF5KHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlcikge1xuICAgIGNvbnN0IGNhbGVuZGFyQXJyYXkgPSB0aGlzLnBvQ2FsZW5kYXJTZXJ2aWNlLm1vbnRoRGF5cyh5ZWFyLCBtb250aCk7XG4gICAgdGhpcy5kaXNwbGF5RGF5cyA9IFtdLmNvbmNhdC5hcHBseShbXSwgY2FsZW5kYXJBcnJheSk7XG4gICAgdGhpcy5kaXNwbGF5TW9udGhOdW1iZXIgPSBtb250aDtcbiAgICB0aGlzLmRpc3BsYXlNb250aCA9IHRoaXMuZGlzcGxheU1vbnRoc1ttb250aF07XG4gICAgdGhpcy5kaXNwbGF5WWVhciA9IHllYXI7XG4gICAgdGhpcy5nZXRBcnJheURlY2FkZSh5ZWFyKTtcbiAgfVxuXG59XG4iXX0=