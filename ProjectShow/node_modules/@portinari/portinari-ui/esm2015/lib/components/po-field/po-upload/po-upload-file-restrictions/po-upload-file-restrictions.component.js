/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { browserLanguage, formatBytes, poLocaleDefault } from '../../../../utils/util';
import { poUploadLiteralsDefault } from '../po-upload-base.component';
export class PoUploadFileRestrictionsComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set allowedExtensions(value) {
        this._allowedExtensions = this.formatAllowedExtensions((/** @type {?} */ (value)));
    }
    /**
     * @return {?}
     */
    get allowedExtensions() {
        return this._allowedExtensions;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set maxFileSize(value) {
        this._maxFileSize = formatBytes((/** @type {?} */ (value)));
    }
    /**
     * @return {?}
     */
    get maxFileSize() {
        return this._maxFileSize;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set minFileSize(value) {
        this._minFileSize = formatBytes((/** @type {?} */ (value)));
    }
    /**
     * @return {?}
     */
    get minFileSize() {
        return this._minFileSize;
    }
    /**
     * @return {?}
     */
    get language() {
        return browserLanguage();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setLiterals();
    }
    /**
     * @private
     * @param {?} allowedExtensions
     * @return {?}
     */
    formatAllowedExtensions(allowedExtensions) {
        /** @type {?} */
        const conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y' };
        return allowedExtensions ? allowedExtensions
            .join(', ')
            .toUpperCase()
            .replace(/,(?=[^,]*$)/, ` ${conjunction[this.language]}`) : undefined;
    }
    /**
     * @private
     * @return {?}
     */
    setLiterals() {
        this.literals = Object.assign({}, poUploadLiteralsDefault[poLocaleDefault], poUploadLiteralsDefault[this.language]);
        this.changeDetector.detectChanges();
    }
}
PoUploadFileRestrictionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-upload-file-restrictions',
                template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\n  {{ literals?.numberOfFilesAllowed | poI18n:maxFiles }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\n  {{ literals?.allowedFormats | poI18n:allowedExtensions }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\n  <span>{{ literals?.allowedSizes }}</span>\n\n  <span *ngIf=\"minFileSize && maxFileSize\">\n    {{ literals?.allowedFileSizeRange | poI18n:[minFileSize, maxFileSize] }}\n  </span>\n\n  <span *ngIf=\"minFileSize && !maxFileSize\">\n    {{ literals?.minFileSizeAllowed | poI18n:minFileSize }}\n  </span>\n\n  <span *ngIf=\"maxFileSize && !minFileSize\">\n    {{ literals?.maxFileSizeAllowed | poI18n:maxFileSize }}\n  </span>\n</p>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
PoUploadFileRestrictionsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoUploadFileRestrictionsComponent.propDecorators = {
    allowedExtensions: [{ type: Input, args: ['p-allowed-extensions',] }],
    maxFiles: [{ type: Input, args: ['p-max-files',] }],
    maxFileSize: [{ type: Input, args: ['p-max-file-size',] }],
    minFileSize: [{ type: Input, args: ['p-min-file-size',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoUploadFileRestrictionsComponent.prototype._allowedExtensions;
    /**
     * @type {?}
     * @private
     */
    PoUploadFileRestrictionsComponent.prototype._maxFileSize;
    /**
     * @type {?}
     * @private
     */
    PoUploadFileRestrictionsComponent.prototype._minFileSize;
    /** @type {?} */
    PoUploadFileRestrictionsComponent.prototype.literals;
    /** @type {?} */
    PoUploadFileRestrictionsComponent.prototype.maxFiles;
    /**
     * @type {?}
     * @private
     */
    PoUploadFileRestrictionsComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tdXBsb2FkL3BvLXVwbG9hZC1maWxlLXJlc3RyaWN0aW9ucy9wby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUVyRyxPQUFPLEVBQUUsZUFBZSxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV2RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQU90RSxNQUFNLE9BQU8saUNBQWlDOzs7O0lBc0M1QyxZQUFvQixjQUFpQztRQUFqQyxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7SUFBSSxDQUFDOzs7OztJQTlCMUQsSUFBbUMsaUJBQWlCLENBQUMsS0FBSztRQUN4RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLG1CQUFLLEtBQUssRUFBQSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7OztJQUVELElBQUksaUJBQWlCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBSUQsSUFBOEIsV0FBVyxDQUFDLEtBQUs7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUMsbUJBQUssS0FBSyxFQUFBLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBRUQsSUFBOEIsV0FBVyxDQUFDLEtBQUs7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUMsbUJBQUssS0FBSyxFQUFBLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFJRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7Ozs7OztJQUVPLHVCQUF1QixDQUFDLGlCQUFnQzs7Y0FDeEQsV0FBVyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7UUFFekQsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsaUJBQWlCO2FBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDVixXQUFXLEVBQUU7YUFDYixPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUMxRSxDQUFDOzs7OztJQUVPLFdBQVc7UUFDakIsSUFBSSxDQUFDLFFBQVEscUJBQ1IsdUJBQXVCLENBQUMsZUFBZSxDQUFDLEVBQ3hDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDMUMsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7O1lBakVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2Qyxrd0JBQTJEO2dCQUMzRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7OztZQVZpQyxpQkFBaUI7OztnQ0FtQmhELEtBQUssU0FBQyxzQkFBc0I7dUJBUTVCLEtBQUssU0FBQyxhQUFhOzBCQUVuQixLQUFLLFNBQUMsaUJBQWlCOzBCQVF2QixLQUFLLFNBQUMsaUJBQWlCOzs7Ozs7O0lBeEJ4QiwrREFBbUM7Ozs7O0lBQ25DLHlEQUE2Qjs7Ozs7SUFDN0IseURBQThCOztJQUU5QixxREFBYzs7SUFVZCxxREFBdUM7Ozs7O0lBc0IzQiwyREFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIGZvcm1hdEJ5dGVzLCBwb0xvY2FsZURlZmF1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgcG9VcGxvYWRMaXRlcmFsc0RlZmF1bHQgfSBmcm9tICcuLi9wby11cGxvYWQtYmFzZS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUG9VcGxvYWRGaWxlUmVzdHJpY3Rpb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwcml2YXRlIF9hbGxvd2VkRXh0ZW5zaW9uczogc3RyaW5nO1xuICBwcml2YXRlIF9tYXhGaWxlU2l6ZTogc3RyaW5nO1xuICBwcml2YXRlICBfbWluRmlsZVNpemU6IHN0cmluZztcblxuICBsaXRlcmFsczogYW55O1xuXG4gIEBJbnB1dCgncC1hbGxvd2VkLWV4dGVuc2lvbnMnKSBzZXQgYWxsb3dlZEV4dGVuc2lvbnModmFsdWUpIHtcbiAgICB0aGlzLl9hbGxvd2VkRXh0ZW5zaW9ucyA9IHRoaXMuZm9ybWF0QWxsb3dlZEV4dGVuc2lvbnMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgYWxsb3dlZEV4dGVuc2lvbnMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYWxsb3dlZEV4dGVuc2lvbnM7XG4gIH1cblxuICBASW5wdXQoJ3AtbWF4LWZpbGVzJykgbWF4RmlsZXM6IG51bWJlcjtcblxuICBASW5wdXQoJ3AtbWF4LWZpbGUtc2l6ZScpIHNldCBtYXhGaWxlU2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuX21heEZpbGVTaXplID0gZm9ybWF0Qnl0ZXMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgbWF4RmlsZVNpemUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbWF4RmlsZVNpemU7XG4gIH1cblxuICBASW5wdXQoJ3AtbWluLWZpbGUtc2l6ZScpIHNldCBtaW5GaWxlU2l6ZSh2YWx1ZSkge1xuICAgIHRoaXMuX21pbkZpbGVTaXplID0gZm9ybWF0Qnl0ZXMoPGFueT52YWx1ZSk7XG4gIH1cblxuICBnZXQgbWluRmlsZVNpemUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fbWluRmlsZVNpemU7XG4gIH1cblxuICBnZXQgbGFuZ3VhZ2UoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYnJvd3Nlckxhbmd1YWdlKCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zZXRMaXRlcmFscygpO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXRBbGxvd2VkRXh0ZW5zaW9ucyhhbGxvd2VkRXh0ZW5zaW9uczogQXJyYXk8c3RyaW5nPik6IHN0cmluZyB7XG4gICAgY29uc3QgY29uanVuY3Rpb24gPSB7ICdwdCc6ICdlJywgJ2VuJzogJ2FuZCcsICdlcyc6ICd5JyB9O1xuXG4gICAgcmV0dXJuIGFsbG93ZWRFeHRlbnNpb25zID8gYWxsb3dlZEV4dGVuc2lvbnNcbiAgICAgIC5qb2luKCcsICcpXG4gICAgICAudG9VcHBlckNhc2UoKVxuICAgICAgLnJlcGxhY2UoLywoPz1bXixdKiQpLywgYCAke2Nvbmp1bmN0aW9uW3RoaXMubGFuZ3VhZ2VdfWApIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRMaXRlcmFscygpIHtcbiAgICB0aGlzLmxpdGVyYWxzID0ge1xuICAgICAgLi4ucG9VcGxvYWRMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcbiAgICAgIC4uLnBvVXBsb2FkTGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdLFxuICAgIH07XG5cbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcbiAgfVxuXG59XG4iXX0=