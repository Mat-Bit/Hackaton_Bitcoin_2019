/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions, sortOptionsByProperty, poLocaleDefault } from '../../../utils/util';
import { requiredFailed } from './../validators';
import { PoMultiselectFilterMode } from './po-multiselect-filter-mode.enum';
/** @type {?} */
export const poMultiselectLiteralsDefault = {
    en: (/** @type {?} */ ({
        noData: 'No data found',
        placeholderSearch: 'Search'
    })),
    es: (/** @type {?} */ ({
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca'
    })),
    pt: (/** @type {?} */ ({
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar'
    })),
    ru: (/** @type {?} */ ({
        noData: 'Данные не найдены',
        placeholderSearch: 'искать'
    }))
};
/**
 * \@description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 * @abstract
 */
export class PoMultiselectBaseComponent {
    constructor() {
        this._autofocus = false;
        this._disabled = false;
        this._filterMode = PoMultiselectFilterMode.startsWith;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this.readyToValidation = false;
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         */
        this.placeholderSearch = '';
        /**
         * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `po-multiselect`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Nenhum dado encontrado',
     *    placeholderSearch: 'Buscar'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-multiselect
     *   [p-literals]="customLiterals">
     * </po-po-multiselect>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, poMultiselectLiteralsDefault[poLocaleDefault], poMultiselectLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = poMultiselectLiteralsDefault[browserLanguage()];
        }
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || poMultiselectLiteralsDefault[browserLanguage()];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
     *
     * \@default `false`
     * @param {?} required
     * @return {?}
     */
    set required(required) {
        this._required = (/** @type {?} */ (required)) === '' ? true : convertToBoolean(required);
        this.updateModelToValidate();
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que o campo será desabilitado.
     *
     * \@default `false`
     * @param {?} disabled
     * @return {?}
     */
    set disabled(disabled) {
        this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
        this.updateModelToValidate();
        this.updateVisibleItems();
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
     *
     * \@default `false`
     * @param {?} hideSearch
     * @return {?}
     */
    set hideSearch(hideSearch) {
        this._hideSearch = (/** @type {?} */ (hideSearch)) === '' ? true : convertToBoolean(hideSearch);
    }
    /**
     * @return {?}
     */
    get hideSearch() {
        return this._hideSearch;
    }
    /**
     * \@description
     *
     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
     * Esta lista deve conter os valores e os labels que serão apresentados na tela.
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options = options;
        this.validAndSortOptions();
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
     * dropdown.
     *
     * \@default `false`
     * @param {?} sort
     * @return {?}
     */
    set sort(sort) {
        this._sort = (/** @type {?} */ (sort)) === '' ? true : convertToBoolean(sort);
        this.validAndSortOptions();
    }
    /**
     * @return {?}
     */
    get sort() {
        return this._sort;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * \@default `false`
     * @param {?} focus
     * @return {?}
     */
    set autofocus(focus) {
        this._autofocus = convertToBoolean(focus);
    }
    /**
     * @return {?}
     */
    get autofocus() {
        return this._autofocus;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
     * Valores definidos no enum: PoMultiselectFilterMode
     *
     * \@default `startsWith`
     * @param {?} filterMode
     * @return {?}
     */
    set filterMode(filterMode) {
        this._filterMode = (filterMode in PoMultiselectFilterMode) ? filterMode : PoMultiselectFilterMode.startsWith;
        switch (this._filterMode.toString()) {
            case 'startsWith':
                this._filterMode = PoMultiselectFilterMode.startsWith;
                break;
            case 'contains':
                this._filterMode = PoMultiselectFilterMode.contains;
                break;
            case 'endsWith':
                this._filterMode = PoMultiselectFilterMode.endsWith;
                break;
        }
    }
    /**
     * @return {?}
     */
    get filterMode() {
        return this._filterMode;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateList(this.options);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        // Seta esta variável para indicar que a tela já foi carregada e podem ser aplicadas as validações.
        // A partir desse momento, toda vez que uma propriedade que interfere na validação, for alterada, o model será atualizado
        // para que o campo seja validado novamente.
        this.readyToValidation = true;
    }
    /**
     * @return {?}
     */
    validAndSortOptions() {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setUndefinedLabels(options) {
        options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            if (!option['label']) {
                option.label = option.value;
            }
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    updateList(options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    }
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    updateModelToValidate() {
        if (this.readyToValidation) {
            // Este timeout é necessário para quando for atualizado o model e uma propriedade do Datepicker ao mesmo tempo.
            // Caso contrário, o writeValue não é disparado, não atualizando o model do componente.
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.callOnChange(this.selectedOptions);
            }));
        }
    }
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    callOnChange(selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    }
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    eventChange(selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    }
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    getValuesFromOptions(selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map((/**
         * @param {?} option
         * @return {?}
         */
        option => option.value)) : [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getLabelByValue(value) {
        /** @type {?} */
        const index = this.options.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        option => option.value === value));
        return this.options[index].label;
    }
    /**
     * @param {?} selectedValues
     * @return {?}
     */
    changeItems(selectedValues) {
        this.updateSelectedOptions(selectedValues);
        this.callOnChange(this.selectedOptions);
    }
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    searchByLabel(search, options, filterMode) {
        if (search && options && options.length) {
            /** @type {?} */
            const newOptions = [];
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            option => {
                if (option.label && this.compareMethod(search, option, filterMode)) {
                    newOptions.push(option);
                }
            }));
            this.visibleOptionsDropdown = newOptions;
        }
    }
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    compareMethod(search, option, filterMode) {
        switch (filterMode) {
            case PoMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoMultiselectFilterMode.contains:
                return this.contains(search, option);
            case PoMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    startsWith(search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    contains(search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    }
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    endsWith(search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        return null;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    updateSelectedOptions(values) {
        this.selectedOptions = [];
        values.forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            option => {
                if (option.value === value) {
                    this.selectedOptions.push(option);
                }
            }));
        }));
        this.updateVisibleItems();
    }
    /**
     * @param {?} values
     * @return {?}
     */
    writeValue(values) {
        if (!values) {
            values = [];
            this.callOnChange([]);
        }
        // Validar se todos os items existem entre os options, senão atualizar o model
        this.updateSelectedOptions(values);
        if (this.selectedOptions.length < values.length) {
            this.callOnChange(this.selectedOptions);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
}
PoMultiselectBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    help: [{ type: Input, args: ['p-help',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    placeholderSearch: [{ type: Input, args: ['p-placeholder-search',] }],
    name: [{ type: Input, args: ['name',] }],
    required: [{ type: Input, args: ['p-required',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    hideSearch: [{ type: Input, args: ['p-hide-search',] }],
    options: [{ type: Input, args: ['p-options',] }],
    sort: [{ type: Input, args: ['p-sort',] }],
    autofocus: [{ type: Input, args: ['p-focus',] }],
    filterMode: [{ type: Input, args: ['p-filter-mode',] }],
    change: [{ type: Output, args: ['p-change',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._autofocus;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._hideSearch;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.lastLengthModel;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.onModelChange;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.readyToValidation;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.selectedOptions;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.visibleOptionsDropdown;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.visibleDisclaimers;
    /**
     * Label no componente.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.optional;
    /**
     * Mensagem apresentada enquanto o campo estiver vazio.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.placeholder;
    /**
     * \@description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * \@default `Buscar`
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.placeholderSearch;
    /**
     * Nome do componente.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.name;
    /**
     * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.change;
    /**
     * @type {?}
     * @protected
     */
    PoMultiselectBaseComponent.prototype.clickOutListener;
    /**
     * @type {?}
     * @protected
     */
    PoMultiselectBaseComponent.prototype.resizeListener;
    /**
     * @abstract
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateVisibleItems = function () { };
}
//# sourceMappingURL=data:application/json;base64,