/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para o conjunto de c√≠rculos que faz a passagem de itens do `po-slide`.
 */
export class PoSlideCirclesComponent {
    constructor() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new EventEmitter();
    }
}
PoSlideCirclesComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-slide-circles',
                template: "<div class=\"po-slide-circles\">\n  <ng-container *ngFor=\"let item of items; let index = index;\">\n    <div\n      class=\"po-slide-circle\"\n      [class.po-slide-active-circle]=\"index === currentSlideIndex\"\n      (click)=\"click.emit(index)\">\n    </div>\n  </ng-container>\n</div>\n"
            }] }
];
PoSlideCirclesComponent.propDecorators = {
    currentSlideIndex: [{ type: Input, args: ['p-current-slide-index',] }],
    items: [{ type: Input, args: ['p-items',] }],
    click: [{ type: Output, args: ['p-click',] }]
};
if (false) {
    /**
     * Index do slide atual.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.currentSlideIndex;
    /**
     * Itens do slide.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.items;
    /**
     * Evento emitido ao clicar em um controle.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.click;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtY2lyY2xlcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXNsaWRlL3BvLXNsaWRlLWNpcmNsZXMvcG8tc2xpZGUtY2lyY2xlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBYXZFLE1BQU0sT0FBTyx1QkFBdUI7SUFKcEM7Ozs7UUFhcUIsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFDckQsQ0FBQzs7O1lBZEEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLCtTQUFnRDthQUNqRDs7O2dDQUlFLEtBQUssU0FBQyx1QkFBdUI7b0JBRzdCLEtBQUssU0FBQyxTQUFTO29CQUdmLE1BQU0sU0FBQyxTQUFTOzs7Ozs7O0lBTmpCLG9EQUEwRDs7Ozs7SUFHMUQsd0NBQW9DOzs7OztJQUdwQyx3Q0FBbUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcGFyYSBvIGNvbmp1bnRvIGRlIGPDrXJjdWxvcyBxdWUgZmF6IGEgcGFzc2FnZW0gZGUgaXRlbnMgZG8gYHBvLXNsaWRlYC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tc2xpZGUtY2lyY2xlcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1zbGlkZS1jaXJjbGVzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1NsaWRlQ2lyY2xlc0NvbXBvbmVudCB7XG5cbiAgLyoqIEluZGV4IGRvIHNsaWRlIGF0dWFsLiAqL1xuICBASW5wdXQoJ3AtY3VycmVudC1zbGlkZS1pbmRleCcpIGN1cnJlbnRTbGlkZUluZGV4OiBudW1iZXI7XG5cbiAgLyoqIEl0ZW5zIGRvIHNsaWRlLiAqL1xuICBASW5wdXQoJ3AtaXRlbXMnKSBpdGVtczogQXJyYXk8YW55PjtcblxuICAvKiogRXZlbnRvIGVtaXRpZG8gYW8gY2xpY2FyIGVtIHVtIGNvbnRyb2xlLiAqL1xuICBAT3V0cHV0KCdwLWNsaWNrJykgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbn1cbiJdfQ==