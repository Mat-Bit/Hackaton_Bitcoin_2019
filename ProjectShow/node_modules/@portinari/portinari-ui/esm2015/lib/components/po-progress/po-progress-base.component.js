/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../utils/util';
import { PoProgressStatus } from './enums/po-progress-status.enum';
/** @type {?} */
const poProgressMaxValue = 100;
/** @type {?} */
const poProgressMinValue = 0;
/**
 * \@description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
export class PoProgressBaseComponent {
    constructor() {
        this._value = 0;
        /**
         * \@optional
         *
         * \@description
         *
         * Status da barra de progresso que indicará visualmente ao usuário
         * o andamento, por exemplo, se a mesma foi concluída com sucesso.
         *
         * \@default `PoProgressStatus.Default`
         */
        this.status = PoProgressStatus.Default;
        /**
         * \@optional
         *
         * \@description
         *
         * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
         *
         * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
         *
         * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
         * o ícone de cancelamento não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * \@optional
         *
         * \@description
         *
         * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
         *
         * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
         * `PoProgressStatus.Error`.
         */
        this.retry = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * \@default `false`
     * @param {?} indeterminate
     * @return {?}
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    /**
     * @return {?}
     */
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * \@default `0`
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        /** @type {?} */
        const integerValue = convertToInt(value, poProgressMinValue);
        /** @type {?} */
        const isProgressRangeValue = this.isProgressRangeValue(integerValue);
        this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isProgressRangeValue(value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    }
}
PoProgressBaseComponent.propDecorators = {
    indeterminate: [{ type: Input, args: ['p-indeterminate',] }],
    info: [{ type: Input, args: ['p-info',] }],
    infoIcon: [{ type: Input, args: ['p-info-icon',] }],
    status: [{ type: Input, args: ['p-status',] }],
    text: [{ type: Input, args: ['p-text',] }],
    value: [{ type: Input, args: ['p-value',] }],
    cancel: [{ type: Output, args: ['p-cancel',] }],
    retry: [{ type: Output, args: ['p-retry',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoProgressBaseComponent.prototype._indeterminate;
    /**
     * @type {?}
     * @private
     */
    PoProgressBaseComponent.prototype._value;
    /**
     * \@optional
     *
     * \@description
     *
     * Informação adicional que aparecerá abaixo da barra de progresso ao lado direito.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.info;
    /**
     * \@optional
     *
     * \@description
     *
     * Ícone que aparecerá ao lado do texto da propriedade `p-info`.
     *
     * Exemplo: `po-icon-ok`.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.infoIcon;
    /**
     * \@optional
     *
     * \@description
     *
     * Status da barra de progresso que indicará visualmente ao usuário
     * o andamento, por exemplo, se a mesma foi concluída com sucesso.
     *
     * \@default `PoProgressStatus.Default`
     * @type {?}
     */
    PoProgressBaseComponent.prototype.status;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto principal que aparecerá abaixo da barra de progresso no lado esquerdo.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.text;
    /**
     * \@optional
     *
     * \@description
     *
     * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
     *
     * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
     *
     * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
     * o ícone de cancelamento não será exibido.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.cancel;
    /**
     * \@optional
     *
     * \@description
     *
     * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
     *
     * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
     * `PoProgressStatus.Error`.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.retry;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXByb2dyZXNzL3BvLXByb2dyZXNzLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOztNQUU3RCxrQkFBa0IsR0FBRyxHQUFHOztNQUN4QixrQkFBa0IsR0FBRyxDQUFDOzs7Ozs7OztBQVM1QixNQUFNLE9BQU8sdUJBQXVCO0lBQXBDO1FBR1UsV0FBTSxHQUFZLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7UUFxRFQsV0FBTSxHQUFxQixnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7Ozs7Ozs7Ozs7Ozs7UUE2Q25ELFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7UUFZaEQsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBTW5FLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7SUFyR0MsSUFBOEIsYUFBYSxDQUFDLGFBQXNCO1FBQ2hFLElBQUksQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7OztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDOzs7Ozs7Ozs7Ozs7OztJQXNERCxJQUFzQixLQUFLLENBQUMsS0FBYTs7Y0FDakMsWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUM7O2NBQ3RELG9CQUFvQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUM7UUFFcEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztJQUN6RSxDQUFDOzs7O0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Ozs7OztJQTRCTyxvQkFBb0IsQ0FBQyxLQUFhO1FBQ3hDLE9BQU8sS0FBSyxJQUFJLGtCQUFrQixJQUFJLEtBQUssSUFBSSxrQkFBa0IsQ0FBQztJQUNwRSxDQUFDOzs7NEJBbkdBLEtBQUssU0FBQyxpQkFBaUI7bUJBZXZCLEtBQUssU0FBQyxRQUFRO3VCQVdkLEtBQUssU0FBQyxhQUFhO3FCQVluQixLQUFLLFNBQUMsVUFBVTttQkFTaEIsS0FBSyxTQUFDLFFBQVE7b0JBYWQsS0FBSyxTQUFDLFNBQVM7cUJBdUJmLE1BQU0sU0FBQyxVQUFVO29CQVlqQixNQUFNLFNBQUMsU0FBUzs7Ozs7OztJQS9HakIsaURBQWlDOzs7OztJQUNqQyx5Q0FBNEI7Ozs7Ozs7OztJQThCNUIsdUNBQStCOzs7Ozs7Ozs7OztJQVcvQiwyQ0FBd0M7Ozs7Ozs7Ozs7OztJQVl4Qyx5Q0FBdUU7Ozs7Ozs7OztJQVN2RSx1Q0FBK0I7Ozs7Ozs7Ozs7Ozs7O0lBb0MvQix5Q0FBbUU7Ozs7Ozs7Ozs7OztJQVluRSx3Q0FBaUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiwgY29udmVydFRvSW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvUHJvZ3Jlc3NTdGF0dXMgfSBmcm9tICcuL2VudW1zL3BvLXByb2dyZXNzLXN0YXR1cy5lbnVtJztcblxuY29uc3QgcG9Qcm9ncmVzc01heFZhbHVlID0gMTAwO1xuY29uc3QgcG9Qcm9ncmVzc01pblZhbHVlID0gMDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIGRlIGJhcnJhIGRlIHByb2dyZXNzbyBxdWUgcG9zc2liaWxpdGEgZXhpYmlyIHZpc3VhbG1lbnRlIG8gcHJvZ3Jlc3NvL2NhcnJlZ2FtZW50byBkZSB1bWEgdGFyZWZhLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBwb2RlIHNlciB1dGlsaXphZG8gbm8gKnVwbG9hZCogZGUgYXJxdWl2b3MsIHVtYSBhdHVhbGl6YcOnw6NvIG5vIHNpc3RlbWEgb3UgbyBwcm9jZXNzYW1lbnRvIGRlIHVtYSBpbWFnZW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBQb1Byb2dyZXNzQmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfaW5kZXRlcm1pbmF0ZT86IGJvb2xlYW47XG4gIHByaXZhdGUgX3ZhbHVlPzogbnVtYmVyID0gMDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBIYWJpbGl0YSBvIG1vZG8gaW5kZXRlcm1pbmFkbyBuYSBiYXJyYSBkZSBwcm9ncmVzc28sIHF1ZSBtb3N0cmEgdW1hIGFuaW1hw6fDo28gZml4YSBzZW0gdW0gdmFsb3IgZXN0YWJlbGVjaWRvLlxuICAgKlxuICAgKiBFc3RhIG9ww6fDo28gcG9kZSBzZXIgdXRpbGl6YWRhIHF1YW5kbyBuw6NvIHNvdWJlciBxdWFudG8gdGVtcG8gbGV2YXLDoSBwYXJhIHF1ZSB1bSBwcm9jZXNzbyBzZWphIGNvbmNsdcOtZG8uXG4gICAqXG4gICAqID4gQ2FzbyBlc3RhIHByb3ByaWVkYWRlIGUgYSBgcC12YWx1ZWAgc2VqYSBoYWJpbGl0YWRhLCBhIHByb3ByaWVkYWRlIGBwLXZhbHVlYCBzZXLDoSBpZ25vcmFkYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWluZGV0ZXJtaW5hdGUnKSBzZXQgaW5kZXRlcm1pbmF0ZShpbmRldGVybWluYXRlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faW5kZXRlcm1pbmF0ZSA9IGNvbnZlcnRUb0Jvb2xlYW4oaW5kZXRlcm1pbmF0ZSk7XG4gIH1cblxuICBnZXQgaW5kZXRlcm1pbmF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faW5kZXRlcm1pbmF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEluZm9ybWHDp8OjbyBhZGljaW9uYWwgcXVlIGFwYXJlY2Vyw6EgYWJhaXhvIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBhbyBsYWRvIGRpcmVpdG8uXG4gICAqL1xuICBASW5wdXQoJ3AtaW5mbycpIGluZm8/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogw41jb25lIHF1ZSBhcGFyZWNlcsOhIGFvIGxhZG8gZG8gdGV4dG8gZGEgcHJvcHJpZWRhZGUgYHAtaW5mb2AuXG4gICAqXG4gICAqIEV4ZW1wbG86IGBwby1pY29uLW9rYC5cbiAgICovXG4gIEBJbnB1dCgncC1pbmZvLWljb24nKSBpbmZvSWNvbj86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBTdGF0dXMgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIHF1ZSBpbmRpY2Fyw6EgdmlzdWFsbWVudGUgYW8gdXN1w6FyaW9cbiAgICogbyBhbmRhbWVudG8sIHBvciBleGVtcGxvLCBzZSBhIG1lc21hIGZvaSBjb25jbHXDrWRhIGNvbSBzdWNlc3NvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgUG9Qcm9ncmVzc1N0YXR1cy5EZWZhdWx0YFxuICAgKi9cbiAgQElucHV0KCdwLXN0YXR1cycpIHN0YXR1czogUG9Qcm9ncmVzc1N0YXR1cyA9IFBvUHJvZ3Jlc3NTdGF0dXMuRGVmYXVsdDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUZXh0byBwcmluY2lwYWwgcXVlIGFwYXJlY2Vyw6EgYWJhaXhvIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBubyBsYWRvIGVzcXVlcmRvLlxuICAgKi9cbiAgQElucHV0KCdwLXRleHQnKSB0ZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFZhbG9yIHF1ZSByZXByZXNlbnRhcsOhIG8gcHJvZ3Jlc3NvLlxuICAgKlxuICAgKiA+IE9zIHZhbG9yZXMgYWNlaXRvcyBzw6NvIG7Dum1lcm9zIGludGVpcm9zIGRlIGAwYCDDoCBgMTAwYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYDBgXG4gICAqL1xuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IGludGVnZXJWYWx1ZSA9IGNvbnZlcnRUb0ludCh2YWx1ZSwgcG9Qcm9ncmVzc01pblZhbHVlKTtcbiAgICBjb25zdCBpc1Byb2dyZXNzUmFuZ2VWYWx1ZSA9IHRoaXMuaXNQcm9ncmVzc1JhbmdlVmFsdWUoaW50ZWdlclZhbHVlKTtcblxuICAgIHRoaXMuX3ZhbHVlID0gaXNQcm9ncmVzc1JhbmdlVmFsdWUgPyBpbnRlZ2VyVmFsdWUgOiBwb1Byb2dyZXNzTWluVmFsdWU7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRXZlbnRvIHF1ZSBzZXLDoSBkaXNwYXJhZG8gYW8gY2xpY2FyIG5vIMOtY29uZSBkZSBjYW5jZWxhbWVudG8gKFwieFwiKSBuYSBwYXJ0ZSBpbmZlcmlvciBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXG4gICAqXG4gICAqIEFvIHNlciBkaXNwYXJhZG8sIGEgZnVuw6fDo28gcmVjZWJlcsOhIGNvbW8gcGFyw6JtZXRybyBvIHN0YXR1cyBhdHVhbCBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXG4gICAqXG4gICAqID4gU2UgbmVuaHVtYSBmdW7Dp8OjbyBmb3IgcGFzc2FkYSBwYXJhIG8gZXZlbnRvIG91IGEgYmFycmEgZGUgcHJvZ3Jlc3NvIGVzdGl2ZXIgY29tIG8gc3RhdHVzIGBQb1Byb2dyZXNzU3RhdHVzLlN1Y2Nlc3NgLFxuICAgKiBvIMOtY29uZSBkZSBjYW5jZWxhbWVudG8gbsOjbyBzZXLDoSBleGliaWRvLlxuICAgKi9cbiAgQE91dHB1dCgncC1jYW5jZWwnKSBjYW5jZWw6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEV2ZW50byBxdWUgc2Vyw6EgZGlzcGFyYWRvIGFvIGNsaWNhciBubyDDrWNvbmUgZGUgdGVudGFyIG5vdmFtZW50ZSBuYSBwYXJ0ZSBpbmZlcmlvciBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXG4gICAqXG4gICAqID4gbyDDrWNvbmUgc2Vyw6EgZXhpYmlkbyBhcGVuYXMgc2UgaW5mb3JtYXIgdW1hIGZ1bsOnw6NvIG5lc3RlIGV2ZW50byBlIG8gc3RhdHVzIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBmb3JcbiAgICogYFBvUHJvZ3Jlc3NTdGF0dXMuRXJyb3JgLlxuICAgKi9cbiAgQE91dHB1dCgncC1yZXRyeScpIHJldHJ5OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcml2YXRlIGlzUHJvZ3Jlc3NSYW5nZVZhbHVlKHZhbHVlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdmFsdWUgPj0gcG9Qcm9ncmVzc01pblZhbHVlICYmIHZhbHVlIDw9IHBvUHJvZ3Jlc3NNYXhWYWx1ZTtcbiAgfVxuXG59XG4iXX0=