/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
/** @type {?} */
const PO_DISCLAIMER_TYPES = ['default', 'danger'];
/** @type {?} */
const PO_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente po-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no po-multi-select.
 *
 */
export class PoDisclaimerBaseComponent {
    constructor() {
        this._type = 'default';
        this._hideClose = false;
        this.showDisclaimer = true;
        /**
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new EventEmitter();
    }
    /**
     * \@description
     *
     * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
     * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set hideClose(value) {
        this._hideClose = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideClose() {
        return this._hideClose;
    }
    /**
     * \@description
     *
     * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
     *
     * \@default default
     * \@optional
     * @param {?} type
     * @return {?}
     */
    set type(type) {
        this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @return {?}
     */
    close() {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    }
    /**
     * @return {?}
     */
    getLabel() {
        return this.label ? this.label : this.value;
    }
}
PoDisclaimerBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    value: [{ type: Input, args: ['p-value',] }],
    property: [{ type: Input, args: ['p-property',] }],
    hideClose: [{ type: Input, args: ['p-hide-close',] }],
    closeAction: [{ type: Output, args: ['p-close-action',] }],
    type: [{ type: Input, args: ['p-type',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDisclaimerBaseComponent.prototype._type;
    /**
     * @type {?}
     * @private
     */
    PoDisclaimerBaseComponent.prototype._hideClose;
    /** @type {?} */
    PoDisclaimerBaseComponent.prototype.showDisclaimer;
    /**
     * Label que aparecerá dentro do po-disclaimer.
     * Quando não for definido um label será apresentada a propriedade p-value.
     * @type {?}
     */
    PoDisclaimerBaseComponent.prototype.label;
    /**
     * Valor do po-disclaimer.
     * @type {?}
     */
    PoDisclaimerBaseComponent.prototype.value;
    /**
     * Nome da propriedade vinculada à este po-disclaimer.
     * @type {?}
     */
    PoDisclaimerBaseComponent.prototype.property;
    /**
     * Evento disparado ao fechar o disclaimer.
     * Para este evento será passado como parâmetro um objeto com value, label e property.
     * @type {?}
     */
    PoDisclaimerBaseComponent.prototype.closeAction;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZGlzY2xhaW1lci9wby1kaXNjbGFpbWVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O01BRTlDLG1CQUFtQixHQUFHLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQzs7TUFDM0MsMEJBQTBCLEdBQUcsU0FBUzs7Ozs7Ozs7Ozs7QUFZNUMsTUFBTSxPQUFPLHlCQUF5QjtJQUF0QztRQUNVLFVBQUssR0FBVyxTQUFTLENBQUM7UUFDMUIsZUFBVSxHQUFhLEtBQUssQ0FBQztRQUVyQyxtQkFBYyxHQUFHLElBQUksQ0FBQzs7Ozs7UUFrQ0ksZ0JBQVcsR0FBdUIsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQTBCdEYsQ0FBQzs7Ozs7Ozs7Ozs7SUF0Q0MsSUFBMkIsU0FBUyxDQUFDLEtBQWM7UUFDakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBSyxLQUFLLEVBQUEsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkUsQ0FBQzs7OztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDOzs7Ozs7Ozs7OztJQWdCRCxJQUFxQixJQUFJLENBQUMsSUFBWTtRQUNwQyxJQUFJLENBQUMsS0FBSyxHQUFHLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQztJQUN0RixDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFDekYsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDOUMsQ0FBQzs7O29CQXJEQSxLQUFLLFNBQUMsU0FBUztvQkFHZixLQUFLLFNBQUMsU0FBUzt1QkFHZixLQUFLLFNBQUMsWUFBWTt3QkFVbEIsS0FBSyxTQUFDLGNBQWM7MEJBWXBCLE1BQU0sU0FBQyxnQkFBZ0I7bUJBVXZCLEtBQUssU0FBQyxRQUFROzs7Ozs7O0lBL0NmLDBDQUFrQzs7Ozs7SUFDbEMsK0NBQXFDOztJQUVyQyxtREFBc0I7Ozs7OztJQU10QiwwQ0FBaUM7Ozs7O0lBR2pDLDBDQUFnQzs7Ozs7SUFHaEMsNkNBQXVDOzs7Ozs7SUFzQnZDLGdEQUFvRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmNvbnN0IFBPX0RJU0NMQUlNRVJfVFlQRVMgPSBbJ2RlZmF1bHQnLCAnZGFuZ2VyJ107XG5jb25zdCBQT19ESVNDTEFJTUVSX0RFRkFVTFRfVFlQRSA9ICdkZWZhdWx0JztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgcG8tZGlzY2xhaW1lciDDqSByZXNwb25zw6F2ZWwgcG9yIHJlcHJlc2VudGFyIHRhZ3MuXG4gKiBTZXUgdXNvIMOpIHJlY29tZW5kYWRvIGVtIGJ1c2NhcyBlIGVtIGNhbXBvcyBvbmRlIMOpIG5lY2Vzc8OhcmlvIHJlcHJlc2VudGFyIG9iamV0b3Mgc2VsZWNpb25hZG9zLFxuICogY29tbyBwb3IgZXhlbXBsbywgbm8gcG8tbXVsdGktc2VsZWN0LlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIFBvRGlzY2xhaW1lckJhc2VDb21wb25lbnQge1xuICBwcml2YXRlIF90eXBlOiBzdHJpbmcgPSAnZGVmYXVsdCc7XG4gIHByaXZhdGUgX2hpZGVDbG9zZT86IGJvb2xlYW4gPSBmYWxzZTtcblxuICBzaG93RGlzY2xhaW1lciA9IHRydWU7XG5cbiAgLyoqXG4gICAqIExhYmVsIHF1ZSBhcGFyZWNlcsOhIGRlbnRybyBkbyBwby1kaXNjbGFpbWVyLlxuICAgKiBRdWFuZG8gbsOjbyBmb3IgZGVmaW5pZG8gdW0gbGFiZWwgc2Vyw6EgYXByZXNlbnRhZGEgYSBwcm9wcmllZGFkZSBwLXZhbHVlLlxuICAgKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIFZhbG9yIGRvIHBvLWRpc2NsYWltZXIuICovXG4gIEBJbnB1dCgncC12YWx1ZScpIHZhbHVlOiBzdHJpbmc7XG5cbiAgLyoqIE5vbWUgZGEgcHJvcHJpZWRhZGUgdmluY3VsYWRhIMOgIGVzdGUgcG8tZGlzY2xhaW1lci4gKi9cbiAgQElucHV0KCdwLXByb3BlcnR5JykgcHJvcGVydHk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBFc3RhIHByb3ByaWVkYWRlIGVzY29uZGUgbyBib3TDo28gcGFyYSBmZWNoYW1lbnRvIGRvIHBvLWRpc2NsYWltZXIsIGFvIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGVcbiAgICogc2VtIHBhc3NhciB2YWxvciBhIG1lc21hIMOpIHNldGFkYSBjb21vIGZhbHNlLCBvbmRlIG8gYm90w6NvIGRlIGZlY2hhbWVudG8gZXN0w6Egdmlzw612ZWwuXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBASW5wdXQoJ3AtaGlkZS1jbG9zZScpIHNldCBoaWRlQ2xvc2UodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9oaWRlQ2xvc2UgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBoaWRlQ2xvc2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGVDbG9zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudG8gZGlzcGFyYWRvIGFvIGZlY2hhciBvIGRpc2NsYWltZXIuXG4gICAqIFBhcmEgZXN0ZSBldmVudG8gc2Vyw6EgcGFzc2FkbyBjb21vIHBhcsOibWV0cm8gdW0gb2JqZXRvIGNvbSB2YWx1ZSwgbGFiZWwgZSBwcm9wZXJ0eS5cbiAgICovXG4gIEBPdXRwdXQoJ3AtY2xvc2UtYWN0aW9uJykgY2xvc2VBY3Rpb24/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGlwbyBkbyBwby1kaXNjbGFpbWVyLiBQb2RlIHNlciAnZGVmYXVsdCcgb3UgJ2RhbmdlcicuXG4gICAqXG4gICAqIEBkZWZhdWx0IGRlZmF1bHRcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBASW5wdXQoJ3AtdHlwZScpIHNldCB0eXBlKHR5cGU6IHN0cmluZykge1xuICAgIHRoaXMuX3R5cGUgPSBQT19ESVNDTEFJTUVSX1RZUEVTLmluY2x1ZGVzKHR5cGUpID8gdHlwZSA6IFBPX0RJU0NMQUlNRVJfREVGQVVMVF9UWVBFO1xuICB9XG5cbiAgZ2V0IHR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuc2hvd0Rpc2NsYWltZXIgPSBmYWxzZTtcbiAgICB0aGlzLmNsb3NlQWN0aW9uLmVtaXQoe3ZhbHVlOiB0aGlzLnZhbHVlLCBsYWJlbDogdGhpcy5sYWJlbCwgcHJvcGVydHk6IHRoaXMucHJvcGVydHl9KTtcbiAgfVxuXG4gIGdldExhYmVsKCkge1xuICAgIHJldHVybiB0aGlzLmxhYmVsID8gdGhpcy5sYWJlbCA6IHRoaXMudmFsdWU7XG4gIH1cbn1cbiJdfQ==