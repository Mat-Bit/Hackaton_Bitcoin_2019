/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
export class PoBreadcrumbFavoriteService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @return {?}
     */
    get url() { return this._url; }
    /**
     * @return {?}
     */
    get bodyParams() { return this._bodyParams; }
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    configService(url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    }
    /**
     * @param {?} status
     * @return {?}
     */
    sendStatusFavorite(status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    }
    /**
     * @return {?}
     */
    getFavorite() {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    }
}
PoBreadcrumbFavoriteService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoBreadcrumbFavoriteService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype._bodyParams;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWItZmF2b3JpdGUvcG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7O0FBbUIzQyxNQUFNLE9BQU8sMkJBQTJCOzs7O0lBU3RDLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBSSxDQUFDOzs7O0lBSnpDLElBQUksR0FBRyxLQUFhLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Ozs7SUFFdkMsSUFBSSxVQUFVLEtBQWEsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzs7Ozs7OztJQUlyRCxhQUFhLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUc7WUFDakIsVUFBVSxFQUFFLEtBQUs7WUFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2QsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxNQUFNO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDO0lBQ25HLENBQUM7OztZQTVCRixVQUFVOzs7O1lBbkJGLFVBQVU7Ozs7Ozs7SUFzQmpCLDJDQUFxQjs7Ozs7SUFDckIsa0RBQTRCOzs7OztJQU1oQiwyQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gdXRpbGl6YWRvIHBhcmEgZmF2b3JpdGFyL2Rlc2Zhdm9yaXRhciB1bWEgdXJsIG5vIGNvbXBvbmVudGUgcG8tYnJlYWRjcnVtYi5cbiAqIEEgQVBJIGRldmUgcmV0b3JuYXIgdW0gb2JqZXRvIG5vIGZvcm1hdG8geyBpc0Zhdm9yaXRlOiBib29sZWFubywgdXJsOiBzdHJpbmcgfS4gRW0gYW1ib3Mgb3MgbcOpdG9kb3MsIEdFVCBlIFBPU1QgZXN0ZVxuICogb2JqZXRvIGRldmUgc2VyIHJldG9ybmFkby5cbiAqIEFvIGFsdGVyYXIgbyBzdGF0dXMgZGUgZmF2b3JpdG8sIGEgQVBJIGRldmUgcmV0b3JuYXIgbyBvYmpldG8gYWNpbWEsIGNvbSBvIG5vdm8gc3RhdHVzIGF0dWFsaXphZG8uXG4gKiBObyBtw6l0b2RvIFBPU1QsIGV4aXN0ZSBhIHBvc3NpYmlsaWRhZGUgZGUgc2VyIGVudmlhZG8gcGFyw6JtZXRyb3MganVudG8gY29tIGEgcmVxdWlzacOnw6NvLiBOZXN0ZSBjYXNvLCBvIG9iamV0byBlbnZpYWRvXG4gKiBwYXJhIGEgQVBJIHRlcsOhIG8gZm9ybWF0bzogeyBpc0Zhdm9yaXRlOiBib29sZWFubywgdXJsOiBzdHJpbmcsIHBhcmFtczoge30gfSwgb25kZSBwYXJhbXMgw6kgbyBvYmpldG8gcXVlIHBvZGUgc2VyIGVudmlhZG9cbiAqIGp1bnRvIGNvbSBhIHJlcXVpc2nDp8Ojby5cbiAqXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJGYXZvcml0ZVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgX3VybDogc3RyaW5nO1xuICBwcml2YXRlIF9ib2R5UGFyYW1zOiBvYmplY3Q7XG5cbiAgZ2V0IHVybCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fdXJsOyB9XG5cbiAgZ2V0IGJvZHlQYXJhbXMoKTogb2JqZWN0IHsgcmV0dXJuIHRoaXMuX2JvZHlQYXJhbXM7IH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGNvbmZpZ1NlcnZpY2UodXJsLCBwYXJhbXMsIGl0ZW0pIHtcbiAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgdGhpcy5fYm9keVBhcmFtcyA9IHtcbiAgICAgIGlzRmF2b3JpdGU6IGZhbHNlLFxuICAgICAgdXJsOiBpdGVtLmxpbmssXG4gICAgICBwYXJhbXM6IHBhcmFtc1xuICAgIH07XG4gIH1cblxuICBzZW5kU3RhdHVzRmF2b3JpdGUoc3RhdHVzKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICB0aGlzLmJvZHlQYXJhbXNbJ2lzRmF2b3JpdGUnXSA9IHN0YXR1cztcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy51cmwsIHRoaXMuYm9keVBhcmFtcyk7XG4gIH1cblxuICBnZXRGYXZvcml0ZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMudXJsLCB7IHJlc3BvbnNlVHlwZTogJ2pzb24nLCBwYXJhbXM6IHsgdXJsOiB0aGlzLmJvZHlQYXJhbXNbJ3VybCddIH19KTtcbiAgfVxufVxuIl19