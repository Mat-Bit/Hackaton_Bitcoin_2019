/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { PoBreadcrumbBaseComponent } from './po-breadcrumb-base.component';
/**
 * \@docsExtends PoBreadcrumbBaseComponent
 *
 * \@example
 *
 * <example name="po-breadcrumb-basic" title="Portinari Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="Portinari Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
export class PoBreadcrumbComponent extends PoBreadcrumbBaseComponent {
    /**
     * @param {?} differs
     * @param {?} element
     * @param {?} renderer
     */
    constructor(differs, element, renderer) {
        super();
        this.element = element;
        this.renderer = renderer;
        this.showDropdown = false;
        this.showDropdownToggle = false;
        this._breadcrumbItemsLenght = 0;
        this.calculatedElement = false;
        this.hiddenWithoutResize = false;
        this.initialized = false;
        this.wasClickedonDropdown = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const clickedOutIconDropdown = this.checkClickOutElement(event, this.dropdownIcon);
            if (clickedOutIconDropdown) {
                this.showDropdown = false;
                this.removeClickoutListener();
            }
        });
        this.differ = differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initialized = true;
        this.initializeResizeListener();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        /** @type {?} */
        const breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se vis√≠vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeClickoutListener();
        this.removeResizeListener();
    }
    /**
     * @return {?}
     */
    toggleDropdown() {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    }
    /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    checkClickOutElement(event, element) {
        return element && !element.nativeElement.contains(event.target);
    }
    /**
     * @private
     * @return {?}
     */
    checkChangeOnItems() {
        if (this.differ) {
            /** @type {?} */
            const changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    calcBreadcrumb() {
        /** @type {?} */
        const breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        /** @type {?} */
        const breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getBreadcrumbFavoriteWidth() {
        return this.favoriteService ? this.element.nativeElement
            .querySelector('.po-breadcrumb-favorite').offsetWidth + 20 : 0;
    }
    /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    getBreadcrumbWidth(breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
    }
    /**
     * @private
     * @return {?}
     */
    calcBreadcrumbItemsWidth() {
        /** @type {?} */
        const breadcrumbItem = this.element.nativeElement
            .querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map((/**
         * @param {?} breadcrumb
         * @return {?}
         */
        breadcrumb => breadcrumb['offsetWidth']))
            .reduce((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => a + b), 16);
    }
    /**
     * @private
     * @return {?}
     */
    enableBreadcrumbResponsive() {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    }
    /**
     * @private
     * @return {?}
     */
    disableBreadcrumbResponsive() {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    }
    /**
     * @private
     * @return {?}
     */
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.calculatedElement && !this.hiddenWithoutResize && this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                this.hiddenWithoutResize = true;
            }
            else {
                this.calcBreadcrumb();
            }
        }), 50);
    }
    /**
     * @private
     * @return {?}
     */
    initBreadcrumbSize() {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    }
    /**
     * @private
     * @return {?}
     */
    initializeClickoutListener() {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    }
    /**
     * @private
     * @return {?}
     */
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.debounceResize();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removeClickoutListener() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeResizeListener() {
        this.resizeListener();
    }
}
PoBreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-breadcrumb',
                template: "<div class=\"po-breadcrumb\" #breadcrumb>\n\n  <ul class=\"po-breadcrumb-items\">\n\n    <li #dropdownIcon\n      *ngIf=\"showDropdownToggle\"\n      class=\"po-breadcrumb-item po-clickable\"\n      (click)=\"toggleDropdown()\">\n\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\n      <div class=\"po-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView, let itemIndex = index;\">\n      <po-breadcrumb-item\n        [p-action]=\"item.action\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        [p-item-active]=\"itemIndex === (itemsView.length - 1)\">\n      </po-breadcrumb-item>\n    </div>\n\n  </ul>\n\n  <po-breadcrumb-favorite *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\">\n  </po-breadcrumb-favorite>\n\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\"\n    [p-items]=\"dropdownItems\">\n  </po-breadcrumb-dropdown>\n\n</div>\n"
            }] }
];
/** @nocollapse */
PoBreadcrumbComponent.ctorParameters = () => [
    { type: IterableDiffers },
    { type: ElementRef },
    { type: Renderer2 }
];
PoBreadcrumbComponent.propDecorators = {
    breadcrumbElement: [{ type: ViewChild, args: ['breadcrumb', { read: ElementRef, static: true },] }],
    dropdownIcon: [{ type: ViewChild, args: ['dropdownIcon', { read: ElementRef, static: false },] }]
};
if (false) {
    /** @type {?} */
    PoBreadcrumbComponent.prototype.showDropdown;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.showDropdownToggle;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.dropdownItems;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype._breadcrumbItemsLenght;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.hiddenWithoutResize;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.timeoutResize;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.breadcrumbElement;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.dropdownIcon;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.wasClickedonDropdown;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.element;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,