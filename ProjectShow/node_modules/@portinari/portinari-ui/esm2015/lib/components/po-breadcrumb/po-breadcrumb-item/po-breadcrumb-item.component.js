/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza cada item do po-breadcrumb.
 */
export class PoBreadcrumbItemComponent {
    constructor() {
        // Especifica se item Ã© o link ativo.
        this.itemActive = false;
    }
}
PoBreadcrumbItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-breadcrumb-item',
                template: "<li *ngIf=\"!itemActive\"\n  [class.po-breadcrumb-item]=\"link || action\"\n  [class.po-breadcrumb-item-unclickable]=\"!link && !action\">\n\n  <a *ngIf=\"link\" [routerLink]=\"link\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && action\" (click)=\"action(label)\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && !action\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n</li>\n\n<li *ngIf=\"itemActive\" class=\"po-breadcrumb-item-unclickable\">\n  <label class=\"po-breadcrumb-label\">{{ label }}</label>\n</li>\n"
            }] }
];
PoBreadcrumbItemComponent.propDecorators = {
    action: [{ type: Input, args: ['p-action',] }],
    label: [{ type: Input, args: ['p-label',] }],
    link: [{ type: Input, args: ['p-link',] }],
    itemActive: [{ type: Input, args: ['p-item-active',] }]
};
if (false) {
    /** @type {?} */
    PoBreadcrumbItemComponent.prototype.action;
    /** @type {?} */
    PoBreadcrumbItemComponent.prototype.label;
    /** @type {?} */
    PoBreadcrumbItemComponent.prototype.link;
    /** @type {?} */
    PoBreadcrumbItemComponent.prototype.itemActive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLWl0ZW0vcG8tYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBYWpELE1BQU0sT0FBTyx5QkFBeUI7SUFKdEM7O1FBZ0IwQixlQUFVLEdBQVksS0FBSyxDQUFDO0lBQ3RELENBQUM7OztZQWpCQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsc3hCQUFrRDthQUNuRDs7O3FCQUlFLEtBQUssU0FBQyxVQUFVO29CQUdoQixLQUFLLFNBQUMsU0FBUzttQkFHZixLQUFLLFNBQUMsUUFBUTt5QkFHZCxLQUFLLFNBQUMsZUFBZTs7OztJQVR0QiwyQ0FBb0M7O0lBR3BDLDBDQUFnQzs7SUFHaEMseUNBQThCOztJQUc5QiwrQ0FBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBxdWUgcmVuZGVyaXphIGNhZGEgaXRlbSBkbyBwby1icmVhZGNydW1iLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1icmVhZGNydW1iLWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJJdGVtQ29tcG9uZW50IHtcblxuICAvLyBBw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBhbyBjbGljYXIgc29icmUgbyBpdGVtLlxuICBASW5wdXQoJ3AtYWN0aW9uJykgYWN0aW9uOiBGdW5jdGlvbjtcblxuICAvLyBMYWJlbCBkbyBpdGVtLlxuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xuXG4gIC8vIExpbmsgZG8gaXRlbS5cbiAgQElucHV0KCdwLWxpbmsnKSBsaW5rOiBzdHJpbmc7XG5cbiAgLy8gRXNwZWNpZmljYSBzZSBpdGVtIMOpIG8gbGluayBhdGl2by5cbiAgQElucHV0KCdwLWl0ZW0tYWN0aXZlJykgaXRlbUFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xufVxuIl19