/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';
import { PoControlPositionService } from './../../services/po-control-position/po-control-position.service';
import { PoTooltipBaseDirective } from './po-tooltip-base.directive';
/**
 * \@docsExtends PoTooltipBaseDirective
 *
 * \@example
 *
 * <example name="po-tooltip-basic" title="Portinari Tooltip Basic" >
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.html"> </file>
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-labs" title="Portinari Tooltip Labs" >
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.html"> </file>
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-new-user" title="Portinari Tooltip - New User" >
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.html"> </file>
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
export class PoTooltipDirective extends PoTooltipBaseDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} poControlPosition
     */
    constructor(elementRef, renderer, poControlPosition) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
        this.tooltipOffset = 8;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initScrollEventListenerFunction();
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.tooltip) {
                this.tooltipContent ? this.showTooltip() : this.createTooltip();
                this.removeArrow(this.arrowDirection);
                this.poControlPosition.adjustPosition(this.tooltipPosition);
                this.arrowDirection = this.poControlPosition.getArrowDirection();
                this.addArrow(this.arrowDirection);
                this.lastTooltipText = this.tooltip;
            }
        }));
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.hideTooltip();
    }
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    addArrow(arrowDirection) {
        this.renderer.addClass(this.divArrow, `po-arrow-${arrowDirection}`);
    }
    /**
     * @private
     * @return {?}
     */
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    // Monta a estrutura do tooltip
    /**
     * @private
     * @return {?}
     */
    createTooltip() {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'po-tooltip');
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'po-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'po-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        this.renderer.appendChild(this.elementRef.nativeElement, this.tooltipContent);
        this.poControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    }
    /**
     * @private
     * @return {?}
     */
    initScrollEventListenerFunction() {
        this.eventListenerFunction = (/**
         * @return {?}
         */
        () => {
            if (!this.isHidden) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.poControlPosition.adjustPosition(this.tooltipPosition);
                }));
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    hideTooltip() {
        if (this.tooltipContent) {
            this.renderer.addClass(this.tooltipContent, 'po-invisible');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    }
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    removeArrow(arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(`.po-arrow-${arrowDirection}`)) {
            this.renderer.removeClass(this.divArrow, `po-arrow-${arrowDirection}`);
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeScrollEventListener() {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    /**
     * @private
     * @return {?}
     */
    showTooltip() {
        this.renderer.removeClass(this.tooltipContent, 'po-invisible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    }
    /**
     * @private
     * @return {?}
     */
    updateTextContent() {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    }
}
PoTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[p-tooltip]',
                providers: [PoControlPositionService]
            },] }
];
/** @nocollapse */
PoTooltipDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: PoControlPositionService }
];
PoTooltipDirective.propDecorators = {
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.arrowDirection;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.divArrow;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.divContent;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.isHidden;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.lastTooltipText;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.textContent;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.tooltipContent;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.tooltipOffset;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.eventListenerFunction;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.poControlPosition;
}
//# sourceMappingURL=data:application/json;base64,