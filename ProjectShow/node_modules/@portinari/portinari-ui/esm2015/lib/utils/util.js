/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */
export const poLocales = ['pt', 'en', 'es', 'ru'];
// Idioma padrão
/** @type {?} */
export const poLocaleDefault = 'pt';
/**
 * @deprecated
 * Utilize o método `getShortBrowserLanguage`.
 *
 * \@description
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */
export function browserLanguage() {
    return getShortBrowserLanguage();
}
/**
 * Converte e formata os bytes em formato mais legível para o usuário.
 *
 * Por exemplo:
 * - 31457280 em 30 MB.
 * - 21474836480 em 20 GB.
 * - 12.5666666 em 12.57 Bytes (duas casas decimais).
 *
 * @param {?} bytes {number} Valor em bytes
 * @param {?=} decimals {number} Quantidade de casas decimais que terá após a conversão.
 * @return {?}
 */
export function formatBytes(bytes, decimals = 2) {
    if (!bytes) {
        return undefined;
    }
    /** @type {?} */
    const multiplier = 1024;
    /** @type {?} */
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    /** @type {?} */
    const result = Math.floor(Math.log(bytes) / Math.log(multiplier));
    decimals = decimals < 0 ? 0 : decimals;
    return `${parseFloat((bytes / Math.pow(multiplier, result)).toFixed(decimals))} ${sizes[result]}`;
}
/**
 * Retorna o idioma atual do navegador
 * @return {?}
 */
export function getBrowserLanguage() {
    // navigator.userLanguage is the value for IE10
    /** @type {?} */
    const language = navigator.language || navigator['userLanguage'];
    /** @type {?} */
    const shortLanguage = getShortLanguage(language);
    return poLocales.includes(shortLanguage) ? language : poLocaleDefault;
}
/**
 * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
 *
 * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo PO,
 * será retornado a linguagem padrão (poLocaleDefault).
 * @return {?}
 */
export function getShortBrowserLanguage() {
    return getShortLanguage(getBrowserLanguage());
}
/**
 * Retorna o idioma com somente a abreviação do idioma (duas primeiras letras).
 * Por exemplo: "pt" ou "es".
 *
 * \@default pt
 * @param {?} language {string} linguagem.
 *
 * @return {?} sigla do idioma padrão {string}.
 *
 */
export function getShortLanguage(language) {
    return (language || poLocaleDefault).toLowerCase().substring(0, 2);
}
/**
 * @param {?} value
 * @return {?}
 */
export function isLanguage(value) {
    /** @type {?} */
    const languageRegex = new RegExp('^[a-z]{2}(\-[a-z]{2})?$', 'i');
    return languageRegex.test(value);
}
/* istanbul ignore next */
/**
 * @return {?}
 */
export function reloadCurrentPage() {
    window.location.assign(location.href);
}
/**
 * @param {?} val
 * @return {?}
 */
export function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */
export function convertToInt(value, valueDefault) {
    /** @type {?} */
    const validNumber = parseInt(value, 10);
    /** @type {?} */
    const validDefaultValue = parseInt(valueDefault, 10);
    /** @type {?} */
    const defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
    return validNumber || validNumber === 0 ? validNumber : defaultValue;
}
/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */
export function isTypeof(object, type) {
    return typeof object === type;
}
/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */
export function callFunction(fn, context, param) {
    if (isTypeof(fn, 'function')) {
        fn.call(context, param);
    }
    else {
        context[fn](param);
    }
}
/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */
export function convertIsoToDate(value, start, end) {
    if (value) {
        /** @type {?} */
        const day = parseInt(value.substring(8, 10), 10);
        /** @type {?} */
        const month = parseInt(value.substring(5, 7), 10);
        /** @type {?} */
        const year = parseInt(value.substring(0, 4), 10);
        if (start) {
            /** @type {?} */
            const date = new Date(year, month - 1, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            return date;
        }
        else if (end) {
            /** @type {?} */
            const date = new Date(year, month - 1, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            return date;
        }
        else {
            /** @type {?} */
            const milliseconds = Date.parse(value);
            /** @type {?} */
            const timezone = new Date().getTimezoneOffset() * 60000;
            return new Date(milliseconds + timezone);
        }
    }
}
/**
 * @param {?} date
 * @return {?}
 */
export function convertDateToISODate(date) {
    if (date) {
        /** @type {?} */
        const getMonth = date.getMonth() + 1;
        /** @type {?} */
        const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        /** @type {?} */
        const month = getMonth < 10 ? '0' + getMonth : getMonth;
        /** @type {?} */
        const year = formatYear(date.getFullYear());
        return year + '-' + month + '-' + day;
    }
    else {
        return null;
    }
}
/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */
export function convertDateToISOExtended(date, time) {
    if (date) {
        /** @type {?} */
        const getMonth = date.getMonth() + 1;
        /** @type {?} */
        const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        /** @type {?} */
        const month = getMonth < 10 ? '0' + getMonth : getMonth;
        /** @type {?} */
        const year = formatYear(date.getFullYear());
        /** @type {?} */
        const dateString = date.toString();
        if (time !== null) {
            return year + '-' + month + '-' + day + time;
        }
        else {
            return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +
                dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
        }
    }
    else {
        return null;
    }
}
/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */
export function formatYear(year) {
    if (year >= 1000) {
        return year.toString();
    }
    if (year > 99 && year < 1000) {
        return `0${year}`;
    }
    if (year > 9 && year < 100) {
        return `00${year}`;
    }
    if (year >= 0 && year < 10) {
        return `000${year}`;
    }
}
// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */
export function isIEOrEdge() {
    /** @type {?} */
    const userAgent = window.navigator.userAgent;
    return /msie\s|trident\/|edge\//i.test(userAgent);
}
// Verifica se o navegador em que está sendo usado é Internet Explorer
/**
 * @return {?}
 */
export function isIE() {
    /** @type {?} */
    const userAgent = window.navigator.userAgent;
    return /msie\s|trident/i.test(userAgent);
}
// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */
export function isMobile() {
    /** @type {?} */
    const userAgent = window.navigator.userAgent;
    return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
}
/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */
export function isEquals(value, comparedValue) {
    return JSON.stringify(value) === JSON.stringify(comparedValue);
}
/**
 * @param {?} event
 * @return {?}
 */
export function isKeyCodeEnter(event) {
    return event.keyCode === 13 || event.which === 13;
}
/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */
export function setYearFrom0To100(date, year) {
    if (year >= 0 && year < 100) {
        date.setFullYear(year);
    }
}
/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */
export function sortOptionsByProperty(options, property) {
    options.sort((/**
     * @param {?} optionA
     * @param {?} optionB
     * @return {?}
     */
    (optionA, optionB) => {
        optionA = optionA[property].toString().toLowerCase();
        optionB = optionB[property].toString().toLowerCase();
        if (optionA < optionB) {
            return -1;
        }
        if (optionA > optionB) {
            return 1;
        }
        return 0;
    }));
}
/**
 * @param {?} list
 * @return {?}
 */
export function removeDuplicatedOptions(list) {
    for (let i = 0; i < list.length; i++) {
        if (i === 0) {
            continue;
        }
        if (list.findIndex((/**
         * @param {?} op
         * @return {?}
         */
        op => op.value === list[i].value)) !== i) {
            list.splice(i, 1);
            i--;
        }
    }
}
/**
 * @param {?} list
 * @return {?}
 */
export function removeUndefinedAndNullOptions(list) {
    for (let i = 0; i < list.length; i++) {
        if (list[i].value === undefined || list[i].value === null) {
            list.splice(i, 1);
            i--;
        }
    }
}
/**
 * @param {?} value
 * @return {?}
 */
export function validValue(value) {
    return (value !== null && value !== undefined && value !== '') || value === false;
}
/**
 * @param {?} url
 * @return {?}
 */
export function isExternalLink(url) {
    return url ? url.startsWith('http') : false;
}
/**
 * @param {?} url
 * @return {?}
 */
export function openExternalLink(url) {
    window.open(url, '_blank');
}
/**
 * @param {?} link
 * @return {?}
 */
export function getFormattedLink(link) {
    /** @type {?} */
    let formattedLink = '';
    // Retira todos os pontos no começo da URL.
    if (link) {
        formattedLink = link.replace(/^(\.)+/g, '');
    }
    // Verifica se foi utilizado uma rota que não comece com barra.
    if (!formattedLink.startsWith('/')) {
        formattedLink = '/'.concat(formattedLink);
    }
    return formattedLink;
}
/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */
export function sortValues(leftSide, rightSide, ascending = true) {
    /** @type {?} */
    const left = isTypeof(leftSide, 'string') ? leftSide.toLowerCase() : leftSide;
    /** @type {?} */
    const right = isTypeof(rightSide, 'string') ? rightSide.toLowerCase() : rightSide;
    if (ascending) {
        if (left < right) {
            return -1;
        }
        else if (left > right) {
            return 1;
        }
    }
    else if (ascending === false) {
        if (left < right) {
            return 1;
        }
        else if (left > right) {
            return -1;
        }
    }
    return 0;
}
/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */
export function validateDateRange(date, dateStart, dateEnd) {
    if (dateStart && dateEnd) {
        return (date >= dateStart && date <= dateEnd);
    }
    else if (dateStart && !dateEnd) {
        return (date >= dateStart);
    }
    else if (!dateStart && dateEnd) {
        return (date <= dateEnd);
    }
    else {
        return true;
    }
}
/**
 * @return {?}
 */
export function uuid() {
    /**
     * @return {?}
     */
    function hex4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' +
        hex4() + '-' + hex4() + hex4() + hex4();
}
/**
 * @param {?} text
 * @return {?}
 */
export function capitalizeFirstLetter(text) {
    return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;
}
/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */
export function mapArrayByProperties(items = [], properties = []) {
    return items.map((/**
     * @param {?} item
     * @return {?}
     */
    item => mapObjectByProperties(item, properties)));
}
/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */
export function mapObjectByProperties(object = {}, properties = []) {
    /** @type {?} */
    const getSelectedProperties = (/**
     * @param {?} selectedProperties
     * @param {?} property
     * @return {?}
     */
    (selectedProperties, property) => (Object.assign({}, selectedProperties, { [property]: object[property] })));
    return properties.reduce(getSelectedProperties, {});
}
/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */
export function valuesFromObject(object = {}) {
    return Object.keys(object).map((/**
     * @param {?} property
     * @return {?}
     */
    property => object[property]));
}
/**
 * Converte um arquivo em base64.
 *
 * @param {?} file arquivo que será convertido.
 * @return {?}
 */
export function convertImageToBase64(file) {
    return new Promise((/**
     * @param {?} resolve
     * @param {?} reject
     * @return {?}
     */
    (resolve, reject) => {
        /** @type {?} */
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = (/**
         * @return {?}
         */
        () => resolve(reader.result));
        reader.onerror = (/**
         * @param {?} error
         * @return {?}
         */
        error => reject(error));
    }));
}
//# sourceMappingURL=data:application/json;base64,