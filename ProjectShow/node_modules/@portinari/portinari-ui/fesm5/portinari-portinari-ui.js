import { Injectable, Component, Input, ViewChild, TemplateRef, ContentChildren, EventEmitter, ChangeDetectionStrategy, Output, NgModule, IterableDiffers, ElementRef, Renderer2, ɵɵdefineInjectable, ChangeDetectorRef, Directive, HostListener, ViewContainerRef, forwardRef, NgZone, ComponentFactoryResolver, ViewChildren, ApplicationRef, Injector, ɵɵinject, INJECTOR, Pipe, ContentChild, InjectionToken, Inject, APP_INITIALIZER } from '@angular/core';
import { CommonModule, DecimalPipe, TitleCasePipe, CurrencyPipe, DatePipe, Location } from '@angular/common';
import { __extends, __assign, __spread, __read, __values, __rest, __awaiter, __generator } from 'tslib';
import { Subject, fromEvent, throwError, Observable } from 'rxjs';
import { trigger, transition, style, animate, state, keyframes, AnimationBuilder } from '@angular/animations';
import { RouterModule, Router, NavigationEnd, NavigationCancel } from '@angular/router';
import { HttpClient, HttpParams, HttpEventType, HttpResponse, HttpRequest, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ControlContainer, NgForm } from '@angular/forms';
import { v4 } from 'uuid';
import { DomSanitizer, Title } from '@angular/platform-browser';
import { map, filter, distinctUntilChanged, tap, debounceTime, catchError } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Componente utilizado para agrupar visualmente uma lista de conteúdos, mostrando-os individualmente
 * ao clicar no título de cada item.
 *
 * Para utilizá-lo, é necessário envolver cada item no componente [`po-accordion-item`](/documentation/po-accordion-item),
 * como no exemplo abaixo:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="Portinari Accordion 1">
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="Portinari Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * O componente já faz o controle de abertura e fechamento dos itens automaticamente.
 *
 * Caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript
 * acesse a [documentamentação do PoAccordionItem](/documentation/po-accordion-item).
 */
var  /**
 * \@description
 *
 * Componente utilizado para agrupar visualmente uma lista de conteúdos, mostrando-os individualmente
 * ao clicar no título de cada item.
 *
 * Para utilizá-lo, é necessário envolver cada item no componente [`po-accordion-item`](/documentation/po-accordion-item),
 * como no exemplo abaixo:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="Portinari Accordion 1">
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="Portinari Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * O componente já faz o controle de abertura e fechamento dos itens automaticamente.
 *
 * Caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript
 * acesse a [documentamentação do PoAccordionItem](/documentation/po-accordion-item).
 */
PoAccordionBaseComponent = /** @class */ (function () {
    function PoAccordionBaseComponent() {
    }
    return PoAccordionBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço para poder notificar o componente `po-accordion` quando um `po-accordion-item` for
 * expandido/colapsado.
 */
var PoAccordionService = /** @class */ (function () {
    function PoAccordionService() {
        this.subjectChild = new Subject();
    }
    // Recebe o accordionItem
    // Recebe o accordionItem
    /**
     * @return {?}
     */
    PoAccordionService.prototype.receiveFromChildAccordionClicked = 
    // Recebe o accordionItem
    /**
     * @return {?}
     */
    function () {
        return this.subjectChild.asObservable();
    };
    // Envia accordionItem colapsado/expadido do accordion
    // Envia accordionItem colapsado/expadido do accordion
    /**
     * @param {?} accordionItem
     * @return {?}
     */
    PoAccordionService.prototype.sendToParentAccordionItemClicked = 
    // Envia accordionItem colapsado/expadido do accordion
    /**
     * @param {?} accordionItem
     * @return {?}
     */
    function (accordionItem) {
        this.subjectChild.next(accordionItem);
    };
    PoAccordionService.decorators = [
        { type: Injectable }
    ];
    return PoAccordionService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoAccordionService.prototype.subjectChild;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Componente utilizado para renderizar os itens do `po-accordion`.
 *
 * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
 * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="Portinari Accordion 1" #item1>
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="Portinari Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `\@ViewChild`:
 *
 * ```
 * \@ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapse()
 *    this.item1.expand();
 *  }
 * ```
 */
var PoAccordionItemComponent = /** @class */ (function () {
    function PoAccordionItemComponent(accordionService) {
        this.accordionService = accordionService;
    }
    /**
     * Método para colapsar o `po-accordion-item`.
     */
    /**
     * Método para colapsar o `po-accordion-item`.
     * @return {?}
     */
    PoAccordionItemComponent.prototype.collapse = /**
     * Método para colapsar o `po-accordion-item`.
     * @return {?}
     */
    function () {
        this.expanded = false;
        this.accordionService.sendToParentAccordionItemClicked(this);
    };
    /**
     * Método para expandir o `po-accordion-item`.
     */
    /**
     * Método para expandir o `po-accordion-item`.
     * @return {?}
     */
    PoAccordionItemComponent.prototype.expand = /**
     * Método para expandir o `po-accordion-item`.
     * @return {?}
     */
    function () {
        this.expanded = true;
        this.accordionService.sendToParentAccordionItemClicked(this);
    };
    PoAccordionItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-accordion-item',
                    template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    PoAccordionItemComponent.ctorParameters = function () { return [
        { type: PoAccordionService }
    ]; };
    PoAccordionItemComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        templateRef: [{ type: ViewChild, args: [TemplateRef, { static: true },] }]
    };
    return PoAccordionItemComponent;
}());
if (false) {
    /** @type {?} */
    PoAccordionItemComponent.prototype.expanded;
    /**
     * Título do item.
     * @type {?}
     */
    PoAccordionItemComponent.prototype.label;
    /** @type {?} */
    PoAccordionItemComponent.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    PoAccordionItemComponent.prototype.accordionService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoAccordionBaseComponent
 *
 * \@example
 *
 * <example name="po-accordion-basic" title="Portinari Accordion Basic" >
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.html"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.ts"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-accordion-basic/sample-po-accordion-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-accordion-labs" title="Portinari Accordion Labs" >
 *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.html"> </file>
 *  <file name="sample-po-accordion-labs/sample-po-accordion-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-accordion-faq" title="Portinari Accordion - FAQs" >
 *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.html"> </file>
 *  <file name="sample-po-accordion-faq/sample-po-accordion-faq.component.ts"> </file>
 * </example>
 */
var PoAccordionComponent = /** @class */ (function (_super) {
    __extends(PoAccordionComponent, _super);
    function PoAccordionComponent(accordionService) {
        var _this = _super.call(this) || this;
        _this.accordionService = accordionService;
        _this.receiveFromChildAccordionSubscription();
        return _this;
    }
    /**
     * @return {?}
     */
    PoAccordionComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.accordionServiceSubscription.unsubscribe();
    };
    /**
     * @param {?} event
     * @param {?} poAccordionItem
     * @return {?}
     */
    PoAccordionComponent.prototype.headerToggle = /**
     * @param {?} event
     * @param {?} poAccordionItem
     * @return {?}
     */
    function (event, poAccordionItem) {
        poAccordionItem.expanded = event;
        this.toggle(poAccordionItem);
    };
    /**
     * @private
     * @return {?}
     */
    PoAccordionComponent.prototype.receiveFromChildAccordionSubscription = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.accordionServiceSubscription = this.accordionService.receiveFromChildAccordionClicked()
            .subscribe((/**
         * @param {?} poAccordionItem
         * @return {?}
         */
        function (poAccordionItem) { return _this.toggle(poAccordionItem); }));
    };
    /**
     * @private
     * @param {?} poAccordionItem
     * @return {?}
     */
    PoAccordionComponent.prototype.toggle = /**
     * @private
     * @param {?} poAccordionItem
     * @return {?}
     */
    function (poAccordionItem) {
        /** @type {?} */
        var isCurrentAccordionCollapsed = !poAccordionItem.expanded;
        if (isCurrentAccordionCollapsed) {
            this.expandedActiveAccordionItem = null;
            return;
        }
        if (this.expandedActiveAccordionItem) {
            this.expandedActiveAccordionItem.collapse();
        }
        this.expandedActiveAccordionItem = poAccordionItem;
    };
    PoAccordionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-accordion',
                    template: "<div class=\"po-accordion po-container po-container-no-padding\">\n\n  <section *ngFor=\"let poAccordionItem of poAccordionItems\"\n    class=\"po-accordion-item\"\n    [class.po-accordion-item-active]=\"poAccordionItem.expanded\">\n\n    <po-accordion-item-header\n      [p-expanded]=\"poAccordionItem.expanded\"\n      [p-label]=\"poAccordionItem.label\"\n      (p-toggle)=\"headerToggle($event, poAccordionItem)\">\n    </po-accordion-item-header>\n\n    <po-accordion-item-body [p-expanded]=\"poAccordionItem.expanded\">\n      <ng-container *ngTemplateOutlet=\"poAccordionItem.templateRef\"></ng-container>\n    </po-accordion-item-body>\n  </section>\n\n</div>\n",
                    providers: [PoAccordionService]
                }] }
    ];
    /** @nocollapse */
    PoAccordionComponent.ctorParameters = function () { return [
        { type: PoAccordionService }
    ]; };
    PoAccordionComponent.propDecorators = {
        poAccordionItems: [{ type: ContentChildren, args: [PoAccordionItemComponent,] }]
    };
    return PoAccordionComponent;
}(PoAccordionBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoAccordionComponent.prototype.accordionServiceSubscription;
    /**
     * @type {?}
     * @private
     */
    PoAccordionComponent.prototype.expandedActiveAccordionItem;
    /** @type {?} */
    PoAccordionComponent.prototype.poAccordionItems;
    /**
     * @type {?}
     * @private
     */
    PoAccordionComponent.prototype.accordionService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoAccordionItemBodyComponent = /** @class */ (function () {
    function PoAccordionItemBodyComponent() {
        this.expanded = false;
    }
    PoAccordionItemBodyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-accordion-item-body',
                    template: "<div class=\"po-accordion-item-body\" *ngIf=\"expanded\" @toggleBody>\n  <div class=\"po-accordion-item-body-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    animations: [
                        trigger('toggleBody', [
                            transition('* => void', [
                                style({ height: '*' }),
                                animate(200, style({ height: 0 }))
                            ]),
                            transition('void => *', [
                                style({ height: '0' }),
                                animate(200, style({ height: '*' }))
                            ])
                        ])
                    ]
                }] }
    ];
    PoAccordionItemBodyComponent.propDecorators = {
        expanded: [{ type: Input, args: ['p-expanded',] }]
    };
    return PoAccordionItemBodyComponent;
}());
if (false) {
    /** @type {?} */
    PoAccordionItemBodyComponent.prototype.expanded;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoAccordionItemHeaderComponent = /** @class */ (function () {
    function PoAccordionItemHeaderComponent() {
        this.expanded = false;
        this.toggle = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PoAccordionItemHeaderComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.expanded = !this.expanded;
        this.toggle.emit(this.expanded);
    };
    PoAccordionItemHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-accordion-item-header',
                    template: "<header class=\"po-accordion-item-header\">\n  <button class=\"po-accordion-item-header-button po-clickable\" (click)=\"onClick()\">\n    <div class=\"po-text-ellipsis po-accordion-item-header-title\">{{ label }}</div>\n    <span #icon class=\"po-icon po-accordion-item-header-icon po-icon-arrow-down\">\n    </span>\n  </button>\n</header>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PoAccordionItemHeaderComponent.propDecorators = {
        expanded: [{ type: Input, args: ['p-expanded',] }],
        label: [{ type: Input, args: ['p-label',] }],
        toggle: [{ type: Output, args: ['p-toggle',] }]
    };
    return PoAccordionItemHeaderComponent;
}());
if (false) {
    /** @type {?} */
    PoAccordionItemHeaderComponent.prototype.expanded;
    /** @type {?} */
    PoAccordionItemHeaderComponent.prototype.label;
    /** @type {?} */
    PoAccordionItemHeaderComponent.prototype.toggle;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-accordion`.
 *
 * > Para o correto funcionamento do componente `po-accordion`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 * import { PoModule } from '\@portinari/portinari-ui';
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var PoAccordionModule = /** @class */ (function () {
    function PoAccordionModule() {
    }
    PoAccordionModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        PoAccordionComponent,
                        PoAccordionItemBodyComponent,
                        PoAccordionItemComponent,
                        PoAccordionItemHeaderComponent
                    ],
                    exports: [
                        PoAccordionComponent,
                        PoAccordionItemComponent
                    ]
                },] }
    ];
    return PoAccordionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PO_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
/** @type {?} */
var PO_AVATAR_SIZE_DEFAULT = 'md';
/**
 * \@description
 *
 * O componente `po-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
 * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
 *
 * Além de poder ser utilizado separadamente, é possível usar o `po-avatar` juntamente com outros componentes e criar
 * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
 */
var PoAvatarBaseComponent = /** @class */ (function () {
    function PoAvatarBaseComponent() {
        this._size = 'md';
    }
    Object.defineProperty(PoAvatarBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * @optional
         *
         * @description
         *
         * Tamanho de exibição do componente.
         *
         * Valores válidos:
         *  - `xs` (24x24)
         *  - `sm` (32x32)
         *  - `md` (64x64)
         *  - `lg` (96x96)
         *  - `xl` (144x144)
         *
         * @default `md`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Tamanho de exibição do componente.
         *
         * Valores válidos:
         *  - `xs` (24x24)
         *  - `sm` (32x32)
         *  - `md` (64x64)
         *  - `lg` (96x96)
         *  - `xl` (144x144)
         *
         * \@default `md`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = PO_AVATAR_SIZES.includes(value) ? value : PO_AVATAR_SIZE_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    PoAvatarBaseComponent.propDecorators = {
        src: [{ type: Input, args: ['p-src',] }],
        size: [{ type: Input, args: ['p-size',] }]
    };
    return PoAvatarBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoAvatarBaseComponent.prototype._size;
    /**
     * Fonte da imagem que pode ser um caminho local (`./assets/images/logo-black-small.png`)
     * ou um servidor externo (`https://portinari.io/assets/images/logo-black-small.png`).
     * @type {?}
     */
    PoAvatarBaseComponent.prototype.src;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoAvatarBaseComponent
 *
 * \@example
 *
 * <example name="po-avatar-basic" title="Portinari Avatar Basic" >
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.html"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.ts"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-avatar-basic/sample-po-avatar-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-avatar-labs" title="Portinari Avatar Labs" >
 *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.html"> </file>
 *  <file name="sample-po-avatar-labs/sample-po-avatar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-avatar-business-card" title="Portinari Avatar - Business Card" >
 *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.html"> </file>
 *  <file name="sample-po-avatar-business-card/sample-po-avatar-business-card.component.ts"> </file>
 * </example>
 */
var PoAvatarComponent = /** @class */ (function (_super) {
    __extends(PoAvatarComponent, _super);
    function PoAvatarComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    PoAvatarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.src) {
            this.src = undefined;
        }
    };
    /**
     * @return {?}
     */
    PoAvatarComponent.prototype.onError = /**
     * @return {?}
     */
    function () {
        this.src = undefined;
    };
    PoAvatarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-avatar',
                    template: "<div class=\"po-avatar po-avatar-{{ size }}\">\n  <ng-container *ngIf=\"src; then sourceImage; else defaultIcon\"></ng-container>\n</div>\n\n<ng-template #sourceImage>\n  <img class=\"po-avatar-image\" [src]=\"src\" alt=\"\" (error)=\"onError()\">\n</ng-template>\n\n<ng-template #defaultIcon>\n  <span class=\"po-icon po-icon-user po-avatar-default-icon\"></span>\n</ng-template>\n"
                }] }
    ];
    return PoAvatarComponent;
}(PoAvatarBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-avatar.
 */
var PoAvatarModule = /** @class */ (function () {
    function PoAvatarModule() {
    }
    PoAvatarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        PoAvatarComponent
                    ],
                    exports: [
                        PoAvatarComponent
                    ]
                },] }
    ];
    return PoAvatarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
var PoBreadcrumbBaseComponent = /** @class */ (function () {
    function PoBreadcrumbBaseComponent() {
        this.itemsView = [];
        this._items = [];
    }
    Object.defineProperty(PoBreadcrumbBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Po Portal', link: 'portal' }
         * ```
         */
        set: /**
         * \@description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Po Portal', link: 'portal' }
         * ```
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = items;
            this.itemsView = [].concat(items);
        },
        enumerable: true,
        configurable: true
    });
    PoBreadcrumbBaseComponent.propDecorators = {
        favoriteService: [{ type: Input, args: ['p-favorite-service',] }],
        items: [{ type: Input, args: ['p-items',] }],
        paramsService: [{ type: Input, args: ['p-params-service',] }]
    };
    return PoBreadcrumbBaseComponent;
}());
if (false) {
    /** @type {?} */
    PoBreadcrumbBaseComponent.prototype.itemsView;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbBaseComponent.prototype._items;
    /**
     * \@optional
     *
     * \@description
     *
     * Permite definir uma URL no componente `po-breadcrumb` para favoritar ou desfavoritar.
     * > Para utilizar esta propriedade, o último `PoBreadcrumbItem` da lista de items da propriedade `p-items` deve ter um link informado.
     *
     * > A API deve estar preparada para retornar um objeto no formato `{ isFavorite: boolean }`.
     *
     * Ao iniciar, o `po-breadcrumb` faz um GET na URL definida na propriedade `p-favorite-service` e deve retornar a propriedade
     * `{ isFavorite: boolean }` do último `PoBreadcrumbItem` definido na lista de itens da propriedade `p-items`.
     *
     * Ao clicar em favoritar ou desfavoritar o `po-breadcrumb` faz um POST com o link e a propriedade `{ isFavorite: boolean }`
     * definidos no último item da propriedade `p-items`.
     *
     * > Caso algum parâmetro seja definido na propriedade `p-params-service`, o mesmo será enviado para a API e retornará
     * após fazer um GET ou POST.
     *
     * Exemplo de URL contendo o serviço de favoritar ou desfavoritar:
     *
     * ```
     * https://portinari.io/sample/api/favorite
     * ```
     *
     * Ao fazer o GET o `po-breadcrumb` concatena o link com a URL de serviço. Exemplo:
     *
     * ```
     * GET http://<domain>/api/favorite?url=/example
     * ```
     *
     * ```
     * GET http://po.portinari.com.br/sample/api/favorite?url=/example
     * ```
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: '/example' }
     * ```
     *
     * Caso possua parâmetros definidos na propriedade `p-params-service`:
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: "/example", params: "{ id: 14, user: 'dev.portinari' }" }
     * ```
     *
     * Exemplos de retorno:
     *
     * ```
     * { isFavorite: true, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example", params: "{ id: 14, user: 'dev.portinari' }" }
     * ```
     * @type {?}
     */
    PoBreadcrumbBaseComponent.prototype.favoriteService;
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que possibilita o envio de parâmetros adicionais à requisição.
     * @type {?}
     */
    PoBreadcrumbBaseComponent.prototype.paramsService;
    /**
     * @type {?}
     * @protected
     */
    PoBreadcrumbBaseComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @protected
     */
    PoBreadcrumbBaseComponent.prototype.resizeListener;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoBreadcrumbBaseComponent
 *
 * \@example
 *
 * <example name="po-breadcrumb-basic" title="Portinari Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="Portinari Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
var PoBreadcrumbComponent = /** @class */ (function (_super) {
    __extends(PoBreadcrumbComponent, _super);
    function PoBreadcrumbComponent(differs, element, renderer) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.showDropdown = false;
        _this.showDropdownToggle = false;
        _this._breadcrumbItemsLenght = 0;
        _this.calculatedElement = false;
        _this.hiddenWithoutResize = false;
        _this.initialized = false;
        _this.wasClickedonDropdown = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
            if (clickedOutIconDropdown) {
                _this.showDropdown = false;
                _this.removeClickoutListener();
            }
        });
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
        this.initializeResizeListener();
    };
    /**
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    };
    /**
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeClickoutListener();
        this.removeResizeListener();
    };
    /**
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    };
    /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.checkClickOutElement = /**
     * @private
     * @param {?} event
     * @param {?} element
     * @return {?}
     */
    function (event, element) {
        return element && !element.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.checkChangeOnItems = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.calcBreadcrumb = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        /** @type {?} */
        var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.favoriteService ? this.element.nativeElement
            .querySelector('.po-breadcrumb-favorite').offsetWidth + 20 : 0;
    };
    /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.getBreadcrumbWidth = /**
     * @private
     * @param {?} breadcrumbFavorite
     * @return {?}
     */
    function (breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var breadcrumbItem = this.element.nativeElement
            .querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map((/**
         * @param {?} breadcrumb
         * @return {?}
         */
        function (breadcrumb) { return breadcrumb['offsetWidth']; }))
            .reduce((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return a + b; }), 16);
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.enableBreadcrumbResponsive = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.disableBreadcrumbResponsive = /**
     * @private
     * @return {?}
     */
    function () {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.calculatedElement && !_this.hiddenWithoutResize && _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                _this.hiddenWithoutResize = true;
            }
            else {
                _this.calcBreadcrumb();
            }
        }), 50);
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.initBreadcrumbSize = /**
     * @private
     * @return {?}
     */
    function () {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.initializeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.initializeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.debounceResize();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.removeClickoutListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbComponent.prototype.removeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    PoBreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-breadcrumb',
                    template: "<div class=\"po-breadcrumb\" #breadcrumb>\n\n  <ul class=\"po-breadcrumb-items\">\n\n    <li #dropdownIcon\n      *ngIf=\"showDropdownToggle\"\n      class=\"po-breadcrumb-item po-clickable\"\n      (click)=\"toggleDropdown()\">\n\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\n      <div class=\"po-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView, let itemIndex = index;\">\n      <po-breadcrumb-item\n        [p-action]=\"item.action\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        [p-item-active]=\"itemIndex === (itemsView.length - 1)\">\n      </po-breadcrumb-item>\n    </div>\n\n  </ul>\n\n  <po-breadcrumb-favorite *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\">\n  </po-breadcrumb-favorite>\n\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\"\n    [p-items]=\"dropdownItems\">\n  </po-breadcrumb-dropdown>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoBreadcrumbComponent.ctorParameters = function () { return [
        { type: IterableDiffers },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    PoBreadcrumbComponent.propDecorators = {
        breadcrumbElement: [{ type: ViewChild, args: ['breadcrumb', { read: ElementRef, static: true },] }],
        dropdownIcon: [{ type: ViewChild, args: ['dropdownIcon', { read: ElementRef, static: false },] }]
    };
    return PoBreadcrumbComponent;
}(PoBreadcrumbBaseComponent));
if (false) {
    /** @type {?} */
    PoBreadcrumbComponent.prototype.showDropdown;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.showDropdownToggle;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.dropdownItems;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype._breadcrumbItemsLenght;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.hiddenWithoutResize;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.timeoutResize;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.breadcrumbElement;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.dropdownIcon;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.wasClickedonDropdown;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbComponent.prototype.element;
    /** @type {?} */
    PoBreadcrumbComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza o dropdown do po-breadcrumb.
 */
var PoBreadcrumbDropdownComponent = /** @class */ (function () {
    function PoBreadcrumbDropdownComponent() {
    }
    PoBreadcrumbDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-breadcrumb-dropdown',
                    template: "<ul class=\"po-breadcrumb-dropdown\">\n  <li class=\"po-breadcrumb-dropdown-item\" *ngFor=\"let item of items\" [routerLink]=\"item.link\">\n    {{ item.label }}\n  </li>\n</ul>\n"
                }] }
    ];
    PoBreadcrumbDropdownComponent.propDecorators = {
        items: [{ type: Input, args: ['p-items',] }]
    };
    return PoBreadcrumbDropdownComponent;
}());
if (false) {
    /** @type {?} */
    PoBreadcrumbDropdownComponent.prototype.items;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
var PoBreadcrumbFavoriteService = /** @class */ (function () {
    function PoBreadcrumbFavoriteService(http) {
        this.http = http;
    }
    Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoBreadcrumbFavoriteService.prototype, "bodyParams", {
        get: /**
         * @return {?}
         */
        function () { return this._bodyParams; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    PoBreadcrumbFavoriteService.prototype.configService = /**
     * @param {?} url
     * @param {?} params
     * @param {?} item
     * @return {?}
     */
    function (url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    };
    /**
     * @param {?} status
     * @return {?}
     */
    PoBreadcrumbFavoriteService.prototype.sendStatusFavorite = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    };
    /**
     * @return {?}
     */
    PoBreadcrumbFavoriteService.prototype.getFavorite = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    };
    PoBreadcrumbFavoriteService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoBreadcrumbFavoriteService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoBreadcrumbFavoriteService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype._bodyParams;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza o serviço de favoritar do po-breadcrumb.
 */
var PoBreadcrumbFavoriteComponent = /** @class */ (function () {
    function PoBreadcrumbFavoriteComponent(service) {
        this.service = service;
        this.favorite = false;
    }
    /**
     * @return {?}
     */
    PoBreadcrumbFavoriteComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
        this.getStatusFavorite();
    };
    /**
     * @return {?}
     */
    PoBreadcrumbFavoriteComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.setSubscription) {
            this.setSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    PoBreadcrumbFavoriteComponent.prototype.toggleFavoriteAction = /**
     * @return {?}
     */
    function () {
        this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
    };
    /**
     * @private
     * @return {?}
     */
    PoBreadcrumbFavoriteComponent.prototype.getStatusFavorite = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.getSubscription = this.service.getFavorite().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return _this.favorite = result.isFavorite; }));
    };
    /**
     * @private
     * @param {?} status
     * @return {?}
     */
    PoBreadcrumbFavoriteComponent.prototype.setStatusFavorite = /**
     * @private
     * @param {?} status
     * @return {?}
     */
    function (status) {
        var _this = this;
        this.setSubscription = this.service.sendStatusFavorite(status).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return _this.favorite = result.isFavorite; }));
    };
    PoBreadcrumbFavoriteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-breadcrumb-favorite',
                    template: "<div class=\"po-breadcrumb-favorite po-clickable\" (click)=\"toggleFavoriteAction()\">\n\n  <span\n    class=\"po-icon po-icon-star po-breadcrumb-favorite-star po-clickable\"\n    [class.po-breadcrumb-favorite-star-active]=\"favorite\">\n  </span>\n\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"favorite\">Desfavoritar</span>\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"!favorite\">Favoritar</span>\n</div>\n",
                    providers: [PoBreadcrumbFavoriteService]
                }] }
    ];
    /** @nocollapse */
    PoBreadcrumbFavoriteComponent.ctorParameters = function () { return [
        { type: PoBreadcrumbFavoriteService }
    ]; };
    PoBreadcrumbFavoriteComponent.propDecorators = {
        favoriteService: [{ type: Input, args: ['p-favorite-service',] }],
        itemActive: [{ type: Input, args: ['p-item-active',] }],
        paramsService: [{ type: Input, args: ['p-params-service',] }]
    };
    return PoBreadcrumbFavoriteComponent;
}());
if (false) {
    /** @type {?} */
    PoBreadcrumbFavoriteComponent.prototype.favorite;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteComponent.prototype.getSubscription;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteComponent.prototype.setSubscription;
    /** @type {?} */
    PoBreadcrumbFavoriteComponent.prototype.favoriteService;
    /** @type {?} */
    PoBreadcrumbFavoriteComponent.prototype.itemActive;
    /** @type {?} */
    PoBreadcrumbFavoriteComponent.prototype.paramsService;
    /**
     * @type {?}
     * @private
     */
    PoBreadcrumbFavoriteComponent.prototype.service;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que renderiza cada item do po-breadcrumb.
 */
var PoBreadcrumbItemComponent = /** @class */ (function () {
    function PoBreadcrumbItemComponent() {
        // Especifica se item é o link ativo.
        this.itemActive = false;
    }
    PoBreadcrumbItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-breadcrumb-item',
                    template: "<li *ngIf=\"!itemActive\"\n  [class.po-breadcrumb-item]=\"link || action\"\n  [class.po-breadcrumb-item-unclickable]=\"!link && !action\">\n\n  <a *ngIf=\"link\" [routerLink]=\"link\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && action\" (click)=\"action(label)\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n\n  <a *ngIf=\"!link && !action\">\n    <label class=\"po-breadcrumb-label\">{{ label }}</label>\n    <div class=\"po-breadcrumb-arrow\"></div>\n  </a>\n</li>\n\n<li *ngIf=\"itemActive\" class=\"po-breadcrumb-item-unclickable\">\n  <label class=\"po-breadcrumb-label\">{{ label }}</label>\n</li>\n"
                }] }
    ];
    PoBreadcrumbItemComponent.propDecorators = {
        action: [{ type: Input, args: ['p-action',] }],
        label: [{ type: Input, args: ['p-label',] }],
        link: [{ type: Input, args: ['p-link',] }],
        itemActive: [{ type: Input, args: ['p-item-active',] }]
    };
    return PoBreadcrumbItemComponent;
}());
if (false) {
    /** @type {?} */
    PoBreadcrumbItemComponent.prototype.action;
    /** @type {?} */
    PoBreadcrumbItemComponent.prototype.label;
    /** @type {?} */
    PoBreadcrumbItemComponent.prototype.link;
    /** @type {?} */
    PoBreadcrumbItemComponent.prototype.itemActive;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-breadcrumb.
 *
 */
var PoBreadcrumbModule = /** @class */ (function () {
    function PoBreadcrumbModule() {
    }
    PoBreadcrumbModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        RouterModule
                    ],
                    declarations: [
                        PoBreadcrumbComponent,
                        PoBreadcrumbDropdownComponent,
                        PoBreadcrumbFavoriteComponent,
                        PoBreadcrumbItemComponent
                    ],
                    exports: [PoBreadcrumbComponent]
                },] }
    ];
    return PoBreadcrumbModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */
var poLocales = ['pt', 'en', 'es', 'ru'];
// Idioma padrão
/** @type {?} */
var poLocaleDefault = 'pt';
/**
 * @deprecated
 * Utilize o método `getShortBrowserLanguage`.
 *
 * \@description
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */
function browserLanguage() {
    return getShortBrowserLanguage();
}
/**
 * Converte e formata os bytes em formato mais legível para o usuário.
 *
 * Por exemplo:
 * - 31457280 em 30 MB.
 * - 21474836480 em 20 GB.
 * - 12.5666666 em 12.57 Bytes (duas casas decimais).
 *
 * @param {?} bytes {number} Valor em bytes
 * @param {?=} decimals {number} Quantidade de casas decimais que terá após a conversão.
 * @return {?}
 */
function formatBytes(bytes, decimals) {
    if (decimals === void 0) { decimals = 2; }
    if (!bytes) {
        return undefined;
    }
    /** @type {?} */
    var multiplier = 1024;
    /** @type {?} */
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    /** @type {?} */
    var result = Math.floor(Math.log(bytes) / Math.log(multiplier));
    decimals = decimals < 0 ? 0 : decimals;
    return parseFloat((bytes / Math.pow(multiplier, result)).toFixed(decimals)) + " " + sizes[result];
}
/**
 * Retorna o idioma atual do navegador
 * @return {?}
 */
function getBrowserLanguage() {
    // navigator.userLanguage is the value for IE10
    /** @type {?} */
    var language = navigator.language || navigator['userLanguage'];
    /** @type {?} */
    var shortLanguage = getShortLanguage(language);
    return poLocales.includes(shortLanguage) ? language : poLocaleDefault;
}
/**
 * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
 *
 * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo PO,
 * será retornado a linguagem padrão (poLocaleDefault).
 * @return {?}
 */
function getShortBrowserLanguage() {
    return getShortLanguage(getBrowserLanguage());
}
/**
 * Retorna o idioma com somente a abreviação do idioma (duas primeiras letras).
 * Por exemplo: "pt" ou "es".
 *
 * \@default pt
 * @param {?} language {string} linguagem.
 *
 * @return {?} sigla do idioma padrão {string}.
 *
 */
function getShortLanguage(language) {
    return (language || poLocaleDefault).toLowerCase().substring(0, 2);
}
/**
 * @param {?} value
 * @return {?}
 */
function isLanguage(value) {
    /** @type {?} */
    var languageRegex = new RegExp('^[a-z]{2}(\-[a-z]{2})?$', 'i');
    return languageRegex.test(value);
}
/* istanbul ignore next */
/**
 * @return {?}
 */
function reloadCurrentPage() {
    window.location.assign(location.href);
}
/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */
function convertToInt(value, valueDefault) {
    /** @type {?} */
    var validNumber = parseInt(value, 10);
    /** @type {?} */
    var validDefaultValue = parseInt(valueDefault, 10);
    /** @type {?} */
    var defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
    return validNumber || validNumber === 0 ? validNumber : defaultValue;
}
/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */
function isTypeof(object, type) {
    return typeof object === type;
}
/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */
function callFunction(fn, context, param) {
    if (isTypeof(fn, 'function')) {
        fn.call(context, param);
    }
    else {
        context[fn](param);
    }
}
/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */
function convertIsoToDate(value, start, end) {
    if (value) {
        /** @type {?} */
        var day = parseInt(value.substring(8, 10), 10);
        /** @type {?} */
        var month = parseInt(value.substring(5, 7), 10);
        /** @type {?} */
        var year = parseInt(value.substring(0, 4), 10);
        if (start) {
            /** @type {?} */
            var date = new Date(year, month - 1, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            return date;
        }
        else if (end) {
            /** @type {?} */
            var date = new Date(year, month - 1, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            return date;
        }
        else {
            /** @type {?} */
            var milliseconds = Date.parse(value);
            /** @type {?} */
            var timezone = new Date().getTimezoneOffset() * 60000;
            return new Date(milliseconds + timezone);
        }
    }
}
/**
 * @param {?} date
 * @return {?}
 */
function convertDateToISODate(date) {
    if (date) {
        /** @type {?} */
        var getMonth = date.getMonth() + 1;
        /** @type {?} */
        var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        /** @type {?} */
        var month = getMonth < 10 ? '0' + getMonth : getMonth;
        /** @type {?} */
        var year = formatYear(date.getFullYear());
        return year + '-' + month + '-' + day;
    }
    else {
        return null;
    }
}
/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */
function convertDateToISOExtended(date, time) {
    if (date) {
        /** @type {?} */
        var getMonth = date.getMonth() + 1;
        /** @type {?} */
        var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        /** @type {?} */
        var month = getMonth < 10 ? '0' + getMonth : getMonth;
        /** @type {?} */
        var year = formatYear(date.getFullYear());
        /** @type {?} */
        var dateString = date.toString();
        if (time !== null) {
            return year + '-' + month + '-' + day + time;
        }
        else {
            return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +
                dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
        }
    }
    else {
        return null;
    }
}
/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */
function formatYear(year) {
    if (year >= 1000) {
        return year.toString();
    }
    if (year > 99 && year < 1000) {
        return "0" + year;
    }
    if (year > 9 && year < 100) {
        return "00" + year;
    }
    if (year >= 0 && year < 10) {
        return "000" + year;
    }
}
// Verifica se o navegador em que está sendo usado é Internet Explorer ou Edge
/**
 * @return {?}
 */
function isIEOrEdge() {
    /** @type {?} */
    var userAgent = window.navigator.userAgent;
    return /msie\s|trident\/|edge\//i.test(userAgent);
}
// Verifica se o navegador em que está sendo usado é Internet Explorer
/**
 * @return {?}
 */
function isIE() {
    /** @type {?} */
    var userAgent = window.navigator.userAgent;
    return /msie\s|trident/i.test(userAgent);
}
// Verifica qual o dispositivo que está sendo usado
/**
 * @return {?}
 */
function isMobile() {
    /** @type {?} */
    var userAgent = window.navigator.userAgent;
    return userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);
}
/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */
function isEquals(value, comparedValue) {
    return JSON.stringify(value) === JSON.stringify(comparedValue);
}
/**
 * @param {?} event
 * @return {?}
 */
function isKeyCodeEnter(event) {
    return event.keyCode === 13 || event.which === 13;
}
/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */
function setYearFrom0To100(date, year) {
    if (year >= 0 && year < 100) {
        date.setFullYear(year);
    }
}
/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */
function sortOptionsByProperty(options, property) {
    options.sort((/**
     * @param {?} optionA
     * @param {?} optionB
     * @return {?}
     */
    function (optionA, optionB) {
        optionA = optionA[property].toString().toLowerCase();
        optionB = optionB[property].toString().toLowerCase();
        if (optionA < optionB) {
            return -1;
        }
        if (optionA > optionB) {
            return 1;
        }
        return 0;
    }));
}
/**
 * @param {?} list
 * @return {?}
 */
function removeDuplicatedOptions(list) {
    var _loop_1 = function (i) {
        if (i === 0) {
            return out_i_1 = i, "continue";
        }
        if (list.findIndex((/**
         * @param {?} op
         * @return {?}
         */
        function (op) { return op.value === list[i].value; })) !== i) {
            list.splice(i, 1);
            i--;
        }
        out_i_1 = i;
    };
    var out_i_1;
    for (var i = 0; i < list.length; i++) {
        _loop_1(i);
        i = out_i_1;
    }
}
/**
 * @param {?} list
 * @return {?}
 */
function removeUndefinedAndNullOptions(list) {
    for (var i = 0; i < list.length; i++) {
        if (list[i].value === undefined || list[i].value === null) {
            list.splice(i, 1);
            i--;
        }
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function validValue(value) {
    return (value !== null && value !== undefined && value !== '') || value === false;
}
/**
 * @param {?} url
 * @return {?}
 */
function isExternalLink(url) {
    return url ? url.startsWith('http') : false;
}
/**
 * @param {?} url
 * @return {?}
 */
function openExternalLink(url) {
    window.open(url, '_blank');
}
/**
 * @param {?} link
 * @return {?}
 */
function getFormattedLink(link) {
    /** @type {?} */
    var formattedLink = '';
    // Retira todos os pontos no começo da URL.
    if (link) {
        formattedLink = link.replace(/^(\.)+/g, '');
    }
    // Verifica se foi utilizado uma rota que não comece com barra.
    if (!formattedLink.startsWith('/')) {
        formattedLink = '/'.concat(formattedLink);
    }
    return formattedLink;
}
/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */
function sortValues(leftSide, rightSide, ascending) {
    if (ascending === void 0) { ascending = true; }
    /** @type {?} */
    var left = isTypeof(leftSide, 'string') ? leftSide.toLowerCase() : leftSide;
    /** @type {?} */
    var right = isTypeof(rightSide, 'string') ? rightSide.toLowerCase() : rightSide;
    if (ascending) {
        if (left < right) {
            return -1;
        }
        else if (left > right) {
            return 1;
        }
    }
    else if (ascending === false) {
        if (left < right) {
            return 1;
        }
        else if (left > right) {
            return -1;
        }
    }
    return 0;
}
/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */
function validateDateRange(date, dateStart, dateEnd) {
    if (dateStart && dateEnd) {
        return (date >= dateStart && date <= dateEnd);
    }
    else if (dateStart && !dateEnd) {
        return (date >= dateStart);
    }
    else if (!dateStart && dateEnd) {
        return (date <= dateEnd);
    }
    else {
        return true;
    }
}
/**
 * @return {?}
 */
function uuid() {
    /**
     * @return {?}
     */
    function hex4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return hex4() + hex4() + '-' + hex4() + '-' + hex4() + '-' +
        hex4() + '-' + hex4() + hex4() + hex4();
}
/**
 * @param {?} text
 * @return {?}
 */
function capitalizeFirstLetter(text) {
    return "" + text.charAt(0).toUpperCase() + text.slice(1);
}
/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */
function mapArrayByProperties(items, properties) {
    if (items === void 0) { items = []; }
    if (properties === void 0) { properties = []; }
    return items.map((/**
     * @param {?} item
     * @return {?}
     */
    function (item) { return mapObjectByProperties(item, properties); }));
}
/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */
function mapObjectByProperties(object, properties) {
    if (object === void 0) { object = {}; }
    if (properties === void 0) { properties = []; }
    /** @type {?} */
    var getSelectedProperties = (/**
     * @param {?} selectedProperties
     * @param {?} property
     * @return {?}
     */
    function (selectedProperties, property) {
        var _a;
        return (__assign({}, selectedProperties, (_a = {}, _a[property] = object[property], _a)));
    });
    return properties.reduce(getSelectedProperties, {});
}
/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */
function valuesFromObject(object) {
    if (object === void 0) { object = {}; }
    return Object.keys(object).map((/**
     * @param {?} property
     * @return {?}
     */
    function (property) { return object[property]; }));
}
/**
 * Converte um arquivo em base64.
 *
 * @param {?} file arquivo que será convertido.
 * @return {?}
 */
function convertImageToBase64(file) {
    return new Promise((/**
     * @param {?} resolve
     * @param {?} reject
     * @return {?}
     */
    function (resolve, reject) {
        /** @type {?} */
        var reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = (/**
         * @return {?}
         */
        function () { return resolve(reader.result); });
        reader.onerror = (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return reject(error); });
    }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
/** @type {?} */
var poLocaleKey = 'PO_USER_LOCALE';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
var PoLanguageService = /** @class */ (function () {
    function PoLanguageService() {
    }
    Object.defineProperty(PoLanguageService.prototype, "languageDefault", {
        get: /**
         * @return {?}
         */
        function () {
            return localStorage.getItem(poDefaultLanguage);
        },
        set: /**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            if (language && isLanguage(language)) {
                localStorage.setItem(poDefaultLanguage, language);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    /**
     * \@description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     * @return {?}
     */
    PoLanguageService.prototype.getLanguage = /**
     * \@description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    };
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    /**
     * \@description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     * @return {?}
     */
    PoLanguageService.prototype.getLanguageDefault = /**
     * \@description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     * @return {?}
     */
    function () {
        return this.languageDefault;
    };
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    /**
     * \@description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * \@default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     * @return {?}
     */
    PoLanguageService.prototype.getShortLanguage = /**
     * \@description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * \@default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = this.getLanguage();
        /** @type {?} */
        var shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
    };
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    /**
     * \@description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    PoLanguageService.prototype.setLanguage = /**
     * \@description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    function (language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(poLocaleKey, language.toLowerCase());
    };
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    /**
     * \@description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    PoLanguageService.prototype.setLanguageDefault = /**
     * \@description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param {?} language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     * @return {?}
     */
    function (language) {
        this.languageDefault = language;
    };
    PoLanguageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ PoLanguageService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PoLanguageService_Factory() { return new PoLanguageService(); }, token: PoLanguageService, providedIn: "root" });
    return PoLanguageService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poLoadingOverlayLiteralsDefault = {
    en: (/** @type {?} */ ({
        loading: 'Loading',
    })),
    es: (/** @type {?} */ ({
        loading: 'Cargando',
    })),
    pt: (/** @type {?} */ ({
        loading: 'Carregando',
    })),
    ru: (/** @type {?} */ ({
        loading: 'погрузка',
    }))
};
/**
 *
 * \@description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
var PoLoadingOverlayBaseComponent = /** @class */ (function () {
    function PoLoadingOverlayBaseComponent(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        if (!this.text) {
            this.text = this.getTextDefault();
        }
    }
    Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "screenLock", {
        get: /**
         * @return {?}
         */
        function () {
            return this._screenLock;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o _overlay_ será aplicado a um container ou a página inteira.
         *
         * \@default `false`
         * @param {?} screenLock
         * @return {?}
         */
        function (screenLock) {
            this._screenLock = convertToBoolean(screenLock);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoLoadingOverlayBaseComponent.prototype, "text", {
        get: /**
         * @return {?}
         */
        function () {
            return this._text;
        },
        /**
         * @optional
         *
         * @description
         *
         * Texto a ser exibido no componente.
         *
         * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
         *
         * @default `Carregando`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Texto a ser exibido no componente.
         *
         * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
         *
         * \@default `Carregando`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._text = value || this.getTextDefault();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    PoLoadingOverlayBaseComponent.prototype.getTextDefault = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    };
    PoLoadingOverlayBaseComponent.propDecorators = {
        screenLock: [{ type: Input, args: ['p-screen-lock',] }],
        text: [{ type: Input, args: ['p-text',] }]
    };
    return PoLoadingOverlayBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype._screenLock;
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype._text;
    /**
     * @type {?}
     * @private
     */
    PoLoadingOverlayBaseComponent.prototype.languageService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@docsExtends PoLoadingOverlayBaseComponent
 *
 * \@example
 *
 * <example name="po-loading-overlay-basic" title="Portinari Loading Overlay Basic">
 *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.html"> </file>
 *  <file name="sample-po-loading-overlay-basic/sample-po-loading-overlay-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-loading-overlay-labs" title="Portinari Loading Overlay Labs">
 *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.html"> </file>
 *  <file name="sample-po-loading-overlay-labs/sample-po-loading-overlay-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-loading-overlay-connection-test" title="Portinari Loading Overlay - Connection Test">
 *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.html"> </file>
 *  <file name="sample-po-loading-overlay-connection-test/sample-po-loading-overlay-connection-test.component.ts"> </file>
 * </example>
 */
var PoLoadingOverlayComponent = /** @class */ (function (_super) {
    __extends(PoLoadingOverlayComponent, _super);
    function PoLoadingOverlayComponent(changeDetector, languageService) {
        var _this = _super.call(this, languageService) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    PoLoadingOverlayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-loading-overlay',
                    template: "<div\n  [class.po-overlay-absolute]=\"!screenLock\"\n  [class.po-overlay-fixed]=\"screenLock\">\n  <po-loading class=\"po-loading-overlay-content\" [p-text]=\"text\"></po-loading>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoLoadingOverlayComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: PoLanguageService }
    ]; };
    return PoLoadingOverlayComponent;
}(PoLoadingOverlayBaseComponent));
if (false) {
    /** @type {?} */
    PoLoadingOverlayComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço `po-language`.
 */
var PoLanguageModule = /** @class */ (function () {
    function PoLanguageModule() {
    }
    PoLanguageModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        PoLanguageService
                    ]
                },] }
    ];
    return PoLanguageModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Este componente tem o objetivo de mostrar visualmente aos usuários que a aplicação está processando
 * ou aguardando a resposta de alguma requisição.
 */
var PoLoadingBaseComponent = /** @class */ (function () {
    function PoLoadingBaseComponent() {
        /**
         * Texto a ser exibido no componente.
         */
        this.text = 'Carregando';
    }
    PoLoadingBaseComponent.propDecorators = {
        text: [{ type: Input, args: ['p-text',] }]
    };
    return PoLoadingBaseComponent;
}());
if (false) {
    /**
     * Texto a ser exibido no componente.
     * @type {?}
     */
    PoLoadingBaseComponent.prototype.text;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoLoadingBaseComponent
 */
var PoLoadingComponent = /** @class */ (function (_super) {
    __extends(PoLoadingComponent, _super);
    function PoLoadingComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoLoadingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-loading',
                    template: "<div class=\"po-loading\">\n  <po-loading-icon></po-loading-icon>\n  <span class=\"po-loading-label po-text-ellipsis\" *ngIf=\"text\">{{text}}</span>\n</div>\n"
                }] }
    ];
    return PoLoadingComponent;
}(PoLoadingBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que exibe um ícone de carregamento de conteúdo. A cor padrão para ele é a primária conforme o tema utilizado.
 * É possível alterá-la para um tom cinza conforme a necessidade.
 */
var PoLoadingIconComponent = /** @class */ (function () {
    function PoLoadingIconComponent() {
    }
    Object.defineProperty(PoLoadingIconComponent.prototype, "neutralColor", {
        get: /**
         * @return {?}
         */
        function () {
            return this._neutralColor;
        },
        /**
         * @optional
         *
         * @description
         *
         * Definição para cor neutra (cinza) para o ícone de carregamento.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Definição para cor neutra (cinza) para o ícone de carregamento.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._neutralColor = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoLoadingIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-loading-icon',
                    template: "<div class=\"po-loading-icon\" [class.po-loading-icon-neutral-color]=\"neutralColor\">\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-1\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-2\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-3\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-4\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-5\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-6\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-7\"></span>\n  <span class=\"po-loading-icon-bar po-loading-icon-bar-8\"></span>\n</div>\n"
                }] }
    ];
    PoLoadingIconComponent.propDecorators = {
        neutralColor: [{ type: Input, args: ['p-neutral-color',] }]
    };
    return PoLoadingIconComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLoadingIconComponent.prototype._neutralColor;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Módulo do componente po-loading-overlay.
 */
var PoLoadingModule = /** @class */ (function () {
    function PoLoadingModule() {
    }
    PoLoadingModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoLanguageModule
                    ],
                    declarations: [
                        PoLoadingComponent,
                        PoLoadingIconComponent,
                        PoLoadingOverlayComponent
                    ],
                    exports: [
                        PoLoadingComponent,
                        PoLoadingIconComponent,
                        PoLoadingOverlayComponent
                    ]
                },] }
    ];
    return PoLoadingModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PO_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
/** @type {?} */
var PO_BUTTON_TYPE_DEFAULT = 'default';
/**
 * \@description
 *
 * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
 * ação irreversível (`danger`), como a exclusão de um registro.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre o tipo `danger`.
 */
var PoButtonBaseComponent = /** @class */ (function () {
    function PoButtonBaseComponent() {
        this._disabled = false;
        this._loading = false;
        this._small = false;
        this._type = 'default';
        /**
         * Ação que será executada quando o usuário clicar sobre o `po-button`.
         */
        this.click = new EventEmitter();
    }
    Object.defineProperty(PoButtonBaseComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Exibe um ícone de carregamento à esquerda do _label_ do botão.
         *
         * > Quando esta propriedade estiver habilitada, desabilitará o botão.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Exibe um ícone de carregamento à esquerda do _label_ do botão.
         *
         * > Quando esta propriedade estiver habilitada, desabilitará o botão.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoButtonBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Deixa o botão menor.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Deixa o botão menor.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoButtonBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o estilo do `po-button`.
         *
         * Valore válidos:
         *  - `default`: estilo padrão do `po-button`.
         *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
         *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
         *  - `link`: o `po-button` recebe o estilo de um link.
         *
         * @default `default`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o estilo do `po-button`.
         *
         * Valore válidos:
         *  - `default`: estilo padrão do `po-button`.
         *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
         *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
         *  - `link`: o `po-button` recebe o estilo de um link.
         *
         * \@default `default`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = PO_BUTTON_TYPES.includes(value) ? value : PO_BUTTON_TYPE_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoButtonBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoButtonBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        loading: [{ type: Input, args: ['p-loading',] }],
        icon: [{ type: Input, args: ['p-icon',] }],
        small: [{ type: Input, args: ['p-small',] }],
        type: [{ type: Input, args: ['p-type',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoButtonBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoButtonBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoButtonBaseComponent.prototype._loading;
    /**
     * @type {?}
     * @private
     */
    PoButtonBaseComponent.prototype._small;
    /**
     * @type {?}
     * @private
     */
    PoButtonBaseComponent.prototype._type;
    /**
     * \@optional
     *
     * \@description
     *
     * Label do botão.
     * @type {?}
     */
    PoButtonBaseComponent.prototype.label;
    /**
     * Ícone exibido ao lado esquerdo do label do botão.
     *
     * É possível usar qualquer uma dos ícones da [Biblioteca de ícones](/guides/icons).
     * @type {?}
     */
    PoButtonBaseComponent.prototype.icon;
    /**
     * Ação que será executada quando o usuário clicar sobre o `po-button`.
     * @type {?}
     */
    PoButtonBaseComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoButtonBaseComponent
 *
 * \@example
 *
 * <example name="po-button-basic" title="Portinari Button Basic">
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.html"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.ts"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-button-basic/sample-po-button-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-button-labs" title="Portinari Button Labs">
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.html"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.ts"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-button-labs/sample-po-button-labs.component.po.ts"> </file>
 * </example>
 */
var PoButtonComponent = /** @class */ (function (_super) {
    __extends(PoButtonComponent, _super);
    function PoButtonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoButtonComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoButtonComponent, { static: true }) button: PoButtonComponent;
     *
     * focusButton() {
     *   this.button.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoButtonComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoButtonComponent, { static: true }) button: PoButtonComponent;
     *
     * focusButton() {
     *   this.button.focus();
     * }
     * ```
     * @return {?}
     */
    PoButtonComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoButtonComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoButtonComponent, { static: true }) button: PoButtonComponent;
     *
     * focusButton() {
     *   this.button.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.buttonElement.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.click.emit(null);
    };
    PoButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-button',
                    template: "<button\n  #button\n  class=\"po-button po-text-ellipsis\"\n  type=\"button\"\n  [class.po-button-danger]=\"type === 'danger'\"\n  [class.po-button-link]=\"type === 'link'\"\n  [class.po-button-primary]=\"type === 'primary'\"\n  [class.po-button-sm] = \"small\"\n  [class.po-clickable]=\"type === 'link'\"\n  [disabled]=\"disabled || loading\"\n  (click)=\"onClick()\">\n\n  <div *ngIf=\"loading\" class=\"po-button-loading-icon\">\n    <po-loading-icon p-neutral-color></po-loading-icon>\n  </div>\n  <span *ngIf=\"icon\" class=\"po-icon {{ icon }}\" aria-hidden=\"true\"></span>\n  <span *ngIf=\"label\" class=\"po-button-label\">{{ label }}</span>\n</button>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PoButtonComponent.propDecorators = {
        buttonElement: [{ type: ViewChild, args: ['button', { static: true },] }]
    };
    return PoButtonComponent;
}(PoButtonBaseComponent));
if (false) {
    /** @type {?} */
    PoButtonComponent.prototype.buttonElement;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-button.
 */
var PoButtonModule = /** @class */ (function () {
    function PoButtonModule() {
    }
    PoButtonModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoLoadingModule
                    ],
                    declarations: [
                        PoButtonComponent
                    ],
                    exports: [
                        PoButtonComponent
                    ]
                },] }
    ];
    return PoButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 * \@description
 *
 * Serviço responsável por gerenciar as posições de um elemento em relação a um elemento alvo. Ele pode receber as
 * seguintes posições:
 *
 * - `right`: Posiciona o elemento no lado direito do componente alvo.
 * - `right-bottom`: Posiciona o elemento no lado direito inferior do componente alvo.
 * - `right-top`: Posiciona o elemento no lado direito superior do componente alvo.
 * - `bottom`: Posiciona o elemento abaixo do componente alvo.
 * - `bottom-left`: Posiciona o elemento abaixo e à esquerda do componente alvo.
 * - `bottom-right`: Posiciona o elemento abaixo e à direita do componente alvo.
 * - `left`: Posiciona o elemento no lado esquerdo do componente alvo.
 * - `left-top`: Posiciona o elemento no lado esquerdo superior do componente alvo.
 * - `left-bottom`: Posiciona o elemento no lado esquerdo inferior do componente alvo.
 * - `top`: Posiciona o elemento acima do componente alvo.
 * - `top-right`: Posiciona o elemento acima e à direita do componente alvo.
 * - `top-left`: Posiciona o elemento acima e à esquerda do componente alvo.
 *
 * Caso o elemento não caiba na tela na posição indicada ele será rotacionado automaticamente para se adequar,
 * inicialmente no lado definido como padrão e em seguida seguindo o sentido horário.
 * @type {?}
 */
var poControlPositionSidesDefault = [
    'bottom', 'bottom-left', 'bottom-right',
    'left', 'left-top', 'left-bottom',
    'top', 'top-right', 'top-left',
    'right', 'right-bottom', 'right-top'
];
var PoControlPositionService = /** @class */ (function () {
    function PoControlPositionService() {
        this.differenceDiagonalToWidthArrow = 3;
        this.isSetElementWidth = false;
        // offset da seta em relação ao canto do componente
        this.offsetArrow = 12;
    }
    /**
     * @description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param value posição para exibição do elemento
     */
    /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} value posição para exibição do elemento
     * @return {?}
     */
    PoControlPositionService.prototype.adjustPosition = /**
     * \@description Ajusta a posição do elemento, caso não couber em tela irá para próxima posição.
     *
     * @param {?} value posição para exibição do elemento
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var position = value || 'bottom';
        this.elementPosition(position);
        this.customPositions && this.customPositions.length ? this.adjustCustomPosition(position) : this.adjustDefaultPosition(position);
    };
    /**
     * @description Retorna a direção da seta, conforme a posição do elemento.
     */
    /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    PoControlPositionService.prototype.getArrowDirection = /**
     * \@description Retorna a direção da seta, conforme a posição do elemento.
     * @return {?}
     */
    function () {
        return this.arrowDirection;
    };
    /**
     * @description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param element elemento que será exibido
     * @param elementOffset offSet do elemento
     * @param targetElement elemento de onde deve partir a exibição
     * @param customPositions posições que sobrescreve as posições padrões
     * @param isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     */
    /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    PoControlPositionService.prototype.setElements = /**
     * \@description Método responsável por definir as propriedades utilizadas para exibir o elemento na posição correta.
     *
     * @param {?} element elemento que será exibido
     * @param {?} elementOffset offSet do elemento
     * @param {?} targetElement elemento de onde deve partir a exibição
     * @param {?=} customPositions posições que sobrescreve as posições padrões
     * @param {?=} isSetElementWidth indica se deve definir o tamanho do elemento a ser exibido, caso for verdadeiro será igual do targetElement
     * @param {?=} isCornerAligned indica se o elemento filho será alinhado nos cantos do elemneto pai.
     * @return {?}
     */
    function (element, elementOffset, targetElement, customPositions, isSetElementWidth, isCornerAligned) {
        if (isSetElementWidth === void 0) { isSetElementWidth = false; }
        if (isCornerAligned === void 0) { isCornerAligned = false; }
        this.element = (element instanceof ElementRef) ? element.nativeElement : element;
        this.targetElement = (targetElement instanceof ElementRef) ? targetElement.nativeElement : targetElement;
        this.elementOffset = elementOffset;
        this.customPositions = customPositions;
        this.isSetElementWidth = isSetElementWidth;
        this.isCornerAligned = isCornerAligned;
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.adjustCustomPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var positionLength = this.customPositions.length;
        /** @type {?} */
        var sidesCount = 0;
        while (sidesCount++ < positionLength) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, this.customPositions);
                this.elementPosition(position);
            }
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.adjustDefaultPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var mainPositions = this.getMainPositions();
        /** @type {?} */
        var mainPositionLength = mainPositions.length;
        /** @type {?} */
        var mainSidesCount = 0;
        while (mainSidesCount++ < mainPositionLength) {
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            this.elementPosition(position);
            if (this.overflowMain(mainPosition)) {
                position = this.nextPosition(mainPosition, mainPositions);
                continue;
            }
            else if (this.overflowAllSides(position)) {
                this.verifySubPositions(position);
                return;
            }
            return;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.elementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.isCornerAligned ? this.setAlignedElementPosition(position) : this.setElementPosition(position);
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.getMainPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return (position.indexOf('-') > -1) ? position.substring(0, position.indexOf('-')) : position;
    };
    /**
     * @private
     * @return {?}
     */
    PoControlPositionService.prototype.getMainPositions = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultMainPositions = ['top', 'right', 'bottom', 'left'];
        return this.customPositions && this.customPositions.length ?
            this.getMainPositionsByCustomPositions(this.customPositions) : defaultMainPositions;
    };
    /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    PoControlPositionService.prototype.getMainPositionsByCustomPositions = /**
     * @private
     * @param {?} customPositions
     * @return {?}
     */
    function (customPositions) {
        /** @type {?} */
        var mainPositions = [];
        /** @type {?} */
        var customPositionsLength = customPositions.length;
        for (var i = 0; i < customPositionsLength; i++) {
            /** @type {?} */
            var position = customPositions[i];
            /** @type {?} */
            var mainPosition = this.getMainPosition(position);
            if (!mainPositions.includes(mainPosition)) {
                mainPositions.push(mainPosition);
            }
        }
        return mainPositions;
    };
    /**
     * @private
     * @return {?}
     */
    PoControlPositionService.prototype.getOverflows = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        return {
            right: (sizesAndPositions.element.right > sizesAndPositions.window.innerWidth),
            top: (sizesAndPositions.element.top <= 0),
            left: (sizesAndPositions.element.left <= 0),
            bottom: (sizesAndPositions.element.bottom > sizesAndPositions.window.innerHeight)
        };
    };
    /**
     * @private
     * @return {?}
     */
    PoControlPositionService.prototype.getSizesAndPositions = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            window: {
                scrollY: window.scrollY,
                scrollX: window.scrollX,
                innerWidth: window.innerWidth,
                innerHeight: window.innerHeight
            },
            element: this.element.getBoundingClientRect(),
            target: this.targetElement ? this.targetElement.getBoundingClientRect() : { top: 0, bottom: 0, right: 0, left: 0 }
        };
    };
    /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    PoControlPositionService.prototype.nextPosition = /**
     * @private
     * @param {?} position
     * @param {?=} positions
     * @return {?}
     */
    function (position, positions) {
        if (positions === void 0) { positions = []; }
        /** @type {?} */
        var index = positions.indexOf(position);
        /** @type {?} */
        var nextIndex = index + 1;
        if (index > -1 && nextIndex < positions.length) {
            return positions[nextIndex];
        }
        else {
            return positions[0];
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.overflowAllSides = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top || overflows.right || overflows.left;
            case 'top-right': return overflows.top || overflows.right;
            case 'top-left': return overflows.top || overflows.left;
            case 'right': return overflows.right || overflows.top || overflows.bottom;
            case 'right-top': return overflows.right || overflows.top;
            case 'right-bottom': return overflows.right || overflows.bottom;
            case 'bottom': return overflows.bottom || overflows.right || overflows.left;
            case 'bottom-right': return overflows.bottom || overflows.right;
            case 'bottom-left': return overflows.bottom || overflows.left;
            case 'left': return overflows.left || overflows.top || overflows.bottom;
            case 'left-top': return overflows.left || overflows.top;
            case 'left-bottom': return overflows.left || overflows.bottom;
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.overflowMain = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var overflows = this.getOverflows();
        switch (position) {
            case 'top': return overflows.top;
            case 'right': return overflows.right;
            case 'bottom': return overflows.bottom;
            case 'left': return overflows.left;
        }
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    PoControlPositionService.prototype.setAlignedArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top-left': return 'bottom-left';
            case 'top-right': return 'bottom-right';
            case 'bottom-right': return 'top-right';
            case 'bottom-left': return 'top-left';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    PoControlPositionService.prototype.setAlignedBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.setAlignedElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'bottom-left':
                this.setAlignedBottomPositions(0, sizesAndPositions);
                break;
            case 'bottom-right':
                this.setAlignedBottomPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
            case 'top-left':
                this.setAlignedTopPositions(0, sizesAndPositions);
                break;
            case 'top-right':
                this.setAlignedTopPositions(sizesAndPositions.element.width - sizesAndPositions.target.width, sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setAlignedArrowDirection(position);
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    PoControlPositionService.prototype.setAlignedTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left - displacement + 'px';
    };
    /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    PoControlPositionService.prototype.setArrowDirection = /**
     * @private
     * @param {?} elementPosition
     * @return {?}
     */
    function (elementPosition) {
        switch (elementPosition) {
            case 'top': return 'bottom';
            case 'top-left': return 'bottom-right';
            case 'top-right': return 'bottom-left';
            case 'right': return 'left';
            case 'right-top': return 'left-bottom';
            case 'right-bottom': return 'left-top';
            case 'bottom': return 'top';
            case 'bottom-right': return 'top-left';
            case 'bottom-left': return 'top-right';
            case 'left': return 'right';
            case 'left-bottom': return 'right-top';
            case 'left-top': return 'right-bottom';
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    PoControlPositionService.prototype.setBottomPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.bottom + this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.setElementPosition = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.setElementWidth();
        /** @type {?} */
        var sizesAndPositions = this.getSizesAndPositions();
        switch (position) {
            case 'top':
                this.setTopPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'top-left':
                this.setTopPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'top-right':
                this.setTopPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right':
                this.setRightPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'right-top':
                this.setRightPositions((sizesAndPositions.element.height - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'right-bottom':
                this.setRightPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'bottom':
                this.setBottomPositions((sizesAndPositions.element.width / 2), sizesAndPositions);
                break;
            case 'bottom-right':
                this.setBottomPositions((this.offsetArrow + this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'bottom-left':
                this.setBottomPositions((sizesAndPositions.element.width - this.offsetArrow - this.differenceDiagonalToWidthArrow), sizesAndPositions);
                break;
            case 'left':
                this.setLeftPositions((sizesAndPositions.element.height / 2), sizesAndPositions);
                break;
            case 'left-bottom':
                this.setLeftPositions(this.offsetArrow, sizesAndPositions);
                break;
            case 'left-top':
                this.setLeftPositions((sizesAndPositions.element.height - this.offsetArrow), sizesAndPositions);
                break;
        }
        this.arrowDirection = this.setArrowDirection(position);
    };
    /**
     * @private
     * @return {?}
     */
    PoControlPositionService.prototype.setElementWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isSetElementWidth && this.targetElement) {
            this.element.style.width = this.targetElement.clientWidth + "px";
        }
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    PoControlPositionService.prototype.setLeftPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.left - sizesAndPositions.element.width - this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    PoControlPositionService.prototype.setRightPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - displacement + (sizesAndPositions.target.height / 2) + 'px';
        this.element.style.left = sizesAndPositions.target.right + this.elementOffset + 'px';
    };
    /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    PoControlPositionService.prototype.setTopPositions = /**
     * @private
     * @param {?} displacement
     * @param {?} sizesAndPositions
     * @return {?}
     */
    function (displacement, sizesAndPositions) {
        this.element.style.top = sizesAndPositions.target.top - sizesAndPositions.element.height - this.elementOffset + 'px';
        this.element.style.left = sizesAndPositions.target.left + (sizesAndPositions.target.width / 2) - displacement + 'px';
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PoControlPositionService.prototype.verifySubPositions = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (position.indexOf('-') > -1) {
            position = position.substring(0, position.indexOf('-'));
            this.elementPosition(position);
        }
        /** @type {?} */
        var align = 0;
        while (align++ < 3) {
            if (this.overflowAllSides(position)) {
                position = this.nextPosition(position, poControlPositionSidesDefault);
                this.elementPosition(position);
            }
            else {
                return null;
            }
        }
    };
    PoControlPositionService.decorators = [
        { type: Injectable }
    ];
    return PoControlPositionService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.arrowDirection;
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.customPositions;
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.differenceDiagonalToWidthArrow;
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.element;
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.elementOffset;
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.isCornerAligned;
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.isSetElementWidth;
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.offsetArrow;
    /**
     * @type {?}
     * @private
     */
    PoControlPositionService.prototype.targetElement;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Array de posições.
/** @type {?} */
var PO_CONTROL_POSITIONS = [
    'right',
    'right-top',
    'right-bottom',
    'top',
    'top-left',
    'top-right',
    'left',
    'left-top',
    'left-bottom',
    'bottom',
    'bottom-left',
    'bottom-right'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CONTENT_MAX_LENGTH = 140;
/** @type {?} */
var PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * \@description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://portinari.io/documentation/po-popover?view=doc).
 */
var PoTooltipBaseDirective = /** @class */ (function () {
    function PoTooltipBaseDirective() {
        this._tooltip = '';
        this._tooltipPosition = 'bottom';
    }
    Object.defineProperty(PoTooltipBaseDirective.prototype, "tooltip", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tooltip;
        },
        /**
         * @description
         *
         * Habilita e atribui um texto ao po-tooltip, com limitação de 140 caracteres.
         */
        set: /**
         * \@description
         *
         * Habilita e atribui um texto ao po-tooltip, com limitação de 140 caracteres.
         * @param {?} tooltip
         * @return {?}
         */
        function (tooltip) {
            if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
                this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
            }
            else {
                this._tooltip = tooltip;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTooltipBaseDirective.prototype, "tooltipPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this._tooltipPosition;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-tooltip acima do componente alvo.
         * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
         *
         * @default bottom
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-tooltip acima do componente alvo.
         * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
         *
         * \@default bottom
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    PoTooltipBaseDirective.propDecorators = {
        tooltip: [{ type: Input, args: ['p-tooltip',] }],
        tooltipPosition: [{ type: Input, args: ['p-tooltip-position',] }]
    };
    return PoTooltipBaseDirective;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTooltipBaseDirective.prototype._tooltip;
    /**
     * @type {?}
     * @protected
     */
    PoTooltipBaseDirective.prototype._tooltipPosition;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoTooltipBaseDirective
 *
 * \@example
 *
 * <example name="po-tooltip-basic" title="Portinari Tooltip Basic" >
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.html"> </file>
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-labs" title="Portinari Tooltip Labs" >
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.html"> </file>
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-new-user" title="Portinari Tooltip - New User" >
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.html"> </file>
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
var PoTooltipDirective = /** @class */ (function (_super) {
    __extends(PoTooltipDirective, _super);
    function PoTooltipDirective(elementRef, renderer, poControlPosition) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.poControlPosition = poControlPosition;
        _this.tooltipOffset = 8;
        return _this;
    }
    /**
     * @return {?}
     */
    PoTooltipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initScrollEventListenerFunction();
    };
    /**
     * @return {?}
     */
    PoTooltipDirective.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.tooltip) {
                _this.tooltipContent ? _this.showTooltip() : _this.createTooltip();
                _this.removeArrow(_this.arrowDirection);
                _this.poControlPosition.adjustPosition(_this.tooltipPosition);
                _this.arrowDirection = _this.poControlPosition.getArrowDirection();
                _this.addArrow(_this.arrowDirection);
                _this.lastTooltipText = _this.tooltip;
            }
        }));
    };
    /**
     * @return {?}
     */
    PoTooltipDirective.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.hideTooltip();
    };
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    PoTooltipDirective.prototype.addArrow = /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    function (arrowDirection) {
        this.renderer.addClass(this.divArrow, "po-arrow-" + arrowDirection);
    };
    /**
     * @private
     * @return {?}
     */
    PoTooltipDirective.prototype.addScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    };
    // Monta a estrutura do tooltip
    // Monta a estrutura do tooltip
    /**
     * @private
     * @return {?}
     */
    PoTooltipDirective.prototype.createTooltip = 
    // Monta a estrutura do tooltip
    /**
     * @private
     * @return {?}
     */
    function () {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'po-tooltip');
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'po-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'po-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        this.renderer.appendChild(this.elementRef.nativeElement, this.tooltipContent);
        this.poControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    };
    /**
     * @private
     * @return {?}
     */
    PoTooltipDirective.prototype.initScrollEventListenerFunction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventListenerFunction = (/**
         * @return {?}
         */
        function () {
            if (!_this.isHidden) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.poControlPosition.adjustPosition(_this.tooltipPosition);
                }));
            }
        });
    };
    /**
     * @private
     * @return {?}
     */
    PoTooltipDirective.prototype.hideTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.tooltipContent) {
            this.renderer.addClass(this.tooltipContent, 'po-invisible');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    };
    /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    PoTooltipDirective.prototype.removeArrow = /**
     * @private
     * @param {?} arrowDirection
     * @return {?}
     */
    function (arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(".po-arrow-" + arrowDirection)) {
            this.renderer.removeClass(this.divArrow, "po-arrow-" + arrowDirection);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoTooltipDirective.prototype.removeScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoTooltipDirective.prototype.showTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.tooltipContent, 'po-invisible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    };
    /**
     * @private
     * @return {?}
     */
    PoTooltipDirective.prototype.updateTextContent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.lastTooltipText !== this.tooltip) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    };
    PoTooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-tooltip]',
                    providers: [PoControlPositionService]
                },] }
    ];
    /** @nocollapse */
    PoTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: PoControlPositionService }
    ]; };
    PoTooltipDirective.propDecorators = {
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }]
    };
    return PoTooltipDirective;
}(PoTooltipBaseDirective));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.arrowDirection;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.divArrow;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.divContent;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.isHidden;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.lastTooltipText;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.textContent;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.tooltipContent;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.tooltipOffset;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.eventListenerFunction;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoTooltipDirective.prototype.poControlPosition;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo da diretiva Po-Tooltip.
 */
var PoTooltipModule = /** @class */ (function () {
    function PoTooltipModule() {
    }
    PoTooltipModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [PoTooltipDirective],
                    exports: [PoTooltipDirective]
                },] }
    ];
    return PoTooltipModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoButtonGroupToggle = {
    /** Seleção múltipla. */
    Multiple: 'multiple',
    /** Seleção desabilitada. */
    None: 'none',
    /** Seleção única. */
    Single: 'single',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * \@description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
var PoButtonGroupBaseComponent = /** @class */ (function () {
    function PoButtonGroupBaseComponent() {
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
        /**
         * Lista de botões.
         */
        this.buttons = [];
    }
    Object.defineProperty(PoButtonGroupBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoButtonGroupBaseComponent.prototype, "toggle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._toggle;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
         *
         * @default `none`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
         *
         * \@default `none`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._toggle = ((/** @type {?} */ (Object))).values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
            this.checkSelecteds(this._toggle);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    PoButtonGroupBaseComponent.prototype.onButtonClick = /**
     * @param {?} buttonClicked
     * @param {?} buttonIndex
     * @return {?}
     */
    function (buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach((/**
             * @param {?} button
             * @param {?} index
             * @return {?}
             */
            function (button, index) {
                return button.selected = index === buttonIndex ? !buttonClicked.selected : false;
            }));
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    };
    /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    PoButtonGroupBaseComponent.prototype.checkSelecteds = /**
     * @private
     * @param {?} toggleMode
     * @return {?}
     */
    function (toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            /** @type {?} */
            var hasMoreOneSelected = this.buttons.filter((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { return button.selected; })).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoButtonGroupBaseComponent.prototype.deselectAllButtons = /**
     * @private
     * @return {?}
     */
    function () {
        this.buttons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { return button.selected = false; }));
    };
    PoButtonGroupBaseComponent.propDecorators = {
        buttons: [{ type: Input, args: ['p-buttons',] }],
        small: [{ type: Input, args: ['p-small',] }],
        toggle: [{ type: Input, args: ['p-toggle',] }]
    };
    return PoButtonGroupBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoButtonGroupBaseComponent.prototype._small;
    /**
     * @type {?}
     * @private
     */
    PoButtonGroupBaseComponent.prototype._toggle;
    /**
     * Lista de botões.
     * @type {?}
     */
    PoButtonGroupBaseComponent.prototype.buttons;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoButtonGroupBaseComponent
 *
 * \@example
 *
 * <example name="po-button-group-basic" title="Portinari Button Group Basic">
 *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.html"> </file>
 *  <file name="sample-po-button-group-basic/sample-po-button-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-button-group-labs" title="Portinari Button Group Labs">
 *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.html"> </file>
 *  <file name="sample-po-button-group-labs/sample-po-button-group-labs.component.ts"> </file>
 * </example>
 *
 *
 * <example name="po-button-group-attendance" title="Portinari Button Group - Attendance">
 *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.html"> </file>
 *  <file name="sample-po-button-group-attendance/sample-po-button-group-attendance.component.ts"> </file>
 * </example>
 *
 * <example name="po-button-group-post" title="Portinari Button Group - Post">
 *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.html"> </file>
 *  <file name="sample-po-button-group-post/sample-po-button-group-post.component.ts"> </file>
 * </example>
 */
var PoButtonGroupComponent = /** @class */ (function (_super) {
    __extends(PoButtonGroupComponent, _super);
    function PoButtonGroupComponent(viewRef) {
        var _this = _super.call(this) || this;
        // Get instance of parent to execute the actions
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    PoButtonGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-button-group',
                    template: "<div class=\"po-button-group-container\">\n  <po-button\n    *ngFor=\"let button of buttons; index as i\"\n    class=\"po-sm-12 po-button-group\"\n    [class.po-button-group-button-selected]=\"button.selected\"\n    [class.po-button-group-disabled]=\"button.disabled\"\n    p-tooltip-position=\"bottom\"\n    [p-disabled]=\"button.disabled\"\n    [p-icon]=\"button.icon\"\n    [p-label]=\"button.label\"\n    [p-small]=\"small\"\n    [p-tooltip]=\"!button.disabled ? button.tooltip : undefined\"\n    (p-click)=\"button.action.call(parentRef, button); onButtonClick(button, i)\">\n  </po-button>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoButtonGroupComponent.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    return PoButtonGroupComponent;
}(PoButtonGroupBaseComponent));
if (false) {
    /** @type {?} */
    PoButtonGroupComponent.prototype.parentRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-button-group.
 */
var PoButtonGroupModule = /** @class */ (function () {
    function PoButtonGroupModule() {
    }
    PoButtonGroupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoButtonModule,
                        PoTooltipModule
                    ],
                    declarations: [
                        PoButtonGroupComponent
                    ],
                    exports: [
                        PoButtonGroupComponent
                    ]
                },] }
    ];
    return PoButtonGroupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poCalendarLocales = ['pt', 'en', 'es'];
/** @type {?} */
var poCalendarLocaleDefault = 'pt';
/**
 * \@description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
var PoCalendarBaseComponent = /** @class */ (function () {
    function PoCalendarBaseComponent(poDate, poCalendarLangService) {
        this.poDate = poDate;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeekDays = Array();
        this.monthVisible = false;
        this.yearVisible = false;
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        /**
         * Evento disparado ao selecionar um dia do calendário.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoCalendarBaseComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * @default `pt`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         *
         * \@default `pt`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarBaseComponent.prototype, "maxDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data máxima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} maxDate
         * @return {?}
         */
        function (maxDate) {
            this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarBaseComponent.prototype, "minDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a data mínima possível de ser selecionada.
         *
         * Pode receber os seguintes formatos de data:
         *
         * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
         * ```
         * this.date = '2017-11-28T00:00:00-02:00';
         * ```
         *
         * - **Data (E8601DAw.): yyyy-mm-dd**
         * ```
         * this.date = '2017-11-28';
         * ```
         *
         * - **JavaScript Date Object:**
         * ```
         * this.date = new Date(2017, 10, 28);
         * ```
         * @param {?} minDate
         * @return {?}
         */
        function (minDate) {
            this._minDate = this.poDate.getDateForDateRange(minDate, true);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoCalendarBaseComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeekDays = this.poCalendarLangService.getWeekDaysArray();
        this.displayMonths = this.poCalendarLangService.getMonthsArray();
        this.displayMonth = this.displayMonths[this.displayMonthNumber];
    };
    PoCalendarBaseComponent.propDecorators = {
        locale: [{ type: Input, args: ['p-locale',] }],
        maxDate: [{ type: Input, args: ['p-max-date',] }],
        minDate: [{ type: Input, args: ['p-min-date',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoCalendarBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCalendarBaseComponent.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    PoCalendarBaseComponent.prototype._maxDate;
    /**
     * @type {?}
     * @private
     */
    PoCalendarBaseComponent.prototype._minDate;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.currentYear;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.dayVisible;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayDays;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayDecade;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayFinalDecade;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayMonth;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayMonthNumber;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayMonths;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayStartDecade;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayWeekDays;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.displayYear;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.monthVisible;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.yearVisible;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.currentMonthNumber;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.date;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.dateIso;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.lastDisplay;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.today;
    /**
     * @type {?}
     * @protected
     */
    PoCalendarBaseComponent.prototype.validatorChange;
    /**
     * Evento disparado ao selecionar um dia do calendário.
     * @type {?}
     */
    PoCalendarBaseComponent.prototype.change;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.poDate;
    /** @type {?} */
    PoCalendarBaseComponent.prototype.poCalendarLangService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoCalendarLangService = /** @class */ (function () {
    function PoCalendarLangService() {
        this.language = 'pt';
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.monthLabel = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.yearLabel = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
    }
    /**
     * @param {?} month
     * @return {?}
     */
    PoCalendarLangService.prototype.getMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        return this.months[month][this.language];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getMonthLabel = /**
     * @return {?}
     */
    function () {
        return this.monthLabel[this.language];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getMonthsArray = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrMonths = Array();
        for (var i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.language]);
        }
        return arrMonths;
    };
    /**
     * @param {?} day
     * @return {?}
     */
    PoCalendarLangService.prototype.getWeekDays = /**
     * @param {?} day
     * @return {?}
     */
    function (day) {
        return this.shortWeekDays[day][this.language];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getWeekDaysArray = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrWeekDays = Array();
        for (var i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.language]);
        }
        return arrWeekDays;
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getYearLabel = /**
     * @return {?}
     */
    function () {
        return this.yearLabel[this.language];
    };
    /**
     * @param {?} language
     * @return {?}
     */
    PoCalendarLangService.prototype.setLanguage = /**
     * @param {?} language
     * @return {?}
     */
    function (language) {
        if (language && language.length >= 2) {
            language = language.toLowerCase().slice(0, 2);
            this.language = (language === 'pt' || language === 'en' || language === 'es') ? language : 'pt';
        }
    };
    PoCalendarLangService.decorators = [
        { type: Injectable }
    ];
    return PoCalendarLangService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.language;
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.months;
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.shortWeekDays;
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.monthLabel;
    /**
     * @type {?}
     * @private
     */
    PoCalendarLangService.prototype.yearLabel;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poCalendarServiceFirstWeekDayDefault = 0;
var PoCalendarService = /** @class */ (function () {
    function PoCalendarService() {
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    PoCalendarService.prototype.monthDates = /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        var weeks = [];
        /** @type {?} */
        var week = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarService.prototype.monthDays = /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var getDayOrZero = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date.getMonth() === month ? date : 0;
        });
        return this.monthDates(year, month, getDayOrZero);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarService.prototype.weekStartDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var startDate = new Date(date.getTime());
        while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    PoCalendarService.decorators = [
        { type: Injectable }
    ];
    return PoCalendarService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço responsável por gerenciar o tratamento dos formatos de data e hora.
 */
var PoDateService = /** @class */ (function () {
    function PoDateService() {
        this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
    }
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param minDate Definir `true` caso seja `minDate`.
     * @param maxDate Definir `true` caso seja `maxDate`.
     */
    /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} minDate Definir `true` caso seja `minDate`.
     * @param {?} maxDate Definir `true` caso seja `maxDate`.
     * @return {?}
     */
    PoDateService.prototype.convertIsoToDate = /**
     * Método responsável por converter datas do formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` para o formato `Date`.
     *
     * @param {?} dateString Data no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} minDate Definir `true` caso seja `minDate`.
     * @param {?} maxDate Definir `true` caso seja `maxDate`.
     * @return {?}
     */
    function (dateString, minDate, maxDate) {
        if (dateString) {
            var _a = this.getDateFromIso(dateString), year = _a.year, month = _a.month, day = _a.day;
            if (minDate) {
                /** @type {?} */
                var date = new Date(year, month - 1, day, 0, 0, 0);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else if (maxDate) {
                /** @type {?} */
                var date = new Date(year, month - 1, day, 23, 59, 59);
                this.setYearFrom0To100(date, year);
                return date;
            }
            else {
                /** @type {?} */
                var miliseconds = Date.parse(dateString);
                /** @type {?} */
                var timezone = new Date().getTimezoneOffset() * 60000;
                return new Date(miliseconds + timezone);
            }
        }
    };
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param date Data no formato `Date`.
     */
    /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param {?} date Data no formato `Date`.
     * @return {?}
     */
    PoDateService.prototype.convertDateToISO = /**
     * Método responsável por converter data do formato `Date` para o formato `yyyy-mm-dd`.
     *
     * @param {?} date Data no formato `Date`.
     * @return {?}
     */
    function (date) {
        if (date) {
            /** @type {?} */
            var fullYear = date.getFullYear();
            /** @type {?} */
            var getMonth = date.getMonth() + 1;
            /** @type {?} */
            var day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            /** @type {?} */
            var month = getMonth < 10 ? '0' + getMonth : getMonth;
            /** @type {?} */
            var year = this.formatYear(fullYear);
            return year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    };
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param year Ano a ser validado.
     */
    /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param {?} year Ano a ser validado.
     * @return {?}
     */
    PoDateService.prototype.formatYear = /**
     * Método responsável por adicionar zeros a esquerda do anos em formato string.
     *
     * @param {?} year Ano a ser validado.
     * @return {?}
     */
    function (year) {
        if (year > 999) {
            return year.toString();
        }
        if (year > 99 && year < 1000) {
            return "0" + year;
        }
        if (year > 9 && year < 100) {
            return "00" + year;
        }
        if (year >= 0 && year < 10) {
            return "000" + year;
        }
    };
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param isoDate Ano em formato string.
     */
    /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param {?} isoDate Ano em formato string.
     * @return {?}
     */
    PoDateService.prototype.getDateFromIso = /**
     * Método responsável por retornar o dia, mês e ano separados em formato de objeto.
     *
     * @param {?} isoDate Ano em formato string.
     * @return {?}
     */
    function (isoDate) {
        /** @type {?} */
        var day = parseInt(isoDate.substring(8, 10), 10);
        /** @type {?} */
        var month = parseInt(isoDate.substring(5, 7), 10);
        /** @type {?} */
        var year = parseInt(isoDate.substring(0, 4), 10);
        return { year: year, month: month, day: day };
    };
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     */
    /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     * @return {?}
     */
    PoDateService.prototype.getDateForDateRange = /**
     * Método responsável por retornar a data com a hora definida para `00:00:00` caso `isMinDate` for igual a `true` ou `23:59:59`
     * caso `isMindate` seja igual a `false` .
     *
     * @param {?} date Data no formato `Date` ou `yyyy-mm-ddThh:mm:ss+|-hh:mm`.
     * @param {?} isMinDate Caso `true` aplica `00:00:00`, caso `false` aplica `23:59:59` a hora da data informada.
     * @return {?}
     */
    function (date, isMinDate) {
        /** @type {?} */
        var lastHour = isMinDate ? [0, 0, 0] : [23, 59, 59];
        if (date instanceof Date) {
            var _a = this.splitDate(date), year = _a.year, month = _a.month, day = _a.day;
            /** @type {?} */
            var validDate = new (Date.bind.apply(Date, __spread([void 0, year, month, day], lastHour)))();
            this.setYearFrom0To100(validDate, year);
            return validDate;
        }
        else if (this.isValidIso(date)) {
            return this.convertIsoToDate(date, isMinDate, !isMinDate);
        }
    };
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param dateA primeira data
     * @param dateB segunda data
     */
    /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param {?=} dateA primeira data
     * @param {?=} dateB segunda data
     * @return {?}
     */
    PoDateService.prototype.isDateRangeValid = /**
     * Retorna `true` caso o período seja válido, para isso a primeira data deve ser maior que a segunda data.
     * @param {?=} dateA primeira data
     * @param {?=} dateB segunda data
     * @return {?}
     */
    function (dateA, dateB) {
        if (dateA === void 0) { dateA = ''; }
        if (dateB === void 0) { dateB = ''; }
        /** @type {?} */
        var dateASplitted = dateA.split('-').map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return parseInt(item, 10); }));
        /** @type {?} */
        var dateBSplitted = dateB.split('-').map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return parseInt(item, 10); }));
        for (var index = 0; index <= dateASplitted.length; index++) {
            if (dateASplitted[index] > dateBSplitted[index]) {
                return true;
            }
            else if (dateASplitted[index] < dateBSplitted[index]) {
                return false;
            }
        }
        return true;
    };
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param stringDate Data.
     */
    /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param {?} stringDate Data.
     * @return {?}
     */
    PoDateService.prototype.isValidIso = /**
     * Método responsável por validar se uma data está no formato `yyyy-mm-ddThh:mm:ss+|-hh:mm` ou `yyyy-mm-dd`.
     *
     * @param {?} stringDate Data.
     * @return {?}
     */
    function (stringDate) {
        return this.dateRegex.test(stringDate) || this.isoRegex.test(stringDate);
    };
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param date Data.
     * @param year .
     */
    /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param {?} date Data.
     * @param {?} year .
     * @return {?}
     */
    PoDateService.prototype.setYearFrom0To100 = /**
     * Método responsável por corrigir a data caso a mesma esteja entre os anos 0 e 99.
     *
     * @param {?} date Data.
     * @param {?} year .
     * @return {?}
     */
    function (date, year) {
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
    };
    /**
     * Método responsável por ordenar duas datas.
     *
     * @param leftSide Primeira data a ser comparada.
     * @param rightSide Segunda data a ser comparada.
     * @param ascending Determina se será em ordem crescente ou decrescente.
     */
    /**
     * Método responsável por ordenar duas datas.
     *
     * @param {?} leftSide Primeira data a ser comparada.
     * @param {?} rightSide Segunda data a ser comparada.
     * @param {?} ascending Determina se será em ordem crescente ou decrescente.
     * @return {?}
     */
    PoDateService.prototype.sortDate = /**
     * Método responsável por ordenar duas datas.
     *
     * @param {?} leftSide Primeira data a ser comparada.
     * @param {?} rightSide Segunda data a ser comparada.
     * @param {?} ascending Determina se será em ordem crescente ou decrescente.
     * @return {?}
     */
    function (leftSide, rightSide, ascending) {
        return sortValues(this.validateDate(leftSide), this.validateDate(rightSide), ascending);
    };
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param date Valor da data.
     */
    /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param {?} date Valor da data.
     * @return {?}
     */
    PoDateService.prototype.splitDate = /**
     * Método responsável por retornar o dia , mês e ano de uma data informada.
     *
     * @param {?} date Valor da data.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var year = date.getFullYear();
        /** @type {?} */
        var month = date.getMonth();
        /** @type {?} */
        var day = date.getDate();
        return { year: year, month: month, day: day };
    };
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param date Data a ser validada.
     * @param minDate Data inicial.
     * @param maxDate Data final.
     */
    /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param {?} date Data a ser validada.
     * @param {?} minDate Data inicial.
     * @param {?} maxDate Data final.
     * @return {?}
     */
    PoDateService.prototype.validateDateRange = /**
     * Método responsável por validar se uma data está entre a `minDate` e `maxDate`.
     *
     * @param {?} date Data a ser validada.
     * @param {?} minDate Data inicial.
     * @param {?} maxDate Data final.
     * @return {?}
     */
    function (date, minDate, maxDate) {
        if (minDate && maxDate) {
            return (date >= minDate && date <= maxDate);
        }
        else if (minDate && !maxDate) {
            return (date >= minDate);
        }
        else if (!minDate && maxDate) {
            return (date <= maxDate);
        }
        else {
            return true;
        }
    };
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @param date Data que será validada.
     */
    /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @private
     * @param {?} date Data que será validada.
     * @return {?}
     */
    PoDateService.prototype.validateDate = /**
     * Método responsável por validar se a data foi informada nos padrões 'yyyy-mm-dd', 'yyyy-mm-ddThh:mm:ss+|-hh:mm' ou
     * 'Date' padrão do javascript.
     *
     * @private
     * @param {?} date Data que será validada.
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var validDate = date instanceof Date ? this.convertDateToISO(date) : date;
        return this.isValidIso(validDate) ? validDate : undefined;
    };
    PoDateService.decorators = [
        { type: Injectable }
    ];
    return PoDateService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDateService.prototype.dateRegex;
    /**
     * @type {?}
     * @private
     */
    PoDateService.prototype.isoRegex;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoCalendarBaseComponent
 *
 * \@example
 *
 * <example name="po-calendar-basic" title="Portinari Calendar Basic" >
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.html"> </file>
 *  <file name="sample-po-calendar-basic/sample-po-calendar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-labs" title="Portinari Calendar Labs" >
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.html"> </file>
 *  <file name="sample-po-calendar-labs/sample-po-calendar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-calendar-ticket-sales" title="Portinari Calendar - Ticket Sales" >
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.html"> </file>
 *  <file name="sample-po-calendar-ticket-sales/sample-po-calendar-ticket-sales.component.ts"> </file>
 * </example>
 */
var PoCalendarComponent = /** @class */ (function (_super) {
    __extends(PoCalendarComponent, _super);
    function PoCalendarComponent(poCalendarService, poCalendarLangService, poDate) {
        var _this = _super.call(this, poDate, poCalendarLangService) || this;
        _this.poCalendarService = poCalendarService;
        return _this;
    }
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    PoCalendarComponent.prototype.getBackgroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.getDayBackgroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDayColor(date, 'background');
    };
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.getDayForegroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return this.getDayColor(date, 'foreground');
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    PoCalendarComponent.prototype.getForegroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.getMonthLabel = /**
     * @return {?}
     */
    function () {
        return this.poCalendarLangService.getMonthLabel();
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.getYearLabel = /**
     * @return {?}
     */
    function () {
        return this.poCalendarLangService.getYearLabel();
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.onNextMonth = /**
     * @return {?}
     */
    function () {
        this.displayMonthNumber < 11 ? this.updateDisplay(this.displayYear, this.displayMonthNumber + 1) :
            this.updateDisplay(this.displayYear + 1, 0);
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.onPreviousMonth = /**
     * @return {?}
     */
    function () {
        this.displayMonthNumber > 0 ? this.updateDisplay(this.displayYear, this.displayMonthNumber - 1) :
            this.updateDisplay(this.displayYear - 1, 11);
    };
    // Ao selecionar uma data
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectDate = 
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.date = date;
        this.dateIso = this.poDate.convertDateToISO(date);
        if (this.propagateChange) {
            this.propagateChange(this.dateIso);
        }
        this.change.emit(this.dateIso);
    };
    // Ao selecionar um mês
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectMonth = 
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectYear = 
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoCalendarComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} func
     * @return {?}
     */
    PoCalendarComponent.prototype.registerOnTouched = /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoCalendarComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectDay = /**
     * @return {?}
     */
    function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectMonth = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectYear = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoCalendarComponent.prototype.updateYear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PoCalendarComponent.prototype.validateModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PoCalendarComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoCalendarComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.writeDate(value);
        }
        else {
            this.date = undefined;
            this.updateDate(this.today);
        }
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.addAllYearsInDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    PoCalendarComponent.prototype.equalsDate = /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    // Obtém um array de todos os anos desta década
    // Obtém um array de todos os anos desta década
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.getDecadeArray = 
    // Obtém um array de todos os anos desta década
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    PoCalendarComponent.prototype.getColorForDate = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate) ? "po-calendar-box-" + local + "-selected" :
            "po-calendar-box-" + local + "-selected-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    PoCalendarComponent.prototype.getColorForDateRange = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate) ? "po-calendar-box-" + local :
            "po-calendar-box-" + local + "-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    PoCalendarComponent.prototype.getColorForToday = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        return this.poDate.validateDateRange(date, this.minDate, this.maxDate) ? "po-calendar-box-" + local + "-today" :
            "po-calendar-box-" + local + "-today-disabled";
    };
    /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    PoCalendarComponent.prototype.getDayColor = /**
     * @private
     * @param {?} date
     * @param {?} local
     * @return {?}
     */
    function (date, local) {
        if (this.equalsDate(date, this.date)) {
            return this.getColorForDate(date, local);
        }
        else if (this.equalsDate(date, this.today)) {
            return this.getColorForToday(date, local);
        }
        else {
            return this.getColorForDateRange(date, local);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoCalendarComponent.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        this.date && this.poDate.isValidIso(this.poDate.convertDateToISO(this.date)) ?
            this.updateDate(this.date) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.selectDateFromDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.date = date;
        this.onSelectDate(this.date);
    };
    /**
     * @private
     * @param {?} stringDate
     * @return {?}
     */
    PoCalendarComponent.prototype.selectDateFromIso = /**
     * @private
     * @param {?} stringDate
     * @return {?}
     */
    function (stringDate) {
        var _a = this.poDate.getDateFromIso(stringDate), year = _a.year, month = _a.month, day = _a.day;
        /** @type {?} */
        var date = new Date(year, month - 1, day);
        this.poDate.setYearFrom0To100(date, year);
        this.date = date;
        this.onSelectDate(this.date);
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            this.currentMonthNumber = date.getMonth();
            this.currentYear = date.getFullYear();
            this.updateDisplay(this.currentYear, this.currentMonthNumber);
        }
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDisplay = /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getDecadeArray(year);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoCalendarComponent.prototype.writeDate = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value instanceof Date ? this.selectDateFromDate(value) : this.writeDateIso(value);
        this.updateDate(this.date);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoCalendarComponent.prototype.writeDateIso = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.poDate.isValidIso(value) ? this.selectDateFromIso(value) : this.date = undefined;
    };
    PoCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-calendar',
                    template: "<div class=\"po-calendar\">\n  <div *ngIf=\"dayVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"onPreviousMonth()\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"onNextMonth()\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeekDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\"\n          class=\"po-calendar-day\"\n          [ngClass]=\"getDayBackgroundColor(day)\"\n          (click)=\"onSelectDate(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"updateYear(-1)\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"updateYear(1)\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getMonthLabel() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"po-calendar-month\"\n          [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\"\n          (click)=\"onSelectMonth(displayYear, i)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\">\n    <div class=\"po-calendar-nav\">\n      <span class=\"po-calendar-nav-left po-icon po-icon-arrow-left\" (click)=\"updateYear(-10)\"></span>\n      <div class=\"po-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span class=\"po-calendar-nav-right po-icon po-icon-arrow-right\" (click)=\"updateYear(10)\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getYearLabel() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"po-calendar-year\"\n          [ngClass]=\"getBackgroundColor(year, currentYear)\"\n          (click)=\"onSelectYear(year, displayMonthNumber)\"attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                    providers: [
                        PoCalendarService,
                        PoCalendarLangService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoCalendarComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoCalendarComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoCalendarComponent.ctorParameters = function () { return [
        { type: PoCalendarService },
        { type: PoCalendarLangService },
        { type: PoDateService }
    ]; };
    return PoCalendarComponent;
}(PoCalendarBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent.prototype.poCalendarService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente `po-calendar`.
 */
var PoCalendarModule = /** @class */ (function () {
    function PoCalendarModule() {
    }
    PoCalendarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [PoCalendarComponent],
                    exports: [PoCalendarComponent],
                    providers: [
                        PoCalendarLangService,
                        PoCalendarService
                    ]
                },] }
    ];
    return PoCalendarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoChartType = {
    /**
     * Exibe os dados em formato de rosca, dividindo em partes proporcionais.
     */
    Donut: 'donut',
    /**
     * Exibe os dados em formato circular, dividindo proporcionalmente em fatias.
     */
    Pie: 'pie',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poChartDefaultHeight = 400;
/** @type {?} */
var poChartMinHeight = 200;
/** @type {?} */
var poChartTypeDefault = PoChartType.Pie;
/**
 * \@description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Este componente também possibilita a definição das seguintes propriedades:
 *  - altura
 *  - series
 *  - tipo
 *  - título
 *
 * Além das definições de propriedades, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 *
 * @abstract
 */
var PoChartBaseComponent = /** @class */ (function () {
    function PoChartBaseComponent() {
        this._height = poChartDefaultHeight;
        this._type = poChartTypeDefault;
        this.poChartType = PoChartType;
        /**
         * Evento executado quando o usuário clicar sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesClick = new EventEmitter();
        /**
         * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
         *
         * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
         */
        this.seriesHover = new EventEmitter();
    }
    Object.defineProperty(PoChartBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * @default `400px`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do gráfico.
         *
         * > O valor mínimo que pode ser informado é 200.
         *
         * \@default `400px`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var intValue = convertToInt(value);
            /** @type {?} */
            var height;
            if (isTypeof(value, 'number')) {
                height = intValue <= poChartMinHeight ? poChartMinHeight : intValue;
            }
            else {
                height = poChartDefaultHeight;
            }
            this._height = height;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o tipo de gráfico.
         *
         * > Veja os valores válidos no *enum* `PoChartType`.
         *
         * @default `PoChartType.Pie`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o tipo de gráfico.
         *
         * > Veja os valores válidos no *enum* `PoChartType`.
         *
         * \@default `PoChartType.Pie`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = ((/** @type {?} */ (Object))).values(PoChartType).includes(value) ? value : poChartTypeDefault;
            this.rebuildComponent();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    PoChartBaseComponent.prototype.onSeriesClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesClick.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoChartBaseComponent.prototype.onSeriesHover = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.seriesHover.emit(event);
    };
    PoChartBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['p-height',] }],
        series: [{ type: Input, args: ['p-series',] }],
        title: [{ type: Input, args: ['p-title',] }],
        type: [{ type: Input, args: ['p-type',] }],
        seriesClick: [{ type: Output, args: ['p-series-click',] }],
        seriesHover: [{ type: Output, args: ['p-series-hover',] }]
    };
    return PoChartBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoChartBaseComponent.prototype._type;
    /** @type {?} */
    PoChartBaseComponent.prototype.poChartType;
    /**
     * \@description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     *
     * > A coleção de objetos deve implementar alguma das interfaces abaixo:
     * - `PoDonutChartSeries`
     * - `PoPieChartSeries`
     * @type {?}
     */
    PoChartBaseComponent.prototype.series;
    /**
     * Define o título do gráfico.
     * @type {?}
     */
    PoChartBaseComponent.prototype.title;
    /**
     * Evento executado quando o usuário clicar sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    PoChartBaseComponent.prototype.seriesClick;
    /**
     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     * @type {?}
     */
    PoChartBaseComponent.prototype.seriesHover;
    /**
     * @abstract
     * @return {?}
     */
    PoChartBaseComponent.prototype.rebuildComponent = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Array de cores para gráficos definido pela equipe de UX Portinari.
/** @type {?} */
var PoChartColors = [
    ['#29B6C5'],
    ['#0C6C94', '#29B6C5'],
    ['#0C6C94', '#29B6C5', '#C9ECF0'],
    ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2'],
    ['#0C6C94', '#0B92B4', '#29B6C5', '#94DAE2', '#C9ECF0'],
    ['#0C6C94', '#00A5C5', '#0082A8', '#31628D', '#364473', '#32285C'],
    ['#0C6C94', '#00AACB', '#018DAE', '#277099', '#325783', '#35426E', '#32285D'],
    ['#0C6C94', '#00AFCE', '#0194B6', '#117FA2', '#0088AC', '#23789F', '#2B6992', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#36436F', '#32285C'],
    ['#0C6C94', '#00BAD5', '#00A7C7', '#0197B8', '#0088AC', '#23789F', '#2B6992', '#315C87', '#364E7C', '#36436F', '#333565', '#32285C'],
];
// Cores que será utilizado texto preto
/** @type {?} */
var PoSeriesTextBlack = ['#94DAE2', '#C9ECF0'];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poChartAnimationDurationTime = 1500;
/** @type {?} */
var poChartAngleStepInterval = Math.PI * 2 / Math.floor(poChartAnimationDurationTime / 60);
/** @type {?} */
var poChartCompleteCircle = 0.0001;
/** @type {?} */
var poChartPadding = 24;
/** @type {?} */
var poChartStartAngle = -Math.PI / 2;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var Padding = 24;
/**
 * @abstract
 */
var PoChartDynamicTypeComponent = /** @class */ (function () {
    function PoChartDynamicTypeComponent() {
        this.innerRadius = 0;
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        this.series = [];
    }
    /**
     * @param {?} chartWrapperElement
     * @param {?} chartHeaderElement
     * @param {?} chartLegendElement
     * @return {?}
     */
    PoChartDynamicTypeComponent.prototype.calculateSVGContainerDimensions = /**
     * @param {?} chartWrapperElement
     * @param {?} chartHeaderElement
     * @param {?} chartLegendElement
     * @return {?}
     */
    function (chartWrapperElement, chartHeaderElement, chartLegendElement) {
        /** @type {?} */
        var svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - (Padding * 2);
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    };
    /**
     * @return {?}
     */
    PoChartDynamicTypeComponent.prototype.calculateTotalValue = /**
     * @return {?}
     */
    function () {
        this.totalValue = this.series.reduce((/**
         * @param {?} previousValue
         * @param {?} serie
         * @return {?}
         */
        function (previousValue, serie) { return previousValue + serie.value; }), 0);
    };
    PoChartDynamicTypeComponent.propDecorators = {
        chartBody: [{ type: ViewChild, args: ['chartBody', { static: true },] }],
        svgContainer: [{ type: ViewChild, args: ['svgContainer', { static: true },] }]
    };
    return PoChartDynamicTypeComponent;
}());
if (false) {
    /**
     * @type {?}
     * @protected
     */
    PoChartDynamicTypeComponent.prototype.windowResizeListener;
    /**
     * @type {?}
     * @protected
     */
    PoChartDynamicTypeComponent.prototype.windowScrollListener;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.centerX;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.chartElementCategory;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.chartElementValue;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.chartHeader;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.chartLegend;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.chartWrapper;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.colors;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.height;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.innerRadius;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.onSerieClick;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.onSerieHover;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.series;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.svgElement;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.svgHeight;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.target;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.tooltipElement;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.tooltipText;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.totalValue;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.type;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.chartBody;
    /** @type {?} */
    PoChartDynamicTypeComponent.prototype.svgContainer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poChartBlackColor = '#000000';
/** @type {?} */
var poChartWhiteColor = '#ffffff';
var PoChartCircular = /** @class */ (function (_super) {
    __extends(PoChartCircular, _super);
    function PoChartCircular(el, ngZone, renderer) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this.ngZone = ngZone;
        _this.renderer = renderer;
        _this.chartItemsEndAngleList = [];
        _this.svgPathElementsList = [];
        _this.svgTextElementsList = [];
        return _this;
    }
    Object.defineProperty(PoChartCircular.prototype, "series", {
        get: /**
         * @return {?}
         */
        function () {
            return this._series;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._series = this.getSeriesWithValue(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    PoChartCircular.calculateEndAngle = /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    function (value, totalValue) {
        return value / totalValue * (Math.PI * 2);
    };
    /**
     * @return {?}
     */
    PoChartCircular.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeWindowResizeListener();
        this.removeWindowScrollListener();
        this.animationRunning = false;
    };
    /**
     * @return {?}
     */
    PoChartCircular.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.chartInitSetup();
        this.setEventListeners();
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.animationSetup = /**
     * @private
     * @return {?}
     */
    function () {
        this.chartItemStartAngle = poChartStartAngle;
        this.chartItemEndAngle = this.chartItemsEndAngleList[0];
        this.animationRunning = true;
        this.drawPathInit();
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.calculateAngleRadians = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.series.forEach((/**
         * @param {?} serie
         * @param {?} index
         * @return {?}
         */
        function (serie, index) {
            return _this.chartItemsEndAngleList[index] = PoChartCircular.calculateEndAngle(serie.value, _this.totalValue);
        }));
    };
    /**
     * @private
     * @param {?} angleCurrentPosition
     * @return {?}
     */
    PoChartCircular.prototype.calculateCurrentEndAngle = /**
     * @private
     * @param {?} angleCurrentPosition
     * @return {?}
     */
    function (angleCurrentPosition) {
        /** @type {?} */
        var isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
        if (isSerieDrawCompleted) {
            return (this.chartItemStartAngle + this.chartItemEndAngle) - poChartCompleteCircle;
        }
        else {
            return this.chartItemStartAngle + angleCurrentPosition;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.calculateSVGDimensions = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.setInnerRadius();
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoChartCircular.prototype.changeTooltipPosition = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.tooltipElement && this.tooltipElement.classList.contains('po-invisible')) {
            this.showTooltip();
        }
        /** @type {?} */
        var tooltipPositions = this.setTooltipPositions(event);
        this.renderer.setStyle(this.tooltipElement, 'left', tooltipPositions.left + "px");
        this.renderer.setStyle(this.tooltipElement, 'top', tooltipPositions.top + "px");
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.chartInitSetup = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateSVGDimensions();
        this.calculateTotalValue();
        this.calculateAngleRadians();
        this.createSVGElements();
        this.animationSetup();
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.checkingIfScrollsWithPoPage = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var poPageContent = document.getElementsByClassName('po-page-content');
        return poPageContent.length ? poPageContent[0] : window;
    };
    /**
     * @private
     * @param {?} serie
     * @param {?} svgPathsWrapper
     * @return {?}
     */
    PoChartCircular.prototype.createPath = /**
     * @private
     * @param {?} serie
     * @param {?} svgPathsWrapper
     * @return {?}
     */
    function (serie, svgPathsWrapper) {
        /** @type {?} */
        var svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'po-path-item');
        this.renderer.setAttribute(svgPath, 'fill', serie.color);
        this.setTooltipAttributes(svgPath, serie);
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        this.svgPathElementsList.push(svgPath);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.createPaths = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
        this.series.forEach((/**
         * @param {?} serie
         * @return {?}
         */
        function (serie) { return _this.createPath(serie, svgPathsWrapper); }));
    };
    /**
     * @private
     * @param {?} serie
     * @return {?}
     */
    PoChartCircular.prototype.createText = /**
     * @private
     * @param {?} serie
     * @return {?}
     */
    function (serie) {
        var value = serie.value;
        /** @type {?} */
        var svgG = this.renderer.createElement('svg:g', 'svg');
        /** @type {?} */
        var svgText = this.renderer.createElement('svg:text', 'svg');
        /** @type {?} */
        var fontSize = this.getFontSize();
        /** @type {?} */
        var textColor = this.getTextColor(serie.color);
        svgText.textContent = this.getPercentValue(value, this.totalValue) + '%';
        this.renderer.setAttribute(svgText, 'class', 'po-path-item');
        this.renderer.setAttribute(svgText, 'fill', textColor);
        this.renderer.setAttribute(svgText, 'font-size', fontSize);
        this.renderer.setAttribute(svgText, 'fill-opacity', '0');
        this.setTooltipAttributes(svgText, serie);
        this.renderer.appendChild(svgG, svgText);
        this.renderer.appendChild(this.svgElement, svgG);
        this.svgTextElementsList.push(svgText);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.createTexts = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.type === PoChartType.Donut) {
            this.series.forEach((/**
             * @param {?} serie
             * @return {?}
             */
            function (serie) { return _this.createText(serie); }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.createSVGElements = /**
     * @private
     * @return {?}
     */
    function () {
        this.svgElement = this.renderer.createElement('svg:svg', 'svg');
        this.renderer.setAttribute(this.svgElement, 'viewBox', "0 0 " + this.chartWrapper + " " + this.centerX * 2);
        this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', 'xMidYMin meet');
        this.renderer.setAttribute(this.svgElement, 'class', 'po-chart-svg-element');
        this.renderer.setAttribute(this.svgElement, 'width', "" + (this.chartWrapper - poChartPadding * 2));
        this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
        this.svgContainer.nativeElement.appendChild(this.svgElement);
        this.createPaths();
        this.createTexts();
    };
    /**
     * @private
     * @param {?} path
     * @param {?} chartItemStartAngle
     * @param {?} chartItemEndAngle
     * @return {?}
     */
    PoChartCircular.prototype.drawPath = /**
     * @private
     * @param {?} path
     * @param {?} chartItemStartAngle
     * @param {?} chartItemEndAngle
     * @return {?}
     */
    function (path, chartItemStartAngle, chartItemEndAngle) {
        /** @type {?} */
        var largeArc = chartItemEndAngle - chartItemStartAngle > Math.PI;
        /** @type {?} */
        var sinAlpha = Math.sin(chartItemStartAngle);
        /** @type {?} */
        var cosAlpha = Math.cos(chartItemStartAngle);
        /** @type {?} */
        var sinBeta = Math.sin(chartItemEndAngle);
        /** @type {?} */
        var cosBeta = Math.cos(chartItemEndAngle);
        /** @type {?} */
        var startX = this.centerX + cosAlpha * this.centerX;
        /** @type {?} */
        var startY = this.centerX + sinAlpha * this.centerX;
        /** @type {?} */
        var endX = this.centerX + cosBeta * this.centerX;
        /** @type {?} */
        var endY = this.centerX + sinBeta * this.centerX;
        /** @type {?} */
        var startInnerX = this.centerX + cosAlpha * this.innerRadius;
        /** @type {?} */
        var startInnerY = this.centerX + sinAlpha * this.innerRadius;
        /** @type {?} */
        var endInnerX = this.centerX + cosBeta * this.innerRadius;
        /** @type {?} */
        var endInnerY = this.centerX + sinBeta * this.innerRadius;
        /** @type {?} */
        var pathCoordinates = [
            'M', startX, startY,
            'A', this.centerX, this.centerX, 0, largeArc ? '1,1' : '0,1', endX, endY,
            'L', endInnerX, endInnerY,
            'A', this.innerRadius, this.innerRadius, 0, largeArc ? '1,0' : '0,0', startInnerX, startInnerY,
            'Z'
        ].join(' ');
        return path.setAttribute('d', pathCoordinates);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.drawPathInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.animationRunning) {
            return;
        }
        else {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return _this.drawSeries(); }));
        }
    };
    /**
     * @private
     * @param {?=} currentSerieIndex
     * @param {?=} angleCurrentPosition
     * @return {?}
     */
    PoChartCircular.prototype.drawSeries = /**
     * @private
     * @param {?=} currentSerieIndex
     * @param {?=} angleCurrentPosition
     * @return {?}
     */
    function (currentSerieIndex, angleCurrentPosition) {
        if (currentSerieIndex === void 0) { currentSerieIndex = 0; }
        if (angleCurrentPosition === void 0) { angleCurrentPosition = 0; }
        /** @type {?} */
        var isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
        /** @type {?} */
        var isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
        if (isFinishedDrawingAllSeries) {
            return;
        }
        if (isFinishedDrawingCurrentSeries) {
            this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
            currentSerieIndex++;
            this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
            angleCurrentPosition = 0;
        }
        else {
            angleCurrentPosition += poChartAngleStepInterval;
            this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
            this.setTextProperties(this.svgTextElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
        }
        window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoChartCircular.prototype.emitEventOnEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.onSerieHover.next(event);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.getFontSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fontSizePorcent = 0.04;
        /** @type {?} */
        var fontSize = fontSizePorcent * this.chartWrapper;
        return fontSize.toFixed(0) + "px";
    };
    /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    PoChartCircular.prototype.getPercentValue = /**
     * @private
     * @param {?} value
     * @param {?} totalValue
     * @return {?}
     */
    function (value, totalValue) {
        /** @type {?} */
        var percentValue = (value / totalValue) * 100;
        // caso tiver mais que duas casas decimais, fixa até duas, ex: 10.6575 => 10.65
        // se não retorna o valor com parsefloat que remove casa decimal desencessaria, ex: 10.60 => 10.6
        /** @type {?} */
        var floatPercentValue = this.isMoreThanTwoDecimalsPlaces(percentValue) ?
            parseFloat(percentValue.toFixed(2)) : parseFloat((/** @type {?} */ (percentValue)));
        return String(floatPercentValue).replace('.', ',');
    };
    /**
     * @private
     * @param {?} series
     * @return {?}
     */
    PoChartCircular.prototype.getSeriesWithValue = /**
     * @private
     * @param {?} series
     * @return {?}
     */
    function (series) {
        var _this = this;
        /** @type {?} */
        var newSeries = [];
        series.forEach((/**
         * @param {?} serie
         * @param {?} index
         * @return {?}
         */
        function (serie, index) {
            if (serie.value > 0) {
                newSeries.push(__assign({}, serie, { color: _this.colors[index] }));
            }
        }));
        return newSeries;
    };
    /**
     * @private
     * @param {?} color
     * @return {?}
     */
    PoChartCircular.prototype.getTextColor = /**
     * @private
     * @param {?} color
     * @return {?}
     */
    function (color) {
        if (PoSeriesTextBlack.includes(color)) {
            return poChartBlackColor;
        }
        return poChartWhiteColor;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoChartCircular.prototype.getTooltipValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.type === PoChartType.Pie) {
            return value.toString();
        }
        return this.getPercentValue(value, this.totalValue) + '%';
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    PoChartCircular.prototype.isMoreThanTwoDecimalsPlaces = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = 0; }
        var _a = __read(value.toString().split('.'), 2), valueAfterDot = _a[1];
        return valueAfterDot && valueAfterDot.length > 2;
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.onMouseClick = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var serieOnClick = { category: this.chartElementCategory, value: this.chartElementValue };
        this.onSerieClick.next(serieOnClick);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoChartCircular.prototype.onMouseEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.tooltipElement = this.chartBody.nativeElement.lastChild;
        this.chartElementCategory = event.target.getAttributeNS(null, 'data-tooltip-category');
        this.chartElementValue = event.target.getAttributeNS(null, 'data-tooltip-value');
        this.tooltipText = event.target.getAttributeNS(null, 'data-tooltip-text');
        this.showTooltip();
        this.changeTooltipPosition(event);
        /** @type {?} */
        var serieOnEnter = { category: this.chartElementCategory, value: this.chartElementValue };
        this.emitEventOnEnter(serieOnEnter);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.onWindowResize = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateSVGDimensions();
        this.renderer.setAttribute(this.svgElement, 'width', "" + (this.chartWrapper - poChartPadding * 2));
        this.renderer.setAttribute(this.svgElement, 'height', "" + this.svgHeight);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.removeTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.tooltipElement) {
            this.renderer.addClass(this.tooltipElement, 'po-invisible');
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.removeWindowResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.removeWindowScrollListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.windowScrollListener) {
            this.windowScrollListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.setEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var chartSeries = this.el.nativeElement.querySelectorAll('.po-path-item');
        chartSeries = Array.from(chartSeries);
        chartSeries.forEach((/**
         * @param {?} serie
         * @return {?}
         */
        function (serie) {
            _this.renderer.listen(serie, 'click', _this.onMouseClick.bind(_this));
            _this.renderer.listen(serie, 'mouseenter', _this.onMouseEnter.bind(_this));
            _this.renderer.listen(serie, 'mousemove', _this.changeTooltipPosition.bind(_this));
            _this.renderer.listen(serie, 'mouseleave', _this.removeTooltip.bind(_this));
        }));
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
        this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithPoPage(), 'scroll', this.removeTooltip.bind(this));
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.setInnerRadius = /**
     * @private
     * @return {?}
     */
    function () {
        // tamanho da largua da serie proporcional ao grafico, o valor 0.27 fica proximo de 32px
        /** @type {?} */
        var serieWidth = 0.27;
        this.innerRadius = this.type === PoChartType.Pie ? 0 : this.centerX - (this.centerX * serieWidth);
    };
    /**
     * @private
     * @param {?} text
     * @param {?} startAngle
     * @param {?} endAngle
     * @return {?}
     */
    PoChartCircular.prototype.setTextProperties = /**
     * @private
     * @param {?} text
     * @param {?} startAngle
     * @param {?} endAngle
     * @return {?}
     */
    function (text, startAngle, endAngle) {
        if (this.type === PoChartType.Donut) {
            // utilizado para recuperar o angulo do meio, entre o inicio e fim para centralizar o texto
            /** @type {?} */
            var centerAngle = (startAngle + endAngle) / 2;
            /** @type {?} */
            var textBox = text.getBBox();
            /** @type {?} */
            var halfTextWidth = textBox.width / 2;
            /** @type {?} */
            var halfTextHeight = textBox.height / 2;
            // radius interno (circulo branco) + a metade da diferença entre tamanho do centro e radius interno
            /** @type {?} */
            var radius = this.innerRadius + (this.centerX - this.innerRadius) / 2;
            /** @type {?} */
            var xCoordinate = radius * Math.cos(centerAngle) + this.centerX - (halfTextWidth);
            /** @type {?} */
            var yCoordinate = radius * Math.sin(centerAngle) + this.centerX + (halfTextHeight / 2);
            text.setAttribute('x', xCoordinate);
            text.setAttribute('y', yCoordinate);
            text.setAttribute('fill-opacity', '1');
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoChartCircular.prototype.setTooltipPositions = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var displacement = 8;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    };
    /**
     * @private
     * @param {?} svgElement
     * @param {?} serie
     * @return {?}
     */
    PoChartCircular.prototype.setTooltipAttributes = /**
     * @private
     * @param {?} svgElement
     * @param {?} serie
     * @return {?}
     */
    function (svgElement, serie) {
        var value = serie.value, category = serie.category, tooltip = serie.tooltip;
        /** @type {?} */
        var tooltipValue = this.getTooltipValue(value);
        this.renderer.setAttribute(svgElement, 'data-tooltip-category', category);
        this.renderer.setAttribute(svgElement, 'data-tooltip-value', "" + value);
        this.renderer.setAttribute(svgElement, 'data-tooltip-text', tooltip || category + ": " + tooltipValue);
    };
    /**
     * @private
     * @return {?}
     */
    PoChartCircular.prototype.showTooltip = /**
     * @private
     * @return {?}
     */
    function () {
        this.renderer.removeClass(this.tooltipElement, 'po-invisible');
    };
    return PoChartCircular;
}(PoChartDynamicTypeComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype._series;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.animationRunning;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemEndAngle;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemStartAngle;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.chartItemsEndAngleList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.svgPathElementsList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.svgTextElementsList;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.el;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    PoChartCircular.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoChartDonutComponent = /** @class */ (function (_super) {
    __extends(PoChartDonutComponent, _super);
    function PoChartDonutComponent(el, ngZone, renderer) {
        return _super.call(this, el, ngZone, renderer) || this;
    }
    PoChartDonutComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-chart-donut',
                    template: "<div #chartBody class=\"po-chart-body\">\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\n  <div class=\"po-chart-tooltip po-tooltip po-invisible\">\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoChartDonutComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    return PoChartDonutComponent;
}(PoChartCircular));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoChartPieComponent = /** @class */ (function (_super) {
    __extends(PoChartPieComponent, _super);
    function PoChartPieComponent(el, ngZone, renderer) {
        return _super.call(this, el, ngZone, renderer) || this;
    }
    PoChartPieComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-chart-pie',
                    template: "<div #chartBody class=\"po-chart-body\">\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\n  <div class=\"po-chart-tooltip po-tooltip po-invisible\">\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoChartPieComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    return PoChartPieComponent;
}(PoChartCircular));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoChartBaseComponent
 *
 * \@example
 *
 * <example name="po-chart-basic" title="Portinari Chart Basic">
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.html"> </file>
 *  <file name="sample-po-chart-basic/sample-po-chart-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-labs" title="Portinari Chart Labs">
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.html"> </file>
 *  <file name="sample-po-chart-labs/sample-po-chart-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-chart-coffee-ranking" title="Portinari Chart - Coffee Ranking">
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.html"> </file>
 *  <file name="sample-po-chart-coffee-ranking/sample-po-chart-coffee-ranking.component.ts"> </file>
 * </example>
 */
var PoChartComponent = /** @class */ (function (_super) {
    __extends(PoChartComponent, _super);
    function PoChartComponent(changeDetector, componentFactoryResolver, differs) {
        var _a;
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.differs = differs;
        _this.calculatedElement = false;
        _this.initialized = false;
        _this.windowResizeListener = new Subject();
        _this.mappings = (_a = {},
            _a[PoChartType.Pie] = PoChartPieComponent,
            _a[PoChartType.Donut] = PoChartDonutComponent,
            _a);
        _this.colors = [];
        _this.onResize = (/**
         * @return {?}
         */
        function () { return _this.windowResizeListener.next(); });
        _this.differ = _this.differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    PoChartComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
    };
    /**
     * @return {?}
     */
    PoChartComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var charWrapperWidth = this.chartWrapper.nativeElement.offsetWidth;
        // Permite que o chart seja calculado na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (charWrapperWidth && !this.calculatedElement && this.initialized) {
            this.calculatedElement = true;
            this.getSeriesColor();
            this.dynamicComponentSetting();
        }
        this.checkingForSerieChanges();
    };
    /**
     * @return {?}
     */
    PoChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeWindowResizeListener();
    };
    /**
     * @return {?}
     */
    PoChartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getSeriesColor();
    };
    /**
     * @return {?}
     */
    PoChartComponent.prototype.rebuildComponent = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.dynamicComponentSetting();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.checkingForSerieChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.componentRef && this.differ) {
            /** @type {?} */
            var changeSeries = this.differ.diff(this.series);
            if (changeSeries) {
                this.getSeriesColor();
                this.rebuildComponent();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.createComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var componentType = this.getComponentType(this.type);
        /** @type {?} */
        var factory = this.componentFactoryResolver.resolveComponentFactory(componentType);
        this.componentRef = this.chartContainer.createComponent(factory);
        /** @type {?} */
        var instance = (/** @type {?} */ (this.componentRef.instance));
        this.setChartProperties(instance);
        return instance;
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.dynamicComponentSetting = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var instance = this.createComponent();
        this.setResizeListenerSubscribe(instance);
        this.changeDetector.detectChanges();
        this.setClickSubscribe(instance);
        this.setHoverSubscribe(instance);
    };
    /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    PoChartComponent.prototype.getComponentType = /**
     * @private
     * @param {?} typeName
     * @return {?}
     */
    function (typeName) {
        return this.mappings[typeName];
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.getSeriesColor = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var colorsLength = PoChartColors.length - 1;
        if (!this.series) {
            return this.colors = PoChartColors[colorsLength];
        }
        /** @type {?} */
        var seriesLength = this.series.length - 1;
        if (seriesLength > colorsLength) {
            /** @type {?} */
            var colors = PoChartColors[colorsLength];
            // recupera o resultado da divisao entre tamanho das series e o numero de cores disponiveis
            /** @type {?} */
            var quantityDuplicates = seriesLength / colorsLength;
            for (var i = 1; i <= quantityDuplicates; i++) {
                colors = colors.concat(PoChartColors[colorsLength]);
            }
            return this.colors = colors;
        }
        return this.colors = PoChartColors[seriesLength];
    };
    /**
     * @private
     * @return {?}
     */
    PoChartComponent.prototype.removeWindowResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onResize) {
            this.onResize = (/**
             * @return {?}
             */
            function () { });
        }
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    PoChartComponent.prototype.setChartProperties = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        instance.chartHeader = this.chartHeader.nativeElement.offsetHeight;
        instance.chartLegend = this.chartLegend.nativeElement.offsetHeight;
        instance.chartWrapper = this.chartWrapper.nativeElement.offsetWidth;
        instance.colors = Array.isArray(this.colors) ? __spread(this.colors) : [];
        instance.height = this.height;
        instance.series = this.series || [];
        instance.type = this.type;
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    PoChartComponent.prototype.setClickSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        instance.onSerieClick.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onSeriesClick(event);
        }));
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    PoChartComponent.prototype.setHoverSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        instance.onSerieHover.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onSeriesHover(event);
        }));
    };
    /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    PoChartComponent.prototype.setResizeListenerSubscribe = /**
     * @private
     * @param {?} instance
     * @return {?}
     */
    function (instance) {
        var _this = this;
        this.windowResizeListener.subscribe((/**
         * @return {?}
         */
        function () {
            instance.chartHeader = _this.chartHeader.nativeElement.offsetHeight;
            instance.chartLegend = _this.chartLegend.nativeElement.offsetHeight;
            instance.chartWrapper = _this.chartWrapper.nativeElement.offsetWidth;
        }));
    };
    PoChartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-chart',
                    template: "<div #chartWrapper class=\"po-chart-wrapper\">\n  <div #chartHeader class=\"po-chart-header\">\n    <div class=\"po-chart-title\">{{ title }}</div>\n  </div>\n  <ng-template #chartContainer></ng-template>\n  <div #chartLegend class=\"po-chart-legend\">\n    <div class=\"po-chart-legend-container\">\n      <div class=\"po-chart-legend-item\" *ngFor=\"let serie of series; let i = index\">\n        <div class=\"po-chart-legend-square\" [style.background]=\"colors[i]\"></div>\n        <span class=\"po-chart-legend-text\">{{ serie.category }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoChartComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: IterableDiffers }
    ]; };
    PoChartComponent.propDecorators = {
        chartContainer: [{ type: ViewChild, args: ['chartContainer', { read: ViewContainerRef, static: true },] }],
        chartHeader: [{ type: ViewChild, args: ['chartHeader', { static: true },] }],
        chartLegend: [{ type: ViewChild, args: ['chartLegend', { static: true },] }],
        chartWrapper: [{ type: ViewChild, args: ['chartWrapper', { static: true },] }],
        onResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return PoChartComponent;
}(PoChartBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.calculatedElement;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.windowResizeListener;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.mappings;
    /** @type {?} */
    PoChartComponent.prototype.colors;
    /** @type {?} */
    PoChartComponent.prototype.chartContainer;
    /** @type {?} */
    PoChartComponent.prototype.chartHeader;
    /** @type {?} */
    PoChartComponent.prototype.chartLegend;
    /** @type {?} */
    PoChartComponent.prototype.chartWrapper;
    /** @type {?} */
    PoChartComponent.prototype.onResize;
    /** @type {?} */
    PoChartComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    PoChartComponent.prototype.differs;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-chart`.
 */
var PoChartModule = /** @class */ (function () {
    function PoChartModule() {
    }
    PoChartModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                    ],
                    declarations: [
                        PoChartComponent,
                        PoChartDonutComponent,
                        PoChartPieComponent
                    ],
                    entryComponents: [
                        PoChartDonutComponent,
                        PoChartPieComponent
                    ],
                    exports: [
                        PoChartComponent,
                    ]
                },] }
    ];
    return PoChartModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O `po-container` é um componente que visa facilitar o agrupamento de conteúdos.
 * Por padrão o mesmo exibe uma borda, um efeito de sombra ao seu redor e um espaçamento em sua parte interna, os quais
 * podem ser desabilitados. Ao remover sua borda a sombra também será removida. Além disso, sua altura acompanha a
 * quantidade do conteúdo, porém pode ser fixada. Para controlar sua largura, utilize o [Grid System](/guides/grid-system),
 * assim possibilitando o tratamento para diferentes resoluções.
 */
var PoContainerBaseComponent = /** @class */ (function () {
    function PoContainerBaseComponent() {
        this._noBorder = false;
        this._noPadding = false;
        this._noShadow = false;
    }
    Object.defineProperty(PoContainerBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `po-container`.
         *
         * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do `po-container`.
         *
         * > Caso não seja definido um valor, a altura se ajustará de acordo com o conteúdo.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoContainerBaseComponent.prototype, "noBorder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noBorder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a borda e a sombra em torno do `po-container`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a borda e a sombra em torno do `po-container`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noBorder = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoContainerBaseComponent.prototype, "noPadding", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noPadding;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o espaçamento interno do `po-container`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o espaçamento interno do `po-container`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noPadding = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoContainerBaseComponent.prototype, "noShadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noShadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o sombreamento em torno do `po-container`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o sombreamento em torno do `po-container`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noShadow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoContainerBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['p-height',] }],
        noBorder: [{ type: Input, args: ['p-no-border',] }],
        noPadding: [{ type: Input, args: ['p-no-padding',] }],
        noShadow: [{ type: Input, args: ['p-no-shadow',] }]
    };
    return PoContainerBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoContainerBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoContainerBaseComponent.prototype._noBorder;
    /**
     * @type {?}
     * @private
     */
    PoContainerBaseComponent.prototype._noPadding;
    /**
     * @type {?}
     * @private
     */
    PoContainerBaseComponent.prototype._noShadow;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoContainerBaseComponent
 *
 * \@example
 *
 * <example name="po-container-basic" title="Portinari Container Basic">
 *  <file name="sample-po-container-basic/sample-po-container-basic.component.html"> </file>
 *  <file name="sample-po-container-basic/sample-po-container-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-container-labs" title="Portinari Container Labs">
 *  <file name="sample-po-container-labs/sample-po-container-labs.component.html"> </file>
 *  <file name="sample-po-container-labs/sample-po-container-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-container-dashboard" title="Portinari Container - Dashboard">
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.html"> </file>
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.component.ts"> </file>
 *  <file name="sample-po-container-dashboard/sample-po-container-dashboard.service.ts"> </file>
 * </example>
 */
var PoContainerComponent = /** @class */ (function (_super) {
    __extends(PoContainerComponent, _super);
    function PoContainerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-container',
                    template: "<div class=\"po-container\"\n  [class.po-container-no-border]=\"noBorder\"\n  [class.po-container-no-padding]=\"noPadding\"\n  [class.po-container-no-shadow]=\"noShadow\"\n  [style.height]=\"height ? height + 'px' : 'auto'\">\n  <ng-content></ng-content>\n</div>\n"
                }] }
    ];
    return PoContainerComponent;
}(PoContainerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-container`.
 */
var PoContainerModule = /** @class */ (function () {
    function PoContainerModule() {
    }
    PoContainerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        PoContainerComponent
                    ],
                    declarations: [
                        PoContainerComponent
                    ]
                },] }
    ];
    return PoContainerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PO_DISCLAIMER_TYPES = ['default', 'danger'];
/** @type {?} */
var PO_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente po-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no po-multi-select.
 *
 */
var PoDisclaimerBaseComponent = /** @class */ (function () {
    function PoDisclaimerBaseComponent() {
        this._type = 'default';
        this._hideClose = false;
        this.showDisclaimer = true;
        /**
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new EventEmitter();
    }
    Object.defineProperty(PoDisclaimerBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @description
         *
         * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * @default false
         */
        set: /**
         * \@description
         *
         * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * \@default false
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDisclaimerBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @description
         *
         * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * @default default
         * @optional
         */
        set: /**
         * \@description
         *
         * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * \@default default
         * \@optional
         * @param {?} type
         * @return {?}
         */
        function (type) {
            this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoDisclaimerBaseComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    };
    /**
     * @return {?}
     */
    PoDisclaimerBaseComponent.prototype.getLabel = /**
     * @return {?}
     */
    function () {
        return this.label ? this.label : this.value;
    };
    PoDisclaimerBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        value: [{ type: Input, args: ['p-value',] }],
        property: [{ type: Input, args: ['p-property',] }],
        hideClose: [{ type: Input, args: ['p-hide-close',] }],
        closeAction: [{ type: Output, args: ['p-close-action',] }],
        type: [{ type: Input, args: ['p-type',] }]
    };
    return PoDisclaimerBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDisclaimerBaseComponent.prototype._type;
    /**
     * @type {?}
     * @private
     */
    PoDisclaimerBaseComponent.prototype._hideClose;
    /** @type {?} */
    PoDisclaimerBaseComponent.prototype.showDisclaimer;
    /**
     * Label que aparecerá dentro do po-disclaimer.
     * Quando não for definido um label será apresentada a propriedade p-value.
     * @type {?}
     */
    PoDisclaimerBaseComponent.prototype.label;
    /**
     * Valor do po-disclaimer.
     * @type {?}
     */
    PoDisclaimerBaseComponent.prototype.value;
    /**
     * Nome da propriedade vinculada à este po-disclaimer.
     * @type {?}
     */
    PoDisclaimerBaseComponent.prototype.property;
    /**
     * Evento disparado ao fechar o disclaimer.
     * Para este evento será passado como parâmetro um objeto com value, label e property.
     * @type {?}
     */
    PoDisclaimerBaseComponent.prototype.closeAction;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoDisclaimerBaseComponent
 *
 * \@examplePrivate
 *
 * <example-private name="po-disclaimer" title="Portinari Disclaimer">
 *   <file name="sample-po-disclaimer.component.html"> </file>
 *   <file name="sample-po-disclaimer.component.ts"> </file>
 * </example-private>
 */
var PoDisclaimerComponent = /** @class */ (function (_super) {
    __extends(PoDisclaimerComponent, _super);
    function PoDisclaimerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PoDisclaimerComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isKeyCodeEnter(event)) {
            this.close();
        }
    };
    PoDisclaimerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-disclaimer',
                    template: "<div *ngIf=\"showDisclaimer === true\" class=\"po-disclaimer\">\n\n  <span class=\"po-disclaimer-label\"\n    [class.po-disclaimer-label-danger]=\"type === 'danger'\">\n    {{getLabel()}}\n  </span>\n\n  <span *ngIf=\"hideClose === false\"\n    class=\"po-disclaimer-remove po-icon po-icon-close po-clickable\"\n    tabindex=\"0\"\n    [class.po-disclaimer-remove-danger]=\"type === 'danger'\"\n    (click)=\"close()\"\n    (keydown)=\"onKeyPress($event)\">\n  </span>\n</div>\n"
                }] }
    ];
    return PoDisclaimerComponent;
}(PoDisclaimerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente po-disclaimer.
 */
var PoDisclaimerModule = /** @class */ (function () {
    function PoDisclaimerModule() {
    }
    PoDisclaimerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [PoDisclaimerComponent],
                    exports: [PoDisclaimerComponent]
                },] }
    ];
    return PoDisclaimerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' }
};
/**
 * \@description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
var PoDisclaimerGroupBaseComponent = /** @class */ (function () {
    function PoDisclaimerGroupBaseComponent(differs) {
        this._disclaimers = [];
        this._hideRemoveAll = false;
        this.previousDisclaimers = [];
        this.literals = __assign({}, poDisclaimerGroupLiteralsDefault[poLocaleDefault], poDisclaimerGroupLiteralsDefault[browserLanguage()]);
        /**
         * Função que será disparada quando a lista de *disclaimers* for modificada.
         */
        this.change = new EventEmitter();
        this.differ = differs.find([]).create(null);
    }
    Object.defineProperty(PoDisclaimerGroupBaseComponent.prototype, "disclaimers", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disclaimers;
        },
        /** Lista de *disclaimers*. */
        /**
         * @description
         *
         * Lista de *disclaimers*.
         *
         * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
         *
         * Exemplo adicionando um *disclaimer* no array:
         *
         * ```
         * this.disclaimers = [...this.disclaimers, disclaimer];
         * ```
         *
         * ou
         *
         * ```
         * this.disclaimers = this.disclaimers.concat(disclaimer);
         * ```
         */
        set: /** Lista de *disclaimers*. */
        /**
         * \@description
         *
         * Lista de *disclaimers*.
         *
         * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
         *
         * Exemplo adicionando um *disclaimer* no array:
         *
         * ```
         * this.disclaimers = [...this.disclaimers, disclaimer];
         * ```
         *
         * ou
         *
         * ```
         * this.disclaimers = this.disclaimers.concat(disclaimer);
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.previousDisclaimers = __spread(this.disclaimers);
            this._disclaimers = this.checkDisclaimers(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDisclaimerGroupBaseComponent.prototype, "hideRemoveAll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideRemoveAll;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o botão para remover todos os *disclaimers* do grupo.
         *
         * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideRemoveAll = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkChanges();
    };
    /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.closeItem = /**
     * @param {?} disclaimer
     * @param {?=} emitChange
     * @return {?}
     */
    function (disclaimer, emitChange) {
        if (emitChange === void 0) { emitChange = true; }
        /** @type {?} */
        var itemIndex = this.disclaimers.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d['$id'] === disclaimer['$id']; }));
        this.disclaimers.splice(itemIndex, 1);
        if (emitChange) {
            this.emitChangeDisclaimers();
        }
    };
    /**
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.isRemoveAll = /**
     * @return {?}
     */
    function () {
        return !this.hideRemoveAll && this.disclaimers.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return !c.hideClose; })).length > 1;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    };
    /**
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.removeAllItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var removeItems = [];
        this.disclaimers.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        function (disclaimer) {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        }));
        removeItems.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        function (disclaimer) { return _this.closeItem(disclaimer, false); }));
        this.emitChangeDisclaimers();
    };
    /**
     * @private
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.checkChanges = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.differ) {
            /** @type {?} */
            var changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.checkDisclaimers = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (var i = 0; i < disclaimers.length; i++) {
                /** @type {?} */
                var disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = v4();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.disclaimersAreChanged = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        var _this = this;
        /** @type {?} */
        var currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some((/**
         * @param {?} disclaimer
         * @param {?} index
         * @return {?}
         */
        function (disclaimer, index) { return disclaimer.value !== _this.previousDisclaimers[index].value
            || disclaimer.property !== _this.previousDisclaimers[index].property; }));
    };
    /**
     * @private
     * @return {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.emitChangeDisclaimers = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.change.emit(_this.disclaimers);
        }));
        this.previousDisclaimers = __spread(this._disclaimers);
    };
    PoDisclaimerGroupBaseComponent.propDecorators = {
        disclaimers: [{ type: Input, args: ['p-disclaimers',] }],
        hideRemoveAll: [{ type: Input, args: ['p-hide-remove-all',] }],
        title: [{ type: Input, args: ['p-title',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoDisclaimerGroupBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDisclaimerGroupBaseComponent.prototype._disclaimers;
    /**
     * @type {?}
     * @private
     */
    PoDisclaimerGroupBaseComponent.prototype._hideRemoveAll;
    /**
     * @type {?}
     * @private
     */
    PoDisclaimerGroupBaseComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoDisclaimerGroupBaseComponent.prototype.previousDisclaimers;
    /** @type {?} */
    PoDisclaimerGroupBaseComponent.prototype.literals;
    /**
     * Título do grupo de *disclaimers*.
     * @type {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.title;
    /**
     * Função que será disparada quando a lista de *disclaimers* for modificada.
     * @type {?}
     */
    PoDisclaimerGroupBaseComponent.prototype.change;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoDisclaimerGroupBaseComponent
 *
 * \@example
 *
 * <example name="po-disclaimer-group-basic" title="Portinari Disclaimer Group Basic">
 *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-basic/sample-po-disclaimer-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-disclaimer-group-labs" title="Portinari Disclaimer Group Labs">
 *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-labs/sample-po-disclaimer-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-disclaimer-group-sw-planets" title="Portinari Disclaimer Group - Star Wars Planets">
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.html"> </file>
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.component.ts"> </file>
 *   <file name="sample-po-disclaimer-group-sw-planets/sample-po-disclaimer-group-sw-planets.service.ts"> </file>
 * </example>
 *
 */
var PoDisclaimerGroupComponent = /** @class */ (function (_super) {
    __extends(PoDisclaimerGroupComponent, _super);
    function PoDisclaimerGroupComponent(differs) {
        return _super.call(this, differs) || this;
    }
    PoDisclaimerGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-disclaimer-group',
                    template: "<div class=\"po-disclaimer-group\" *ngIf=\"disclaimers.length > 0\" >\n  <div class=\"po-disclaimer-group-title\">{{ title }}</div>\n\n  <po-disclaimer-remove *ngIf=\"isRemoveAll()\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-label]=\"literals.removeAll\"\n    (keydown)=\"onKeyPress($event)\"\n    (p-remove-all-action)=\"removeAllItems()\">\n  </po-disclaimer-remove>\n\n  <po-disclaimer *ngFor=\"let disclaimer of disclaimers\"\n    class=\"po-disclaimer-group-disclaimer-align\"\n    [p-hide-close]=\"disclaimer.hideClose\"\n    [p-label]=\"disclaimer.label\"\n    [p-property]=\"disclaimer.property\"\n    [p-value]=\"disclaimer.value\"\n    (p-close-action)=\"closeItem(disclaimer)\">\n  </po-disclaimer>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoDisclaimerGroupComponent.ctorParameters = function () { return [
        { type: IterableDiffers }
    ]; };
    return PoDisclaimerGroupComponent;
}(PoDisclaimerGroupBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Este é um componente interno utilizado pelo po-disclaimer-group, se comporta como um botão e recebe uma ação para remover todos os
 * po-disclaimers do grupo.
 */
var PoDisclaimerRemoveComponent = /** @class */ (function () {
    function PoDisclaimerRemoveComponent() {
        /**
         * Ação para remover todos.
         */
        this.removeAllAction = new EventEmitter();
    }
    // Emite a ação de remover todos.
    // Emite a ação de remover todos.
    /**
     * @return {?}
     */
    PoDisclaimerRemoveComponent.prototype.removeAction = 
    // Emite a ação de remover todos.
    /**
     * @return {?}
     */
    function () {
        this.removeAllAction.emit();
    };
    PoDisclaimerRemoveComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-disclaimer-remove',
                    template: "<po-disclaimer\n  class=\"po-clickable\"\n  tabindex=\"0\"\n  p-hide-close=\"true\"\n  p-type=\"danger\"\n  [p-label]=\"label\"\n  (click)=\"removeAction()\">\n</po-disclaimer>\n"
                }] }
    ];
    PoDisclaimerRemoveComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        removeAllAction: [{ type: Output, args: ['p-remove-all-action',] }]
    };
    return PoDisclaimerRemoveComponent;
}());
if (false) {
    /**
     * Texto exibido.
     * @type {?}
     */
    PoDisclaimerRemoveComponent.prototype.label;
    /**
     * Ação para remover todos.
     * @type {?}
     */
    PoDisclaimerRemoveComponent.prototype.removeAllAction;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-disclaimer-group.
 */
var PoDisclaimerGroupModule = /** @class */ (function () {
    function PoDisclaimerGroupModule() {
    }
    PoDisclaimerGroupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoDisclaimerModule
                    ],
                    declarations: [PoDisclaimerGroupComponent, PoDisclaimerRemoveComponent],
                    exports: [PoDisclaimerGroupComponent]
                },] }
    ];
    return PoDisclaimerGroupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este componente apresenta uma linha demarcadora de blocos e pode conter um *label*. Seu uso é indicado para definição
 * e organização de informações em uma tela e sua característica é semelhante à tag `<hr>`.
 */
var PoDividerBaseComponent = /** @class */ (function () {
    function PoDividerBaseComponent() {
    }
    PoDividerBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }]
    };
    return PoDividerBaseComponent;
}());
if (false) {
    /**
     * Valor do rótulo a ser exibido.
     * @type {?}
     */
    PoDividerBaseComponent.prototype.label;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoDividerBaseComponent
 *
 * \@example
 *
 * <example name="po-divider-basic" title="Portinari Divider Basic" >
 *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.html"> </file>
 *  <file name="sample-po-divider-basic/sample-po-divider-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-divider-labs" title="Portinari Divider Labs" >
 *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.html"> </file>
 *  <file name="sample-po-divider-labs/sample-po-divider-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-divider-user-detail" title="Portinari Divider - User Detail" >
 *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.html"> </file>
 *  <file name="sample-po-divider-user-detail/sample-po-divider-user-detail.component.ts"> </file>
 * </example>
 */
var PoDividerComponent = /** @class */ (function (_super) {
    __extends(PoDividerComponent, _super);
    function PoDividerComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoDividerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-divider',
                    template: "<div class=\"po-divider\">\n  <div *ngIf=\"label\" class=\"po-divider-label\">{{ label }}</div>\n</div>\n"
                }] }
    ];
    return PoDividerComponent;
}(PoDividerBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-divider.
 */
var PoDividerModule = /** @class */ (function () {
    function PoDividerModule() {
    }
    PoDividerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        PoDividerComponent
                    ],
                    exports: [
                        PoDividerComponent
                    ]
                },] }
    ];
    return PoDividerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poPopupDefaultPosition = 'bottom-left';
/**
 * \@description
 *
 * O componente `po-popup` é um container pequeno recomendado para ações de navegação:
 * Ele abre sobreposto aos outros componentes.
 *
 * É possível escolher as posições do `po-popup` em relação ao componente alvo, para isto veja a propriedade `p-position`.
 *
 * Também é possível informar um _template_ _header_ para o `po-popup`, que será exibido acima das ações.
 * Para funcionar corretamente é preciso adicionar a propriedade `p-popup-header-template` no elemento que servirá de template, por exemplo:
 *
 * ```
 * <po-popup [p-target]="target">
 *   <div p-popup-header-template>
 *     <div>
 *       Dev Portinari
 *     </div>
 *     <div>
 *       dev.portinari\@portinari.com.br
 *     </div>
 *   </div>
 * </po-popup >
 * ```
 */
var PoPopupBaseComponent = /** @class */ (function () {
    function PoPopupBaseComponent() {
        this._hideArrow = false;
        this._isCornerAlign = false;
        this._position = poPopupDefaultPosition;
        this.arrowDirection = 'top-right';
        this.showPopup = false;
    }
    Object.defineProperty(PoPopupBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /** Lista de ações que serão exibidas no componente. */
        set: /**
         * Lista de ações que serão exibidas no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._actions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPopupBaseComponent.prototype, "hideArrow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideArrow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta a seta do componente *popup*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta a seta do componente *popup*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideArrow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPopupBaseComponent.prototype, "isCornerAlign", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isCornerAlign;
        },
        // Define se o `po-popup` será alinhado pelos cantos do elemento target.
        set: 
        // Define se o `po-popup` será alinhado pelos cantos do elemento target.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isCornerAlign = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPopupBaseComponent.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            return this._position;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição inicial que o `po-popup` abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * > Caso seja definido um `p-custom-positions` o componente irá abrir na posição definida na propriedade `p-position`
         * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `p-custom-positions`.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-popup no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-popup acima do componente alvo.
         * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
         *
         * @default `bottom-left`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição inicial que o `po-popup` abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * > Caso seja definido um `p-custom-positions` o componente irá abrir na posição definida na propriedade `p-position`
         * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `p-custom-positions`.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-popup no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-popup acima do componente alvo.
         * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
         *
         * \@default `bottom-left`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._position = PO_CONTROL_POSITIONS.includes(value) ? value : poPopupDefaultPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPopupBaseComponent.prototype, "customPositions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._customPositions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define as posições e a sequência que o `po-popup` poderá rotacionar. A sequência será definida pela ordem passada
         * no *array*. Caso não seja definido, o `po-popup` irá rotacionar em todas as posições válidas.
         *
         * > O componente sempre irá abrir na posição definida no `p-position` e caso não caiba na posição definida o mesmo
         * irá rotacionar seguindo a ordem definida pelo `p-custom-position`.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-popup no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-popup acima do componente alvo.
         * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define as posições e a sequência que o `po-popup` poderá rotacionar. A sequência será definida pela ordem passada
         * no *array*. Caso não seja definido, o `po-popup` irá rotacionar em todas as posições válidas.
         *
         * > O componente sempre irá abrir na posição definida no `p-position` e caso não caiba na posição definida o mesmo
         * irá rotacionar seguindo a ordem definida pelo `p-custom-position`.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-popup no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-popup abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-popup acima do componente alvo.
         * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._customPositions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPopupBaseComponent.prototype, "target", {
        get: /**
         * @return {?}
         */
        function () {
            return this._target;
        },
        /**
         * @description
         *
         * Para utilizar o `po-popup` deve-se colocar uma variável local no componente que disparará o evento
         * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
         *
         * ```
         * <span #icon class="po-icon po-icon-credit-payment" (click)="popup.toggle()">
         *   Credit Actions
         * </span>
         *
         * <po-popup #popup
         *   [p-actions]="actions"
         *   [p-target]="icon">
         * </po-popup>
         * ```
         *
         * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
         *
         * ```
         * // component.html
         *
         * <po-button #poButton
         *   p-label="Open Popover"
         *   (p-click)="popup.toggle()">
         * </po-button>
         *
         * <po-popup #popup
         *   [p-actions]="actions"
         *   [p-target]="poButtonRef">
         * </po-popup>
         *
         * // component.ts
         *
         * @ViewChild('poButton', { read: ElementRef }) poButtonRef: ElementRef;
         * ```
         */
        set: /**
         * \@description
         *
         * Para utilizar o `po-popup` deve-se colocar uma variável local no componente que disparará o evento
         * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:
         *
         * ```
         * <span #icon class="po-icon po-icon-credit-payment" (click)="popup.toggle()">
         *   Credit Actions
         * </span>
         *
         * <po-popup #popup
         *   [p-actions]="actions"
         *   [p-target]="icon">
         * </po-popup>
         * ```
         *
         * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:
         *
         * ```
         * // component.html
         *
         * <po-button #poButton
         *   p-label="Open Popover"
         *   (p-click)="popup.toggle()">
         * </po-button>
         *
         * <po-popup #popup
         *   [p-actions]="actions"
         *   [p-target]="poButtonRef">
         * </po-popup>
         *
         * // component.ts
         *
         * \@ViewChild('poButton', { read: ElementRef }) poButtonRef: ElementRef;
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._target = (value instanceof ElementRef) ? value.nativeElement : value;
        },
        enumerable: true,
        configurable: true
    });
    PoPopupBaseComponent.propDecorators = {
        actions: [{ type: Input, args: ['p-actions',] }],
        hideArrow: [{ type: Input, args: ['p-hide-arrow',] }],
        isCornerAlign: [{ type: Input, args: ['p-is-corner-align',] }],
        position: [{ type: Input, args: ['p-position',] }],
        customPositions: [{ type: Input, args: ['p-custom-positions',] }],
        target: [{ type: Input, args: ['p-target',] }]
    };
    return PoPopupBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPopupBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoPopupBaseComponent.prototype._customPositions;
    /**
     * @type {?}
     * @private
     */
    PoPopupBaseComponent.prototype._hideArrow;
    /**
     * @type {?}
     * @private
     */
    PoPopupBaseComponent.prototype._isCornerAlign;
    /**
     * @type {?}
     * @private
     */
    PoPopupBaseComponent.prototype._position;
    /**
     * @type {?}
     * @private
     */
    PoPopupBaseComponent.prototype._target;
    /** @type {?} */
    PoPopupBaseComponent.prototype.arrowDirection;
    /** @type {?} */
    PoPopupBaseComponent.prototype.showPopup;
    /**
     * @type {?}
     * @protected
     */
    PoPopupBaseComponent.prototype.oldTarget;
    /**
     * @type {?}
     * @protected
     */
    PoPopupBaseComponent.prototype.param;
    /**
     * @type {?}
     * @protected
     */
    PoPopupBaseComponent.prototype.parentRef;
    /**
     * @type {?}
     * @protected
     */
    PoPopupBaseComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @protected
     */
    PoPopupBaseComponent.prototype.resizeListener;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@docsExtends PoPopupBaseComponent
 *
 * \@example
 *
 * <example name="po-popup-basic" title="Portinari Popup - Basic">
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.html"> </file>
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-labs" title="Portinari Popup - Labs">
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.html"> </file>
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-email" title="Portinari Popup Email">
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.html"> </file>
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.ts"> </file>
 * </example>
 *
 */
var PoPopupComponent = /** @class */ (function (_super) {
    __extends(PoPopupComponent, _super);
    function PoPopupComponent(viewContainerRef, renderer, router, poControlPosition, changeDetector) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.router = router;
        _this.poControlPosition = poControlPosition;
        _this.changeDetector = changeDetector;
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            if (_this.showPopup) {
                _this.close();
            }
        });
        _this.parentRef = viewContainerRef['_view']['component'];
        return _this;
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     */
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     * @return {?}
     */
    PoPopupComponent.prototype.close = /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     * @return {?}
     */
    function () {
        this.removeListeners();
        this.showPopup = false;
    };
    /**
     * @param {?} popupAction
     * @return {?}
     */
    PoPopupComponent.prototype.onActionClick = /**
     * @param {?} popupAction
     * @return {?}
     */
    function (popupAction) {
        /** @type {?} */
        var actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            return callFunction(popupAction.action, this.parentRef, this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    };
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    PoPopupComponent.prototype.open = /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    };
    /**
     * @param {?} popupAction
     * @param {?} property
     * @return {?}
     */
    PoPopupComponent.prototype.returnBooleanValue = /**
     * @param {?} popupAction
     * @param {?} property
     * @return {?}
     */
    function (popupAction, property) {
        return isTypeof(popupAction[property], 'function') ? popupAction[property](this.param || popupAction) : popupAction[property];
    };
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    PoPopupComponent.prototype.toggle = /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     * @param {?=} param
     * @return {?}
     */
    function (param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoPopupComponent.prototype.clickedOutDisabledItem = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var containsItemDisabled = this.elementContains(event.target, 'po-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'po-popup-item-disabled');
        return !containsItemDisabled;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoPopupComponent.prototype.clickedOutHeaderTemplate = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[p-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoPopupComponent.prototype.clickedOutTarget = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.target && !this.target.contains(event.target);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoPopupComponent.prototype.closePopupOnClickout = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    };
    /**
     * @private
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    PoPopupComponent.prototype.elementContains = /**
     * @private
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    function (element, className) {
        return element && element.classList.contains(className);
    };
    /**
     * @private
     * @return {?}
     */
    PoPopupComponent.prototype.hasContentToShow = /**
     * @private
     * @return {?}
     */
    function () {
        return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
    };
    /**
     * @private
     * @return {?}
     */
    PoPopupComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.close();
        }));
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.closePopupOnClickout(event);
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    PoPopupComponent.prototype.openUrl = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoPopupComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoPopupComponent.prototype.setPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.poControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    };
    /**
     * @private
     * @return {?}
     */
    PoPopupComponent.prototype.validateInitialContent = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    };
    PoPopupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-popup',
                    template: "<div #popupRef class=\"po-popup\" *ngIf=\"showPopup\">\n\n  <div *ngIf=\"!hideArrow\" class=\"po-popup-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <ng-content select=\"[p-popup-header-template]\"></ng-content>\n\n  <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\n    <div *ngIf=\"action.visible !== false\"\n      [class.po-popup-item-default]=\"action.type !== 'danger'\"\n      [class.po-popup-item-danger]=\"action.type === 'danger'\"\n      [class.po-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\n      [class.po-popup-item-separator]=\"action.separator && actionIndex !== 0\"\n      [class.po-popup-item-selected]=\"action.selected\"\n      (click)=\"onActionClick(action)\">\n\n      <span *ngIf=\"action.icon\" class=\"po-icon {{ action.icon }} po-popup-icon-item\"></span>\n      {{ action.label }}\n\n    </div>\n  </ng-container>\n\n</div>\n",
                    providers: [PoControlPositionService]
                }] }
    ];
    /** @nocollapse */
    PoPopupComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Renderer2 },
        { type: Router },
        { type: PoControlPositionService },
        { type: ChangeDetectorRef }
    ]; };
    PoPopupComponent.propDecorators = {
        popupRef: [{ type: ViewChild, args: ['popupRef', { read: ElementRef, static: false },] }]
    };
    return PoPopupComponent;
}(PoPopupBaseComponent));
if (false) {
    /** @type {?} */
    PoPopupComponent.prototype.popupRef;
    /**
     * @type {?}
     * @private
     */
    PoPopupComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    PoPopupComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoPopupComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPopupComponent.prototype.poControlPosition;
    /** @type {?} */
    PoPopupComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-popup.
 */
var PoPopupModule = /** @class */ (function () {
    function PoPopupModule() {
    }
    PoPopupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                    ],
                    declarations: [
                        PoPopupComponent,
                    ],
                    exports: [
                        PoPopupComponent
                    ],
                    providers: [],
                    schemas: []
                },] }
    ];
    return PoPopupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
 *
 * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
 * no módulo principal para o correto funcionamento deste componente:
 *
 * ```
 * import { RouterModule } from '\@angular/router';
 *
 * \@NgModule({
 *   imports: [
 *     ...
 *     RouterModule.forRoot([]),
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   exports: [],
 *   providers: [],
 *   bootstrap: [
 *     AppComponent
 *   ]
 * })
 * export class AppModule { }
 * ```
 * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
 * [/Configurando as rotas do po-menu](/guides/getting-started).
 */
var PoDropdownBaseComponent = /** @class */ (function () {
    function PoDropdownBaseComponent() {
        this._disabled = false;
        this.icon = 'po-icon-arrow-down';
        this.open = false;
    }
    Object.defineProperty(PoDropdownBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /** Lista de ações que serão exibidas no componente. */
        set: /**
         * Lista de ações que serão exibidas no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._actions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDropdownBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o campo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o campo.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoDropdownBaseComponent.propDecorators = {
        actions: [{ type: Input, args: ['p-actions',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        label: [{ type: Input, args: ['p-label',] }]
    };
    return PoDropdownBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDropdownBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoDropdownBaseComponent.prototype._disabled;
    /** @type {?} */
    PoDropdownBaseComponent.prototype.icon;
    /** @type {?} */
    PoDropdownBaseComponent.prototype.open;
    /**
     * Adiciona um rótulo ao `dropdown`.
     * @type {?}
     */
    PoDropdownBaseComponent.prototype.label;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoDropdownBaseComponent
 *
 * \@example
 *
 * <example name="po-dropdown-basic" title="Portinari Dropdown Basic" >
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.html"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.ts"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-dropdown-basic/sample-po-dropdown-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-dropdown-labs" title="Portinari Dropdown Labs" >
 *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.html"> </file>
 *  <file name="sample-po-dropdown-labs/sample-po-dropdown-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-dropdown-social-network" title="Portinari Dropdown - Social Network" >
 *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.html"> </file>
 *  <file name="sample-po-dropdown-social-network/sample-po-dropdown-social-network.component.ts"> </file>
 * </example>
 */
var PoDropdownComponent = /** @class */ (function (_super) {
    __extends(PoDropdownComponent, _super);
    function PoDropdownComponent(renderer) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            if (_this.open) {
                _this.hideDropdown();
            }
        });
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PoDropdownComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isKeyCodeEnter(event)) {
            this.toggleDropdown();
        }
    };
    /**
     * @return {?}
     */
    PoDropdownComponent.prototype.toggleDropdown = /**
     * @return {?}
     */
    function () {
        this.dropdownRef && !this.open && !this.disabled ? this.showDropdown() : this.hideDropdown();
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDropdownComponent.prototype.checkClickArea = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.dropdownRef && this.dropdownRef.nativeElement.contains(event.target);
    };
    /**
     * @private
     * @return {?}
     */
    PoDropdownComponent.prototype.hideDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.icon = 'po-icon-arrow-down';
        this.removeListeners();
        this.popupRef.close();
        this.open = false;
    };
    /**
     * @private
     * @return {?}
     */
    PoDropdownComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnDropdown(event);
        }));
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.hideDropdown();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoDropdownComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoDropdownComponent.prototype.showDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.icon = 'po-icon-arrow-up';
        this.initializeListeners();
        this.popupRef.open();
        this.open = true;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDropdownComponent.prototype.wasClickedOnDropdown = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var clickedOnDropdown = this.checkClickArea(event);
        if (!clickedOnDropdown) {
            this.hideDropdown();
        }
    };
    PoDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-dropdown',
                    template: "<div #dropdownRef\n  class=\"po-dropdown\"\n  tabindex=\"{{ disabled ? -1 : 0 }}\"\n  (click)=\"toggleDropdown()\"\n  (keydown)=\"onKeyDown($event)\">\n\n  <div class=\"po-dropdown-button\" [ngClass]=\"{'po-dropdown-button-disabled' : disabled}\">\n    {{ label }}\n    <div class=\"po-dropdown-icon po-icon {{icon}}\"></div>\n  </div>\n\n  <po-popup #popupRef\n    p-hide-arrow\n    p-is-corner-align\n    p-position=\"bottom-left\"\n    [p-actions]=\"actions\"\n    [p-custom-positions]=\"['bottom-left', 'top-left']\"\n    [p-target]=\"dropdownRef\">\n  </po-popup>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoDropdownComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    PoDropdownComponent.propDecorators = {
        dropdownRef: [{ type: ViewChild, args: ['dropdownRef', { read: ElementRef, static: true },] }],
        popupRef: [{ type: ViewChild, args: ['popupRef', { static: false },] }]
    };
    return PoDropdownComponent;
}(PoDropdownBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDropdownComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @private
     */
    PoDropdownComponent.prototype.resizeListener;
    /** @type {?} */
    PoDropdownComponent.prototype.dropdownRef;
    /** @type {?} */
    PoDropdownComponent.prototype.popupRef;
    /**
     * @type {?}
     * @private
     */
    PoDropdownComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    PoDropdownComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente po-dropdown.
 */
var PoDropdownModule = /** @class */ (function () {
    function PoDropdownModule() {
    }
    PoDropdownModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoPopupModule
                    ],
                    declarations: [PoDropdownComponent],
                    exports: [PoDropdownComponent]
                },] }
    ];
    return PoDropdownModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoButtonGroupComponent
 *
 * \@description
 *
 * Interface para os itens do `po-button-group`.
 * @record
 */
function PoButtonGroupItem() { }
if (false) {
    /**
     * Ação executada ao clicar sobre o botão.
     * @type {?}
     */
    PoButtonGroupItem.prototype.action;
    /**
     * \@description
     *
     * Se verdadeiro, define o botão como desabilitado.
     *
     * > Por padrão esta propriedade é `false`.
     * @type {?|undefined}
     */
    PoButtonGroupItem.prototype.disabled;
    /**
     * Ícone exibido ao lado esquerdo do label do botão.
     *
     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons).
     * @type {?|undefined}
     */
    PoButtonGroupItem.prototype.icon;
    /**
     * Label do botão.
     * @type {?|undefined}
     */
    PoButtonGroupItem.prototype.label;
    /**
     * Define se o botão está selecionado. Utilizado juntamente à propriedade `p-toggle`.
     * @type {?|undefined}
     */
    PoButtonGroupItem.prototype.selected;
    /**
     * Define a mensagem a ser exibida ao posicionar o *mouse* sobre o botão.
     * @type {?|undefined}
     */
    PoButtonGroupItem.prototype.tooltip;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de uso interno, responsável por gerar uma margem inferior nos componentes que utilizam o po-field-container.
 * Essa margem inferior pode conter uma mensagem de erro.
 */
var PoFieldContainerBottomComponent = /** @class */ (function () {
    function PoFieldContainerBottomComponent() {
        /**
         * Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
         * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
    }
    PoFieldContainerBottomComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-field-container-bottom',
                    template: "<div class=\"po-field-container-bottom\">\n  <span *ngIf=\"errorPattern\"  class=\"po-field-container-bottom-text-error\">\n    <span class=\"po-icon po-icon-warning po-field-container-icon-error\"></span>\n    {{ errorPattern }}\n  </span>\n</div>\n"
                }] }
    ];
    PoFieldContainerBottomComponent.propDecorators = {
        errorPattern: [{ type: Input, args: ['p-error-pattern',] }]
    };
    return PoFieldContainerBottomComponent;
}());
if (false) {
    /**
     * Mensagem que será apresentada quando o pattern ou a máscara não for satisfeita.
     * Obs: Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
     * @type {?}
     */
    PoFieldContainerBottomComponent.prototype.errorPattern;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Componente de uso interno, responsável por atribuir uma label para o campo
 */
var PoFieldContainerComponent = /** @class */ (function () {
    function PoFieldContainerComponent() {
        this._optional = false;
    }
    Object.defineProperty(PoFieldContainerComponent.prototype, "optional", {
        get: /**
         * @return {?}
         */
        function () {
            return this._optional;
        },
        /** Indica se o campo será opcional. */
        set: /**
         * Indica se o campo será opcional.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._optional = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoFieldContainerComponent.prototype.getOptionalText = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var browserLanguage = getShortBrowserLanguage();
        /** @type {?} */
        var optional = {
            pt: '(Opcional)',
            en: '(Optional)',
            es: '(Opcional)'
        };
        return optional[browserLanguage];
    };
    PoFieldContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-field-container',
                    template: "<div class=\"po-field-container\">\n  <div class=\"po-field-container-title\">\n    <span class=\"po-field-title\">{{ label }}</span>\n    <span class=\"po-field-optional\" *ngIf=\"optional && (label || help)\">{{ getOptionalText() }}</span>\n  </div>\n\n  <div class=\"po-field-help\" *ngIf=\"help\">{{ help }}</div>\n\n  <ng-content></ng-content>\n</div>\n"
                }] }
    ];
    PoFieldContainerComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        optional: [{ type: Input, args: ['p-optional',] }]
    };
    return PoFieldContainerComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoFieldContainerComponent.prototype._optional;
    /**
     * Label do campo.
     * @type {?}
     */
    PoFieldContainerComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoFieldContainerComponent.prototype.help;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-field-container`.
 */
var PoFieldContainerModule = /** @class */ (function () {
    function PoFieldContainerModule() {
    }
    PoFieldContainerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        PoFieldContainerBottomComponent,
                        PoFieldContainerComponent
                    ],
                    declarations: [
                        PoFieldContainerBottomComponent,
                        PoFieldContainerComponent
                    ]
                },] }
    ];
    return PoFieldContainerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} required
 * @param {?} disabled
 * @param {?} value
 * @return {?}
 */
function requiredFailed(required, disabled, value) {
    /** @type {?} */
    var valid = ((typeof value === 'string' && value) || (typeof value === 'object' && value && value.length)
        || (typeof value === 'number' && (value || value === 0)) || (typeof value === 'boolean' && value));
    return (required && !disabled && !valid);
}
/**
 * @param {?} maxlength
 * @param {?} value
 * @return {?}
 */
function maxlengpoailed(maxlength, value) {
    /** @type {?} */
    var validMaxlength = maxlength || maxlength === 0;
    /** @type {?} */
    var validValue = (value || value === 0) && value.toString();
    return validMaxlength && validValue && validValue.length > Number(maxlength);
}
/**
 * @param {?} minlength
 * @param {?} value
 * @return {?}
 */
function minlengpoailed(minlength, value) {
    /** @type {?} */
    var validMinlength = minlength || minlength === 0;
    /** @type {?} */
    var validValue = (value || value === 0) && value.toString();
    return validMinlength && validValue && validValue.length < Number(minlength);
}
/**
 * @param {?} pattern
 * @param {?} value
 * @return {?}
 */
function patternFailed(pattern, value) {
    /** @type {?} */
    var reg;
    try {
        reg = new RegExp(pattern);
    }
    catch (e) {
        return true;
    }
    return (pattern && value && !reg.test(value));
}
/**
 * @param {?} min
 * @param {?} value
 * @return {?}
 */
function minFailed(min, value) {
    /** @type {?} */
    var validValue = value || value === 0;
    /** @type {?} */
    var validMin = min || min === 0;
    return validValue && validMin && value < min;
}
/**
 * @param {?} max
 * @param {?} value
 * @return {?}
 */
function maxFailed(max, value) {
    /** @type {?} */
    var validValue = value || value === 0;
    /** @type {?} */
    var validMax = max || max === 0;
    return validValue && validMax && value > max;
}
/**
 * @param {?} value
 * @return {?}
 */
function dateFailed(value) {
    return (value && isNaN(Date.parse(value)));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poCheckboxGroupColumnsDefaultLength = 6;
/** @type {?} */
var poCheckboxGroupColumnsTotalLength = 12;
/**
 * \@description
 *
 * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,
 * utilizando a tecla de espaço ou o clique do mouse, várias opções.
 *
 * > Para seleção única, utilize o [**Portinari Radio Group**](/documentation/po-radio-group).
 *
 * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.
 *
 * ```
 * favorites = ['PO', 'Angular'];
 * ```
 *
 * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor
 * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),
 * deve setar a propriedade `p-indeterminate` como `true`.
 *
 * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.
 *
 * ```
 * favorites = {
 *  PO: true,
 *  Angular: true,
 *  VueJS: false,
 *  React: null // indeterminado
 * };
 * ```
 */
var PoCheckboxGroupBaseComponent = /** @class */ (function () {
    function PoCheckboxGroupBaseComponent() {
        this.checkedOptions = {};
        this.checkedOptionsList = [];
        this.mdColumns = poCheckboxGroupColumnsDefaultLength;
        this._columns = poCheckboxGroupColumnsDefaultLength;
        this._disabled = false;
        this._indeterminate = false;
        this._required = false;
        // Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do campo
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
         *
         * @default `2`
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.
         * - É possível exibir as opções entre `1` e `4` colunas.
         * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.
         * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,
         * o *grid system* será composto por `2` colunas.
         * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.
         *
         * \@default `2`
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var columns = convertToInt(value, poCheckboxGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita todos os itens do checkbox.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita todos os itens do checkbox.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "indeterminate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._indeterminate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar
         * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).
         *
         * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o
         * `ngModel`, diferente do array que contém apenas os valores selecionados.
         *
         * \@default `false`
         * @param {?} indeterminate
         * @return {?}
         */
        function (indeterminate) {
            this._indeterminate = convertToBoolean(indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * @optional
         *
         * @description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
         */
        set: /**
         * \@optional
         *
         * \@description
         * Lista de opções que serão exibidas
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = Array.isArray(value) ? value : [];
            this.removeDuplicatedOptions();
            this.setCheckboxGroupOptionsView(this.options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCheckboxGroupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.checkIndeterminate());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.changeValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.checkIndeterminate();
        if (this.propagateChange) {
            this.propagateChange(value);
        }
        else {
            this.ngModelChange.emit(value);
        }
        this.change.emit(value);
    };
    /**
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.checkIndeterminate = /**
     * @return {?}
     */
    function () {
        return this.indeterminate ? this.checkedOptions : this.checkedOptionsList;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.checkOption = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this._disabled && !value.disabled) {
            this.checkOptionModel(value);
            this.changeValue();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} optionsModel
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.writeValue = /**
     * @param {?} optionsModel
     * @return {?}
     */
    function (optionsModel) {
        if (optionsModel && this.checkedOptions !== optionsModel) {
            this.generateCheckOptions(optionsModel);
        }
        else {
            this.checkedOptionsList = [];
            this.checkedOptions = {};
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if ((!this.indeterminate && requiredFailed(this.required, this.disabled, abstractControl.value)) || this.isInvalidIndeterminate()) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.checkColumnsRange = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    /**
     * @private
     * @param {?} optionChecked
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.checkOptionModel = /**
     * @private
     * @param {?} optionChecked
     * @return {?}
     */
    function (optionChecked) {
        this.checkedOptions[optionChecked.value] = !this.checkedOptions[optionChecked.value];
        if (!this.indeterminate && this.checkedOptionsList.includes(optionChecked.value)) {
            this.checkedOptionsList.splice(this.checkedOptionsList.indexOf(optionChecked.value), 1);
        }
        else if (!this.indeterminate) {
            this.checkedOptionsList.push(optionChecked.value);
        }
    };
    /**
     * @private
     * @param {?} optionsModel
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.generateCheckOptions = /**
     * @private
     * @param {?} optionsModel
     * @return {?}
     */
    function (optionsModel) {
        var _this = this;
        this.checkedOptions = {};
        if (optionsModel instanceof Array) {
            this.checkedOptionsList = optionsModel;
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                _this.checkedOptions[option.value] = optionsModel.includes(option.value);
            }));
        }
        else {
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                optionsModel[option.value] = optionsModel[option.value] === undefined ? false : optionsModel[option.value];
                _this.checkedOptions = optionsModel;
            }));
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.getGridSystemColumns = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var gridSystemColumns = poCheckboxGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poCheckboxGroupColumnsDefaultLength;
    };
    /**
     * @private
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.isInvalidIndeterminate = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.indeterminate && this.required && this.checkedOptions) {
            return ((/** @type {?} */ (Object))).values(this.checkedOptions).every((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value === false; }));
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.removeDuplicatedOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.options.forEach((/**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
        function (option, index) {
            /** @type {?} */
            var duplicatedIndex = _this.options.findIndex((/**
             * @param {?} optionFind
             * @return {?}
             */
            function (optionFind) { return optionFind.value === option.value; })) === index;
            if (!duplicatedIndex) {
                _this.options.splice(_this.options.indexOf(option), 1);
            }
        }));
    };
    /**
     * @private
     * @param {?} optionsList
     * @return {?}
     */
    PoCheckboxGroupBaseComponent.prototype.setCheckboxGroupOptionsView = /**
     * @private
     * @param {?} optionsList
     * @return {?}
     */
    function (optionsList) {
        this.checkboxGroupOptionsView = optionsList.map((/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            return __assign({}, option, { id: uuid() });
        }));
    };
    PoCheckboxGroupBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        columns: [{ type: Input, args: ['p-columns',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        help: [{ type: Input, args: ['p-help',] }],
        indeterminate: [{ type: Input, args: ['p-indeterminate',] }],
        label: [{ type: Input, args: ['p-label',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        options: [{ type: Input, args: ['p-options',] }],
        required: [{ type: Input, args: ['p-required',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoCheckboxGroupBaseComponent;
}());
if (false) {
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.checkboxGroupOptionsView;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.checkedOptions;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.checkedOptionsList;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.mdColumns;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.propagateChange;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.validatorChange;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._indeterminate;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupBaseComponent.prototype._required;
    /**
     * Nome dos checkboxes
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.name;
    /**
     * Texto de apoio do campo
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.help;
    /**
     * Label do campo
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.label;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.optional;
    /** @type {?} */
    PoCheckboxGroupBaseComponent.prototype.ngModelChange;
    /**
     * Evento disparado ao alterar valor do campo
     * @type {?}
     */
    PoCheckboxGroupBaseComponent.prototype.change;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoCheckboxGroupBaseComponent
 *
 * \@example
 *
 * <example name="po-checkbox-group-basic" title="Portinari Checkbox Group Basic">
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-labs" title="Portinari Checkbox Group Labs">
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-password-policy" title="Portinari Checkbox Group – Security policy">
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
var PoCheckboxGroupComponent = /** @class */ (function (_super) {
    __extends(PoCheckboxGroupComponent, _super);
    function PoCheckboxGroupComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    /**
     * @return {?}
     */
    PoCheckboxGroupComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.changeDetector.detectChanges();
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoCheckboxGroupComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoCheckboxGroupComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     * @return {?}
     */
    PoCheckboxGroupComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoCheckboxGroupComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.checkboxLabels && !this.disabled) {
            /** @type {?} */
            var checkboxLabel = this.checkboxLabels.find((/**
             * @param {?} _
             * @param {?} index
             * @return {?}
             */
            function (_, index) { return !_this.options[index].disabled; }));
            if (checkboxLabel) {
                checkboxLabel.nativeElement.focus();
            }
        }
    };
    /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    PoCheckboxGroupComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @param {?} option
     * @return {?}
     */
    function (event, option) {
        /** @type {?} */
        var spaceBar = 32;
        if (event.which === spaceBar || event.keyCode === spaceBar) {
            this.checkOption(option);
            event.preventDefault();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoCheckboxGroupComponent.prototype.trackByFn = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    PoCheckboxGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-checkbox-group',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content po-checkbox-group-content\">\n    <div class=\"po-row po-pt-1 po-pb-1\">\n\n      <div *ngFor=\"let option of checkboxGroupOptionsView; trackBy: trackByFn\"\n        class=\"po-checkbox-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\"\n        [class.po-checkbox-group-item-disabled]=\"option.disabled || disabled\">\n\n        <input\n          class=\"po-input po-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.po-checkbox-group-input-checked]=\"checkedOptions[option.value]\"\n          [class.po-checkbox-group-input-indeterminate]=\"checkedOptions[option.value] === null\"\n          [checked]=\"option.value\"\n          [disabled]=\"option.disabled || disabled\"\n          [id]=\"option.id\"\n          [required]=\"required\"\n          [value]=\"option.value\">\n\n        <label #checkboxLabel\n          class=\"po-checkbox-group-label\"\n          [class.po-clickable]=\"!option.disabled && !disabled\"\n          [for]=\"option.id\"\n          [tabindex]=\"option.disabled || disabled ? -1 : 0\"\n          (click)=\"checkOption(option)\"\n          (keydown)=\"onKeyDown($event, option)\">\n            {{option.label}}\n        </label>\n      </div>\n\n    </div>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoCheckboxGroupComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoCheckboxGroupComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoCheckboxGroupComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoCheckboxGroupComponent.propDecorators = {
        checkboxLabels: [{ type: ViewChildren, args: ['checkboxLabel',] }]
    };
    return PoCheckboxGroupComponent;
}(PoCheckboxGroupBaseComponent));
if (false) {
    /** @type {?} */
    PoCheckboxGroupComponent.prototype.checkboxLabels;
    /**
     * @type {?}
     * @private
     */
    PoCheckboxGroupComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-checkbox-group`.
 */
var PoCheckboxGroupModule = /** @class */ (function () {
    function PoCheckboxGroupModule() {
    }
    PoCheckboxGroupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PoFieldContainerModule
                    ],
                    exports: [
                        PoCheckboxGroupComponent
                    ],
                    declarations: [
                        PoCheckboxGroupComponent
                    ]
                },] }
    ];
    return PoCheckboxGroupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-modal` é utilizado para incluir conteúdos rápidos e informativos.
 *
 * No cabeçalho do componente é possível definir um título e como também permite ocultar o ícone de fechamento da modal.
 *
 * Em seu corpo é possível definir um conteúdo informativo, podendo utilizar componentes como por exemplo `po-chart`,
 * `po-table` e os demais componentes do PO.
 *
 * No rodapé encontram-se os botões de ação primária e secundária, no qual permitem definir uma ação e um rótulo, bem como
 * definir um estado de carregando e / ou desabilitado. Também é possível definir o botão com o tipo *danger*.
 *
 * > É possível fechar a modal através da tecla *ESC*, quando a propriedade `p-hide-close` não estiver habilitada.
 */
var PoModalBaseComponent = /** @class */ (function () {
    function PoModalBaseComponent() {
        this._hideClose = false;
        this._size = 'md';
        /**
         * Define o fechamento da modal ao clicar fora da mesma.
         * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
         */
        this.clickOut = false;
        // Controla se a modal fica oculto ou visível, por padrão é oculto
        this.isHidden = true;
        // Event emmiter para quando a modal é fechada pelo 'X'.
        this.onXClosed = new EventEmitter();
    }
    Object.defineProperty(PoModalBaseComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         *
         * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
         */
        set: /**
         * Define o tamanho da modal.
         *
         * Valores válidos:
         *  - `sm` (pequeno)
         *  - `md` (médio)
         *  - `lg` (grande)
         *  - `xl` (extra grande)
         *  - `auto` (automático)
         *
         * > Quando informado `auto` a modal calculará automaticamente seu tamanho baseado em seu conteúdo.
         * Caso não seja informado um valor, a modal terá o tamanho definido como `md`.
         *
         * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
            this._size = sizes.indexOf(value) > -1 ? value : 'md';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoModalBaseComponent.prototype, "setClickOut", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.clickOut = (value === '') ? false : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoModalBaseComponent.prototype, "hideClose", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideClose;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta o ícone de fechar do cabeçalho da modal.
         *
         * > Caso a propriedade estiver habilitada, não será possível fechar a modal através da tecla *ESC*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideClose = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Função para fechar a modal. */
    /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    PoModalBaseComponent.prototype.close = /**
     * Função para fechar a modal.
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.isHidden = true;
        if (xClosed) {
            this.onXClosed.emit(xClosed);
        }
    };
    /** Função para abrir a modal. */
    /**
     * Função para abrir a modal.
     * @return {?}
     */
    PoModalBaseComponent.prototype.open = /**
     * Função para abrir a modal.
     * @return {?}
     */
    function () {
        this.validPrimaryAction();
        this.isHidden = false;
    };
    /**
     * @return {?}
     */
    PoModalBaseComponent.prototype.validPrimaryAction = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.primaryAction) {
            this.primaryAction = {
                action: (/**
                 * @return {?}
                 */
                function () { return _this.close(); }),
                label: 'Ok',
            };
        }
        if (!this.primaryAction['action']) {
            this.primaryAction['action'] = (/**
             * @return {?}
             */
            function () { return _this.close(); });
        }
        if (!this.primaryAction['label']) {
            this.primaryAction['label'] = 'Ok';
        }
    };
    PoModalBaseComponent.propDecorators = {
        title: [{ type: Input, args: ['p-title',] }],
        primaryAction: [{ type: Input, args: ['p-primary-action',] }],
        secondaryAction: [{ type: Input, args: ['p-secondary-action',] }],
        size: [{ type: Input, args: ['p-size',] }],
        setClickOut: [{ type: Input, args: ['p-click-out',] }],
        hideClose: [{ type: Input, args: ['p-hide-close',] }]
    };
    return PoModalBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoModalBaseComponent.prototype._hideClose;
    /**
     * @type {?}
     * @private
     */
    PoModalBaseComponent.prototype._size;
    /**
     * Título da modal.
     * @type {?}
     */
    PoModalBaseComponent.prototype.title;
    /**
     * Deve ser definido um objeto que implementa a interface `PoModalAction` contendo a label e a função da primeira ação.
     * Caso esta propriedade não seja definida ou esteja incompleta, automaticamente será adicionado um botão de ação com
     * a função de fechar a modal.
     * @type {?}
     */
    PoModalBaseComponent.prototype.primaryAction;
    /**
     * Deve ser definido um objeto que implementa a interface `PoModalAction` contendo a label e a função da segunda ação.
     * @type {?}
     */
    PoModalBaseComponent.prototype.secondaryAction;
    /**
     * Define o fechamento da modal ao clicar fora da mesma.
     * Informe o valor `true` para ativar o fechamento ao clicar fora da modal.
     * @type {?}
     */
    PoModalBaseComponent.prototype.clickOut;
    /** @type {?} */
    PoModalBaseComponent.prototype.isHidden;
    /** @type {?} */
    PoModalBaseComponent.prototype.onXClosed;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoModalService = /** @class */ (function () {
    function PoModalService() {
    }
    PoModalService.decorators = [
        { type: Injectable }
    ];
    return PoModalService;
}());
if (false) {
    /** @type {?} */
    PoModalService.prototype.modalActive;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoModalBaseComponent
 *
 * \@example
 *
 * <example name="po-modal-basic" title="Portinari Modal Basic">
 *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.html"> </file>
 *  <file name="sample-po-modal-basic/sample-po-modal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-labs" title="Portinari Modal Labs">
 *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.html"> </file>
 *  <file name="sample-po-modal-labs/sample-po-modal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-fruits-salad" title="Portinari Modal - Fruits Salad">
 *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.html"> </file>
 *  <file name="sample-po-modal-fruits-salad/sample-po-modal-fruits-salad.component.ts"> </file>
 * </example>
 */
var PoModalComponent = /** @class */ (function (_super) {
    __extends(PoModalComponent, _super);
    function PoModalComponent(poModalService, renderer, changeDetector) {
        var _this = _super.call(this) || this;
        _this.poModalService = poModalService;
        _this.renderer = renderer;
        _this.changeDetector = changeDetector;
        _this.focusableElements = 'input, select, textarea, button:not([disabled]), a';
        _this.id = v4();
        return _this;
    }
    /**
     * @param {?=} xClosed
     * @return {?}
     */
    PoModalComponent.prototype.close = /**
     * @param {?=} xClosed
     * @return {?}
     */
    function (xClosed) {
        if (xClosed === void 0) { xClosed = false; }
        this.poModalService.modalActive = undefined;
        _super.prototype.close.call(this, xClosed);
        this.removeEventListeners();
        if (this.sourceElement) {
            this.sourceElement.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoModalComponent.prototype.closeModalOnEscapeKey = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.hideClose) {
            event.preventDefault();
            event.stopPropagation();
            this.close();
        }
    };
    /**
     * @return {?}
     */
    PoModalComponent.prototype.getPrimaryActionButtonType = /**
     * @return {?}
     */
    function () {
        return this.primaryAction.danger ? 'danger' : 'primary';
    };
    /**
     * @return {?}
     */
    PoModalComponent.prototype.getSecondaryActionButtonType = /**
     * @return {?}
     */
    function () {
        return this.secondaryAction && this.secondaryAction.danger && !this.primaryAction.danger ? 'danger' : 'default';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoModalComponent.prototype.onClickOut = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.clickOut && !this.modalContent.nativeElement.contains(event.target)) {
            this.close();
        }
    };
    /**
     * @return {?}
     */
    PoModalComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        this.sourceElement = document.activeElement;
        _super.prototype.open.call(this);
        this.handleFocus();
    };
    /**
     * @private
     * @return {?}
     */
    PoModalComponent.prototype.handleFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.poModalService.modalActive = this.id;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.modalContent) {
                _this.initFocus();
                document.addEventListener('focus', _this.focusFunction, true);
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoModalComponent.prototype.initFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.focusFunction = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.poModalService.modalActive = _this.poModalService.modalActive || _this.id;
            /** @type {?} */
            var modalElement = _this.modalContent.nativeElement;
            if (!modalElement.contains(event.target) && _this.poModalService.modalActive === _this.id) {
                event.stopPropagation();
                _this.firstElement.focus();
            }
        });
        this.setFirstElement();
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            /** @type {?} */
            var firstFieldElement = this.modalContent.nativeElement.querySelectorAll(this.focusableElements)[1] ||
                this.modalContent.nativeElement;
            firstFieldElement.focus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoModalComponent.prototype.removeEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        document.removeEventListener('focus', this.focusFunction, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoModalComponent.prototype.setFirstElement = /**
     * @private
     * @return {?}
     */
    function () {
        this.firstElement = this.modalContent.nativeElement.querySelector(this.focusableElements) || this.modalContent.nativeElement;
    };
    PoModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-modal',
                    template: "<div *ngIf=\"!isHidden\"\n  class=\"po-modal\"\n  tabindex=\"0\"\n  (keydown.esc)=\"closeModalOnEscapeKey($event)\">\n\n  <div class=\"po-modal-overlay\">\n    <div class=\"po-modal-container po-pb-2 po-pt-2\" (mousedown)=\"onClickOut($event)\">\n\n      <div class=\"po-modal-vertical-align\">\n        <div #modalContent\n          class=\"po-modal-content po-modal-{{ size }}\"\n          tabindex=\"-1\">\n\n          <div class=\"po-modal-header\">\n            <div class=\"po-modal-title po-text-ellipsis\">\n              {{ title }}\n            </div>\n\n            <a *ngIf=\"!hideClose\"\n              class=\"po-modal-header-close-button\"\n              tabindex=\"0\"\n              (click)=\"close(true)\">\n              <span class=\"po-icon po-icon-close\"></span>\n            </a>\n          </div>\n\n          <div class=\"po-modal-body\">\n            <ng-content></ng-content>\n          </div>\n\n          <div class=\"po-modal-footer\">\n            <po-button *ngIf=\"secondaryAction\"\n              [p-disabled]=\"secondaryAction.disabled\"\n              [p-label]=\"secondaryAction.label\"\n              [p-loading]=\"secondaryAction.loading\"\n              [p-type]=\"getSecondaryActionButtonType()\"\n              (p-click)=\"secondaryAction.action()\">\n            </po-button>\n\n            <po-button\n              class=\"po-button-modal-first-action\"\n              [p-disabled]=\"primaryAction.disabled\"\n              [p-label]=\"primaryAction.label\"\n              [p-loading]=\"primaryAction.loading\"\n              [p-type]=\"getPrimaryActionButtonType()\"\n              (p-click)=\"primaryAction.action()\">\n            </po-button>\n          </div>\n\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>\n\n"
                }] }
    ];
    /** @nocollapse */
    PoModalComponent.ctorParameters = function () { return [
        { type: PoModalService },
        { type: Renderer2 },
        { type: ChangeDetectorRef }
    ]; };
    PoModalComponent.propDecorators = {
        modalContent: [{ type: ViewChild, args: ['modalContent', { read: ElementRef, static: false },] }]
    };
    return PoModalComponent;
}(PoModalBaseComponent));
if (false) {
    /** @type {?} */
    PoModalComponent.prototype.modalContent;
    /**
     * @type {?}
     * @private
     */
    PoModalComponent.prototype.firstElement;
    /**
     * @type {?}
     * @private
     */
    PoModalComponent.prototype.focusFunction;
    /**
     * @type {?}
     * @private
     */
    PoModalComponent.prototype.focusableElements;
    /**
     * @type {?}
     * @private
     */
    PoModalComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    PoModalComponent.prototype.sourceElement;
    /** @type {?} */
    PoModalComponent.prototype.onResizeListener;
    /**
     * @type {?}
     * @private
     */
    PoModalComponent.prototype.poModalService;
    /**
     * @type {?}
     * @private
     */
    PoModalComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoModalComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente po-modal
 */
var PoModalModule = /** @class */ (function () {
    function PoModalModule() {
    }
    PoModalModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoButtonModule
                    ],
                    declarations: [
                        PoModalComponent
                    ],
                    exports: [PoModalComponent],
                    providers: [PoModalService]
                },] }
    ];
    return PoModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoProgressBarComponent = /** @class */ (function () {
    function PoProgressBarComponent() {
    }
    Object.defineProperty(PoProgressBarComponent.prototype, "valueScale", {
        get: /**
         * @return {?}
         */
        function () {
            return "" + this.value / 100;
        },
        enumerable: true,
        configurable: true
    });
    PoProgressBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-progress-bar',
                    template: "<div [class.po-progress-bar-indeterminate]=\"indeterminate\">\n  <div class=\"po-progress-bar-element po-progress-bar-primary\" [style.transform]=\"'scaleX('+ valueScale +')'\"></div>\n  <div class=\"po-progress-bar-element po-progress-bar-secondary\"></div>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PoProgressBarComponent.propDecorators = {
        indeterminate: [{ type: Input, args: ['p-indeterminate',] }],
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoProgressBarComponent;
}());
if (false) {
    /** @type {?} */
    PoProgressBarComponent.prototype.indeterminate;
    /** @type {?} */
    PoProgressBarComponent.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoProgressStatus = {
    /** Define o status `default` para a barra de progresso. */
    Default: 'default',
    /** Define o status de `error` para a barra de progresso. */
    Error: 'error',
    /** Define o status de `success` para a barra de progresso. */
    Success: 'success',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poProgressMaxValue = 100;
/** @type {?} */
var poProgressMinValue = 0;
/**
 * \@description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
var PoProgressBaseComponent = /** @class */ (function () {
    function PoProgressBaseComponent() {
        this._value = 0;
        /**
         * \@optional
         *
         * \@description
         *
         * Status da barra de progresso que indicará visualmente ao usuário
         * o andamento, por exemplo, se a mesma foi concluída com sucesso.
         *
         * \@default `PoProgressStatus.Default`
         */
        this.status = PoProgressStatus.Default;
        /**
         * \@optional
         *
         * \@description
         *
         * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
         *
         * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
         *
         * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
         * o ícone de cancelamento não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * \@optional
         *
         * \@description
         *
         * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
         *
         * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
         * `PoProgressStatus.Error`.
         */
        this.retry = new EventEmitter();
    }
    Object.defineProperty(PoProgressBaseComponent.prototype, "indeterminate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._indeterminate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
         *
         * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
         *
         * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
         *
         * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
         *
         * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
         *
         * \@default `false`
         * @param {?} indeterminate
         * @return {?}
         */
        function (indeterminate) {
            this._indeterminate = convertToBoolean(indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoProgressBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor que representará o progresso.
         *
         * > Os valores aceitos são números inteiros de `0` à `100`.
         *
         * @default `0`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor que representará o progresso.
         *
         * > Os valores aceitos são números inteiros de `0` à `100`.
         *
         * \@default `0`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var integerValue = convertToInt(value, poProgressMinValue);
            /** @type {?} */
            var isProgressRangeValue = this.isProgressRangeValue(integerValue);
            this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoProgressBaseComponent.prototype.isProgressRangeValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    };
    PoProgressBaseComponent.propDecorators = {
        indeterminate: [{ type: Input, args: ['p-indeterminate',] }],
        info: [{ type: Input, args: ['p-info',] }],
        infoIcon: [{ type: Input, args: ['p-info-icon',] }],
        status: [{ type: Input, args: ['p-status',] }],
        text: [{ type: Input, args: ['p-text',] }],
        value: [{ type: Input, args: ['p-value',] }],
        cancel: [{ type: Output, args: ['p-cancel',] }],
        retry: [{ type: Output, args: ['p-retry',] }]
    };
    return PoProgressBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoProgressBaseComponent.prototype._indeterminate;
    /**
     * @type {?}
     * @private
     */
    PoProgressBaseComponent.prototype._value;
    /**
     * \@optional
     *
     * \@description
     *
     * Informação adicional que aparecerá abaixo da barra de progresso ao lado direito.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.info;
    /**
     * \@optional
     *
     * \@description
     *
     * Ícone que aparecerá ao lado do texto da propriedade `p-info`.
     *
     * Exemplo: `po-icon-ok`.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.infoIcon;
    /**
     * \@optional
     *
     * \@description
     *
     * Status da barra de progresso que indicará visualmente ao usuário
     * o andamento, por exemplo, se a mesma foi concluída com sucesso.
     *
     * \@default `PoProgressStatus.Default`
     * @type {?}
     */
    PoProgressBaseComponent.prototype.status;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto principal que aparecerá abaixo da barra de progresso no lado esquerdo.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.text;
    /**
     * \@optional
     *
     * \@description
     *
     * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
     *
     * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
     *
     * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
     * o ícone de cancelamento não será exibido.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.cancel;
    /**
     * \@optional
     *
     * \@description
     *
     * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
     *
     * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
     * `PoProgressStatus.Error`.
     * @type {?}
     */
    PoProgressBaseComponent.prototype.retry;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoProgressBaseComponent
 *
 * \@example
 * <example name="po-progress-basic" title="Portinari Progress Basic">
 *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.html"> </file>
 *   <file name="sample-po-progress-basic/sample-po-progress-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-progress-labs" title="Portinari Progress Labs">
 *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.html"> </file>
 *   <file name="sample-po-progress-labs/sample-po-progress-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-progress-publication" title="Portinari Progress - Publication">
 *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.html"> </file>
 *   <file name="sample-po-progress-publication/sample-po-progress-publication.component.ts"> </file>
 * </example>
 */
var PoProgressComponent = /** @class */ (function (_super) {
    __extends(PoProgressComponent, _super);
    function PoProgressComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PoProgressComponent.prototype, "isAllowCancel", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.cancel.observers.length && this.status !== PoProgressStatus.Success;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoProgressComponent.prototype, "isAllowProgressInfo", {
        get: /**
         * @return {?}
         */
        function () {
            return !!(this.info || this.infoIcon || this.isAllowCancel || this.isAllowRetry);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoProgressComponent.prototype, "isAllowRetry", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.retry.observers.length && this.status === PoProgressStatus.Error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoProgressComponent.prototype, "statusClass", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.status === PoProgressStatus.Success) {
                return 'po-progress-success';
            }
            if (this.status === PoProgressStatus.Error) {
                return 'po-progress-error';
            }
            return 'po-progress-default';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoProgressComponent.prototype.emitCancellation = /**
     * @return {?}
     */
    function () {
        this.cancel.emit(this.status);
    };
    /**
     * @return {?}
     */
    PoProgressComponent.prototype.emitRetry = /**
     * @return {?}
     */
    function () {
        this.retry.emit();
    };
    PoProgressComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-progress',
                    template: "<div class=\"po-progress\" [ngClass]=\"statusClass\">\n\n  <label *ngIf=\"text\" class=\"po-progress-description-mobile po-progress-description-text\">\n    {{ text }}\n  </label>\n\n  <po-progress-bar\n    class=\"po-progress-bar\"\n    [p-indeterminate]=\"indeterminate\"\n    [p-value]=\"value\">\n  </po-progress-bar>\n\n  <div *ngIf=\"text\" class=\"po-progress-description\">\n    <label class=\"po-progress-description-text\">\n      {{ text }}\n    </label>\n  </div>\n\n  <div *ngIf=\"isAllowProgressInfo\" class=\"po-progress-info\">\n    <span *ngIf=\"infoIcon\" class=\"po-progress-info-icon po-icon {{ infoIcon }}\"></span>\n    <span *ngIf=\"info\" class=\"po-progress-info-text\">{{ info }}</span>\n\n    <button *ngIf=\"isAllowRetry\"\n      class=\"po-progress-info-icon-action po-icon po-icon-refresh po-clickable\"\n      (click)=\"emitRetry()\">\n    </button>\n\n    <button *ngIf=\"isAllowCancel\"\n      class=\"po-progress-info-icon-action po-icon po-icon-close po-clickable\"\n      (click)=\"emitCancellation()\">\n    </button>\n\n  </div>\n\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    return PoProgressComponent;
}(PoProgressBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-progress`.
 */
var PoProgressModule = /** @class */ (function () {
    function PoProgressModule() {
    }
    PoProgressModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        PoProgressComponent
                    ],
                    declarations: [
                        PoProgressBarComponent,
                        PoProgressComponent
                    ]
                },] }
    ];
    return PoProgressModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoColorPaletteEnum = {
    /** #0c9abe */
    Color01: 'color-01',
    /** #2c85c8 */
    Color02: 'color-02',
    /** #2c43c8 */
    Color03: 'color-03',
    /** #5843c8 */
    Color04: 'color-04',
    /** #ab43c8 */
    Color05: 'color-05',
    /** #ab4391 */
    Color06: 'color-06',
    /** #c64840 */
    Color07: 'color-07',
    /** #ea9b3e */
    Color08: 'color-08',
    /** #abc249 */
    Color09: 'color-09',
    /** #56b96b */
    Color10: 'color-10',
    /** #00b28e */
    Color11: 'color-11',
    /** #06a6a5 */
    Color12: 'color-12',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoColorPaletteService = /** @class */ (function () {
    function PoColorPaletteService() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    PoColorPaletteService.prototype.getColor = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return ((/** @type {?} */ (Object))).values(PoColorPaletteEnum).includes(value.color) ?
            value.color : this.getColorFromType(value.type || value.color);
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    PoColorPaletteService.prototype.getColorFromType = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        switch (type) {
            case 'danger':
                return PoColorPaletteEnum.Color07;
            case 'success':
                return PoColorPaletteEnum.Color11;
            case 'warning':
                return PoColorPaletteEnum.Color08;
            default:
                return PoColorPaletteEnum.Color01;
        }
    };
    PoColorPaletteService.decorators = [
        { type: Injectable }
    ];
    return PoColorPaletteService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço `po-color-palette`.
 */
var PoColorPaletteModule = /** @class */ (function () {
    function PoColorPaletteModule() {
    }
    PoColorPaletteModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        PoColorPaletteService
                    ],
                    bootstrap: []
                },] }
    ];
    return PoColorPaletteModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoComponentInjectorService = /** @class */ (function () {
    function PoComponentInjectorService(componentResolver, applicationRef, injector) {
        this.componentResolver = componentResolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
    }
    // Cria um dinamicamente no ApplicationRef
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    PoComponentInjectorService.prototype.createComponentInApplication = 
    // Cria um dinamicamente no ApplicationRef
    /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var componentRef = this.componentResolver.resolveComponentFactory(component).create(this.injector);
        this.applicationRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = ((/** @type {?} */ (componentRef.hostView))).rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    };
    // Destrói o componente e remove do ApplicationRef
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    PoComponentInjectorService.prototype.destroyComponentInApplication = 
    // Destrói o componente e remove do ApplicationRef
    /**
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        this.applicationRef.detachView(componentRef.hostView);
        componentRef.destroy();
    };
    PoComponentInjectorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PoComponentInjectorService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    /** @nocollapse */ PoComponentInjectorService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PoComponentInjectorService_Factory() { return new PoComponentInjectorService(ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationRef), ɵɵinject(INJECTOR)); }, token: PoComponentInjectorService, providedIn: "root" });
    return PoComponentInjectorService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoComponentInjectorService.prototype.componentResolver;
    /**
     * @type {?}
     * @private
     */
    PoComponentInjectorService.prototype.applicationRef;
    /**
     * @type {?}
     * @private
     */
    PoComponentInjectorService.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoComponentInjectorModule = /** @class */ (function () {
    function PoComponentInjectorModule() {
    }
    PoComponentInjectorModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [
                        PoComponentInjectorService
                    ],
                    bootstrap: []
                },] }
    ];
    return PoComponentInjectorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço po-control-position.
 */
var PoControlPositionModule = /** @class */ (function () {
    function PoControlPositionModule() {
    }
    PoControlPositionModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        PoControlPositionService
                    ]
                },] }
    ];
    return PoControlPositionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço `po-date`.
 */
var PoDateTimeModule = /** @class */ (function () {
    function PoDateTimeModule() {
    }
    PoDateTimeModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        PoDateService
                    ],
                    bootstrap: []
                },] }
    ];
    return PoDateTimeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var PoDialogType = {
    // Enum para alert
    Alert: 0,
    // Enum para confirm
    Confirm: 1,
};
PoDialogType[PoDialogType.Alert] = 'Alert';
PoDialogType[PoDialogType.Confirm] = 'Confirm';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poDialogAlertLiteralsDefault = {
    en: (/** @type {?} */ ({ ok: 'Ok' })),
    es: (/** @type {?} */ ({ ok: 'Ok' })),
    pt: (/** @type {?} */ ({ ok: 'Ok' })),
    ru: (/** @type {?} */ ({ ok: 'Ок' }))
};
/** @type {?} */
var poDialogConfirmLiteralsDefault = {
    en: (/** @type {?} */ ({ cancel: 'Cancel', confirm: 'Confirm' })),
    es: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    pt: (/** @type {?} */ ({ cancel: 'Cancelar', confirm: 'Confirmar' })),
    ru: (/** @type {?} */ ({ cancel: 'отменить', confirm: 'подтвердить' }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que serve como container do po-dialog.service
 */
var PoDialogComponent = /** @class */ (function () {
    function PoDialogComponent() {
        // Objeto primary do poModal
        this.primaryAction = { label: 'ok', action: (/**
             * @return {?}
             */
            function () { }) };
    }
    /**
     * @return {?}
     */
    PoDialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.closeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    PoDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.closeSubscription = this.poModal.onXClosed.subscribe((/**
         * @param {?} close
         * @return {?}
         */
        function (close) { return _this.destroy(); }));
    };
    // Fecha o poModal
    // Fecha o poModal
    /**
     * @return {?}
     */
    PoDialogComponent.prototype.close = 
    // Fecha o poModal
    /**
     * @return {?}
     */
    function () {
        this.poModal.close();
        this.destroy();
    };
    /**
     * @return {?}
     */
    PoDialogComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    // Insere os valores recebidos de this.open para o poModal
    // Insere os valores recebidos de this.open para o poModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    PoDialogComponent.prototype.configDialog = 
    // Insere os valores recebidos de this.open para o poModal
    /**
     * @param {?=} primaryLabel
     * @param {?=} primaryAction
     * @param {?=} secondaryLabel
     * @param {?=} secondaryAction
     * @return {?}
     */
    function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: (/**
             * @return {?}
             */
            function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            })
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: (/**
                 * @return {?}
                 */
                function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                })
            };
        }
    };
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    PoDialogComponent.prototype.open = 
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    /**
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @param {?=} componentRef
     * @return {?}
     */
    function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, ((/** @type {?} */ (dialogOptions))).confirm, this.literalsConfirm.cancel, ((/** @type {?} */ (dialogOptions))).cancel);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, ((/** @type {?} */ (dialogOptions))).ok);
                break;
            }
        }
        this.poModal.open();
    };
    /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    PoDialogComponent.prototype.setDialogLiterals = /**
     * @private
     * @param {?} dialogOptions
     * @param {?} dialogType
     * @return {?}
     */
    function (dialogOptions, dialogType) {
        /** @type {?} */
        var alertLiterals = poDialogAlertLiteralsDefault;
        /** @type {?} */
        var confirmLiterals = poDialogConfirmLiteralsDefault;
        /** @type {?} */
        var literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = __assign({}, alertLiterals[poLocaleDefault], alertLiterals[browserLanguage()], literals);
        }
        else {
            this.literalsConfirm = __assign({}, confirmLiterals[poLocaleDefault], confirmLiterals[browserLanguage()], literals);
        }
    };
    PoDialogComponent.decorators = [
        { type: Component, args: [{
                    template: "<po-modal\n  [p-title]=\"title\"\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</po-modal>\n"
                }] }
    ];
    PoDialogComponent.propDecorators = {
        poModal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }]
    };
    return PoDialogComponent;
}());
if (false) {
    /** @type {?} */
    PoDialogComponent.prototype.poModal;
    /** @type {?} */
    PoDialogComponent.prototype.title;
    /** @type {?} */
    PoDialogComponent.prototype.message;
    /** @type {?} */
    PoDialogComponent.prototype.primaryAction;
    /** @type {?} */
    PoDialogComponent.prototype.secondaryAction;
    /** @type {?} */
    PoDialogComponent.prototype.literalsAlert;
    /** @type {?} */
    PoDialogComponent.prototype.literalsConfirm;
    /**
     * @type {?}
     * @private
     */
    PoDialogComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    PoDialogComponent.prototype.closeSubscription;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O po-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
 * necessidade do desenvolvedor.
 * @abstract
 */
var  /**
 * \@description
 *
 * O po-dialog é um serviço para exibição de caixas de diálogo, é possível customiza-los passando alguns parâmetros de acordo com a
 * necessidade do desenvolvedor.
 * @abstract
 */
PoDialogBaseService = /** @class */ (function () {
    function PoDialogBaseService() {
    }
    /** Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento. */
    /**
     * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
     * @param {?} confirmOptions
     * @return {?}
     */
    PoDialogBaseService.prototype.confirm = /**
     * Exibe um diálogo de confirmação, é possível definir ações para as opções de confirmação e cancelamento.
     * @param {?} confirmOptions
     * @return {?}
     */
    function (confirmOptions) {
        this.openDialog(PoDialogType.Confirm, confirmOptions);
    };
    /** Exibe um diálogo de alerta. */
    /**
     * Exibe um diálogo de alerta.
     * @param {?} alertOptions
     * @return {?}
     */
    PoDialogBaseService.prototype.alert = /**
     * Exibe um diálogo de alerta.
     * @param {?} alertOptions
     * @return {?}
     */
    function (alertOptions) {
        this.openDialog(PoDialogType.Alert, alertOptions);
    };
    return PoDialogBaseService;
}());
if (false) {
    /**
     * @abstract
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    PoDialogBaseService.prototype.openDialog = function (dialogType, dialogOptions) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoDialogBaseService
 *
 * \@example
 *
 * <example name="po-dialog-basic" title="Portinari Dialog Basic">
 *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.html"> </file>
 *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dialog-labs" title="Portinari Dialog Labs">
 *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.html"> </file>
 *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-dialog-cancel-credit-card" title="Portinari Dialog - Cancel Credit Card">
 *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.html"> </file>
 *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.ts"> </file>
 * </example>
 */
var PoDialogService = /** @class */ (function (_super) {
    __extends(PoDialogService, _super);
    function PoDialogService(poComponentInjector) {
        var _this = _super.call(this) || this;
        _this.poComponentInjector = poComponentInjector;
        return _this;
    }
    /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    PoDialogService.prototype.openDialog = /**
     * @param {?} dialogType
     * @param {?} dialogOptions
     * @return {?}
     */
    function (dialogType, dialogOptions) {
        /** @type {?} */
        var componentRef = this.poComponentInjector.createComponentInApplication(PoDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    };
    PoDialogService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoDialogService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };
    return PoDialogService;
}(PoDialogBaseService));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDialogService.prototype.poComponentInjector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoDialogModule = /** @class */ (function () {
    function PoDialogModule() {
    }
    PoDialogModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        PoDialogComponent
                    ],
                    imports: [
                        PoModalModule
                    ],
                    exports: [
                        PoDialogComponent
                    ],
                    entryComponents: [
                        PoDialogComponent
                    ],
                    providers: [
                        PoDialogService
                    ]
                },] }
    ];
    return PoDialogModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O pipe po-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | poI18n:[1,10] }}
 * {{ i18nPT.totalPages | poI18n:10 }}
 * ```
 */
var  /**
 * \@description
 *
 * O pipe po-i18n é responsável por tratar literais parâmetrizadas, dando mais flexibilidade as literais de tradução.
 * O número de parâmetros inseridos nas literais deve coincidir com a quantia de parâmetros passados por parâmetro,
 * os parâmetros serão substituidos de acordo com a ordem informada.
 *
 * Para inserir um parâmetro em uma literal, o mesmo deverá ser inserido entre chaves dentro da literal e posicionado
 * de acordo como deve ser exibido após a sua transformação.
 *
 * ```
 * const i18nPT = {
 *   pagination: 'Página {1} de {2} páginas.',
 *   totalPages: 'Total de {totalPages} encontradas.'
 * };
 * ```
 *
 * É possível passar um valor ou um array de valores para o pipe, caso seja passado um array, os valores devem obedecer a ordem
 * informada na literal.
 *
 * ```
 * {{ i18nPT.pagination | poI18n:[1,10] }}
 * {{ i18nPT.totalPages | poI18n:10 }}
 * ```
 */
PoI18nBasePipe = /** @class */ (function () {
    function PoI18nBasePipe() {
    }
    /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    PoI18nBasePipe.prototype.transform = /**
     * @param {?} value
     * @param {?} args
     * @return {?}
     */
    function (value, args) {
        var e_1, _a;
        if (!value) {
            return '';
        }
        if (!(args instanceof Array)) {
            args = [args];
        }
        try {
            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                var arg = args_1_1.value;
                value = value.replace(/(\{\w*\})+/, arg);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return value;
    };
    return PoI18nBasePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoI18nBasePipe
 *
 * \@example
 * <example name='po-i18n-pipe-labs' title='Portinari i18n Pipe Labs' >
 *  <file name='sample-po-i18n-pipe-labs.component.html'> </file>
 *  <file name='sample-po-i18n-pipe-labs.component.ts'> </file>
 *  <file name='sample-po-i18n-pipe.component.html'> </file>
 *  <file name='sample-po-i18n-pipe.component.ts'> </file>
 * </example>
 */
var PoI18nPipe = /** @class */ (function (_super) {
    __extends(PoI18nPipe, _super);
    function PoI18nPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoI18nPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'poI18n'
                },] }
    ];
    return PoI18nPipe;
}(PoI18nBasePipe));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var PoToasterOrientation = {
    /** Orientção do componente fica no rodapé */
    Bottom: 0,
    /** Orientção do componente fica no topo */
    Top: 1,
};
PoToasterOrientation[PoToasterOrientation.Bottom] = 'Bottom';
PoToasterOrientation[PoToasterOrientation.Top] = 'Top';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente po-toaster foi construído para exibir notificações para o usuário.
 * @abstract
 */
var  /**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente po-toaster foi construído para exibir notificações para o usuário.
 * @abstract
 */
PoToasterBaseComponent = /** @class */ (function () {
    function PoToasterBaseComponent() {
        /**
         * Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página.
         */
        this.orientation = PoToasterOrientation.Bottom;
    }
    return PoToasterBaseComponent;
}());
if (false) {
    /**
     * Disponibiliza uma ação para a notificação.
     * @type {?}
     */
    PoToasterBaseComponent.prototype.action;
    /**
     * Permite alterar o label do botão quando houver uma ação definida.
     * @type {?}
     */
    PoToasterBaseComponent.prototype.actionLabel;
    /**
     * Mensagem a ser exibida na notificação.
     * @type {?}
     */
    PoToasterBaseComponent.prototype.message;
    /**
     * Orientação da notificação, a mesma pode ser exibida na parte superior ou inferior da página.
     * @type {?}
     */
    PoToasterBaseComponent.prototype.orientation;
    /**
     * ComponentRef
     * @type {?}
     */
    PoToasterBaseComponent.prototype.componentRef;
    /**
     * Posição para notificação aparecer na tela.
     * @type {?}
     */
    PoToasterBaseComponent.prototype.position;
    /**
     * Tipo de notificação.
     * @type {?}
     */
    PoToasterBaseComponent.prototype.type;
    /**
     * Fecha a notificação.
     * @abstract
     * @return {?}
     */
    PoToasterBaseComponent.prototype.close = function () { };
    /**
     * Altera a posição da notificação.
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoToasterBaseComponent.prototype.changePosition = function (value) { };
    /**
     * Configura o componente po-toaster de acordo com as definições do usuário.
     * @abstract
     * @param {?} poToaster
     * @return {?}
     */
    PoToasterBaseComponent.prototype.configToaster = function (poToaster) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var PoToasterType = {
    /** Enum para informações do tipo "Erro" */
    Error: 0,
    /** Enum para informações do tipo "Informação" */
    Information: 1,
    /** Enum para informações do tipo "Sucesso" */
    Success: 2,
    /** Enum para informações do tipo "Atenção" */
    Warning: 3,
};
PoToasterType[PoToasterType.Error] = 'Error';
PoToasterType[PoToasterType.Information] = 'Information';
PoToasterType[PoToasterType.Success] = 'Success';
PoToasterType[PoToasterType.Warning] = 'Warning';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoToasterBaseComponent
 */
var PoToasterComponent = /** @class */ (function (_super) {
    __extends(PoToasterComponent, _super);
    function PoToasterComponent(changeDetector, elementeRef) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.elementeRef = elementeRef;
        /* Margem do Toaster referênte à sua orientação e posição*/
        _this.margin = 20;
        /* Observable para monitorar o Close to Toaster */
        _this.observableOnClose = new Subject();
        /* Mostra ou oculta o Toaster */
        _this.showToaster = true;
        /* Posição do Toaster*/
        _this.toasterPosition = 'po-toaster-bottom';
        return _this;
    }
    /* Muda a posição do Toaster na tela*/
    /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    PoToasterComponent.prototype.changePosition = /* Muda a posição do Toaster na tela*/
    /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + (44 * (position)) + position * 6;
        if (this.orientation === PoToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    };
    /* Fecha o componente Toaster */
    /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    PoToasterComponent.prototype.close = /* Fecha o componente Toaster */
    /**
     * @return {?}
     */
    function () {
        this.showToaster = false;
        this.observableOnClose.next(true);
    };
    /* Configura o Toaster com os atributos passados para ele */
    /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} poToaster
     * @return {?}
     */
    PoToasterComponent.prototype.configToaster = /* Configura o Toaster com os atributos passados para ele */
    /**
     * @param {?} poToaster
     * @return {?}
     */
    function (poToaster) {
        this.type = poToaster.type;
        this.message = poToaster.message;
        this.orientation = poToaster.orientation;
        this.position = poToaster.position;
        this.action = poToaster.action;
        this.actionLabel = (poToaster.actionLabel) ? poToaster.actionLabel : 'Fechar';
        this.componentRef = poToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === PoToasterOrientation.Top) {
            this.toasterPosition = 'po-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case PoToasterType.Error: {
                this.toasterType = 'po-toaster-error';
                this.icon = 'po-icon-close';
                break;
            }
            case PoToasterType.Information: {
                this.toasterType = 'po-toaster-info';
                this.icon = 'po-icon-info';
                break;
            }
            case PoToasterType.Success: {
                this.toasterType = 'po-toaster-success';
                this.icon = 'po-icon-ok';
                break;
            }
            case PoToasterType.Warning: {
                this.toasterType = 'po-toaster-warning';
                this.icon = 'po-icon-warning';
                break;
            }
        }
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    PoToasterComponent.prototype.getShowToaster = /**
     * @return {?}
     */
    function () {
        return this.showToaster;
    };
    /**
     * @return {?}
     */
    PoToasterComponent.prototype.getIcon = /**
     * @return {?}
     */
    function () {
        return this.icon;
    };
    /**
     * @return {?}
     */
    PoToasterComponent.prototype.getToasterPosition = /**
     * @return {?}
     */
    function () {
        return this.toasterPosition;
    };
    /**
     * @return {?}
     */
    PoToasterComponent.prototype.getToasterType = /**
     * @return {?}
     */
    function () {
        return this.toasterType;
    };
    /* Chama a função passada pelo atributo `action` */
    /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    PoToasterComponent.prototype.poToasterAction = /* Chama a função passada pelo atributo `action` */
    /**
     * @return {?}
     */
    function () {
        this.action(this);
    };
    PoToasterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-toaster',
                    template: "<div #toaster *ngIf=\"getShowToaster()\"\n  class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }} po-clickable\"\n  (click)=\"close()\">\n\n  <div class=\"po-toaster-message\">\n    <span class=\"po-icon {{ getIcon() }}\"></span> {{ message }}\n  </div>\n\n  <div *ngIf=\"action !== undefined\" (click)=\"poToasterAction()\" class=\"po-toaster-action\">\n    {{ actionLabel }}\n  </div>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoToasterComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    PoToasterComponent.propDecorators = {
        toaster: [{ type: ViewChild, args: ['toaster', { static: false },] }]
    };
    return PoToasterComponent;
}(PoToasterBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoToasterComponent.prototype.icon;
    /**
     * @type {?}
     * @private
     */
    PoToasterComponent.prototype.margin;
    /**
     * @type {?}
     * @private
     */
    PoToasterComponent.prototype.observableOnClose;
    /**
     * @type {?}
     * @private
     */
    PoToasterComponent.prototype.showToaster;
    /**
     * @type {?}
     * @private
     */
    PoToasterComponent.prototype.toasterPosition;
    /**
     * @type {?}
     * @private
     */
    PoToasterComponent.prototype.toasterType;
    /** @type {?} */
    PoToasterComponent.prototype.toaster;
    /** @type {?} */
    PoToasterComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoToasterComponent.prototype.elementeRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNotificationModule = /** @class */ (function () {
    function PoNotificationModule() {
    }
    PoNotificationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        PoToasterComponent
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [],
                    entryComponents: [
                        PoToasterComponent
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];
    return PoNotificationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoServicesModule = /** @class */ (function () {
    function PoServicesModule() {
    }
    PoServicesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        PoI18nPipe
                    ],
                    imports: [
                        PoColorPaletteModule,
                        PoComponentInjectorModule,
                        PoControlPositionModule,
                        PoDateTimeModule,
                        PoDialogModule,
                        PoLanguageModule,
                        PoNotificationModule
                    ],
                    exports: [
                        PoColorPaletteModule,
                        PoComponentInjectorModule,
                        PoControlPositionModule,
                        PoDateTimeModule,
                        PoDialogModule,
                        PoI18nPipe,
                        PoNotificationModule
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];
    return PoServicesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PO_POPOVER_DEFAULT_POSITION = 'right';
/** @type {?} */
var PO_POPOVER_DEFAULT_TRIGGER = 'click';
/** @type {?} */
var PO_POPOVER_TRIGGERS = ['click', 'hover'];
/**
 * \@description
 *
 * O componente `po-popover` é um container pequeno recomendado para incluir vários tipos de conteúdo como:
 * gráficos, textos, imagens e inputs. Ele abre sobreposto aos outros componentes.
 *
 * Para mostrar apenas pequenos textos recomenda-se o uso da diretiva
 * [**po-tooltip**](https://portinari.io/documentation/po-tooltip?view=doc).
 *
 * Para conteúdos maiores recomenda-se o uso do [**po-modal**](https://portinari.io/documentation/po-modal?view=doc).
 *
 * Ele contém um título e também é possível escolher as posições do popover em relação ao componente pai,
 * as posições permitidas são: `right`, `right-top`, `right-bottom`, `top`, `top-left`, `top-right`,
 * `left`, `left-top`, `left-bottom`, `bottom`, `bottom-left` e `bottom-right`.
 *
 * Também é possível escolher entre os dois eventos que podem abrir o *popover*.
 * Os eventos permitidos são: `click` e `hover`.
 *
 */
var PoPopoverBaseComponent = /** @class */ (function () {
    function PoPopoverBaseComponent() {
        // Controla se o popover fica oculto ou visível, por padrão é oculto.
        this.isHidden = true;
        this._hideArrow = false;
        this._position = PO_POPOVER_DEFAULT_POSITION;
        this._trigger = PO_POPOVER_DEFAULT_TRIGGER;
    }
    Object.defineProperty(PoPopoverBaseComponent.prototype, "hideArrow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideArrow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a seta do componente *popover*.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a seta do componente *popover*.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideArrow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPopoverBaseComponent.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            return this._position;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o po-popover abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-popover no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-popover no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-popover no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-popover abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-popover abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-popover abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-popover no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-popover no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-popover no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-popover acima do componente alvo.
         * - `top-right`: Posiciona o po-popover acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-popover acima e à esquerda do componente alvo.
         *
         *
         * @default right
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a posição que o po-popover abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "right" (direita), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-popover no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-popover no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-popover no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-popover abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-popover abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-popover abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-popover no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-popover no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-popover no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-popover acima do componente alvo.
         * - `top-right`: Posiciona o po-popover acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-popover acima e à esquerda do componente alvo.
         *
         *
         * \@default right
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._position = PO_CONTROL_POSITIONS.includes(value) ? value : PO_POPOVER_DEFAULT_POSITION;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPopoverBaseComponent.prototype, "trigger", {
        get: /**
         * @return {?}
         */
        function () {
            return this._trigger;
        },
        /**
         * @description
         *
         * Define o evento que abrirá o po-popover.
         *
         * Valores válidos:
         *  - `click`: Abre ao clicar no componente alvo.
         *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
         *
         * @default click
         * @optional
         */
        set: /**
         * \@description
         *
         * Define o evento que abrirá o po-popover.
         *
         * Valores válidos:
         *  - `click`: Abre ao clicar no componente alvo.
         *  - `hover`: Abre ao passar o mouse sobre o componente alvo.
         *
         * \@default click
         * \@optional
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._trigger = PO_POPOVER_TRIGGERS.includes(value) ? value : PO_POPOVER_DEFAULT_TRIGGER;
        },
        enumerable: true,
        configurable: true
    });
    PoPopoverBaseComponent.propDecorators = {
        hideArrow: [{ type: Input, args: ['p-hide-arrow',] }],
        position: [{ type: Input, args: ['p-position',] }],
        target: [{ type: Input, args: ['p-target',] }],
        title: [{ type: Input, args: ['p-title',] }],
        trigger: [{ type: Input, args: ['p-trigger',] }]
    };
    return PoPopoverBaseComponent;
}());
if (false) {
    /** @type {?} */
    PoPopoverBaseComponent.prototype.isHidden;
    /**
     * @type {?}
     * @private
     */
    PoPopoverBaseComponent.prototype._hideArrow;
    /**
     * @type {?}
     * @private
     */
    PoPopoverBaseComponent.prototype._position;
    /**
     * @type {?}
     * @private
     */
    PoPopoverBaseComponent.prototype._trigger;
    /**
     * \@description
     *
     * ElementRef do componente de origem responsável por abrir o popover.
     * Para utilizar o po-popover deve-se colocar uma variável no componente que vai disparar o evento
     * de abertura, exemplo:
     *
     * ```
     * <po-button
     *   p-label="Open Popover">
     * </po-button>
     *
     * <po-popover
     *   [p-origin]="poButton"
     *   [p-title]="Portinari Popover">
     * </po-popover>
     * ```
     *
     * Também deve-se criar um ViewChild para cada popover, passando como referência o elemento do
     * HTML que irá disparar o evento. Exemplo:
     *
     * ```
     * \@ViewChild(PoButtonComponent, {read: ElementRef}) poButton: PoButtonComponent;
     * ```
     * @type {?}
     */
    PoPopoverBaseComponent.prototype.target;
    /**
     * Título do popover.
     * @type {?}
     */
    PoPopoverBaseComponent.prototype.title;
    /**
     * @type {?}
     * @protected
     */
    PoPopoverBaseComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @protected
     */
    PoPopoverBaseComponent.prototype.mouseEnterListener;
    /**
     * @type {?}
     * @protected
     */
    PoPopoverBaseComponent.prototype.mouseLeaveListener;
    /**
     * @type {?}
     * @protected
     */
    PoPopoverBaseComponent.prototype.resizeListener;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@docsExtends PoPopoverBaseComponent
 *
 * \@example
 *
 * <example name="po-popover-basic" title="Portinari Popover Basic">
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-labs" title="Portinari Popover Labs">
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-credit-card" title="Portinari Popover - Credit Card">
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
 * </example>
 */
var PoPopoverComponent = /** @class */ (function (_super) {
    __extends(PoPopoverComponent, _super);
    function PoPopoverComponent(renderer, poControlPosition) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.poControlPosition = poControlPosition;
        _this.arrowDirection = 'left';
        return _this;
    }
    /**
     * @return {?}
     */
    PoPopoverComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initEventListenerFunction();
        this.setElementsControlPosition();
        this.setRendererListenInit();
    };
    /**
     * @return {?}
     */
    PoPopoverComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    PoPopoverComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.isHidden = true;
    };
    /**
     * @return {?}
     */
    PoPopoverComponent.prototype.debounceResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setPopoverPosition();
        }), 200);
    };
    /**
     * @return {?}
     */
    PoPopoverComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setElementsControlPosition();
            _this.setPopoverPosition();
            _this.setOpacity(1);
        }));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoPopoverComponent.prototype.setOpacity = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.popoverElement.nativeElement.style.opacity = value;
    };
    /**
     * @return {?}
     */
    PoPopoverComponent.prototype.setPopoverPosition = /**
     * @return {?}
     */
    function () {
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    };
    /**
     * @return {?}
     */
    PoPopoverComponent.prototype.setRendererListenInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!_this.isHidden) {
                _this.debounceResize();
            }
        }));
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.open();
            }));
            this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.close();
            }));
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.togglePopup(event);
            }));
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoPopoverComponent.prototype.togglePopup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isHidden && !this.popoverElement.nativeElement.contains(event.target) &&
            !this.target.nativeElement.contains(event.target)) {
            this.close();
        }
        else if (this.target.nativeElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoPopoverComponent.prototype.addScrollEventListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoPopoverComponent.prototype.initEventListenerFunction = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventListenerFunction = (/**
         * @return {?}
         */
        function () {
            _this.setPopoverPosition();
        });
    };
    /**
     * @private
     * @return {?}
     */
    PoPopoverComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoPopoverComponent.prototype.setElementsControlPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var popoverOffset = 8;
        this.poControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
    };
    PoPopoverComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-popover',
                    template: "<div [hidden]=\"isHidden\" class=\"po-popover\" #popoverElement>\n\n  <div *ngIf=\"!hideArrow\" class=\"po-popover-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"po-popover-content\">\n    <span *ngIf=\"title\" class=\"po-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
                    providers: [PoControlPositionService]
                }] }
    ];
    /** @nocollapse */
    PoPopoverComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: PoControlPositionService }
    ]; };
    PoPopoverComponent.propDecorators = {
        popoverElement: [{ type: ViewChild, args: ['popoverElement', { read: ElementRef, static: true },] }]
    };
    return PoPopoverComponent;
}(PoPopoverBaseComponent));
if (false) {
    /** @type {?} */
    PoPopoverComponent.prototype.arrowDirection;
    /** @type {?} */
    PoPopoverComponent.prototype.timeoutResize;
    /** @type {?} */
    PoPopoverComponent.prototype.eventListenerFunction;
    /** @type {?} */
    PoPopoverComponent.prototype.popoverElement;
    /**
     * @type {?}
     * @private
     */
    PoPopoverComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoPopoverComponent.prototype.poControlPosition;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente po-popover.
 */
var PoPopoverModule = /** @class */ (function () {
    function PoPopoverModule() {
    }
    PoPopoverModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [PoPopoverComponent],
                    exports: [PoPopoverComponent]
                },] }
    ];
    return PoPopoverModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Portinari.
 */
var PoTimePipe = /** @class */ (function () {
    function PoTimePipe() {
    }
    /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    PoTimePipe.prototype.transform = /**
     * @param {?} time
     * @param {?=} format
     * @return {?}
     */
    function (time, format) {
        /** @type {?} */
        var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            /** @type {?} */
            var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            /** @type {?} */
            var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            /** @type {?} */
            var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    };
    /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    PoTimePipe.prototype.addDotMiliseconds = /**
     * @private
     * @param {?} miliseconds
     * @param {?} amountOfF
     * @return {?}
     */
    function (miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    };
    /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    PoTimePipe.prototype.formatValue = /**
     * @private
     * @param {?} time
     * @param {?} format
     * @param {?} formatMiliseconds
     * @param {?} miliseconds
     * @return {?}
     */
    function (time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            /** @type {?} */
            var hour = time.substring(0, 2);
            /** @type {?} */
            var minutes = time.substring(3, 5);
            /** @type {?} */
            var seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace("." + formatMiliseconds, miliseconds);
            return format;
        }
        else {
            return time;
        }
    };
    /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    PoTimePipe.prototype.getFormatMiliseconds = /**
     * @private
     * @param {?} amountOfF
     * @return {?}
     */
    function (amountOfF) {
        /** @type {?} */
        var formatMiliseconds = '';
        for (var i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    };
    PoTimePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'po_time'
                },] }
    ];
    return PoTimePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do pipe `po-time`.
 */
var PoTimeModule = /** @class */ (function () {
    function PoTimeModule() {
    }
    PoTimeModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        PoTimePipe
                    ],
                    imports: [],
                    exports: [
                        PoTimePipe
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];
    return PoTimeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
var PoTableColumnIconComponent = /** @class */ (function () {
    function PoTableColumnIconComponent() {
        this._icons = [];
    }
    Object.defineProperty(PoTableColumnIconComponent.prototype, "icons", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icons;
        },
        /** Lista de colunas com ícones. */
        set: /**
         * Lista de colunas com ícones.
         * @param {?} icons
         * @return {?}
         */
        function (icons) {
            this._icons = icons || [];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} column
     * @return {?}
     */
    PoTableColumnIconComponent.prototype.click = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        column.action(this.row, column);
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PoTableColumnIconComponent.prototype.getColor = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return "po-text-" + color;
        }
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PoTableColumnIconComponent.prototype.getIcon = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.icon || column.value;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PoTableColumnIconComponent.prototype.isClickable = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.action && !this.isDisabled(column);
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PoTableColumnIconComponent.prototype.isDisabled = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.disabled ? column.disabled(this.row) : false;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoTableColumnIconComponent.prototype.trackByFunction = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    PoTableColumnIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-column-icon',
                    template: "<po-table-icon *ngFor=\"let column of icons trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column)\">\n</po-table-icon>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PoTableColumnIconComponent.propDecorators = {
        icons: [{ type: Input, args: ['p-icons',] }],
        row: [{ type: Input, args: ['p-row',] }]
    };
    return PoTableColumnIconComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableColumnIconComponent.prototype._icons;
    /**
     * Dados da linha da tabela.
     * @type {?}
     */
    PoTableColumnIconComponent.prototype.row;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação da representação da legenda, em formato de texto .
 */
var PoTableColumnLabelComponent = /** @class */ (function () {
    function PoTableColumnLabelComponent(poColorPaletteService) {
        this.poColorPaletteService = poColorPaletteService;
    }
    Object.defineProperty(PoTableColumnLabelComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /** Objeto com os dados do label */
        set: /**
         * Objeto com os dados do label
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                value.color = this.poColorPaletteService.getColor(value);
            }
            this._value = value;
        },
        enumerable: true,
        configurable: true
    });
    PoTableColumnLabelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-column-label',
                    template: "<span\n  [class]=\"'po-table-column-label po-' + value?.color\">\n  {{ value?.label }}\n</span>\n"
                }] }
    ];
    /** @nocollapse */
    PoTableColumnLabelComponent.ctorParameters = function () { return [
        { type: PoColorPaletteService }
    ]; };
    PoTableColumnLabelComponent.propDecorators = {
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoTableColumnLabelComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableColumnLabelComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnLabelComponent.prototype.poColorPaletteService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir link nas colunas.
 */
var PoTableColumnLinkComponent = /** @class */ (function () {
    function PoTableColumnLinkComponent() {
    }
    Object.defineProperty(PoTableColumnLinkComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.disabled) {
                return 'disabled';
            }
            if (this.action) {
                return 'action';
            }
            if (isExternalLink(this.link)) {
                return 'externalLink';
            }
            return 'internalLink';
        },
        enumerable: true,
        configurable: true
    });
    PoTableColumnLinkComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-column-link',
                    template: "<ng-container [ngSwitch]=\"type\">\n  <p *ngSwitchCase=\"'disabled'\" class=\"po-table-link-disabled\">{{ value }}</p>\n  <a *ngSwitchCase=\"'action'\" class=\"po-table-link\" (click)=\"action(value, row)\">{{ value }}</a>\n  <a *ngSwitchCase=\"'externalLink'\" class=\"po-table-link\" [href]=\"link\" target=\"_blank\">{{ value }}</a>\n  <a *ngSwitchCase=\"'internalLink'\" class=\"po-table-link\" [routerLink]=\"link\">{{ value }}</a>\n</ng-container>\n"
                }] }
    ];
    PoTableColumnLinkComponent.propDecorators = {
        action: [{ type: Input, args: ['p-action',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        link: [{ type: Input, args: ['p-link',] }],
        row: [{ type: Input, args: ['p-row',] }],
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoTableColumnLinkComponent;
}());
if (false) {
    /** @type {?} */
    PoTableColumnLinkComponent.prototype.action;
    /** @type {?} */
    PoTableColumnLinkComponent.prototype.disabled;
    /** @type {?} */
    PoTableColumnLinkComponent.prototype.link;
    /** @type {?} */
    PoTableColumnLinkComponent.prototype.row;
    /** @type {?} */
    PoTableColumnLinkComponent.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PoTableColumnManagerMaxColumnsDefault = 99999;
/** @type {?} */
var poTableColumnManagerLiteralsDefault = {
    en: {
        columnsManager: 'Columns manager',
        restoreDefault: 'Restore default'
    },
    es: {
        columnsManager: 'Gerente de columna',
        restoreDefault: 'Restaurar por defecto'
    },
    pt: {
        columnsManager: 'Gerenciador de colunas',
        restoreDefault: 'Restaurar padrão'
    },
    ru: {
        columnsManager: 'менеджер колонок',
        restoreDefault: 'сброс настроек'
    }
};
var PoTableColumnManagerComponent = /** @class */ (function () {
    function PoTableColumnManagerComponent(renderer) {
        this.renderer = renderer;
        this._maxColumns = PoTableColumnManagerMaxColumnsDefault;
        this.columnsOptions = [];
        this.literals = __assign({}, poTableColumnManagerLiteralsDefault[poLocaleDefault], poTableColumnManagerLiteralsDefault[browserLanguage()]);
        this.visibleColumns = [];
        this.defaultColumns = [];
        this.columns = [];
        this.visibleColumnsChange = new EventEmitter();
    }
    Object.defineProperty(PoTableColumnManagerComponent.prototype, "maxColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxColumns;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxColumns = convertToInt(value, PoTableColumnManagerMaxColumnsDefault);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateColumnsOptions(this.columns);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var columns = changes.columns, maxColumns = changes.maxColumns, target = changes.target;
        if (target && target.firstChange) {
            this.initializeListeners();
        }
        if (columns) {
            this.onChangeColumns(columns);
        }
        if (maxColumns) {
            this.updateColumnsOptions(this.columns);
        }
    };
    /**
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @param {?} checkedColumns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.onChangeVisibleColumns = /**
     * @param {?} checkedColumns
     * @return {?}
     */
    function (checkedColumns) {
        this.disableColumnsOptions(this.columnsOptions);
        /** @type {?} */
        var visibleTableColumns = this.getVisibleTableColumns(checkedColumns);
        this.visibleColumnsChange.emit(visibleTableColumns);
    };
    /**
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.restore = /**
     * @return {?}
     */
    function () {
        this.updateColumnsOptions(this.defaultColumns);
    };
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.disableColumnsOptions = 
    // desabilitará as colunas, que não estiverem selecionadas, após exeder o numero maximo de colunas.
    /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    function (columns) {
        var _this = this;
        if (columns === void 0) { columns = []; }
        // necessario timeout para que seja possivel atualizar os columnsOptions apos a mudança do model
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.columnsOptions = columns.map((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return (__assign({}, column, { disabled: _this.isDisableColumn(column.value) })); }));
        }));
    };
    /**
     * @private
     * @param {?} column
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.getColumnTitleLabel = /**
     * @private
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.label || capitalizeFirstLetter(column.property);
    };
    /** Retorna um Array de column.property das colunas que são visiveis. */
    /**
     * Retorna um Array de column.property das colunas que são visiveis.
     * @private
     * @param {?} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.getVisibleColumns = /**
     * Retorna um Array de column.property das colunas que são visiveis.
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        var _this = this;
        /** @type {?} */
        var visibleColumns = [];
        columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (column.visible !== false && visibleColumns.length < _this.maxColumns && column.type !== 'detail') {
                visibleColumns.push(column.property);
            }
        }));
        return visibleColumns;
    };
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    /**
     * Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas.
     * @private
     * @param {?} visibleColumns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.getVisibleTableColumns = /**
     * Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas.
     * @private
     * @param {?} visibleColumns
     * @return {?}
     */
    function (visibleColumns) {
        return this.columns.map((/**
         * @param {?} column
         * @return {?}
         */
        function (column) { return (__assign({}, column, { visible: visibleColumns.includes(column.property) || column.type === 'detail' })); }));
    };
    /**
     * @private
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            if (_this.popover) {
                _this.popover.close();
            }
        }));
    };
    /**
     * @private
     * @param {?} property
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.isDisableColumn = /**
     * @private
     * @param {?} property
     * @return {?}
     */
    function (property) {
        return this.visibleColumns.length >= this.maxColumns ? !this.visibleColumns.includes(property) : false;
    };
    /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.mapTableColumnsToCheckboxOptions = /**
     * @private
     * @param {?=} columns
     * @return {?}
     */
    function (columns) {
        var _this = this;
        if (columns === void 0) { columns = []; }
        /** @type {?} */
        var columnsOptions = [];
        columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (column.type !== 'detail') {
                columnsOptions.push({
                    value: column.property,
                    label: _this.getColumnTitleLabel(column),
                    disabled: _this.isDisableColumn(column.property)
                });
            }
        }));
        return columnsOptions;
    };
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.onChangeColumns = /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        var firstChange = columns.firstChange, _a = columns.currentValue, currentValue = _a === void 0 ? [] : _a, _b = columns.previousValue, previousValue = _b === void 0 ? [] : _b;
        // atualizara o defaultColumns, quando for a primeira vez ou quando o defaultColumns for diferente do currentValue
        if (firstChange || (this.defaultColumns.length !== currentValue.length)) {
            this.defaultColumns = currentValue;
        }
        // verifica se o valor anterior é diferente do atual para atualizar as columnsOptions apenas quando for necessario
        if (previousValue.length !== currentValue.length) {
            this.updateColumnsOptions(currentValue);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    PoTableColumnManagerComponent.prototype.updateColumnsOptions = /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        this.visibleColumns = this.getVisibleColumns(columns);
        this.columnsOptions = this.mapTableColumnsToCheckboxOptions(columns);
        this.onChangeVisibleColumns(this.visibleColumns);
    };
    PoTableColumnManagerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-column-manager',
                    template: "<po-popover #popover *ngIf=\"target\" [p-target]=\"target\" p-position=\"bottom-left\">\n\n  <div class=\"po-table-column-manager-header\">\n    <div class=\"po-table-column-manager-header-title\">{{ literals.columnsManager }}</div>\n\n    <div class=\"po-table-column-manager-header-close\">\n      <button class=\"po-table-column-manager-header-close-button po-clickable po-icon po-icon-close\" (click)=\"popover.close()\">\n      </button>\n    </div>\n  </div>\n\n  <div class=\"po-table-column-manager-body\">\n    <po-checkbox-group\n      name=\"visibleColumns\"\n      [(ngModel)]=\"visibleColumns\"\n      p-columns=\"1\"\n      [p-options]=\"columnsOptions\"\n      (p-change)=\"onChangeVisibleColumns($event)\">\n    </po-checkbox-group>\n  </div>\n\n  <div class=\"po-table-column-manager-footer\">\n    <po-button\n      class=\"po-table-column-manager-footer-restore\"\n      p-small\n      p-type=\"link\"\n      [p-label]=\"literals.restoreDefault\"\n      (p-click)=\"restore()\">\n    </po-button>\n  </div>\n</po-popover>\n"
                }] }
    ];
    /** @nocollapse */
    PoTableColumnManagerComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    PoTableColumnManagerComponent.propDecorators = {
        columns: [{ type: Input, args: ['p-columns',] }],
        maxColumns: [{ type: Input, args: ['p-max-columns',] }],
        target: [{ type: Input, args: ['p-target',] }],
        visibleColumnsChange: [{ type: Output, args: ['p-visible-columns-change',] }],
        popover: [{ type: ViewChild, args: [PoPopoverComponent, { static: false },] }]
    };
    return PoTableColumnManagerComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype._maxColumns;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.columnsOptions;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.literals;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.visibleColumns;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.defaultColumns;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.resizeListener;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.columns;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.target;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.visibleColumnsChange;
    /** @type {?} */
    PoTableColumnManagerComponent.prototype.popover;
    /**
     * @type {?}
     * @private
     */
    PoTableColumnManagerComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoTableColumnSortType = {
    /** Ordenação ascendente */
    Ascending: 'ascending',
    /** Ordenação descendente */
    Descending: 'descending',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poTableContainer = ['border', 'shadow'];
/** @type {?} */
var poTableContainerDefault = 'border';
/** @type {?} */
var poTableLiteralsDefault = {
    en: (/** @type {?} */ ({
        noColumns: 'Columns are not defined',
        noData: 'No data found',
        noVisibleColumn: 'No visible column',
        loadingData: 'Loading',
        loadMoreData: 'Load more data',
        seeCompleteSubtitle: 'See complete subtitle',
        completeSubtitle: 'Complete subtitle',
        columnsManager: 'Columns manager'
    })),
    es: (/** @type {?} */ ({
        noColumns: 'Columnas no definidas',
        noData: 'Datos no encontrados',
        noVisibleColumn: 'Sin columnas visibles',
        loadingData: 'Cargando datos',
        loadMoreData: 'Cargar más resultados',
        seeCompleteSubtitle: 'Ver subtitulo completo',
        completeSubtitle: 'Subtitulo completo',
        columnsManager: 'Gerente de columna'
    })),
    pt: (/** @type {?} */ ({
        noColumns: 'Nenhuma definição de colunas',
        noData: 'Nenhum dado encontrado',
        noVisibleColumn: 'Nenhuma coluna visível',
        loadingData: 'Carregando',
        loadMoreData: 'Carregar mais resultados',
        seeCompleteSubtitle: 'Ver legenda completa',
        completeSubtitle: 'Legenda completa',
        columnsManager: 'Gerenciador de colunas'
    })),
    ru: (/** @type {?} */ ({
        noColumns: 'Нет определения столбца',
        noData: 'Данные не найдены',
        noVisibleColumn: 'нет видимых столбцов',
        loadingData: 'погрузка',
        loadMoreData: 'загрузка',
        seeCompleteSubtitle: 'Посмотреть полный субтитр',
        completeSubtitle: 'Полный заголовок',
        columnsManager: 'менеджер колонок'
    }))
};
/**
 * \@description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 * @abstract
 */
var PoTableBaseComponent = /** @class */ (function () {
    function PoTableBaseComponent(poDate) {
        this.poDate = poDate;
        this._actions = [];
        this._columns = [];
        this._hideDetail = false;
        this._hideTextOverflow = false;
        this._loading = false;
        /**
         * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allSelected = new EventEmitter();
        /**
         * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
         */
        this.allUnselected = new EventEmitter();
        /**
         * Ação executada ao selecionar uma linha do `po-table`.
         */
        this.selected = new EventEmitter();
        /**
         * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
         * não é visível.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que está ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação executada ao ordenar colunas da tabela.
         *
         * Recebe um objeto `{ column, type }` onde:
         *
         * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
         * - type (`PoTableColumnSortType`): tipo da ordenação.
         */
        this.sortBy = new EventEmitter();
        /**
         * Ação executada ao desmarcar a seleção de uma linha do `po-table`.
         */
        this.unselected = new EventEmitter();
        this.selectAll = false;
        this.sortedColumn = { property: (/** @type {?} */ (null)), ascending: true };
    }
    Object.defineProperty(PoTableBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         */
        set: /**
         * \@description
         *
         * Lista de itens da tabela.
         * > Se falso, será inicializado como um *array* vazio.
         * @param {?} items
         * @return {?}
         */
        function (items) {
            this._items = Array.isArray(items) ? items : [];
            // when haven't items, selectAll should be unchecked.
            if (!this.hasItems()) {
                this.selectAll = false;
            }
            else if (!this.hasColumns) {
                this.columns = this.getDefaultColumns(items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
         * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
         * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
         *
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            this._columns = columns || [];
            if (this._columns.length) {
                this.setColumnLink();
                this.calculateWidthHeaders();
            }
            else if (this.hasItems()) {
                this._columns = this.getDefaultColumns(this.items[0]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "container", {
        get: /**
         * @return {?}
         */
        function () {
            return this._container;
        },
        /**
         * @optional
         *
         * @description
         *
         * Adiciona um contorno arredondado ao `po-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * @default `border`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Adiciona um contorno arredondado ao `po-table`, as opções são:
         * - `border`: com bordas/linhas.
         * - `shadow`: com sombras.
         *
         * \@default `border`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._container = poTableContainer.includes(value) ? value : poTableContainerDefault;
            this.showContainer(this._container);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "hideTextOverflow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideTextOverflow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
         * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
         * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
         * @param {?} hideTextOverflow
         * @return {?}
         */
        function (hideTextOverflow) {
            this._hideTextOverflow = convertToBoolean(hideTextOverflow);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura da tabela em *pixels* e fixa o cabeçalho.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
            this.calculateHeightTableContainer(height);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "hideDetail", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideDetail;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita a visualização da lista de detalhes de cada linha da coluna.
         *
         * \@default `false`
         * @param {?} hideDetail
         * @return {?}
         */
        function (hideDetail) {
            this._hideDetail = hideDetail != null && hideDetail.toString() === '' ? true : convertToBoolean(hideDetail);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poTableLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-table
         *   [p-literals]="customLiterals">
         * </po-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-table`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    loadMoreData: 'Buscar mais dados',
         *    loadingData: 'Processando',
         *    noColumns: 'Sem colunas',
         *    noData: 'Sem dados',
         *    seeCompleteSubtitle: 'Mostrar legenda completa',
         *    completeSubtitle: 'Todas legendas'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoTableLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-table
         *   [p-literals]="customLiterals">
         * </po-table>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poTableLiteralsDefault[poLocaleDefault], poTableLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poTableLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        /**
         * @optional
         *
         * @description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
         *
         * \@default `false`
         * @param {?} loading
         * @return {?}
         */
        function (loading) {
            this._loading = convertToBoolean(loading);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "checkbox", {
        get: /**
         * @return {?}
         */
        function () {
            return this._checkbox;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita na primeira coluna a opção de selecionar linhas,
         * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
         * > Exemplo: `item.$selected` ou `item['$selected']`.
         * > Os itens filhos possuem comportamento independente do item pai.
         *
         * \@default `false`
         * @param {?} checkbox
         * @return {?}
         */
        function (checkbox) {
            this._checkbox = (/** @type {?} */ (checkbox)) === '' ? true : convertToBoolean(checkbox);
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de ações.
         *
         * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
         * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
         *
         * **A coluna de ações não será exibida quando:**
         *  - a lista conter valores inválidos ou indefinidos.
         *  - tenha uma única ação e a mesma não for visível.
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            this._actions = actions;
            this.calculateWidthHeaders();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setSort", {
        set: /**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this.sort = sort === '' ? false : convertToBoolean(sort);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setShowMoreDisabled", {
        set: /**
         * @param {?} showMoreDisabled
         * @return {?}
         */
        function (showMoreDisabled) {
            this.showMoreDisabled = showMoreDisabled === '' ? false : convertToBoolean(showMoreDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setStriped", {
        set: /**
         * @param {?} striped
         * @return {?}
         */
        function (striped) {
            this.striped = striped === '' ? false : convertToBoolean(striped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setHideSelectAll", {
        set: /**
         * @param {?} hideSelectAll
         * @return {?}
         */
        function (hideSelectAll) {
            this.hideSelectAll = hideSelectAll === '' ? false : convertToBoolean(hideSelectAll);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "setSingleSelect", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.singleSelect = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableBaseComponent.prototype, "sortType", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.sortedColumn.ascending ? PoTableColumnSortType.Ascending : PoTableColumnSortType.Descending;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        if (this.singleSelect || this.hideSelectAll) {
            this.selectAll = false;
            this.hideSelectAll = true;
        }
    };
    Object.defineProperty(PoTableBaseComponent.prototype, "hasColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.columns && this.columns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.selectAllRows = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.$selected = _this.selectAll;
            }));
            this.emitSelectAllEvents(this.selectAll, this.items);
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.selectRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected = !row.$selected;
        this.emitSelectEvents(row);
        this.configAfterSelectRow(this.items, row);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.selectDetailRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this.emitSelectEvents(row);
    };
    // Retorna a coluna da lista de colunas que é do tipo detail
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.getColumnMasterDetail = 
    // Retorna a coluna da lista de colunas que é do tipo detail
    /**
     * @return {?}
     */
    function () {
        return this.columns.find((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return col.type === 'detail'; }));
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    PoTableBaseComponent.prototype.getClassColor = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        return column.color ? "po-text-" + this.getColumnColor(row, column) : '';
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    PoTableBaseComponent.prototype.getColumnColor = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        /** @type {?} */
        var columnColor = column.color;
        return isTypeof(columnColor, 'function') ? columnColor(row, column.property) : columnColor;
    };
    // Retorna as colunas com status
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.getSubtitleColumns = 
    // Retorna as colunas com status
    /**
     * @return {?}
     */
    function () {
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return col.type === 'subtitle'; }));
    };
    // Retorna as colunas com ícones
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.getIconColumns = 
    // Retorna as colunas com ícones
    /**
     * @return {?}
     */
    function () {
        return this.columns.filter((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return col.type === 'icon'; }));
    };
    // Retorna o nome da coluna do tipo detail
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.getNameColumnDetail = 
    // Retorna o nome da coluna do tipo detail
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var detail = this.getColumnMasterDetail();
        return detail ? detail.property : null;
    };
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     * @return {?}
     */
    PoTableBaseComponent.prototype.getSelectedRows = /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     * @return {?}
     */
    function () {
        return this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected; }));
    };
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     * @return {?}
     */
    PoTableBaseComponent.prototype.getUnselectedRows = /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     * @return {?}
     */
    function () {
        return this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !item.$selected; }));
    };
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.toggleRowAction = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var toggleShowAction = row.$showAction;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.$showAction) {
                item.$showAction = false;
            }
        }));
        row.$showAction = !toggleShowAction;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PoTableBaseComponent.prototype.sortColumn = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        if (!this.sort || column.type === 'detail') {
            return;
        }
        this.sortedColumn.ascending = this.sortedColumn.property === column ? !this.sortedColumn.ascending : true;
        this.sortArray(column, this.sortedColumn.ascending);
        this.sortBy.emit({ column: column, type: this.sortType });
        this.sortedColumn.property = column;
    };
    /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    PoTableBaseComponent.prototype.sortArray = /**
     * @param {?} column
     * @param {?} ascending
     * @return {?}
     */
    function (column, ascending) {
        var _this = this;
        this.items.sort((/**
         * @param {?} leftSide
         * @param {?} rightSide
         * @return {?}
         */
        function (leftSide, rightSide) {
            if (column.type === 'date' || column.type === 'dateTime') {
                return _this.poDate.sortDate(leftSide[column.property], rightSide[column.property], ascending);
            }
            else {
                return sortValues(leftSide[column.property], rightSide[column.property], ascending);
            }
        }));
    };
    /**
     * @return {?}
     */
    PoTableBaseComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sort = this.sortedColumn.property ? { column: this.sortedColumn.property, type: this.sortType } : undefined;
        this.showMore.emit(sort);
    };
    /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    PoTableBaseComponent.prototype.getDefaultColumns = /**
     * @protected
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var keys = Object.keys(item);
        return keys.filter((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return (typeof item[key] !== 'object'); })).map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return { label: capitalizeFirstLetter(key), property: key };
        }));
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.configAfterSelectRow = /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    function (rows, row) {
        if (this.singleSelect) {
            this.unselectOtherRows(rows, row);
        }
        else if (!this.hideSelectAll) {
            this.selectAll = this.isEverySelected(rows);
        }
    };
    /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    PoTableBaseComponent.prototype.emitSelectAllEvents = /**
     * @private
     * @param {?} selectAll
     * @param {?} rows
     * @return {?}
     */
    function (selectAll, rows) {
        selectAll ? this.allSelected.emit(rows) : this.allUnselected.emit(rows);
    };
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.emitSelectEvents = /**
     * @private
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected ? this.selected.emit(row) : this.unselected.emit(row);
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    PoTableBaseComponent.prototype.isEverySelected = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var someCheckedOrIndeterminate = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected || item.$selected === null; });
        /** @type {?} */
        var everyChecked = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected; });
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    PoTableBaseComponent.prototype.setColumnLink = /**
     * @private
     * @return {?}
     */
    function () {
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (column['type'] === 'link' && !column['link']) {
                column['link'] = 'link';
            }
        }));
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    PoTableBaseComponent.prototype.unselectOtherRows = /**
     * @private
     * @param {?} rows
     * @param {?} row
     * @return {?}
     */
    function (rows, row) {
        rows.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item !== row) {
                item.$selected = false;
            }
        }));
    };
    PoTableBaseComponent.propDecorators = {
        items: [{ type: Input, args: ['p-items',] }],
        columns: [{ type: Input, args: ['p-columns',] }],
        container: [{ type: Input, args: ['p-container',] }],
        hideTextOverflow: [{ type: Input, args: ['p-hide-text-overflow',] }],
        height: [{ type: Input, args: ['p-height',] }],
        hideDetail: [{ type: Input, args: ['p-hide-detail',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        loading: [{ type: Input, args: ['p-loading',] }],
        checkbox: [{ type: Input, args: ['p-checkbox',] }],
        actions: [{ type: Input, args: ['p-actions',] }],
        setSort: [{ type: Input, args: ['p-sort',] }],
        setShowMoreDisabled: [{ type: Input, args: ['p-show-more-disabled',] }],
        setStriped: [{ type: Input, args: ['p-striped',] }],
        setHideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
        setSingleSelect: [{ type: Input, args: ['p-single-select',] }],
        maxColumns: [{ type: Input, args: ['p-max-columns',] }],
        allSelected: [{ type: Output, args: ['p-all-selected',] }],
        allUnselected: [{ type: Output, args: ['p-all-unselected',] }],
        selected: [{ type: Output, args: ['p-selected',] }],
        showMore: [{ type: Output, args: ['p-show-more',] }],
        sortBy: [{ type: Output, args: ['p-sort-by',] }],
        unselected: [{ type: Output, args: ['p-unselected',] }]
    };
    return PoTableBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._checkbox;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._container;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._hideDetail;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._hideTextOverflow;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype._loading;
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.sort;
    /**
     * \@description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.showMoreDisabled;
    /**
     * \@description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.striped;
    /**
     * \@description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * \@default `false`
     * @type {?}
     */
    PoTableBaseComponent.prototype.hideSelectAll;
    /**
     * \@description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     * @type {?}
     */
    PoTableBaseComponent.prototype.singleSelect;
    /**
     * \@optional
     *
     * \@description
     *
     * Define uma quantidade máxima de colunas que serão exibidas na tabela.
     *
     * Quando chegar no valor informado, as colunas que não estiverem selecionadas ficarão
     * desabilitadas e caso houver mais colunas visíveis do que o permitido, as excedentes
     * serão ignoradas por ordem de posição.
     * @type {?}
     */
    PoTableBaseComponent.prototype.maxColumns;
    /**
     * Ação executada quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    PoTableBaseComponent.prototype.allSelected;
    /**
     * Ação executada quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.
     * @type {?}
     */
    PoTableBaseComponent.prototype.allUnselected;
    /**
     * Ação executada ao selecionar uma linha do `po-table`.
     * @type {?}
     */
    PoTableBaseComponent.prototype.selected;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que está ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     * @type {?}
     */
    PoTableBaseComponent.prototype.showMore;
    /**
     * Ação executada ao ordenar colunas da tabela.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     * @type {?}
     */
    PoTableBaseComponent.prototype.sortBy;
    /**
     * Ação executada ao desmarcar a seleção de uma linha do `po-table`.
     * @type {?}
     */
    PoTableBaseComponent.prototype.unselected;
    /** @type {?} */
    PoTableBaseComponent.prototype.selectAll;
    /** @type {?} */
    PoTableBaseComponent.prototype.sortedColumn;
    /**
     * @type {?}
     * @private
     */
    PoTableBaseComponent.prototype.poDate;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    PoTableBaseComponent.prototype.calculateHeightTableContainer = function (height) { };
    /**
     * @abstract
     * @return {?}
     */
    PoTableBaseComponent.prototype.calculateWidthHeaders = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} container
     * @return {?}
     */
    PoTableBaseComponent.prototype.showContainer = function (container) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <div *p-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <po-table
 *        [p-columns]="columns"
 *        [p-items]="items">
 *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
var PoTableRowTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoTableRowTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoTableRowTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-table-row-template]'
                },] }
    ];
    /** @nocollapse */
    PoTableRowTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    PoTableRowTemplateDirective.propDecorators = {
        poTableRowTemplateShow: [{ type: Input, args: ['p-table-row-template-show',] }]
    };
    return PoTableRowTemplateDirective;
}());
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor booleano, informando se apresentará o template da linha.
     * Serão passados o objeto da linha e o indice da mesma por parâmetro, para que seja possível
     * tomar uma decisão a partir do objeto da linha corrente.
     *
     * Caso não ser utilizado esta propriedade, serão apresentados todos os detalhes das linhas.
     *
     * \@default `true`
     * @type {?}
     */
    PoTableRowTemplateDirective.prototype.poTableRowTemplateShow;
    /** @type {?} */
    PoTableRowTemplateDirective.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoTableBaseComponent
 *
 * \@example
 *
 * <example name="po-table-basic" title="Portinari Table Basic">
 *  <file name="sample-po-table-basic/sample-po-table-basic.component.ts"> </file>
 *  <file name="sample-po-table-basic/sample-po-table-basic.component.html"> </file>
 * </example>
 *
 * <example name="po-table-labs" title="Portinari Table Labs">
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.html"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.component.po.ts"> </file>
 *  <file name="sample-po-table-labs/sample-po-table-labs.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-transport" title="Portinari Table - Transport">
 *  <file name="sample-po-table-transport/sample-po-table-transport.component.ts"> </file>
 *  <file name="sample-po-table-transport/sample-po-table-transport.component.html"> </file>
 *  <file name="sample-po-table-transport/sample-po-table-transport.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-airfare" title="Portinari Table - Airfare">
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.ts"> </file>
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.component.html"> </file>
 *  <file name="sample-po-table-airfare/sample-po-table-airfare.service.ts"> </file>
 * </example>
 *
 * <example name="po-table-components" title="Portinari Table - Po Field Components">
 *  <file name="sample-po-table-components/sample-po-table-components.component.ts"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.component.html"> </file>
 *  <file name="sample-po-table-components/sample-po-table-components.service.ts"> </file>
 * </example>
 */
var PoTableComponent = /** @class */ (function (_super) {
    __extends(PoTableComponent, _super);
    function PoTableComponent(poDate, differs, viewRef, renderer, changeDetector, decimalPipe, router) {
        var _this = _super.call(this, poDate) || this;
        _this.changeDetector = changeDetector;
        _this.decimalPipe = decimalPipe;
        _this.router = router;
        _this.tableOpacity = 0;
        _this.initialized = false;
        _this.visibleElement = false;
        _this.parentRef = viewRef['_view']['component'];
        _this.differ = differs.find([]).create(null);
        // TODO: #5550 ao remover este listener, no portal, quando as colunas forem fixas não sofrem
        // alteração de largura, pois o ngDoCheck não é executado.
        _this.clickListener = renderer.listen('document', 'click', (/**
         * @return {?}
         */
        function () { }));
        _this.resizeListener = renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.debounceResize();
        }));
        return _this;
    }
    Object.defineProperty(PoTableComponent.prototype, "columnManagerTarget", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columnManagerTarget;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._columnManagerTarget = value;
            this.changeDetector.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "detailHideSelect", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var masterDetail = this.getColumnMasterDetail();
            return masterDetail && masterDetail.detail ? masterDetail.detail.hideSelect : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "displayColumnManagerCell", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.visibleActions.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "firstAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "hasCheckboxColumn", {
        get: /**
         * @return {?}
         */
        function () {
            return this.checkbox && this.hasItems() && this.hasMainColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "hasFooter", {
        get: /**
         * @return {?}
         */
        function () {
            return this.hasItems() && this.hasVisibleSubtitleColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "hasMainColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.mainColumns.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "hasMasterDetailColumn", {
        get: /**
         * @return {?}
         */
        function () {
            return this.hasMainColumns &&
                this.hasItems() && !this.hideDetail && (this.getColumnMasterDetail() !== undefined || this.hasRowTemplate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "hasRowTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.tableRowTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "hasValidColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.validColumns.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "hasVisibleSubtitleColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getSubtitleColumns().some((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.visible !== false; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "isSingleAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions.length === 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "mainColumns", {
        // Colunas que são inseridas no <head> da tabela
        get: 
        // Colunas que são inseridas no <head> da tabela
        /**
         * @return {?}
         */
        function () {
            return this.validColumns.filter((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.visible !== false; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "validColumns", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var typesValid = ['string', 'number', 'boolean', 'date', 'time', 'dateTime', 'currency', 'subtitle', 'link', 'label', 'icon'];
            return this.columns.filter((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return !col.type || typesValid.includes(col.type); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableComponent.prototype, "visibleActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actions && this.actions.filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.visible !== false; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialized = true;
        if (!this.container) {
            this.hideContainer();
        }
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkChangesItems();
        this.verifyCalculateHeightTableContainer();
        // Permite que os cabeçalhos sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (this.tableWrapperElement.nativeElement.offsetWidth && !this.visibleElement && this.initialized) {
            this.debounceResize();
            this.visibleElement = true;
        }
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    PoTableComponent.prototype.checkDisabled = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        return column.disabled ? column.disabled(row) : false;
    };
    /**
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    PoTableComponent.prototype.executeTableAction = /**
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    function (row, tableAction) {
        if (!row.disabled && !this.validateTableAction(row, tableAction)) {
            tableAction.action.call(this.parentRef, row);
            this.toggleRowAction(row);
        }
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.columnCountForMasterDetail = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var columnManager = 1;
        return (this.mainColumns.length + 1) + (this.actions.length > 0 ? 1 : 0) + (this.checkbox ? 1 : 0) + columnManager;
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.columnCount = /**
     * @return {?}
     */
    function () {
        return (this.mainColumns.length +
            (this.actions.length > 0 ? 1 : 0) +
            (this.checkbox ? 1 : 0) +
            (!this.hideDetail && this.getColumnMasterDetail() !== undefined ? 1 : 0));
    };
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    PoTableComponent.prototype.formatNumber = /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    };
    /**
     * @param {?} row
     * @param {?} subtitleColumn
     * @return {?}
     */
    PoTableComponent.prototype.getSubtitleColumn = /**
     * @param {?} row
     * @param {?} subtitleColumn
     * @return {?}
     */
    function (row, subtitleColumn) {
        return subtitleColumn.subtitles.find((/**
         * @param {?} subtitleItem
         * @return {?}
         */
        function (subtitleItem) { return row[subtitleColumn.property] === subtitleItem.value; }));
    };
    /**
     * @param {?} rowValue
     * @param {?} columnBoolean
     * @return {?}
     */
    PoTableComponent.prototype.getBooleanLabel = /**
     * @param {?} rowValue
     * @param {?} columnBoolean
     * @return {?}
     */
    function (rowValue, columnBoolean) {
        if (rowValue || rowValue === false || rowValue === 0) {
            rowValue = convertToBoolean(rowValue);
            if (columnBoolean.boolean) {
                return rowValue ? columnBoolean.boolean.trueLabel || 'Sim' : columnBoolean.boolean.falseLabel || 'Não';
            }
            else {
                return rowValue ? 'Sim' : 'Não';
            }
        }
        return rowValue;
    };
    /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    PoTableComponent.prototype.getColumnIcons = /**
     * @param {?} row
     * @param {?} column
     * @return {?}
     */
    function (row, column) {
        if (column.icons && column.icons.length) {
            return column.icons;
        }
        /** @type {?} */
        var rowIcons = row[column.property];
        if (rowIcons && rowIcons.length) {
            return this.getColumnIconsFromProperty(rowIcons, column);
        }
    };
    /**
     * @param {?} row
     * @param {?} columnLabel
     * @return {?}
     */
    PoTableComponent.prototype.getColumnLabel = /**
     * @param {?} row
     * @param {?} columnLabel
     * @return {?}
     */
    function (row, columnLabel) {
        return columnLabel.labels.find((/**
         * @param {?} labelItem
         * @return {?}
         */
        function (labelItem) { return row[columnLabel.property] === labelItem.value; }));
    };
    /**
     * @param {?} column
     * @return {?}
     */
    PoTableComponent.prototype.getColumnTitleLabel = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        return column.label || capitalizeFirstLetter(column.property);
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.verifyWidthColumnsPixels = /**
     * @return {?}
     */
    function () {
        return this.hasMainColumns ? this.mainColumns.every((/**
         * @param {?} column
         * @return {?}
         */
        function (column) { return column.width && column.width.includes('px'); })) : false;
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.calculateWidthHeaders = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.height) {
                _this.headersTable.forEach((/**
                 * @param {?} header
                 * @return {?}
                 */
                function (header) {
                    /** @type {?} */
                    var divHeader = header.nativeElement.querySelector('.po-table-header-fixed-inner');
                    if (divHeader) {
                        divHeader.style.width = header.nativeElement.offsetWidth + "px";
                    }
                }));
            }
        }));
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoTableComponent.prototype.containsMasterDetail = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return row[this.getNameColumnDetail()] && row[this.getNameColumnDetail()].length;
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    PoTableComponent.prototype.isShowRowTemplate = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        if (this.tableRowTemplate && this.tableRowTemplate.poTableRowTemplateShow) {
            return this.tableRowTemplate.poTableRowTemplateShow(row, index);
        }
        return true;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoTableComponent.prototype.isShowMasterDetail = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        return !this.hideDetail &&
            this.getNameColumnDetail() &&
            row.$showDetail &&
            this.containsMasterDetail(row) &&
            !this.hasRowTemplate;
    };
    /**
     * @param {?} columns
     * @return {?}
     */
    PoTableComponent.prototype.onVisibleColumnsChange = /**
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        this.columns = columns;
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} event
     * @param {?=} column
     * @param {?=} row
     * @return {?}
     */
    PoTableComponent.prototype.tooltipMouseEnter = /**
     * @param {?} event
     * @param {?=} column
     * @param {?=} row
     * @return {?}
     */
    function (event, column, row) {
        this.tooltipText = undefined;
        if (this.hideTextOverflow &&
            event.target.offsetWidth < event.target.scrollWidth &&
            event.target.innerText.trim()) {
            return this.tooltipText = event.target.innerText;
        }
        if (column) {
            this.checkingIfColumnHasTooltip(column, row);
        }
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.tooltipMouseLeave = /**
     * @return {?}
     */
    function () {
        this.tooltipText = undefined;
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.verifyChangeHeightInFooter = /**
     * @return {?}
     */
    function () {
        return this.footerHeight !== this.getHeightTableFooter();
    };
    /**
     * @return {?}
     */
    PoTableComponent.prototype.verifyCalculateHeightTableContainer = /**
     * @return {?}
     */
    function () {
        if (this.height && this.verifyChangeHeightInFooter()) {
            this.footerHeight = this.getHeightTableFooter();
            this.calculateHeightTableContainer(this.height);
        }
    };
    /**
     * @param {?} height
     * @return {?}
     */
    PoTableComponent.prototype.calculateHeightTableContainer = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        /** @type {?} */
        var value = parseFloat(height);
        this.heightTableContainer = value ? (value - this.getHeightTableFooter()) : undefined;
        this.setTableOpacity(1);
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} row
     * @param {?} targetRef
     * @return {?}
     */
    PoTableComponent.prototype.togglePopup = /**
     * @param {?} row
     * @param {?} targetRef
     * @return {?}
     */
    function (row, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(row);
    };
    /**
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    PoTableComponent.prototype.validateTableAction = /**
     * @param {?} row
     * @param {?} tableAction
     * @return {?}
     */
    function (row, tableAction) {
        if (typeof tableAction.disabled === 'function') {
            return tableAction.disabled.call(this.parentRef, row);
        }
        else {
            return tableAction.disabled;
        }
    };
    /**
     * @protected
     * @param {?} container
     * @return {?}
     */
    PoTableComponent.prototype.showContainer = /**
     * @protected
     * @param {?} container
     * @return {?}
     */
    function (container) {
        /** @type {?} */
        var containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;
        containerClassList.add('po-container');
        container === 'border' ? containerClassList.add('po-container-no-shadow') : containerClassList.remove('po-container-no-shadow');
    };
    /**
     * @private
     * @return {?}
     */
    PoTableComponent.prototype.checkChangesItems = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && !this.hasColumns && this.hasItems()) {
            this.columns = this.getDefaultColumns(this.items[0]);
        }
    };
    /**
     * @private
     * @param {?} column
     * @param {?} row
     * @return {?}
     */
    PoTableComponent.prototype.checkingIfColumnHasTooltip = /**
     * @private
     * @param {?} column
     * @param {?} row
     * @return {?}
     */
    function (column, row) {
        if (column.type === 'link' && column.tooltip && !this.checkDisabled(row, column)) {
            return this.tooltipText = column.tooltip;
        }
        if (column.type === 'label') {
            /** @type {?} */
            var columnLabel = this.getColumnLabel(row, column);
            return this.tooltipText = columnLabel.tooltip;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoTableComponent.prototype.getHeightTableFooter = /**
     * @private
     * @return {?}
     */
    function () {
        return this.tableFooterElement ? this.tableFooterElement.nativeElement.offsetHeight : 0;
    };
    /**
     * @private
     * @return {?}
     */
    PoTableComponent.prototype.hideContainer = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerClassList = this.tableContainerElement.nativeElement.firstChild.classList;
        containerClassList.remove('po-container');
    };
    /**
     * @private
     * @return {?}
     */
    PoTableComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.calculateWidthHeaders();
            // show the table
            _this.setTableOpacity(1);
        }));
    };
    /**
     * @private
     * @param {?} rowIcons
     * @param {?} column
     * @return {?}
     */
    PoTableComponent.prototype.getColumnIconsFromProperty = /**
     * @private
     * @param {?} rowIcons
     * @param {?} column
     * @return {?}
     */
    function (rowIcons, column) {
        /** @type {?} */
        var icons = [];
        var action = column.action, color = column.color, disabled = column.disabled;
        /** @type {?} */
        var icon = { action: action, color: color, disabled: disabled };
        rowIcons.forEach((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return icons.push(typeof value === 'string' ? __assign({}, icon, { value: value }) : value); }));
        return icons;
    };
    /**
     * @private
     * @return {?}
     */
    PoTableComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
        if (this.clickListener) {
            this.clickListener();
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoTableComponent.prototype.setTableOpacity = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.tableOpacity = value;
    };
    PoTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table',
                    template: "<po-container #tableContainer p-no-padding>\n  <div [class.po-table-container-relative]=\"loading\">\n    <div *ngIf=\"loading\" class=\"po-table-overlay\">\n      <po-loading class=\"po-table-overlay-content\" [p-text]=\"literals.loadingData\"></po-loading>\n    </div>\n\n    <div class=\"po-table-main-container\">\n      <div #tableWrapper\n        class=\"po-table-wrapper\"\n        [class.po-table-header-fixed-columns-pixels]=\"verifyWidthColumnsPixels()\"\n        [style.opacity]=\"tableOpacity\">\n\n        <div class=\"po-table-container\" *ngIf=\"height\" [style.height.px]=\"heightTableContainer\">\n          <div class=\"po-table-header-fixed po-table-header\"></div>\n          <div class=\"po-table-container-fixed-inner\">\n            <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\n          </div>\n        </div>\n\n        <div *ngIf=\"!height\">\n          <ng-container *ngTemplateOutlet=\"tableTemplate\"></ng-container>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-table-footer\" *ngIf=\"hasFooter\">\n    <div *ngFor=\"let column of getSubtitleColumns()\">\n      <po-table-subtitle-footer [p-literals]=\"literals\" [p-subtitles]=\"column.subtitles\"></po-table-subtitle-footer>\n    </div>\n  </div>\n</po-container>\n\n<div class=\"po-row po-table-footer-show-more\" [class.po-invisible]=\"showMore.observers.length === 0\" #tableFooter>\n  <po-button\n    class=\"po-offset-xl-4 po-offset-lg-4 po-offset-md-3 po-lg-4 po-md-6\"\n    [p-disabled]=\"showMoreDisabled\"\n    [p-label]=\"literals.loadMoreData\"\n    (p-click)=\"onShowMore()\">\n  </po-button>\n</div>\n\n<ng-template #tableTemplate>\n  <table class=\"po-table\"\n    [class.po-table-striped]=\"striped\"\n    [class.po-table-layout-fixed]=\"hideTextOverflow\">\n    <thead>\n      <tr [class.po-table-header]=\"!height\">\n\n        <th *ngIf=\"hasCheckboxColumn\" class=\"po-table-column-checkbox\">\n          <div [class.po-table-header-fixed-inner]=\"height\">\n            <input *ngIf=\"!hideSelectAll\" type=\"checkbox\" class=\"po-table-checkbox\"\n            [class.po-table-checkbox-checked]=\"selectAll\"\n            [class.po-table-checkbox-indeterminate]=\"selectAll === null\">\n            <label *ngIf=\"!hideSelectAll\" class=\"po-table-checkbox-label po-clickable\" (click)=\"selectAllRows()\"></label>\n          </div>\n        </th>\n\n        <th *ngIf=\"hasMasterDetailColumn\"\n          class=\"po-table-header-column po-table-header-master-detail\">\n        </th>\n\n        <th *ngIf=\"!hasMainColumns\" #noColumnsHeader class=\"po-table-header-column po-text-center\">\n          <ng-container *ngIf=\"height; then noColumnsWithHeight; else noColumnsWithoutHeight\"> </ng-container>\n\n          <ng-template #noColumnsWithHeight>\n            <div class=\"po-table-header-fixed-inner\" [style.width.px]=\"noColumnsHeader.offsetWidth\">\n              {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\n            </div>\n          </ng-template>\n\n          <ng-template #noColumnsWithoutHeight>\n            {{ hasValidColumns ? literals.noVisibleColumn : literals.noColumns }}\n          </ng-template>\n\n        </th>\n\n        <th *ngFor=\"let column of mainColumns; let i = index\" #headersTable\n          class=\"po-table-header-ellipsis\"\n          [style.width]=\"column.width\" [style.max-width]=\"column.width\" [style.min-width]=\"column.width\"\n          [class.po-clickable]=\"sort\"\n          [class.po-table-column-right]= \"column.type === 'currency' || column.type === 'number'\"\n          [class.po-table-header-subtitle]=\"column.type === 'subtitle'\"\n          (click)=\"sortColumn(column)\">\n            <div *ngIf=\"height\" class=\"po-table-header-fixed-inner\">\n              <ng-container *ngTemplateOutlet=\"contentHeaderTemplate\"></ng-container>\n            </div>\n            <div *ngIf=\"!height\">\n              <ng-container *ngTemplateOutlet=\"contentHeaderTemplate\"></ng-container>\n            </div>\n            <ng-template #contentHeaderTemplate>\n              <span *ngIf=\"sort\"\n                [class.po-table-header-icon-unselected]= \"sortedColumn?.property !== column\"\n                [class.po-table-header-icon-descending]= \"sortedColumn?.property === column && sortedColumn.ascending\"\n                [class.po-table-header-icon-ascending]= \"sortedColumn?.property === column && !sortedColumn.ascending\">\n              </span>\n              <span\n                class=\"po-table-header-ellipsis po-table-header-block\"\n                [p-tooltip]=\"tooltipText\"\n                (mouseenter)=\"tooltipMouseEnter($event)\"\n                (mouseleave)=\"tooltipMouseLeave()\">\n                {{ getColumnTitleLabel(column) }}\n              </span>\n            </ng-template>\n        </th>\n\n        <th #columnManager *ngIf=\"hasValidColumns\"\n          [class.po-table-header-column-manager]=\"!isSingleAction\"\n          [class.po-table-header-column-manager-border]=\"!height && container\"\n          [class.po-table-header-single-action]=\"isSingleAction\">\n          <div\n            [class.po-table-header-column-manager-border]=\"height && container\"\n            [class.po-table-header-column-manager-fixed-inner]=\"height\"\n            [style.width.px]=\"height && visibleActions.length ? columnManager.offsetWidth : undefined\">\n            <button #columnManagerTarget\n              class=\"po-table-header-column-manager-button po-icon po-icon-settings po-clickable\"\n              p-tooltip-position=\"left\"\n              [p-tooltip]=\"literals.columnsManager\">\n            </button>\n          </div>\n        </th>\n\n      </tr>\n    </thead>\n\n    <tbody class=\"po-table-group-row\" *ngIf=\"!hasItems() || !hasMainColumns\">\n      <tr class=\"po-table-row\">\n        <td [colSpan]=\"columnCount()\" class=\"po-table-no-data po-text-center\">\n          <span> {{ literals.noData }} </span>\n        </td>\n      </tr>\n    </tbody>\n\n    <ng-container *ngIf=\"hasMainColumns\">\n      <tbody class=\"po-table-group-row\" *ngFor=\"let row of items, let rowIndex = index;\">\n        <tr class=\"po-table-row\" [class.po-table-row-active]=\"row.$selected || row.$selected === null && checkbox\">\n          <td *ngIf=\"checkbox\" class=\"po-table-column po-table-column-checkbox\">\n            <ng-container *ngIf=\"singleSelect; then inputRadio; else inputCheckbox\"> </ng-container>\n\n            <ng-template #inputRadio>\n              <input type=\"radio\" class=\"po-radio-group-input\" [class.po-radio-group-input-checked]=\"row.$selected\">\n              <label class=\"po-radio-group-label po-clickable\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"></label>\n            </ng-template>\n\n            <ng-template #inputCheckbox>\n              <input type=\"checkbox\" class=\"po-table-checkbox\" [class.po-table-checkbox-checked]=\"row.$selected\">\n              <label class=\"po-table-checkbox-label po-clickable\" (click)=\"checkbox ? selectRow(row) : 'javascript:;'\"></label>\n            </ng-template>\n\n          </td>\n          <td *ngIf=\"(getColumnMasterDetail() !== undefined) && !hideDetail || hasRowTemplate\"\n            class=\"po-table-column-detail-toggle\"\n            (click)=\"row.$showDetail = !row.$showDetail\">\n            <span *ngIf=\"(containsMasterDetail(row) && !hasRowTemplate) || isShowRowTemplate(row, rowIndex) && hasRowTemplate\"\n              class=\"po-icon po-clickable\"\n              [class.po-icon-arrow-up]=\"row.$showDetail\"\n              [class.po-icon-arrow-down]=\"!row.$showDetail\">\n            </span>\n          </td>\n\n          <td *ngFor=\"let column of mainColumns, let columnIndex = index;\"\n            [style.width]=\"column.width\" [style.max-width]=\"column.width\" [style.min-width]=\"column.width\"\n            [class.po-table-column]=\"column.type !== 'icon'\"\n            [class.po-table-column-right]=\"column.type == 'currency' || column.type == 'number'\"\n            [class.po-table-column-center]=\"column.type === 'subtitle'\"\n            [class.po-table-column-icons]=\"column.type === 'icon'\"\n            [ngClass]=\"getClassColor(row, column)\"\n            (click)=\"checkbox ? selectRow(row) : 'javascript:;'\">\n\n            <div class=\"po-table-column-cell\"\n              [class.po-table-body-ellipsis]=\"hideTextOverflow\"\n              [ngSwitch]=\"column.type\"\n              [p-tooltip]=\"tooltipText\"\n              (mouseenter)=\"tooltipMouseEnter($event, column, row)\"\n              (mouseleave)=\"tooltipMouseLeave()\">\n              <span *ngSwitchCase=\"'boolean'\">{{ getBooleanLabel(row[column.property], column) }}</span>\n              <span *ngSwitchCase=\"'currency'\">{{ row[column.property] | currency:column.format:'symbol':'1.2-2' }}</span>\n              <span *ngSwitchCase=\"'date'\" >{{ row[column.property] | date: column.format || 'dd/MM/yyyy' }}</span>\n              <span *ngSwitchCase=\"'time'\" >{{ row[column.property] | po_time: column.format || 'HH:mm:ss.ffffff' }}</span>\n              <span *ngSwitchCase=\"'dateTime'\" >{{ row[column.property] | date: column.format || 'dd/MM/yyyy HH:mm:ss' }}</span>\n              <span *ngSwitchCase=\"'number'\">{{ formatNumber(row[column.property], column.format) }}</span>\n              <po-table-column-link *ngSwitchCase=\"'link'\"\n                [p-action]=\"column.action\"\n                [p-disabled]=\"checkDisabled(row, column)\"\n                [p-link]=\"row[column.link]\"\n                [p-row]=\"row\"\n                [p-value]=\"row[column.property]\">\n              </po-table-column-link>\n\n              <po-table-column-icon *ngSwitchCase=\"'icon'\"\n                [p-icons]=\"getColumnIcons(row, column)\"\n                [p-row]=\"row\">\n              </po-table-column-icon>\n\n              <span *ngSwitchCase=\"'subtitle'\">\n                <po-table-subtitle-circle [p-subtitle]=\"getSubtitleColumn(row, column)\"></po-table-subtitle-circle>\n              </span>\n              <span *ngSwitchCase=\"'label'\">\n                <po-table-column-label [p-value]=\"getColumnLabel(row, column)\"></po-table-column-label>\n              </span>\n              <span *ngSwitchDefault>{{ row[column.property] }}</span>\n            </div>\n          </td>\n          <td *ngIf=\"isSingleAction\" class=\"po-table-column po-table-column-single-action\">\n            <div *ngIf=\"firstAction.visible !== false\"\n              class=\"po-table-single-action po-clickable\"\n              [class.po-table-action-disabled]= \"firstAction.disabled ? validateTableAction(row, firstAction) : false\"\n              (click)=\"executeTableAction(row, firstAction)\">\n\n              <span *ngIf=\"firstAction.icon\" class=\"po-icon {{ firstAction.icon }}\"></span>\n              {{ firstAction.label }}\n            </div>\n          </td>\n          <td *ngIf=\"visibleActions.length > 1\" class=\"po-table-column-actions\">\n            <span #popupTarget class=\"po-icon po-icon-more po-clickable\" (click)=\"togglePopup(row, popupTarget)\">\n            </span>\n          </td>\n          <!-- Column Manager -->\n          <td *ngIf=\"displayColumnManagerCell\" class=\"po-table-column\"></td>\n        </tr>\n\n        <tr *ngIf=\"hasMainColumns && hasRowTemplate && row.$showDetail && isShowRowTemplate(row, rowIndex)\">\n          <td class=\"po-table-row-template-container\" [colSpan]=\"columnCountForMasterDetail()\">\n\n            <ng-template\n              [ngTemplateOutlet]=\"tableRowTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\">\n            </ng-template>\n\n          </td>\n        </tr>\n\n        <tr *ngIf=\"hasMainColumns && isShowMasterDetail(row)\">\n          <td class=\"po-table-column-detail\" [colSpan]=\"columnCountForMasterDetail()\">\n\n            <po-table-detail\n              [p-checkbox]=\"checkbox && !detailHideSelect\"\n              [p-detail]=\"getColumnMasterDetail().detail\"\n              [p-items]=\"row[getNameColumnDetail()]\"\n              (p-select-row)=\"selectDetailRow($event)\">\n            </po-table-detail>\n\n          </td>\n        </tr>\n      </tbody>\n    </ng-container>\n  </table>\n</ng-template>\n\n<po-popup #popup\n  [p-actions]=\"actions\"\n  [p-target]=\"popupTarget\">\n</po-popup>\n\n<po-table-column-manager\n  [p-columns]=\"columns\"\n  [p-max-columns]=\"maxColumns\"\n  [p-target]=\"columnManagerTarget\"\n  (p-visible-columns-change)=\"onVisibleColumnsChange($event)\">\n</po-table-column-manager>\n",
                    providers: [PoDateService]
                }] }
    ];
    /** @nocollapse */
    PoTableComponent.ctorParameters = function () { return [
        { type: PoDateService },
        { type: IterableDiffers },
        { type: ViewContainerRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: DecimalPipe },
        { type: Router }
    ]; };
    PoTableComponent.propDecorators = {
        tableRowTemplate: [{ type: ContentChild, args: [PoTableRowTemplateDirective, { static: true },] }],
        poPopupComponent: [{ type: ViewChild, args: ['popup', { static: false },] }],
        columnManagerTarget: [{ type: ViewChild, args: ['columnManagerTarget', { static: false },] }],
        tableContainerElement: [{ type: ViewChild, args: ['tableContainer', { read: ElementRef, static: true },] }],
        tableFooterElement: [{ type: ViewChild, args: ['tableFooter', { read: ElementRef, static: true },] }],
        tableWrapperElement: [{ type: ViewChild, args: ['tableWrapper', { read: ElementRef, static: true },] }],
        actionsIconElement: [{ type: ViewChildren, args: ['actionsIconElement', { read: ElementRef },] }],
        actionsElement: [{ type: ViewChildren, args: ['actionsElement', { read: ElementRef },] }],
        headersTable: [{ type: ViewChildren, args: ['headersTable',] }]
    };
    return PoTableComponent;
}(PoTableBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype._columnManagerTarget;
    /** @type {?} */
    PoTableComponent.prototype.heightTableContainer;
    /** @type {?} */
    PoTableComponent.prototype.parentRef;
    /** @type {?} */
    PoTableComponent.prototype.popupTarget;
    /** @type {?} */
    PoTableComponent.prototype.tableOpacity;
    /** @type {?} */
    PoTableComponent.prototype.tooltipText;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.footerHeight;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.timeoutResize;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.visibleElement;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.clickListener;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.resizeListener;
    /** @type {?} */
    PoTableComponent.prototype.tableRowTemplate;
    /** @type {?} */
    PoTableComponent.prototype.poPopupComponent;
    /** @type {?} */
    PoTableComponent.prototype.tableContainerElement;
    /** @type {?} */
    PoTableComponent.prototype.tableFooterElement;
    /** @type {?} */
    PoTableComponent.prototype.tableWrapperElement;
    /** @type {?} */
    PoTableComponent.prototype.actionsIconElement;
    /** @type {?} */
    PoTableComponent.prototype.actionsElement;
    /** @type {?} */
    PoTableComponent.prototype.headersTable;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.decimalPipe;
    /**
     * @type {?}
     * @private
     */
    PoTableComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por apresentar o detalhe de cada linha da tabela.
 */
var PoTableDetailComponent = /** @class */ (function () {
    function PoTableDetailComponent(decimalPipe) {
        this.decimalPipe = decimalPipe;
        /**
         * Define se a tabela possui a opção de `checkbox` habilitada.
         */
        this.hasCheckbox = false;
        /**
         * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
         */
        this.selectRow = new EventEmitter();
    }
    Object.defineProperty(PoTableDetailComponent.prototype, "detail", {
        get: /**
         * @return {?}
         */
        function () {
            return this._detail;
        },
        /**
         * Configuração da linha de detalhes.
         */
        set: /**
         * Configuração da linha de detalhes.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._detail = this.returnPoTableDetailObject(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableDetailComponent.prototype, "detailColumns", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && this.detail.columns || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableDetailComponent.prototype, "typeHeaderInline", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && !this.detail['typeHeader'] || this.detail['typeHeader'] === 'inline';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTableDetailComponent.prototype, "typeHeaderTop", {
        get: /**
         * @return {?}
         */
        function () {
            return this.detail && this.detail['typeHeader'] === 'top';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    PoTableDetailComponent.prototype.formatNumberDetail = /**
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    };
    /**
     * @param {?} detail
     * @return {?}
     */
    PoTableDetailComponent.prototype.getColumnTitleLabel = /**
     * @param {?} detail
     * @return {?}
     */
    function (detail) {
        return detail.label || capitalizeFirstLetter(detail.property);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoTableDetailComponent.prototype.onSelectRow = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.$selected = !item.$selected;
        this.selectRow.emit(item);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoTableDetailComponent.prototype.returnPoTableDetailObject = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && isTypeof(value, 'object')) {
            if (value.columns) {
                value.columns.forEach((/**
                 * @param {?} column
                 * @return {?}
                 */
                function (column) { return column.property = column.property || column.column; }));
            }
            if (Array.isArray(value)) {
                return { columns: value };
            }
            if (value.columns) {
                return value;
            }
        }
    };
    PoTableDetailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-detail',
                    template: "<table class=\"po-table-master-detail\">\n  <thead *ngIf=\"typeHeaderTop\">\n    <tr>\n      <th class=\"po-table-header po-table-column-checkbox\" *ngIf=\"hasCheckbox\"></th>\n      <th class=\"po-table-header po-table-header-column po-table-header-master-detail\"></th>\n      <th class=\"po-table-header po-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\n        {{ getColumnTitleLabel(detail) }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class=\"po-table-detail-row\"\n        [class.po-table-row-active]=\"item.$selected && hasCheckbox\"\n        *ngFor=\"let item of items\">\n\n      <ng-container *ngIf=\"hasCheckbox; else masterDetailSpace\">\n\n        <td class=\"po-table-column-master-detail-space-checkbox\"></td>\n        <td class=\"po-table-column po-table-column-checkbox\">\n          <input\n            class=\"po-table-checkbox\"\n            type=\"checkbox\"\n            [class.po-table-checkbox-checked]=\"item.$selected\">\n          <label class=\"po-table-checkbox-label po-clickable\" (click)=\"onSelectRow(item)\">\n          </label>\n        </td>\n\n      </ng-container>\n\n      <ng-template #masterDetailSpace>\n        <td class=\"po-table-column-master-detail-space\"></td>\n      </ng-template>\n\n      <td class=\"po-table-column-master-detail po-table-master-detail-label\"\n        (click)=\"hasCheckbox ? onSelectRow(item) : 'javascript:;'\"\n        *ngFor=\"let detail of detailColumns\">\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\n\n        <ng-container [ngSwitch]=\"detail.type\">\n          <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span>\n          <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span>\n          <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | po_time: detail.format || 'HH:mm:ss.ffffff' }}</span>\n          <span *ngSwitchCase=\"'dateTime'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}</span>\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span>\n          <span *ngSwitchDefault>{{ item[detail.property] }}</span>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
                }] }
    ];
    /** @nocollapse */
    PoTableDetailComponent.ctorParameters = function () { return [
        { type: DecimalPipe }
    ]; };
    PoTableDetailComponent.propDecorators = {
        hasCheckbox: [{ type: Input, args: ['p-checkbox',] }],
        detail: [{ type: Input, args: ['p-detail',] }],
        items: [{ type: Input, args: ['p-items',] }],
        selectRow: [{ type: Output, args: ['p-select-row',] }]
    };
    return PoTableDetailComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableDetailComponent.prototype._detail;
    /**
     * Define se a tabela possui a opção de `checkbox` habilitada.
     * @type {?}
     */
    PoTableDetailComponent.prototype.hasCheckbox;
    /**
     * Lista de itens do _detail_ da tabela.
     * @type {?}
     */
    PoTableDetailComponent.prototype.items;
    /**
     * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
     * @type {?}
     */
    PoTableDetailComponent.prototype.selectRow;
    /**
     * @type {?}
     * @private
     */
    PoTableDetailComponent.prototype.decimalPipe;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir um ícone na tabela.
 */
var PoTableIconComponent = /** @class */ (function () {
    function PoTableIconComponent() {
        /**
         * Output click.
         */
        this.click = new EventEmitter();
    }
    Object.defineProperty(PoTableIconComponent.prototype, "allowTooltip", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !this.disabled && this.iconTooltip;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTableIconComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.clickable) {
            this.click.emit();
        }
    };
    /**
     * @return {?}
     */
    PoTableIconComponent.prototype.tooltipMouseEnter = /**
     * @return {?}
     */
    function () {
        if (this.allowTooltip) {
            this.tooltip = this.iconTooltip;
        }
    };
    /**
     * @return {?}
     */
    PoTableIconComponent.prototype.tooltipMouseLeave = /**
     * @return {?}
     */
    function () {
        this.tooltip = undefined;
    };
    PoTableIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-icon',
                    template: "<span\n  class=\"po-icon {{ icon }} {{ color }}\"\n  [ngClass]=\"{'po-clickable': clickable, 'po-table-icon-disabled': disabled}\"\n  [p-tooltip]=\"tooltip\"\n  (click)=\"onClick()\"\n  (mouseenter)=\"tooltipMouseEnter()\"\n  (mouseleave)=\"tooltipMouseLeave()\">\n</span>\n"
                }] }
    ];
    PoTableIconComponent.propDecorators = {
        clickable: [{ type: Input, args: ['p-clickable',] }],
        color: [{ type: Input, args: ['p-color',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        icon: [{ type: Input, args: ['p-icon',] }],
        iconTooltip: [{ type: Input, args: ['p-icon-tooltip',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoTableIconComponent;
}());
if (false) {
    /** @type {?} */
    PoTableIconComponent.prototype.tooltip;
    /**
     * Define se o ícone é clicável.
     * @type {?}
     */
    PoTableIconComponent.prototype.clickable;
    /**
     * Cor do ícone.
     * @type {?}
     */
    PoTableIconComponent.prototype.color;
    /**
     * Desabilitado.
     * @type {?}
     */
    PoTableIconComponent.prototype.disabled;
    /**
     * Classe css do ícone.
     * @type {?}
     */
    PoTableIconComponent.prototype.icon;
    /**
     * Texto do tooltip.
     * @type {?}
     */
    PoTableIconComponent.prototype.iconTooltip;
    /**
     * Output click.
     * @type {?}
     */
    PoTableIconComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação de um botão e modal para visualização de todas as legendas.
 */
var PoTableShowSubtitleComponent = /** @class */ (function () {
    function PoTableShowSubtitleComponent() {
    }
    PoTableShowSubtitleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-show-subtitle',
                    template: "<div class=\"po-table-footer-show-subtitle\" (click)=\"modal.open()\">\n  <div class=\"po-table-footer-show-subtitle-container\">\n    <span class=\"po-table-show-subtitle\">{{ literals.seeCompleteSubtitle }}</span>\n  </div>\n</div>\n\n<po-modal #modal\n  p-size=\"sm\"\n  [p-title]=\"literals.completeSubtitle\">\n\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer-modal po-row\">\n    <po-table-subtitle-circle\n      p-hide-title=\"true\"\n      [p-subtitle]=\"subtitle\">\n    </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n</po-modal>\n"
                }] }
    ];
    PoTableShowSubtitleComponent.propDecorators = {
        subtitles: [{ type: Input, args: ['p-subtitles',] }],
        literals: [{ type: Input, args: ['p-literals',] }]
    };
    return PoTableShowSubtitleComponent;
}());
if (false) {
    /**
     * Objeto com os dados da legenda.
     * @type {?}
     */
    PoTableShowSubtitleComponent.prototype.subtitles;
    /**
     * Propriedade que recebe as literais definidas no `po-table`.
     * @type {?}
     */
    PoTableShowSubtitleComponent.prototype.literals;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação da representação da legenda, em formato de círculo.
 */
var PoTableSubtitleCircleComponent = /** @class */ (function () {
    function PoTableSubtitleCircleComponent(poColorPaletteService) {
        this.poColorPaletteService = poColorPaletteService;
        /**
         * Esconde a tooltip.
         */
        this.hideTitle = false;
    }
    Object.defineProperty(PoTableSubtitleCircleComponent.prototype, "subtitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this._subtitle;
        },
        /** Objeto com os dados da legenda. */
        set: /**
         * Objeto com os dados da legenda.
         * @param {?} subtitle
         * @return {?}
         */
        function (subtitle) {
            if (subtitle) {
                subtitle.color = this.poColorPaletteService.getColor(subtitle);
            }
            this._subtitle = subtitle;
        },
        enumerable: true,
        configurable: true
    });
    PoTableSubtitleCircleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-subtitle-circle',
                    template: "<span\n  [title]=\"hideTitle ? '' : subtitle?.label\"\n  class=\"po-table-subtitle-circle po-{{ subtitle?.color }}\">\n  {{ subtitle?.content }}\n</span>\n"
                }] }
    ];
    /** @nocollapse */
    PoTableSubtitleCircleComponent.ctorParameters = function () { return [
        { type: PoColorPaletteService }
    ]; };
    PoTableSubtitleCircleComponent.propDecorators = {
        subtitle: [{ type: Input, args: ['p-subtitle',] }],
        hideTitle: [{ type: Input, args: ['p-hide-title',] }]
    };
    return PoTableSubtitleCircleComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTableSubtitleCircleComponent.prototype._subtitle;
    /**
     * Esconde a tooltip.
     * @type {?}
     */
    PoTableSubtitleCircleComponent.prototype.hideTitle;
    /**
     * @type {?}
     * @private
     */
    PoTableSubtitleCircleComponent.prototype.poColorPaletteService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a criação de um conjunto de legendas.
 */
var PoTableSubtitleFooterComponent = /** @class */ (function () {
    function PoTableSubtitleFooterComponent(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initializeResizeListener();
        this.debounceResize();
    };
    /**
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this.isVisible && this.getContainerSize() > 0) {
            this.toggleShowCompleteSubtitle();
            this.isVisible = true;
        }
    };
    /**
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeResizeListener();
    };
    /**
     * @private
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.toggleShowCompleteSubtitle();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.getContainerSize = /**
     * @private
     * @return {?}
     */
    function () {
        return this.element.nativeElement.querySelector('.po-table-subtitle-footer-container').offsetWidth;
    };
    /**
     * @private
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.getItemsSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var items = this.element.nativeElement.querySelectorAll('.po-table-subtitle-footer');
        return Array.from(items).map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item['offsetWidth']; })).reduce((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return a + b; }), 16);
    };
    /**
     * @private
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.initializeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.debounceResize();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.removeResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    /**
     * @private
     * @return {?}
     */
    PoTableSubtitleFooterComponent.prototype.toggleShowCompleteSubtitle = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containerSize = this.getContainerSize();
        /** @type {?} */
        var itemsSize = this.getItemsSize();
        this.showSubtitle = itemsSize > containerSize;
    };
    PoTableSubtitleFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-table-subtitle-footer',
                    template: "<div class=\"po-table-subtitle-footer-container\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer\">\n    <po-table-subtitle-circle\n      p-hide-title=\"true\"\n      [p-subtitle]=\"subtitle\">\n    </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n  <po-table-show-subtitle *ngIf=\"showSubtitle\"\n    [p-literals]=\"literals\"\n    [p-subtitles]=\"subtitles\">\n  </po-table-show-subtitle>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoTableSubtitleFooterComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    PoTableSubtitleFooterComponent.propDecorators = {
        literals: [{ type: Input, args: ['p-literals',] }],
        subtitles: [{ type: Input, args: ['p-subtitles',] }]
    };
    return PoTableSubtitleFooterComponent;
}());
if (false) {
    /** @type {?} */
    PoTableSubtitleFooterComponent.prototype.showSubtitle;
    /**
     * @type {?}
     * @private
     */
    PoTableSubtitleFooterComponent.prototype.isVisible;
    /**
     * @type {?}
     * @private
     */
    PoTableSubtitleFooterComponent.prototype.timeoutResize;
    /**
     * @type {?}
     * @protected
     */
    PoTableSubtitleFooterComponent.prototype.resizeListener;
    /**
     * Propriedade que recebe as literais definidas no `po-table`.
     * @type {?}
     */
    PoTableSubtitleFooterComponent.prototype.literals;
    /**
     * Propriedade que recebe as legendas definidas no `PoTableSubtitleCircleComponent`.
     * @type {?}
     */
    PoTableSubtitleFooterComponent.prototype.subtitles;
    /**
     * @type {?}
     * @private
     */
    PoTableSubtitleFooterComponent.prototype.element;
    /** @type {?} */
    PoTableSubtitleFooterComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente po-table
 */
var PoTableModule = /** @class */ (function () {
    function PoTableModule() {
    }
    PoTableModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        RouterModule,
                        PoButtonModule,
                        PoCheckboxGroupModule,
                        PoContainerModule,
                        PoLoadingModule,
                        PoModalModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoTimeModule,
                        PoTooltipModule
                    ],
                    declarations: [
                        PoTableComponent,
                        PoTableColumnIconComponent,
                        PoTableColumnLabelComponent,
                        PoTableColumnLinkComponent,
                        PoTableColumnManagerComponent,
                        PoTableDetailComponent,
                        PoTableIconComponent,
                        PoTableRowTemplateDirective,
                        PoTableShowSubtitleComponent,
                        PoTableSubtitleCircleComponent,
                        PoTableSubtitleFooterComponent
                    ],
                    exports: [
                        PoTableComponent,
                        PoTableRowTemplateDirective
                    ],
                    providers: [DecimalPipe]
                },] }
    ];
    return PoTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoCalendarLangService$1 = /** @class */ (function () {
    function PoCalendarLangService() {
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.wordMonth = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.wordYear = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
        this.lang = 'pt';
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    PoCalendarLangService.prototype.setLanguage = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        if (lang && lang.length >= 2) {
            lang = lang.toLowerCase().slice(0, 2);
            this.lang = (lang === 'pt' || lang === 'en' || lang === 'es') ? lang : 'pt';
        }
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getWordMonth = /**
     * @return {?}
     */
    function () {
        return this.wordMonth[this.lang];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getWordYear = /**
     * @return {?}
     */
    function () {
        return this.wordYear[this.lang];
    };
    /**
     * @param {?} month
     * @return {?}
     */
    PoCalendarLangService.prototype.getMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        return this.months[month][this.lang];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getArrayMonths = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrMonths = Array();
        for (var i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.lang]);
        }
        return arrMonths;
    };
    /**
     * @param {?} day
     * @return {?}
     */
    PoCalendarLangService.prototype.getWeedDays = /**
     * @param {?} day
     * @return {?}
     */
    function (day) {
        return this.shortWeekDays[day][this.lang];
    };
    /**
     * @return {?}
     */
    PoCalendarLangService.prototype.getArrayWeekDays = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var arrWeekDays = Array();
        for (var i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.lang]);
        }
        return arrWeekDays;
    };
    PoCalendarLangService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoCalendarLangService.ctorParameters = function () { return []; };
    return PoCalendarLangService;
}());
if (false) {
    /** @type {?} */
    PoCalendarLangService$1.prototype.months;
    /** @type {?} */
    PoCalendarLangService$1.prototype.shortWeekDays;
    /** @type {?} */
    PoCalendarLangService$1.prototype.wordMonth;
    /** @type {?} */
    PoCalendarLangService$1.prototype.wordYear;
    /** @type {?} */
    PoCalendarLangService$1.prototype.lang;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoCalendarService$1 = /** @class */ (function () {
    function PoCalendarService() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarService.prototype.weekStartDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    PoCalendarService.prototype.monthDates = /**
     * @param {?} year
     * @param {?} month
     * @param {?=} dayFormatter
     * @param {?=} weekFormatter
     * @return {?}
     */
    function (year, month, dayFormatter, weekFormatter) {
        if (dayFormatter === void 0) { dayFormatter = null; }
        if (weekFormatter === void 0) { weekFormatter = null; }
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        /** @type {?} */
        var weeks = [];
        /** @type {?} */
        var week = [];
        /** @type {?} */
        var i = 0;
        /** @type {?} */
        var date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    };
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarService.prototype.monthDays = /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var getDayOrZero = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            return date.getMonth() === month ? date : 0;
        });
        return this.monthDates(year, month, getDayOrZero);
    };
    PoCalendarService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoCalendarService.ctorParameters = function () { return []; };
    return PoCalendarService;
}());
if (false) {
    /** @type {?} */
    PoCalendarService$1.prototype.firstWeekDay;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poCalendarLocaleDefault$1 = 'pt';
/** @type {?} */
var poCalendarLocales$1 = ['pt', 'en', 'es'];
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de calendário de uso interno
 */
var PoCalendarComponent$1 = /** @class */ (function () {
    function PoCalendarComponent(poCalendarService, poCalendarLangService) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.monthVisible = false;
        this.overlayInvisible = true;
        this.visible = false;
        this.yearVisible = false;
        this.isMobile = isMobile;
        this.today = new Date();
        this.selectedDateChange = new EventEmitter();
        this.submit = new EventEmitter();
    }
    Object.defineProperty(PoCalendarComponent.prototype, "dateEnd", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateEnd;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data máxima possível de ser selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data máxima possível de ser selecionada no calendário.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val instanceof Date) {
                /** @type {?} */
                var year = val.getFullYear();
                /** @type {?} */
                var month = val.getMonth();
                /** @type {?} */
                var day = val.getDate();
                /** @type {?} */
                var date = new Date(year, month, day, 23, 59, 59);
                setYearFrom0To100(date, year);
                this._dateEnd = date;
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         * @param {?} locale
         * @return {?}
         */
        function (locale) {
            this._locale = poCalendarLocales$1.includes(locale) ? locale : poCalendarLocaleDefault$1;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "selectedDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data selecionada no calendário.
         * @param {?} selectedDate
         * @return {?}
         */
        function (selectedDate) {
            this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "dateStart", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dateStart;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data mínima possível de ser selecionada no calendário.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data mínima possível de ser selecionada no calendário.
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val && val instanceof Date) {
                /** @type {?} */
                var year = val.getFullYear();
                /** @type {?} */
                var month = val.getMonth();
                /** @type {?} */
                var day = val.getDate();
                /** @type {?} */
                var date = new Date(year, month, day, 0, 0, 0);
                setYearFrom0To100(date, year);
                this._dateStart = date;
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.overlayInvisible = true;
        this.visible = false;
    };
    // Obtém um array de todos os anos desta década
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.getArrayDecade = 
    // Obtém um array de todos os anos desta década
    /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    PoCalendarComponent.prototype.getBackgroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    };
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.getDayBackgroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-background-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-background-today';
        }
        else if (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-background';
            }
            else {
                return 'po-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.getDayForegroundColor = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-foreground-today';
        }
        else {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-foreground';
            }
            else {
                return 'po-calendar-box-foreground-disabled';
            }
        }
    };
    /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    PoCalendarComponent.prototype.getForegroundColor = /**
     * @param {?} displayValue
     * @param {?} propertyValue
     * @return {?}
     */
    function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.getWordMonth = /**
     * @return {?}
     */
    function () {
        return this.poCalendarLangService.getWordMonth();
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.getWordYear = /**
     * @return {?}
     */
    function () {
        return this.poCalendarLangService.getWordYear();
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
        if (this.isMobile()) {
            this.overlayInvisible = false;
        }
        this.visible = true;
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.initializeLanguage = /**
     * @return {?}
     */
    function () {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.poCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.poCalendarLangService.getArrayMonths();
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.onNextMonth = /**
     * @return {?}
     */
    function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.onPrevMonth = /**
     * @return {?}
     */
    function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    // Ao selecionar uma data
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectDate = 
    // Ao selecionar uma data
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (validateDateRange(date, this.dateStart, this.dateEnd)) {
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.submit.emit(date);
        }
    };
    // Ao selecionar um mês
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectMonth = 
    // Ao selecionar um mês
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.onSelectYear = 
    // Ao selecionar um ano
    /**
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectDay = /**
     * @return {?}
     */
    function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectMonth = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.selectYear = /**
     * @return {?}
     */
    function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    /**
     * @return {?}
     */
    PoCalendarComponent.prototype.setMobileVisualization = /**
     * @return {?}
     */
    function () {
        return this.isMobile() ? 'po-calendar po-calendar-mobile' : 'po-calendar';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoCalendarComponent.prototype.updateYear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.addAllYearsInDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        /** @type {?} */
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    PoCalendarComponent.prototype.equalsDate = /**
     * @private
     * @param {?} date1
     * @param {?} date2
     * @return {?}
     */
    function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    /**
     * @private
     * @param {?} year
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDecade = /**
     * @private
     * @param {?} year
     * @return {?}
     */
    function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    PoCalendarComponent.prototype.updateDisplay = /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        /** @type {?} */
        var calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    PoCalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-calendar',
                    template: "<div class=\"po-calendar-overlay\" [class.po-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\" class=\"po-calendar-day po-calendar-box-background\" (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"po-calendar-month\"\n        (click)=\"onSelectMonth(displayYear, i)\"\n        [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span (click)=\"updateYear(10)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"po-calendar-year\"\n        (click)=\"onSelectYear(year, displayMonthNumber)\"\n        [ngClass]=\"getBackgroundColor(year, currentYear)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                    providers: [PoCalendarService$1, PoCalendarLangService$1]
                }] }
    ];
    /** @nocollapse */
    PoCalendarComponent.ctorParameters = function () { return [
        { type: PoCalendarService$1 },
        { type: PoCalendarLangService$1 }
    ]; };
    PoCalendarComponent.propDecorators = {
        elDays: [{ type: ViewChild, args: ['days', { read: ElementRef, static: true },] }],
        elMonths: [{ type: ViewChild, args: ['months', { read: ElementRef, static: true },] }],
        elYears: [{ type: ViewChild, args: ['years', { read: ElementRef, static: true },] }],
        dateEnd: [{ type: Input, args: ['p-date-end',] }],
        locale: [{ type: Input, args: ['p-locale',] }],
        selectedDate: [{ type: Input, args: ['p-selected-date',] }],
        dateStart: [{ type: Input, args: ['p-date-start',] }],
        selectedDateChange: [{ type: Output, args: ['p-selected-dateChange',] }],
        submit: [{ type: Output, args: ['p-submit',] }]
    };
    return PoCalendarComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype._dateEnd;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype._dateStart;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype._locale;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype._selectedDate;
    /** @type {?} */
    PoCalendarComponent$1.prototype.currentYear;
    /** @type {?} */
    PoCalendarComponent$1.prototype.dayVisible;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayDays;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayDecade;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayFinalDecade;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayMonth;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayMonthNumber;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayMonths;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayStartDecade;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayWeedDays;
    /** @type {?} */
    PoCalendarComponent$1.prototype.displayYear;
    /** @type {?} */
    PoCalendarComponent$1.prototype.monthVisible;
    /** @type {?} */
    PoCalendarComponent$1.prototype.overlayInvisible;
    /** @type {?} */
    PoCalendarComponent$1.prototype.visible;
    /** @type {?} */
    PoCalendarComponent$1.prototype.yearVisible;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype.currentMonthNumber;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype.isMobile;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype.lastDisplay;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype.today;
    /** @type {?} */
    PoCalendarComponent$1.prototype.elDays;
    /** @type {?} */
    PoCalendarComponent$1.prototype.elMonths;
    /** @type {?} */
    PoCalendarComponent$1.prototype.elYears;
    /** @type {?} */
    PoCalendarComponent$1.prototype.selectedDateChange;
    /** @type {?} */
    PoCalendarComponent$1.prototype.submit;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype.poCalendarService;
    /**
     * @type {?}
     * @private
     */
    PoCalendarComponent$1.prototype.poCalendarLangService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface PoClean.
 * @abstract
 */
var PoCleanBaseComponent = /** @class */ (function () {
    function PoCleanBaseComponent() {
        /**
         * Valor que será atribuído ao campo quando for clicado no po-clean.
         */
        this.defaultValue = '';
        /**
         * Evento disparado quando executada ação do po-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PoCleanBaseComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    };
    /**
     * @return {?}
     */
    PoCleanBaseComponent.prototype.showIcon = /**
     * @return {?}
     */
    function () {
        return this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly();
    };
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o po-clean deve ser usado.
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o po-clean deve ser usado.
    /**
     * @private
     * @return {?}
     */
    PoCleanBaseComponent.prototype.hasCleanAttr = 
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o po-clean deve ser usado.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.clean;
    };
    // Este método verifica se o componente pai está desabilitado.
    // Este método verifica se o componente pai está desabilitado.
    /**
     * @private
     * @return {?}
     */
    PoCleanBaseComponent.prototype.isDisabled = 
    // Este método verifica se o componente pai está desabilitado.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.disabled;
    };
    // Este método verifica se o componente pai está somente leitura.
    // Este método verifica se o componente pai está somente leitura.
    /**
     * @private
     * @return {?}
     */
    PoCleanBaseComponent.prototype.isReadonly = 
    // Este método verifica se o componente pai está somente leitura.
    /**
     * @private
     * @return {?}
     */
    function () {
        return this.parentComponent.readonly;
    };
    PoCleanBaseComponent.propDecorators = {
        inputRef: [{ type: Input, args: ['p-element-ref',] }],
        defaultValue: [{ type: Input, args: ['p-default-value',] }],
        changeEvent: [{ type: Output, args: ['p-change-event',] }]
    };
    return PoCleanBaseComponent;
}());
if (false) {
    /**
     * Nesta propriedade deve-se informar o elementRef do campo de entrada que utilizará o po-clean.
     * @type {?}
     */
    PoCleanBaseComponent.prototype.inputRef;
    /**
     * Valor que será atribuído ao campo quando for clicado no po-clean.
     * @type {?}
     */
    PoCleanBaseComponent.prototype.defaultValue;
    /**
     * Evento disparado quando executada ação do po-clean.
     * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
     * e provavelmente será preciso emitir o evento para atualizar o model.
     * @type {?}
     */
    PoCleanBaseComponent.prototype.changeEvent;
    /**
     * @type {?}
     * @protected
     */
    PoCleanBaseComponent.prototype.parentComponent;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoCleanBaseComponent.prototype.setInputValue = function (value) { };
    /**
     * @abstract
     * @return {?}
     */
    PoCleanBaseComponent.prototype.getInputValue = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoCleanBaseComponent
 *
 * \@examplePrivate
 *
 * <example-private name="po-clean-labs" title="Portinari Clean Labs">
 *   <file name="sample-po-clean-labs.component.html"> </file>
 *   <file name="sample-po-clean-labs.component.ts"> </file>
 * </example-private>
 */
var PoCleanComponent = /** @class */ (function (_super) {
    __extends(PoCleanComponent, _super);
    function PoCleanComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.viewRef = viewRef;
        _this.parentComponent = _this.viewRef['_view']['component'];
        return _this;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    PoCleanComponent.prototype.setInputValue = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (this.inputRef && this.inputRef.nativeElement) {
            this.inputRef.nativeElement.value = value;
        }
    };
    /**
     * @return {?}
     */
    PoCleanComponent.prototype.getInputValue = /**
     * @return {?}
     */
    function () {
        if (this.inputRef && this.inputRef.nativeElement) {
            return this.inputRef.nativeElement.value;
        }
    };
    PoCleanComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-clean',
                    template: "<span *ngIf=\"showIcon()\"\n  class=\"po-icon po-field-icon po-icon-close\"\n  (click)=\"clear()\">\n</span>\n"
                }] }
    ];
    /** @nocollapse */
    PoCleanComponent.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    return PoCleanComponent;
}(PoCleanBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoCleanComponent.prototype.viewRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var PoKeyCodeEnum = {
    /** Seta para baixo */
    arrowDown: 40,
    /** Seta para cima */
    arrowUp: 38,
    /** Backspace */
    backspace: 8,
    /** Delete */
    delete: 46,
    /** Enter */
    enter: 13,
    /** Esc */
    esc: 27,
    /** Tecla L */
    keyL: 76,
    /** Espaço */
    space: 32,
    /** Tab */
    tab: 9,
};
PoKeyCodeEnum[PoKeyCodeEnum.arrowDown] = 'arrowDown';
PoKeyCodeEnum[PoKeyCodeEnum.arrowUp] = 'arrowUp';
PoKeyCodeEnum[PoKeyCodeEnum.backspace] = 'backspace';
PoKeyCodeEnum[PoKeyCodeEnum.delete] = 'delete';
PoKeyCodeEnum[PoKeyCodeEnum.enter] = 'enter';
PoKeyCodeEnum[PoKeyCodeEnum.esc] = 'esc';
PoKeyCodeEnum[PoKeyCodeEnum.keyL] = 'keyL';
PoKeyCodeEnum[PoKeyCodeEnum.space] = 'space';
PoKeyCodeEnum[PoKeyCodeEnum.tab] = 'tab';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var PoComboFilterMode = {
    /** Verifica se o texto *inicia* com o valor pesquisado. Caso não seja especificado um tipo, será esse o utilizado. */
    startsWith: 0,
    /** Verifica se o texto *contém* o valor pesquisado. */
    contains: 1,
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    endsWith: 2,
};
PoComboFilterMode[PoComboFilterMode.startsWith] = 'startsWith';
PoComboFilterMode[PoComboFilterMode.contains] = 'contains';
PoComboFilterMode[PoComboFilterMode.endsWith] = 'endsWith';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PO_COMBO_DEBOUNCE_TIME_DEFAULT = 400;
/** @type {?} */
var PO_COMBO_FIELD_LABEL_DEFAULT = 'label';
/** @type {?} */
var PO_COMBO_FIELD_VALUE_DEFAULT = 'value';
/** @type {?} */
var poComboLiteralsDefault = {
    en: (/** @type {?} */ ({
        noData: 'No data found'
    })),
    es: (/** @type {?} */ ({
        noData: 'Datos no encontrados'
    })),
    pt: (/** @type {?} */ ({
        noData: 'Nenhum dado encontrado'
    })),
    ru: (/** @type {?} */ ({
        noData: 'Данные не найдены'
    }))
};
/**
 * \@description
 *
 * O po-combo, semelhante ao po-select, exibe uma lista de valores e permite ao usuário fazer a seleção de um desses valores,
 * mas no caso do po-combo, o usuário ainda consegue filtrar os valores disponibilizados para seleção.
 *
 * Também há a possibilidade de usar serviço no po-combo, através da propriedade p-filter-service.
 *
 * O comportamento do po-combo permite ao usuário:
 *  - selecionar um item através do mouse;
 *  - navegar pelos itens utilizando as setas do teclado confirmando a seleção com "Enter";
 *  - pesquisar os itens da lista de seleção e em seguida navegar com as setas ou com o mouse;
 *  - digitar a descrição completa.
 *
 * O po-combo guarda o último valor caso o usuário desista de uma busca, deixando o campo ou teclando "ESC".
 * Caso seja digitado no campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada
 * ao deixar o campo ou pressionando "Enter".
 *
 * É necessário que os itens da lista de selecão contenham sempre valor (value) e descrição (label) para que os itens apareçam corretamente
 * no po-combo, itens que não estejam implementando corretamenta a interface PoComboOption, serão descartados.
 *
 * O po-combo ainda permite definir o modo que será feito o filtro, através da propriedade p-filter-mode.
 * @abstract
 */
var PoComboBaseComponent = /** @class */ (function () {
    function PoComboBaseComponent() {
        this._changeOnEnter = false;
        this._debounceTime = 400;
        this._disabled = false;
        this._disabledInitFilter = false;
        this._fieldLabel = 'label';
        this._fieldValue = 'value';
        this._filterMinlength = 0;
        this._filterMode = PoComboFilterMode.startsWith;
        this._options = [];
        this._required = false;
        this.cacheOptions = [];
        this.cacheStaticOptions = [];
        this.firstInWriteValue = true;
        this.isFirstFilter = true;
        this.isFiltering = false;
        this.previousSearchValue = '';
        this.visibleOptions = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * Indica que a lista definida na propriedade p-options será ordenada pela descrição.
         */
        this.sort = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(PoComboBaseComponent.prototype, "filterService", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterService;
        },
        /**
         * @optional
         *
         * @description
         * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
         * itens no componente.
         * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface PoComboFilter.
         *
         * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
         * `p-field-label` e `p-field-value` para a construção da lista de itens.
         *
         * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
         * ```
         * url + ?filter=Peter
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
         * itens no componente.
         * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface PoComboFilter.
         *
         * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
         * `p-field-label` e `p-field-value` para a construção da lista de itens.
         *
         * Quando utilizada uma URL de serviço, então será concateanada nesta URL o valor que deseja-se filtrar da seguinte forma:
         * ```
         * url + ?filter=Peter
         * ```
         * @param {?} service
         * @return {?}
         */
        function (service) {
            this._filterService = service;
            this.configAfterSetFilterService(service);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "debounceTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._debounceTime;
        },
        /**
         * @optional
         *
         * @description
         * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
         * Será utilizada apenas quando houver serviço (`p-filter-service`).
         *
         * @default `400`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
         * Será utilizada apenas quando houver serviço (`p-filter-service`).
         *
         * \@default `400`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var parsedValue = parseInt((/** @type {?} */ (value)), 10);
            this._debounceTime = !isNaN(parsedValue) && parsedValue > 0 ? parsedValue : PO_COMBO_DEBOUNCE_TIME_DEFAULT;
            this.unsubscribeKeyupObservable();
            this.initInputObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "disabledInitFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabledInitFilter;
        },
        /**
         * @optional
         *
         * @description
         * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
         *
         * @default `false`
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
         *
         * \@default `false`
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabledInitFilter = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "fieldValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fieldValue;
        },
        /**
         * @optional
         *
         * @description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * PoComboOption.
         *
         * @default `value`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * PoComboOption.
         *
         * \@default `value`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fieldValue = value || PO_COMBO_FIELD_VALUE_DEFAULT;
            if (isTypeof(this.filterService, 'string') && this.service) {
                this.service.fieldValue = this._fieldValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "fieldLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fieldLabel;
        },
        /**
         * @optional
         *
         * @description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * PoComboOption.
         *
         * @default `label`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
         * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
         *
         * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
         * PoComboOption.
         *
         * \@default `label`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fieldLabel = value || PO_COMBO_FIELD_LABEL_DEFAULT;
            if (isTypeof(this.filterService, 'string') && this.service) {
                this.service.fieldLabel = this._fieldLabel;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "filterMinlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMinlength;
        },
        /**
         * @optional
         *
         * @description
         * Valor mínimo de caracteres para realizar o filtro no serviço.
         *
         * @default `0`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Valor mínimo de caracteres para realizar o filtro no serviço.
         *
         * \@default `0`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var parseValue = (typeof value === 'string') ? parseInt(value, 10) : value;
            this._filterMinlength = Number.isInteger(parseValue) ? parseValue : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "changeOnEnter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._changeOnEnter;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
         *
         * \@default `false`
         * @param {?} changeOnEnter
         * @return {?}
         */
        function (changeOnEnter) {
            this._changeOnEnter = convertToBoolean(changeOnEnter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel(this.selectedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoComboOption.
         * Esta lista conterá os valores e as descrições que serão apresentados na tela.
         */
        set: /**
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoComboOption.
         * Esta lista conterá os valores e as descrições que serão apresentados na tela.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = Array.isArray(options) ? options : [];
            this.cacheStaticOptions = this.options;
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
            this.updateComboList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "setSort", {
        set: /**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this.sort = sort === '' ? true : convertToBoolean(sort);
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "filterMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
         *
         * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
         *
         * @default `startsWith`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
         *
         * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
         *
         * \@default `startsWith`
         * @param {?} filterMode
         * @return {?}
         */
        function (filterMode) {
            this._filterMode = (filterMode in PoComboFilterMode) ? filterMode : PoComboFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = PoComboFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = PoComboFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = PoComboFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "filterParams", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterParams;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *PoComboFilter*.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface *PoComboFilter*.
         * @param {?} filterParams
         * @return {?}
         */
        function (filterParams) {
            this._filterParams = (filterParams || filterParams === 0 || filterParams === false) ? filterParams : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoComboBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poComboLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-combo`.
         *
         * Para utilizar basta passar a literal que deseja customizar:
         *
         * ```
         *  const customLiterals: PoComboLiterals = {
         *    noData: 'Nenhum valor'
         *  };
         * ```
         *
         * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-combo
         *   [p-literals]="customLiterals">
         * </po-combo>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-combo`.
         *
         * Para utilizar basta passar a literal que deseja customizar:
         *
         * ```
         *  const customLiterals: PoComboLiterals = {
         *    noData: 'Nenhum valor'
         *  };
         * ```
         *
         * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-combo
         *   [p-literals]="customLiterals">
         * </po-combo>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poComboLiteralsDefault[poLocaleDefault], poComboLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poComboLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoComboBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateComboList();
    };
    /**
     * @return {?}
     */
    PoComboBaseComponent.prototype.onInitService = /**
     * @return {?}
     */
    function () {
        if (this.filterService) {
            this.setService(this.filterService);
            this.initInputObservable();
        }
    };
    /**
     * @param {?} service
     * @return {?}
     */
    PoComboBaseComponent.prototype.setService = /**
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (service) {
            if (isTypeof(service, 'object')) {
                this.service = (/** @type {?} */ (service));
            }
            else {
                this.service = this.defaultService;
                this.service.configProperties((/** @type {?} */ (service)), this.fieldLabel, this.fieldValue);
            }
        }
    };
    /**
     * @return {?}
     */
    PoComboBaseComponent.prototype.validAndSortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length > 0) {
            // Remove os objetos que não contém valor e atribui o valor ao label caso este esteja vazio
            for (var i = 0; i < this.options.length; i++) {
                if (!validValue(this.options[i]['value'])) {
                    this.options.splice(i, 1);
                }
                else if (!this.options[i]['label']) {
                    this.options[i]['label'] = this.options[i]['value'].toString();
                }
            }
        }
        this.sortOptions();
    };
    /**
     * @return {?}
     */
    PoComboBaseComponent.prototype.sortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length > 0 && this.sort) {
            this.options.sort(this.compareOptions);
        }
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    PoComboBaseComponent.prototype.compareOptions = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (a.label.toString().toLowerCase() < b.label.toString().toLowerCase()) {
            return -1;
        }
        if (a.label.toString().toLowerCase() > b.label.toString().toLowerCase()) {
            return 1;
        }
        return 0;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    PoComboBaseComponent.prototype.compareMethod = /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    function (search, option, filterMode) {
        switch (filterMode) {
            case PoComboFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoComboFilterMode.contains:
                return this.contains(search, option);
            case PoComboFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoComboBaseComponent.prototype.startsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoComboBaseComponent.prototype.contains = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoComboBaseComponent.prototype.endsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    /**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    PoComboBaseComponent.prototype.getOptionFromValue = /**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        var _this = this;
        return (options) ? options.find((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return _this.isEqual(option.value, value); })) : null;
    };
    /**
     * @param {?} label
     * @param {?} options
     * @return {?}
     */
    PoComboBaseComponent.prototype.getOptionFromLabel = /**
     * @param {?} label
     * @param {?} options
     * @return {?}
     */
    function (label, options) {
        if (options) {
            return options.find((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                return option.label.toString().toLowerCase() === label.toString().toLowerCase();
            }));
        }
        else {
            return null;
        }
    };
    /**
     * @param {?} option
     * @param {?=} isUpdateModel
     * @param {?=} isWriteValue
     * @return {?}
     */
    PoComboBaseComponent.prototype.updateSelectedValue = /**
     * @param {?} option
     * @param {?=} isUpdateModel
     * @param {?=} isWriteValue
     * @return {?}
     */
    function (option, isUpdateModel, isWriteValue) {
        if (isUpdateModel === void 0) { isUpdateModel = true; }
        if (isWriteValue === void 0) { isWriteValue = false; }
        /** @type {?} */
        var optionLabel = option && option.label || '';
        this.updateInternalVariables(option);
        // atualiza o valor do input quando for changeOnEnter apenas se for para atualizar o model.
        if (this.changeOnEnter && isUpdateModel) {
            this.setInputValue(optionLabel);
        }
        else if (!this.changeOnEnter) {
            this.setInputValue(optionLabel);
        }
        if (isUpdateModel) {
            /** @type {?} */
            var optionValue = option && option.value || undefined;
            this.updateModel(optionValue, isWriteValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboBaseComponent.prototype.callModelChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    PoComboBaseComponent.prototype.isEqual = /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    PoComboBaseComponent.prototype.searchForLabel = /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            /** @type {?} */
            var newOptions_1 = [];
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (option.label && (_this.compareMethod(search, option, filterMode) || _this.service)) {
                    newOptions_1.push(option);
                }
            }));
            this.selectedView = newOptions_1[0];
            this.updateComboList(newOptions_1);
        }
        else {
            this.updateComboList();
        }
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    PoComboBaseComponent.prototype.updateComboList = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var copyOptions = options || __spread(this.options);
        /** @type {?} */
        var newOptions = !options && this.selectedValue ? [__assign({}, this.selectedOption)] : copyOptions;
        if (newOptions) {
            this.visibleOptions = newOptions;
            if (!this.selectedView && this.visibleOptions.length) {
                this.selectedView = this.visibleOptions[0];
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} options
     * @param {?=} reverse
     * @return {?}
     */
    PoComboBaseComponent.prototype.getNextOption = /**
     * @param {?} value
     * @param {?} options
     * @param {?=} reverse
     * @return {?}
     */
    function (value, options, reverse) {
        if (reverse === void 0) { reverse = false; }
        /** @type {?} */
        var newOptions = [].concat(options);
        /** @type {?} */
        var optionFound = null;
        /** @type {?} */
        var found = false;
        if (reverse) {
            newOptions.reverse();
        }
        for (var i = 0; i < newOptions.length; i++) {
            /** @type {?} */
            var option = newOptions[i];
            if (!optionFound) {
                optionFound = option;
            }
            if (found) {
                return option;
            }
            if (this.isEqual(option.value, value)) {
                found = true;
            }
        }
        return optionFound;
    };
    /**
     * @return {?}
     */
    PoComboBaseComponent.prototype.getIndexSelectedView = /**
     * @return {?}
     */
    function () {
        for (var i = 0; i < this.visibleOptions.length; i++) {
            if (this.compareObjects(this.visibleOptions[i], this.selectedView)) {
                return i;
            }
        }
        return null;
    };
    /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    PoComboBaseComponent.prototype.compareObjects = /**
     * @param {?} obj1
     * @param {?} obj2
     * @return {?}
     */
    function (obj1, obj2) {
        return JSON.stringify(obj1) === JSON.stringify(obj2);
    };
    /**
     * @return {?}
     */
    PoComboBaseComponent.prototype.verifyValidOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputValue = this.getInputValue();
        /** @type {?} */
        var optionFound = this.getOptionFromLabel(inputValue, this.options);
        if (optionFound && optionFound.value !== this.selectedValue) {
            this.updateSelectedValue(optionFound);
            this.previousSearchValue = optionFound.label;
            return;
        }
        else if (this.selectedValue && this.selectedOption && this.selectedOption.label !== inputValue) {
            this.updateSelectedValueWithOldOption();
            this.previousSearchValue = this.selectedOption.label;
            return;
        }
        else if (inputValue && !optionFound) {
            /** @type {?} */
            var isInputValueDiffSelectedLabel = !!(this.selectedOption && this.selectedOption.label !== inputValue);
            this.updateSelectedValue(null, isInputValueDiffSelectedLabel || this.changeOnEnter);
            this.previousSearchValue = '';
            return;
        }
    };
    // Recebe as alterações do model
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboBaseComponent.prototype.writeValue = 
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (validValue(value) && !this.service && this.options && this.options.length) {
            /** @type {?} */
            var option = this.getOptionFromValue(value, this.options);
            this.updateSelectedValue(option);
            this.updateComboList();
            return;
        }
        // Se houver serviço busca pelo model.
        if (value && this.service) {
            return this.getObjectByValue(value);
        }
        if (!validValue(value)) {
            this.updateSelectedValue(null, true, true);
            this.updateComboList();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoComboBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoComboBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoComboBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoComboBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if ((requiredFailed(this.required, this.disabled, abstractControl.value))) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    PoComboBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    PoComboBaseComponent.prototype.configAfterSetFilterService = /**
     * @private
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (service) {
            this.options = [];
            this.unsubscribeKeyupObservable();
            this.onInitService();
        }
        else {
            this.service = undefined;
            this.options = this.cacheStaticOptions;
        }
        this.visibleOptions = [];
        this.isFirstFilter = true;
    };
    /**
     * @private
     * @return {?}
     */
    PoComboBaseComponent.prototype.unsubscribeKeyupObservable = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.keyupSubscribe) {
            this.keyupSubscribe.unsubscribe();
        }
    };
    /**
     * @private
     * @param {?} option
     * @return {?}
     */
    PoComboBaseComponent.prototype.updateInternalVariables = /**
     * @private
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (option) {
            this.selectedView = option;
            this.selectedOption = option;
        }
        else {
            this.selectedView = undefined;
            this.selectedOption = undefined;
        }
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} fromWriteValue
     * @return {?}
     */
    PoComboBaseComponent.prototype.updateModel = /**
     * @private
     * @param {?} value
     * @param {?=} fromWriteValue
     * @return {?}
     */
    function (value, fromWriteValue) {
        if (fromWriteValue === void 0) { fromWriteValue = false; }
        if (value !== this.selectedValue) {
            if (!fromWriteValue) {
                this.callModelChange(value);
            }
            this.change.emit(value);
        }
        this.selectedValue = value;
    };
    /**
     * @private
     * @return {?}
     */
    PoComboBaseComponent.prototype.updateSelectedValueWithOldOption = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var oldOption = this.getOptionFromValue(this.selectedValue, this.options);
        if (oldOption && oldOption.label) {
            return this.updateSelectedValue(oldOption);
        }
    };
    PoComboBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        name: [{ type: Input, args: ['name',] }],
        filterService: [{ type: Input, args: ['p-filter-service',] }],
        debounceTime: [{ type: Input, args: ['p-debounce-time',] }],
        disabledInitFilter: [{ type: Input, args: ['p-disabled-init-filter',] }],
        fieldValue: [{ type: Input, args: ['p-field-value',] }],
        fieldLabel: [{ type: Input, args: ['p-field-label',] }],
        filterMinlength: [{ type: Input, args: ['p-filter-minlength',] }],
        required: [{ type: Input, args: ['p-required',] }],
        changeOnEnter: [{ type: Input, args: ['p-change-on-enter',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        icon: [{ type: Input, args: ['p-icon',] }],
        options: [{ type: Input, args: ['p-options',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        setSort: [{ type: Input, args: ['p-sort',] }],
        filterMode: [{ type: Input, args: ['p-filter-mode',] }],
        filterParams: [{ type: Input, args: ['p-filter-params',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        change: [{ type: Output, args: ['p-change',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return PoComboBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._changeOnEnter;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._debounceTime;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._disabledInitFilter;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._fieldLabel;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._fieldValue;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._filterMinlength;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._filterParams;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._filterService;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype._required;
    /** @type {?} */
    PoComboBaseComponent.prototype.cacheOptions;
    /** @type {?} */
    PoComboBaseComponent.prototype.cacheStaticOptions;
    /** @type {?} */
    PoComboBaseComponent.prototype.defaultService;
    /** @type {?} */
    PoComboBaseComponent.prototype.firstInWriteValue;
    /** @type {?} */
    PoComboBaseComponent.prototype.isFirstFilter;
    /** @type {?} */
    PoComboBaseComponent.prototype.isFiltering;
    /** @type {?} */
    PoComboBaseComponent.prototype.keyupSubscribe;
    /** @type {?} */
    PoComboBaseComponent.prototype.onModelChange;
    /** @type {?} */
    PoComboBaseComponent.prototype.onModelTouched;
    /** @type {?} */
    PoComboBaseComponent.prototype.previousSearchValue;
    /** @type {?} */
    PoComboBaseComponent.prototype.selectedOption;
    /** @type {?} */
    PoComboBaseComponent.prototype.selectedValue;
    /** @type {?} */
    PoComboBaseComponent.prototype.selectedView;
    /** @type {?} */
    PoComboBaseComponent.prototype.service;
    /** @type {?} */
    PoComboBaseComponent.prototype.visibleOptions;
    /**
     * @type {?}
     * @private
     */
    PoComboBaseComponent.prototype.validatorChange;
    /**
     * Label no componente.
     * @type {?}
     */
    PoComboBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoComboBaseComponent.prototype.help;
    /**
     * Mensagem apresentada enquanto o campo estiver vazio.
     * @type {?}
     */
    PoComboBaseComponent.prototype.placeholder;
    /**
     * Nome do componente.
     * @type {?}
     */
    PoComboBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     * @type {?}
     */
    PoComboBaseComponent.prototype.icon;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoComboBaseComponent.prototype.optional;
    /**
     * Indica que a lista definida na propriedade p-options será ordenada pela descrição.
     * @type {?}
     */
    PoComboBaseComponent.prototype.sort;
    /**
     * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    PoComboBaseComponent.prototype.change;
    /** @type {?} */
    PoComboBaseComponent.prototype.ngModelChange;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoComboBaseComponent.prototype.setInputValue = function (value) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoComboBaseComponent.prototype.applyFilter = function (value) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoComboBaseComponent.prototype.getObjectByValue = function (value) { };
    /**
     * @abstract
     * @return {?}
     */
    PoComboBaseComponent.prototype.getInputValue = function () { };
    /**
     * @abstract
     * @return {?}
     */
    PoComboBaseComponent.prototype.initInputObservable = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
var PoComboFilterService = /** @class */ (function () {
    function PoComboFilterService(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    Object.defineProperty(PoComboFilterService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    PoComboFilterService.prototype.getFilteredData = /**
     * @param {?} param
     * @param {?=} filterParams
     * @return {?}
     */
    function (param, filterParams) {
        var _this = this;
        /** @type {?} */
        var value = param.value;
        /** @type {?} */
        var params = new HttpParams({
            fromString: "filter=" + value
        });
        return this.http.get("" + this.url, { responseType: 'json', params: params })
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.parseToArrayComboOption(response.items); })));
    };
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    PoComboFilterService.prototype.getObjectByValue = /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    function (value, filterParams) {
        var _this = this;
        return this.http.get(this.url + "/" + value).pipe(map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.parseToComboOption(item); })));
    };
    /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    PoComboFilterService.prototype.configProperties = /**
     * @param {?} url
     * @param {?} fieldLabel
     * @param {?} fieldValue
     * @return {?}
     */
    function (url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    PoComboFilterService.prototype.parseToArrayComboOption = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        if (items && items.length > 0) {
            return items.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return _this.parseToComboOption(item);
            }));
        }
        return [];
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    PoComboFilterService.prototype.parseToComboOption = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item && item[this.fieldValue]) {
            /** @type {?} */
            var label = item[this.fieldLabel];
            /** @type {?} */
            var value = item[this.fieldValue];
            return { label: label, value: value };
        }
    };
    PoComboFilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoComboFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoComboFilterService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoComboFilterService.prototype._url;
    /** @type {?} */
    PoComboFilterService.prototype.fieldLabel;
    /** @type {?} */
    PoComboFilterService.prototype.fieldValue;
    /**
     * @type {?}
     * @private
     */
    PoComboFilterService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoComboComponent
 *
 * \@description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista de opções do componente.
 *
 * > Quando utilizada em dispositivos *mobile* será exibido o componente nativo.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-combo-option-template` com `ng-template`
 * dentro da *tag* `po-combo`.
 *
 * Para obter a referência do item atual utilize `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-combo
 *   name="combo"
 *   [(ngModel)]="combo"
 *   [p-options]="options">
 *     <ng-template p-combo-option-template let-option>
 *       <option-template [option]="option"></option-template>
 *     </ng-template>
 * </po-combo>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-combo
 *   name="combo"
 *   [(ngModel)]="combo"
 *   [p-options]="options">
 *     <div *p-combo-option-template="let option">
 *       <option-template [option]="option"></option-template>
 *     </div>
 * </po-combo>
 * ...
 *
 * ```
 */
var PoComboOptionTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoComboOptionTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoComboOptionTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-combo-option-template]'
                },] }
    ];
    /** @nocollapse */
    PoComboOptionTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return PoComboOptionTemplateDirective;
}());
if (false) {
    /** @type {?} */
    PoComboOptionTemplateDirective.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poComboContainerOffset = 8;
/** @type {?} */
var poComboContainerPositionDefault = 'bottom';
/**
 * \@docsExtends PoComboBaseComponent
 *
 * \@description
 * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * \@example
 *
 * <example name="po-combo-basic" title="Portinari Combo Basic">
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-labs" title="Portinari Combo Labs">
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-scheduling" title="Portinari Combo - Scheduling">
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-transfer" title="Portinari Combo - Banking Transfer">
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes" title="Portinari Combo - Heroes">
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes-reactive-form" title="Portinari Combo - Heroes Reactive Form">
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-hotels" title="Portinari Combo - Booking Hotel">
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.service.ts"> </file>
 * </example>
 */
var PoComboComponent = /** @class */ (function (_super) {
    __extends(PoComboComponent, _super);
    function PoComboComponent(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.differs = differs;
        _this.defaultService = defaultService;
        _this.renderer = renderer;
        _this.changeDetector = changeDetector;
        _this.controlPosition = controlPosition;
        _this.sanitized = sanitized;
        _this._isServerSearching = false;
        _this.comboIcon = 'po-icon-arrow-down';
        _this.comboOpen = false;
        _this.isProcessingGetObjectByValue = false;
        _this.scrollTop = 0;
        _this.shouldMarkLetters = true;
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            _this.adjustContainerPosition();
        });
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(PoComboComponent.prototype, "isServerSearching", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isServerSearching;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._isServerSearching = value;
                this.changeDetector.detectChanges();
                this.setContainerPosition();
                this.initializeListeners();
            }
            else {
                this._isServerSearching = value;
                this.removeListeners();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoComboComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            this.validAndSortOptions();
            removeDuplicatedOptions(this.options);
        }
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     * @return {?}
     */
    PoComboComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.inputElement.nativeElement.focus();
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PoComboComponent.prototype.onKeyDown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode;
        /** @type {?} */
        var inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && key === PoKeyCodeEnum.tab && inputValue) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (key === PoKeyCodeEnum.arrowUp || key === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.comboOpen) {
                if (key === PoKeyCodeEnum.arrowUp) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (key === PoKeyCodeEnum.tab || key === PoKeyCodeEnum.esc) {
            if (key === PoKeyCodeEnum.esc && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            return;
        }
        // Tecla "enter"
        if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            /** @type {?} */
            var isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            this.updateComboList();
            return;
        }
        if (key === PoKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PoComboComponent.prototype.onKeyUp = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var key = event.keyCode || event.which;
        /** @type {?} */
        var inputValue = event.target.value;
        /** @type {?} */
        var isValidKey = (key !== PoKeyCodeEnum.arrowUp && key !== PoKeyCodeEnum.arrowDown && key !== PoKeyCodeEnum.enter);
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.options, this.filterMode);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                /** @type {?} */
                var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList(__spread(this.cacheOptions));
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.initInputObservable = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.service) {
            /** @type {?} */
            var keyupObservable = fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.isValidCharacterToSearch(e.keyCode); })), map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.currentTarget.value; })), distinctUntilChanged(), tap((/**
             * @return {?}
             */
            function () {
                _this.shouldMarkLetters = false;
            })), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value.length >= _this.filterMinlength || !value) {
                    _this.controlApplyFilter(value);
                }
            }));
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.controlApplyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
            this.applyFilter(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.applyFilter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.controlComboVisibility(false);
        this.isServerSearching = true;
        /** @type {?} */
        var param = { property: this.fieldLabel, value: value };
        this.filterSubscription = this.service.getFilteredData(param, this.filterParams)
            .subscribe((/**
         * @param {?} items
         * @return {?}
         */
        function (items) { return _this.setOptionsByApplyFilter(value, items); }));
    };
    /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    PoComboComponent.prototype.setOptionsByApplyFilter = /**
     * @param {?} value
     * @param {?} items
     * @return {?}
     */
    function (value, items) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.options = items;
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.options;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.getObjectByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (!this.selectedValue) {
            this.isProcessingGetObjectByValue = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams)
                .subscribe((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.updateOptionByFilteredValue(item); }));
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoComboComponent.prototype.updateOptionByFilteredValue = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout((/**
         * @return {?}
         */
        function () { _this.isProcessingGetObjectByValue = false; }), this.debounceTime);
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.selectPreviousOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.selectNextOption = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            /** @type {?} */
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            /** @type {?} */
            var index = this.changeOnEnter ? 1 : 0;
            /** @type {?} */
            var visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.toggleComboVisibility = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.applyFilterInFirstClick = /**
     * @return {?}
     */
    function () {
        if (this.isFirstFilter && !this.selectedValue) {
            this.applyFilter('');
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    PoComboComponent.prototype.controlComboVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        toOpen ? this.open() : this.close();
    };
    /**
     * @param {?} option
     * @param {?=} event
     * @return {?}
     */
    PoComboComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @param {?=} event
     * @return {?}
     */
    function (option, event) {
        /** @type {?} */
        var inputValue = this.getInputValue();
        /** @type {?} */
        var isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);
        if (event) {
            event.stopPropagation();
        }
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        this.updateComboList([__assign({}, this.selectedView)]);
        this.previousSearchValue = this.selectedView.label;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoComboComponent.prototype.scrollTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
        this.setScrollTop(scrollTop);
    };
    /**
     * @return {?}
     */
    PoComboComponent.prototype.getInputValue = /**
     * @return {?}
     */
    function () {
        return this.inputElement.nativeElement.value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.setInputValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputElement.nativeElement.value = value;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoComboComponent.prototype.wasClickedOnToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.comboOpen &&
            !this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            this.updateComboList();
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                this.applyFilter('');
            }
        }
    };
    /**
     * @param {?} label
     * @return {?}
     */
    PoComboComponent.prototype.getLabelFormatted = /**
     * @param {?} label
     * @return {?}
     */
    function (label) {
        /** @type {?} */
        var format = label;
        if (this.isFiltering ||
            (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {
            /** @type {?} */
            var labelInput = this.getInputValue().toString().toLowerCase();
            /** @type {?} */
            var labelLowerCase = label.toLowerCase();
            /** @type {?} */
            var openTagBold = '<span class="po-font-text-large-bold">';
            /** @type {?} */
            var closeTagBold = '</span>';
            /** @type {?} */
            var startString = void 0;
            /** @type {?} */
            var middleString = void 0;
            /** @type {?} */
            var endString = void 0;
            switch (this.filterMode) {
                case PoComboFilterMode.startsWith:
                case PoComboFilterMode.contains:
                    startString = label.substring(0, labelLowerCase.indexOf(labelInput));
                    middleString = label.substring(labelLowerCase.indexOf(labelInput), labelLowerCase.indexOf(labelInput) + labelInput.length);
                    endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);
                    format = startString + openTagBold + middleString + closeTagBold + endString;
                    break;
                case PoComboFilterMode.endsWith:
                    startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));
                    middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));
                    format = startString + openTagBold + middleString + closeTagBold;
                    break;
            }
        }
        return this.safeHtml(format);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.safeHtml = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    PoComboComponent.prototype.isValidCharacterToSearch = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoComboComponent.prototype.searchOnEnter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.adjustContainerPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.adjustPosition(poComboContainerPositionDefault);
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.close = /**
     * @private
     * @return {?}
     */
    function () {
        this.comboOpen = false;
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-down';
        this.removeListeners();
        this.isFiltering = false;
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.removeListeners();
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnToggle(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.adjustContainerPosition(); }), 250);
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.open = /**
     * @private
     * @return {?}
     */
    function () {
        this.comboOpen = true;
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-up';
        this.initializeListeners();
        this.inputElement.nativeElement.focus();
        this.scrollTo(this.getIndexSelectedView());
        this.setContainerPosition();
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoComboComponent.prototype.setContainerPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    };
    /**
     * @private
     * @param {?} scrollTop
     * @return {?}
     */
    PoComboComponent.prototype.setScrollTop = /**
     * @private
     * @param {?} scrollTop
     * @return {?}
     */
    function (scrollTop) {
        if (this.contentElement) {
            this.contentElement.nativeElement.scrollTop = scrollTop;
        }
    };
    PoComboComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-combo',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{icon}}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inputElement\n      class=\"po-input po-combo-input\"\n      [class.po-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <span #iconArrow\n        class=\"po-icon po-field-icon {{ comboIcon }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [class.po-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\">\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\">\n    </ng-container>\n\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"po-combo-container-loading\">\n    <po-loading></po-loading>\n  </div>\n</ng-template>\n\n<ng-template #optionsTemplate>\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate ; else noDataTemplate\">\n  </ng-container>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement class=\"po-combo-container-content\">\n    <li *ngFor=\"let option of visibleOptions\"\n      [class.po-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"onOptionClick(option, $event)\">\n      <a class=\"po-combo-item\">\n\n        <ng-container *ngIf=\"comboOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n        \n        <ng-template #defaultOptionTemplate>\n          <span [innerHTML]=\"getLabelFormatted(option?.label)\"></span>\n        </ng-template>\n\n        <ng-template #optionTemplate\n          [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n          [ngTemplateOutletContext]=\"{$implicit: option}\">\n        </ng-template>\n\n      </a>\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"po-combo-container-no-data\">\n    <div class=\"po-combo-no-data po-text-center\">\n      <span>\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
                    providers: [
                        PoComboFilterService,
                        PoControlPositionService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoComboComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoComboComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IterableDiffers },
        { type: PoComboFilterService },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: PoControlPositionService },
        { type: DomSanitizer }
    ]; };
    PoComboComponent.propDecorators = {
        comboOptionTemplate: [{ type: ContentChild, args: [PoComboOptionTemplateDirective, { static: true },] }],
        containerElement: [{ type: ViewChild, args: ['containerElement', { read: ElementRef, static: false },] }],
        contentElement: [{ type: ViewChild, args: ['contentElement', { read: ElementRef, static: false },] }],
        iconElement: [{ type: ViewChild, args: ['iconArrow', { read: ElementRef, static: true },] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef, static: true },] }]
    };
    return PoComboComponent;
}(PoComboBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype._isServerSearching;
    /** @type {?} */
    PoComboComponent.prototype.comboIcon;
    /** @type {?} */
    PoComboComponent.prototype.comboOpen;
    /** @type {?} */
    PoComboComponent.prototype.differ;
    /** @type {?} */
    PoComboComponent.prototype.isProcessingGetObjectByValue;
    /** @type {?} */
    PoComboComponent.prototype.scrollTop;
    /** @type {?} */
    PoComboComponent.prototype.service;
    /** @type {?} */
    PoComboComponent.prototype.shouldMarkLetters;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.clickoutListener;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.eventResizeListener;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.filterSubscription;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.getSubscription;
    /** @type {?} */
    PoComboComponent.prototype.comboOptionTemplate;
    /** @type {?} */
    PoComboComponent.prototype.containerElement;
    /** @type {?} */
    PoComboComponent.prototype.contentElement;
    /** @type {?} */
    PoComboComponent.prototype.iconElement;
    /** @type {?} */
    PoComboComponent.prototype.inputElement;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.onScroll;
    /** @type {?} */
    PoComboComponent.prototype.element;
    /** @type {?} */
    PoComboComponent.prototype.differs;
    /** @type {?} */
    PoComboComponent.prototype.defaultService;
    /** @type {?} */
    PoComboComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    PoComboComponent.prototype.sanitized;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Para usar o po-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
var /**
 * Para usar o po-mask é preciso instanciar esta classe passando a máscara como
 * primeiro parâmetro, e no segundo parâmetro, deve se informado true, caso queira
 * que o model seja formatado ou false para o que o model seja limpo.
 */
PoMask = /** @class */ (function () {
    function PoMask(mask, formatModel) {
        this.mask = '';
        this.formatModel = false;
        // controle de posição
        this.initialPosition = 0;
        this.finalPosition = 0;
        this.pattern = '';
        this.mask = mask;
        this.formatModel = formatModel;
        this.pattern = this.getRegexFromMask(mask);
    }
    Object.defineProperty(PoMask.prototype, "getPattern", {
        get: /**
         * @return {?}
         */
        function () {
            return this.pattern;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMask.prototype, "getValueToInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.valueToInput;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMask.prototype, "setValueToInput", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.valueToInput = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMask.prototype, "getValueToModel", {
        get: /**
         * @return {?}
         */
        function () {
            return this.valueToModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMask.prototype, "setValueToModel", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.valueToModel = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.keyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.mask) {
            /** @type {?} */
            var value = $event.target.value;
            // formata o valor quando for colado com control + v e reposiciona o cursor
            if ($event.keyCode === 17 || $event.keyCode === 91) {
                $event.target.value = this.controlFormatting(value);
                this.resetPositions($event);
            }
            $event.preventDefault();
            switch ($event.keyCode) {
                case 37: // seta esquerda
                    if (this.initialPosition > 0) {
                        this.initialPosition--;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 39: // seta direita
                    if (this.initialPosition < value.toString().length) {
                        this.initialPosition++;
                    }
                    this.setPositionNotShiftKey($event);
                    this.setSelectionRange($event);
                    break;
                case 35: // end
                    this.finalPosition = value.toString().length;
                    if ($event.shiftKey) {
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = this.finalPosition;
                        this.setPositions($event);
                    }
                    break;
                case 36: // HOME
                    if ($event.shiftKey) {
                        this.finalPosition = this.initialPosition;
                        this.initialPosition = 0;
                        this.setPositions($event);
                    }
                    else {
                        this.initialPosition = 0;
                        this.finalPosition = 0;
                        this.setPositions($event);
                    }
                    break;
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.setPositionNotShiftKey = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!$event.shiftKey) {
            this.finalPosition = this.initialPosition;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.setSelectionRange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.initialPosition > this.finalPosition) {
            $event.target.setSelectionRange(this.finalPosition, this.initialPosition);
        }
        else {
            $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.keydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.mask) {
            /** @type {?} */
            var value = $event.target.value;
            if ($event.keyCode === 9) {
                return;
            }
            if (!$event.ctrlKey && !$event.metaKey) {
                $event.preventDefault();
            }
            // Não faz nada quando for digitado CTRL ou COMMAND e V
            // Já está sendo tratado no evento keyup
            if ($event.ctrlKey || $event.metaKey && ($event.keyCode !== 86) ||
                ($event.keyCode >= 37 && $event.keyCode <= 40) || $event.keyCode === 16 || $event.keyCode === 9) {
                return;
            }
            // Valida a tecla digitada
            if (this.isKeyValid($event.keyCode)) {
                if (this.finalPosition === null) {
                    this.finalPosition = this.initialPosition;
                }
                this.revertPositions(this.initialPosition, this.finalPosition);
                switch ($event.keyCode) {
                    case 8: // backspace
                        this.getPosition($event);
                        if (this.initialPosition < 0) {
                            this.initialPosition = 0;
                            this.setPositions($event);
                        }
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskBefore($event, -1);
                            if (this.initialPosition !== 0) {
                                value = value.slice(0, this.initialPosition - 1) + value.slice(this.finalPosition);
                                value = this.controlFormatting(value);
                                $event.target.value = value;
                                this.changePosition($event, -1);
                                this.checkMaskBefore($event, -1);
                                this.setPositions($event);
                                this.resetPositions($event);
                            }
                        }
                        else {
                            this.clearRangeSelection(value, $event, true);
                        }
                        this.setPositions($event);
                        break;
                    case 46: // delete
                        this.getPosition($event);
                        if (this.initialPosition === this.finalPosition) {
                            this.checkMaskAfter($event, 1);
                            value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition + 1);
                            value = this.controlFormatting(value);
                            $event.target.value = value;
                            this.setPositions($event);
                            this.resetPositions($event);
                        }
                        else {
                            this.clearRangeSelection(value, $event, false);
                        }
                        this.setPositions($event);
                        break;
                    default: // qualquer outra tecla válida
                        value = value.slice(0, this.initialPosition) + $event.key + value.slice(this.finalPosition);
                        value = this.controlFormatting(value);
                        $event.target.value = value;
                        this.changePosition($event, 1);
                        this.checkMaskBefore($event, 1);
                        this.setPositions($event);
                        this.resetPositions($event);
                        this.setPositions($event);
                }
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} $event
     * @param {?} isBackspace
     * @return {?}
     */
    PoMask.prototype.clearRangeSelection = /**
     * @param {?} value
     * @param {?} $event
     * @param {?} isBackspace
     * @return {?}
     */
    function (value, $event, isBackspace) {
        value = value.slice(0, this.initialPosition) + value.slice(this.finalPosition);
        value = this.controlFormatting(value);
        $event.target.value = value;
        if (isBackspace) {
            this.checkMaskBefore($event, -1);
        }
        this.setPositions($event);
        this.resetPositions($event);
    };
    // passa a posição do click para o controle de posição
    // passa a posição do click para o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.click = 
    // passa a posição do click para o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.blur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // Se houver algum valor definido na máscara
        if (this.mask) {
            // pega o valor do campo, formata e passa para o model
            /** @type {?} */
            var value = $event.target.value;
            value = this.controlFormatting(value);
            $event.target.value = value;
        }
    };
    /**
     * @param {?} initialPosition
     * @param {?} finalPosition
     * @return {?}
     */
    PoMask.prototype.revertPositions = /**
     * @param {?} initialPosition
     * @param {?} finalPosition
     * @return {?}
     */
    function (initialPosition, finalPosition) {
        if (initialPosition > finalPosition) {
            // inverte o controle de posição caso o inicial esteja maior que o final
            /** @type {?} */
            var tempPosition = void 0;
            tempPosition = initialPosition;
            this.initialPosition = finalPosition;
            this.finalPosition = tempPosition;
        }
    };
    // reseta o controle de posição
    // reseta o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.resetPositions = 
    // reseta o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = this.initialPosition;
    };
    // posiciona o cursor de acordo com o controle de posição
    // posiciona o cursor de acordo com o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.setPositions = 
    // posiciona o cursor de acordo com o controle de posição
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.target.setSelectionRange(this.initialPosition, this.finalPosition);
    };
    // muda a posição do cursor e atualiza o controle de posição
    // muda a posição do cursor e atualiza o controle de posição
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    PoMask.prototype.changePosition = 
    // muda a posição do cursor e atualiza o controle de posição
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    function ($event, value) {
        this.initialPosition = this.initialPosition + value;
        this.finalPosition = this.finalPosition + value;
        this.setPositions($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PoMask.prototype.getPosition = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.initialPosition = $event.target.selectionStart;
        this.finalPosition = $event.target.selectionEnd;
        this.setPositions($event);
    };
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    /**
     * @param {?} value
     * @return {?}
     */
    PoMask.prototype.controlFormatting = 
    // Método responsável por controlar a formatação e aplicar todas as máscara possíveis
    // quando houver valores opcionais (?)
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Se o valor for vazio, retorna vazio
        if (!value) {
            this.valueToInput = '';
            this.valueToModel = '';
            return '';
        }
        /** @type {?} */
        var valueProcessed;
        /** @type {?} */
        var maskTmp = this.mask;
        // Array que será usado para armazenar todas as máscaras possíveis para
        // quando houver um valor opcional (?)
        /** @type {?} */
        var arrMasks = [];
        /** @type {?} */
        var contMasks = 0;
        // Enquanto houver algum 9? na máscara
        while (this.hasOptionalNumber(maskTmp)) {
            arrMasks.push(maskTmp);
            maskTmp = this.replaceOptionalNumber(maskTmp);
        }
        arrMasks.push(maskTmp);
        // Inverte o array
        arrMasks.reverse();
        // Informa que a formatação ainda não chegou ao fim
        this.formattingEnds = false;
        while (!this.formattingEnds) {
            // Seta a formatação como terminada
            // Então o método formatValue irá setar como não terminado caso haja
            this.formattingEnds = true;
            // Se não existe mais nenhuma máscara possível, então encerra a formatação
            if (!arrMasks[contMasks]) {
                break;
            }
            // Chama a formatação passando a máscara e o valor
            valueProcessed = this.formatValue(value, arrMasks[contMasks]);
            contMasks++;
        }
        return valueProcessed;
    };
    // Função que formata a máscara com o valor passado
    // Função que formata a máscara com o valor passado
    /**
     * @param {?} value
     * @param {?} mask
     * @return {?}
     */
    PoMask.prototype.formatValue = 
    // Função que formata a máscara com o valor passado
    /**
     * @param {?} value
     * @param {?} mask
     * @return {?}
     */
    function (value, mask) {
        // Remove as marcas de valor opciona (?)
        mask = mask.replace(/\?/g, '');
        // Substitui todos os caracteres que não são fixos da máscara por _
        /** @type {?} */
        var guide = mask.replace(this.listValidKeys(), '_');
        // Contador usado para percorrer o guide
        /** @type {?} */
        var contGuide = 0;
        // String final formatada
        /** @type {?} */
        var valueProcessed = '';
        // Remove do valor todos os caracteres fixos como ()/-+
        value = this.removeFormattingValue(value);
        // Percorre todo o valor e coloca a formatação de acordo com a máscara
        for (var i = 0; i < value.length; i++) {
            /** @type {?} */
            var charValue = value[i];
            // Se o guide acabou, seta a formatação como não terminada para que o método controlFormatting
            // tente formatar com outra possível máscara
            if (!guide[contGuide]) {
                this.formattingEnds = false;
                break;
            }
            // Percorre o Guide enquanto tem caracteres fixos
            while (this.isFixedCharacterGuide(guide[contGuide]) && guide[contGuide]) {
                valueProcessed += guide[contGuide];
                contGuide++;
            }
            // É um caracter válido de acordo com a máscara
            if (this.isKeyValidMask(charValue, mask[contGuide])) {
                valueProcessed += charValue;
                contGuide++;
            }
            else {
                // Se não é um caracter válido, deve interromper.
                break;
            }
        }
        if (this.formatModel) {
            this.valueToInput = valueProcessed;
            this.valueToModel = valueProcessed;
        }
        else {
            this.valueToInput = valueProcessed;
            this.valueToModel = this.removeFormattingValue(valueProcessed);
        }
        return valueProcessed;
    };
    // verifica se tem algum caracter de mascara antes do cursor
    // verifica se tem algum caracter de mascara antes do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    PoMask.prototype.checkMaskBefore = 
    // verifica se tem algum caracter de mascara antes do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    function ($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition - 1))) {
            this.changePosition($event, position);
            this.checkMaskBefore($event, position);
        }
    };
    // verifica se tem algum caracter de mascara depois do cursor
    // verifica se tem algum caracter de mascara depois do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    PoMask.prototype.checkMaskAfter = 
    // verifica se tem algum caracter de mascara depois do cursor
    /**
     * @param {?} $event
     * @param {?} position
     * @return {?}
     */
    function ($event, position) {
        if (this.isFixedCharacterGuide($event.target.value.toString().charAt(this.initialPosition))) {
            this.changePosition($event, position);
            this.checkMaskAfter($event, position);
        }
    };
    // Retorna a máscara sem um valor opcional
    // Retorna a máscara sem um valor opcional
    /**
     * @param {?} mask
     * @return {?}
     */
    PoMask.prototype.replaceOptionalNumber = 
    // Retorna a máscara sem um valor opcional
    /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        /** @type {?} */
        var i = 9;
        while (i >= 0) {
            if (mask.indexOf(i + '?') > -1) {
                return mask.replace(i + '?', '');
            }
            i--;
        }
        return mask;
    };
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    /**
     * @param {?} key
     * @return {?}
     */
    PoMask.prototype.isFixedCharacterGuide = 
    // Verifica se contém caracteres permitidos somente na máscara \/() +-
    /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.testRegex(key, this.getFixedCharacterGuide());
    };
    // Retorna caracteres permitidos somente na máscara \/() +-
    // Retorna caracteres permitidos somente na máscara \/() +-
    /**
     * @return {?}
     */
    PoMask.prototype.getFixedCharacterGuide = 
    // Retorna caracteres permitidos somente na máscara \/() +-
    /**
     * @return {?}
     */
    function () {
        return /[\\\/() +-.\:]/g;
    };
    // Caracteres permitidos de serem digitados
    // Caracteres permitidos de serem digitados
    /**
     * @return {?}
     */
    PoMask.prototype.listValidKeys = 
    // Caracteres permitidos de serem digitados
    /**
     * @return {?}
     */
    function () {
        return /[a-zA-Z0-9]/g;
    };
    // Se é um dígito válido
    // Se é um dígito válido
    /**
     * @param {?} keyCode
     * @return {?}
     */
    PoMask.prototype.isKeyValid = 
    // Se é um dígito válido
    /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return this.isKeyCodeValid(keyCode);
    };
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    /**
     * @param {?} keyCode
     * @return {?}
     */
    PoMask.prototype.isKeyCodeValid = 
    // Verifica se a tecla digitada é permitida
    // Permite apenas números, letras, backspace e del
    /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        return ((keyCode >= 48 && keyCode <= 57) ||
            (keyCode >= 65 && keyCode <= 90) ||
            (keyCode >= 96 && keyCode <= 105) ||
            (keyCode === 8) || keyCode === 9 ||
            (keyCode === 46));
    };
    // Se está de acordo com a máscara
    // Se está de acordo com a máscara
    /**
     * @param {?} key
     * @param {?} keyMask
     * @return {?}
     */
    PoMask.prototype.isKeyValidMask = 
    // Se está de acordo com a máscara
    /**
     * @param {?} key
     * @param {?} keyMask
     * @return {?}
     */
    function (key, keyMask) {
        return this.testRegex(key, this.replaceMask(keyMask));
    };
    // Retorna se a chave foi aprovada pela expressão regular
    // Retorna se a chave foi aprovada pela expressão regular
    /**
     * @param {?} key
     * @param {?} regex
     * @return {?}
     */
    PoMask.prototype.testRegex = 
    // Retorna se a chave foi aprovada pela expressão regular
    /**
     * @param {?} key
     * @param {?} regex
     * @return {?}
     */
    function (key, regex) {
        return regex.test(key);
    };
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    /**
     * @param {?} value
     * @return {?}
     */
    PoMask.prototype.removeFormattingValue = 
    // Remove a formatacão do valor
    // É possível ser melhorado para remover pontualmente os caracteres fixos de acordo com a máscara
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.replace(this.getFixedCharacterGuide(), '');
    };
    // Verifica se contém valor opcional na máscara 0-9?
    // Verifica se contém valor opcional na máscara 0-9?
    /**
     * @param {?} mask
     * @return {?}
     */
    PoMask.prototype.hasOptionalNumber = 
    // Verifica se contém valor opcional na máscara 0-9?
    /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        return mask.match(/\d\?/g);
    };
    // Retorna a expressão regular correspondente ao comando passado
    // Retorna a expressão regular correspondente ao comando passado
    /**
     * @param {?} char
     * @return {?}
     */
    PoMask.prototype.replaceMask = 
    // Retorna a expressão regular correspondente ao comando passado
    /**
     * @param {?} char
     * @return {?}
     */
    function (char) {
        /** @type {?} */
        var regex = /./;
        switch (char) {
            case '0':
                regex = /[0]/;
                break;
            case '1':
                regex = /[0-1]/;
                break;
            case '2':
                regex = /[0-2]/;
                break;
            case '3':
                regex = /[0-3]/;
                break;
            case '4':
                regex = /[0-4]/;
                break;
            case '5':
                regex = /[0-5]/;
                break;
            case '6':
                regex = /[0-6]/;
                break;
            case '7':
                regex = /[0-7]/;
                break;
            case '8':
                regex = /[0-8]/;
                break;
            case '9':
                regex = /[0-9]/;
                break;
            case ' ':
                regex = /\s/;
                break;
            case '@':
                regex = /[a-zA-Z]/;
                break;
            case 'w':
                regex = /[a-zA-Z0-9]/;
                break;
        }
        return regex;
    };
    /**
     * @param {?} mask
     * @return {?}
     */
    PoMask.prototype.getRegexFromMask = /**
     * @param {?} mask
     * @return {?}
     */
    function (mask) {
        if (mask) {
            /** @type {?} */
            var pattern = void 0;
            if (this.formatModel) {
                pattern = mask.replace(/\\/g, '\\\\');
                pattern = pattern.replace(/\+/g, '\\+');
                pattern = pattern.replace(/\./g, '\\.');
                pattern = pattern.replace(/-/g, '-');
                pattern = pattern.replace(/\(/g, '\\(');
                pattern = pattern.replace(/\)/g, '\\)');
                pattern = pattern.replace(/\//g, '\\/');
                pattern = pattern.replace(/\s/g, '\\s');
                pattern = pattern.replace(/:/g, '\\:');
                pattern = pattern.replace(/\@(?!\s)/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            else {
                pattern = mask.replace(/\\/g, '');
                pattern = pattern.replace(/\+/g, '');
                pattern = pattern.replace(/\./g, '');
                pattern = pattern.replace(/-/g, '');
                pattern = pattern.replace(/\(/g, '');
                pattern = pattern.replace(/\)/g, '');
                pattern = pattern.replace(/\//g, '');
                pattern = pattern.replace(/\s/g, '');
                pattern = pattern.replace(/:/g, '');
                pattern = pattern.replace(/\@/g, '\\w');
                pattern = pattern.replace(/\d/g, '\\w');
            }
            return pattern;
        }
        else {
            return null;
        }
    };
    return PoMask;
}());
if (false) {
    /** @type {?} */
    PoMask.prototype.mask;
    /** @type {?} */
    PoMask.prototype.formatModel;
    /** @type {?} */
    PoMask.prototype.initialPosition;
    /** @type {?} */
    PoMask.prototype.finalPosition;
    /** @type {?} */
    PoMask.prototype.pattern;
    /** @type {?} */
    PoMask.prototype.valueToInput;
    /** @type {?} */
    PoMask.prototype.valueToModel;
    /** @type {?} */
    PoMask.prototype.formattingEnds;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poDatepickerFormatDefault = 'dd/mm/yyyy';
/**
 * \@description
 *
 * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade `p-locale`.
 *
 * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
 * Date padrão do Javascript.
 *
 * > O formato de saída do *model* se ajusta conforme o formato de entrada, veja abaixo:
 *
 * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
 *
 * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
 *
 * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
 *
 * **Importante:**
 *
 * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
 * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
 * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
 * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
 * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
 *
 * Exemplo:
 *
 * ```
 * <po-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </po-datepicker>
 * ```
 *
 * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
 * @abstract
 */
var PoDatepickerBaseComponent = /** @class */ (function () {
    function PoDatepickerBaseComponent() {
        this._format = poDatepickerFormatDefault;
        this._noAutocomplete = false;
        this._placeholder = '';
        this.firstStart = true;
        this.hour = 'T00:00:01-00:00';
        this.isExtendedISO = false;
        this.onChangeModel = null;
        this.onTouchedModel = null;
        /**
         * Desabilita o campo.
         */
        this.disabled = false;
        /**
         * Torna o elemento somente leitura.
         */
        this.readonly = false;
        /**
         * Faz com que o campo seja obrigatório.
         */
        this.required = false;
        /**
         * Habilita ação para limpar o campo.
         */
        this.clean = false;
        /**
         * Mensagem apresentada quando a data for inválida ou fora do período.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
         */
        this.errorPattern = '';
        /**
         * Evento disparado ao sair do campo.
         */
        this.onblur = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.onchange = new EventEmitter();
    }
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "noAutocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noAutocomplete;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noAutocomplete = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         * @param {?} placeholder
         * @return {?}
         */
        function (placeholder) {
            this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "setDisabled", {
        set: /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "setReadonly", {
        set: /**
         * @param {?} readonly
         * @return {?}
         */
        function (readonly) {
            this.readonly = readonly === '' ? true : convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "setRequired", {
        set: /**
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this.required = required === '' ? true : convertToBoolean(required);
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "autofocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autofocus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * \@default `false`
         * @param {?} autofocus
         * @return {?}
         */
        function (autofocus) {
            this._autofocus = convertToBoolean(autofocus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "setClean", {
        set: /**
         * @param {?} clean
         * @return {?}
         */
        function (clean) {
            this.clean = clean === '' ? true : convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "minDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma data mínima para o `po-datepicker`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma data mínima para o `po-datepicker`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Date) {
                /** @type {?} */
                var year = value.getFullYear();
                /** @type {?} */
                var date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
                setYearFrom0To100(date, year);
                this._minDate = date;
            }
            else {
                this._minDate = convertIsoToDate(value, true, false);
            }
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "maxDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma data máxima para o `po-datepicker`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma data máxima para o `po-datepicker`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Date) {
                /** @type {?} */
                var year = value.getFullYear();
                /** @type {?} */
                var date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
                setYearFrom0To100(date, year);
                this._maxDate = date;
            }
            else {
                this._maxDate = convertIsoToDate(value, false, true);
            }
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "format", {
        get: /**
         * @return {?}
         */
        function () {
            return this._format;
        },
        /**
         * @optional
         *
         * @description
         *
         * Formato de exibição da data.
         *
         * Valores válidos:
         *  - `dd/mm/yyyy`
         *  - `mm/dd/yyyy`
         *  - `yyyy/mm/dd`
         *
         * @default `dd/mm/yyyy`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Formato de exibição da data.
         *
         * Valores válidos:
         *  - `dd/mm/yyyy`
         *  - `mm/dd/yyyy`
         *  - `yyyy/mm/dd`
         *
         * \@default `dd/mm/yyyy`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                value = value.toLowerCase();
                if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                    this._format = value;
                    this.objMask = this.buildMask();
                    this.refreshValue(this.date);
                    return;
                }
            }
            this._format = poDatepickerFormatDefault;
            this.objMask = this.buildMask();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "locale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._locale || getShortBrowserLanguage();
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._locale = value.length >= 2 ? value : 'pt';
            }
            else {
                this._locale = getShortBrowserLanguage();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Classe de máscara
        this.objMask = this.buildMask();
    };
    // Converte um objeto string em Date
    // Converte um objeto string em Date
    /**
     * @param {?} dateString
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.getDateFromString = 
    // Converte um objeto string em Date
    /**
     * @param {?} dateString
     * @return {?}
     */
    function (dateString) {
        /** @type {?} */
        var day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
        /** @type {?} */
        var month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
        /** @type {?} */
        var year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
        /** @type {?} */
        var date = new Date(year, month, day);
        setYearFrom0To100(date, year);
        return (date.getFullYear() === year && date.getMonth() === month && date.getDate() === day) ? date : null;
    };
    // Formata a data.
    // Formata a data.
    /**
     * @param {?} value
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.formatToDate = 
    // Formata a data.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    };
    // Método responsável por controlar o modelo.
    // Método responsável por controlar o modelo.
    /**
     * @param {?} date
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.controlModel = 
    // Método responsável por controlar o modelo.
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        this.date = date;
        if (date && this.isExtendedISO) {
            this.callOnChange(convertDateToISOExtended(this.date, this.hour));
        }
        else if (date && !this.isExtendedISO) {
            this.callOnChange(convertDateToISODate(this.date));
        }
        else {
            date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
        }
    };
    // Executa a função onChange
    // Executa a função onChange
    /**
     * @param {?} value
     * @param {?=} retry
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.callOnChange = 
    // Executa a função onChange
    /**
     * @param {?} value
     * @param {?=} retry
     * @return {?}
     */
    function (value, retry) {
        var _this = this;
        if (retry === void 0) { retry = true; }
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
        else if (retry) {
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.callOnChange(value, false); }));
        }
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouchedModel = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    /**
     * @protected
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.buildMask = 
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    /**
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern = this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
        if (dateFailed(c.value)) {
            this.errorPattern = this.errorPattern || 'Data inválida';
            return { date: {
                    valid: false,
                } };
        }
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        if ((this.date && !validateDateRange(this.date, this._minDate, this._maxDate))) {
            this.errorPattern = this.errorPattern || 'Data fora do período';
            return { date: {
                    valid: false,
                } };
        }
        return null;
    };
    PoDatepickerBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        noAutocomplete: [{ type: Input, args: ['p-no-autocomplete',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        setDisabled: [{ type: Input, args: ['p-disabled',] }],
        setReadonly: [{ type: Input, args: ['p-readonly',] }],
        setRequired: [{ type: Input, args: ['p-required',] }],
        autofocus: [{ type: Input, args: ['p-focus',] }],
        setClean: [{ type: Input, args: ['p-clean',] }],
        errorPattern: [{ type: Input, args: ['p-error-pattern',] }],
        minDate: [{ type: Input, args: ['p-min-date',] }],
        maxDate: [{ type: Input, args: ['p-max-date',] }],
        format: [{ type: Input, args: ['p-format',] }],
        locale: [{ type: Input, args: ['p-locale',] }],
        onblur: [{ type: Output, args: ['p-blur',] }],
        onchange: [{ type: Output, args: ['p-change',] }]
    };
    return PoDatepickerBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDatepickerBaseComponent.prototype._autofocus;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerBaseComponent.prototype._format;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerBaseComponent.prototype._maxDate;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerBaseComponent.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerBaseComponent.prototype._noAutocomplete;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerBaseComponent.prototype._placeholder;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerBaseComponent.prototype.date;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerBaseComponent.prototype.firstStart;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerBaseComponent.prototype.hour;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerBaseComponent.prototype.isExtendedISO;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerBaseComponent.prototype.objMask;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerBaseComponent.prototype.onChangeModel;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerBaseComponent.prototype.onTouchedModel;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerBaseComponent.prototype.validatorChange;
    /** @type {?} */
    PoDatepickerBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype.optional;
    /**
     * Desabilita o campo.
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype.disabled;
    /**
     * Torna o elemento somente leitura.
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype.readonly;
    /**
     * Faz com que o campo seja obrigatório.
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype.required;
    /**
     * Habilita ação para limpar o campo.
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype.clean;
    /**
     * Mensagem apresentada quando a data for inválida ou fora do período.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype.errorPattern;
    /**
     * \@optional
     *
     * \@description
     *
     * Idioma do Datepicker.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype._locale;
    /**
     * Evento disparado ao sair do campo.
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype.onblur;
    /**
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    PoDatepickerBaseComponent.prototype.onchange;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.writeValue = function (value) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoDatepickerBaseComponent.prototype.refreshValue = function (value) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poCalendarContentOffset = 8;
/** @type {?} */
var poCalendarPositionDefault = 'bottom-left';
/**
 * \@docsExtends PoDatepickerBaseComponent
 *
 * \@example
 *
 * <example name="po-datepicker-basic" title="Portinari Datepicker Basic">
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.ts"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.po.ts"> </file>
 *  <file name="sample-po-datepicker-basic/sample-po-datepicker-basic.component.e2e-spec.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-labs" title="Portinari Datepicker Labs">
 *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-labs/sample-po-datepicker-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-airfare" title="Portinari Datepicker - Airfare">
 *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.html"> </file>
 *  <file name="sample-po-datepicker-airfare/sample-po-datepicker-airfare.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-airfare-reactive-form" title="Portinari Datepicker - Airfare Reactive Form">
 *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.html"> </file>
 *  <file name="sample-po-datepicker-airfare-reactive-form/sample-po-datepicker-airfare-reactive-form.component.ts"> </file>
 * </example>
 */
var PoDatepickerComponent = /** @class */ (function (_super) {
    __extends(PoDatepickerComponent, _super);
    function PoDatepickerComponent(controlPosition, renderer, el) {
        var _this = _super.call(this) || this;
        _this.controlPosition = controlPosition;
        _this.renderer = renderer;
        _this.dateRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])$');
        _this.isoRegex = new RegExp('^(?:[0-9])\\d{1}(?:[0-9])\\d{1}-' +
            '(?:0[1-9]|1[0-2])-' +
            '(?:0[1-9]|[12]\\d|3[01])' +
            'T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:Z|-0[1-9]|-1\\d|-2[0-3]|' +
            '-00:?(?:0[1-9]|[0-5]\\d)|\\+[01]\\d|\\+2[0-3])' +
            '(?:|:?[0-5]\\d)$');
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            _this.controlPosition.adjustPosition(poCalendarPositionDefault);
        });
        _this.el = el;
        return _this;
    }
    Object.defineProperty(PoDatepickerComponent.prototype, "autocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoDatepickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setDialogPickerStyleDisplay('none');
        // Põe o foco no Input, setado pelo p-focus
        if (this.autofocus) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoDatepickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoDatepickerComponent, { static: true }) datepicker: PoDatepickerComponent;
     *
     * focusDatepicker() {
     *   this.datepicker.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoDatepickerComponent, { static: true }) datepicker: PoDatepickerComponent;
     *
     * focusDatepicker() {
     *   this.datepicker.focus();
     * }
     * ```
     * @return {?}
     */
    PoDatepickerComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoDatepickerComponent, { static: true }) datepicker: PoDatepickerComponent;
     *
     * focusDatepicker() {
     *   this.datepicker.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoDatepickerComponent.prototype.togglePicker = /**
     * @return {?}
     */
    function () {
        if (this.disabled || this.readonly) {
            return;
        }
        if (!this.calendar.visible) {
            this.calendar.init();
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.inputEl.nativeElement.disabled = false;
            this.closeCalendar();
        }
    };
    /**
     * @return {?}
     */
    PoDatepickerComponent.prototype.dateSelected = /**
     * @return {?}
     */
    function () {
        if (!this.verifyMobile()) {
            this.inputEl.nativeElement.focus();
        }
        this.inputEl.nativeElement.value = this.formatToDate(this.date);
        this.controlModel(this.date);
        this.controlChangeEmitter();
        this.closeCalendar();
    };
    // Esconde Picker quando for clicado fora
    // Esconde Picker quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    PoDatepickerComponent.prototype.wasClickedOnPicker = 
    // Esconde Picker quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.dialogPicker || !this.iconDatepicker) {
            return;
        }
        if ((!this.dialogPicker.nativeElement.contains(event.target) || this.hasOverlayClass(event.target)) &&
            !this.iconDatepicker.nativeElement.contains(event.target) && !this.hasAttrCalendar(event.target)) {
            this.closeCalendar();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PoDatepickerComponent.prototype.onKeyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keyup($event);
        // Controla a atualização do model, verificando se a data é valida
        if (this.objMask.valueToModel || this.objMask.valueToModel === '') {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(this.getDateFromString(this.inputEl.nativeElement.value));
                this.date = this.getDateFromString(this.inputEl.nativeElement.value);
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
        }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    PoDatepickerComponent.prototype.onKeydown = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        if (this.readonly) {
            return;
        }
        this.objMask.keydown($event);
    };
    /**
     * @return {?}
     */
    PoDatepickerComponent.prototype.hasInvalidClass = /**
     * @return {?}
     */
    function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    PoDatepickerComponent.prototype.getErrorPattern = /**
     * @return {?}
     */
    function () {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    };
    /**
     * @return {?}
     */
    PoDatepickerComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.valueBeforeChange = this.formatToDate(this.date);
        this.date = undefined;
        this.controlModel(this.date);
        this.controlChangeEmitter();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PoDatepickerComponent.prototype.eventOnBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var date = this.inputEl.nativeElement.value;
        /** @type {?} */
        var newDate = date ? this.getDateFromString(date) : undefined;
        this.objMask.blur($event);
        this.onblur.emit();
        if (this.objMask.valueToModel) {
            if (this.objMask.valueToModel.length >= 10) {
                this.controlModel(newDate);
                this.date = newDate;
            }
            else {
                this.date = undefined;
                this.controlModel(this.date);
            }
        }
        else {
            this.date = undefined;
            this.callOnChange(this.date);
        }
        this.controlChangeEmitter();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PoDatepickerComponent.prototype.eventOnClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (this.verifyMobile()) {
            $event.target.blur();
            // abre o calendar quando clicar no input somente no mobile
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.togglePicker(); }), 0);
        }
        else {
            // Atualiza a posição do cursor ao clicar
            this.objMask.click($event);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoDatepickerComponent.prototype.formatToDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return undefined;
        }
        /** @type {?} */
        var dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoDatepickerComponent.prototype.refreshValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.inputEl.nativeElement.value = this.formatToDate(value);
        }
    };
    // Função implementada do ControlValueAccessor
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    PoDatepickerComponent.prototype.writeValue = 
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl && value) {
            if (value instanceof Date) {
                /** @type {?} */
                var dateString = value.toString();
                this.hour = 'T' + dateString.substring(16, 24) + dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
                this.date = value;
                this.inputEl.nativeElement.value = this.formatToDate(value);
            }
            else if (this.isValidDateIso(value) || this.isValidExtendedIso(value)) {
                if (this.isValidDateIso(value)) {
                    this.isExtendedISO = false;
                }
                else {
                    this.hour = value.substring(10, 25);
                    this.isExtendedISO = true;
                }
                /** @type {?} */
                var day = parseInt(value.substring(8, 10), 10);
                /** @type {?} */
                var month = parseInt(value.substring(5, 7), 10) - 1;
                /** @type {?} */
                var year = parseInt(value.substring(0, 4), 10);
                /** @type {?} */
                var dateTemp = new Date(year, month, day);
                setYearFrom0To100(dateTemp, year);
                this.date = dateTemp;
                this.inputEl.nativeElement.value = this.formatToDate(dateTemp);
            }
            else {
                this.inputEl.nativeElement.value = '';
                this.date = undefined;
            }
            this.controlModel(this.date);
        }
        else if (this.inputEl) {
            this.inputEl.nativeElement.value = '';
            this.date = undefined;
        }
        this.valueBeforeChange = this.formatToDate(this.date);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoDatepickerComponent.prototype.isValidDateIso = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.dateRegex.test(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoDatepickerComponent.prototype.isValidExtendedIso = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.isoRegex.test(value);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    PoDatepickerComponent.prototype.hasOverlayClass = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return element.classList.contains('po-calendar-overlay');
    };
    /* istanbul ignore next */
    /* istanbul ignore next */
    /**
     * @return {?}
     */
    PoDatepickerComponent.prototype.verifyMobile = /* istanbul ignore next */
    /**
     * @return {?}
     */
    function () {
        return isMobile();
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerComponent.prototype.closeCalendar = /**
     * @private
     * @return {?}
     */
    function () {
        this.calendar.close();
        this.removeListeners();
        this.setDialogPickerStyleDisplay('none');
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerComponent.prototype.controlChangeEmitter = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var dateModelFormatted = this.formatToDate(this.date);
        if (dateModelFormatted !== this.valueBeforeChange) {
            this.valueBeforeChange = dateModelFormatted;
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.onchange.emit(dateModelFormatted);
            }), 200);
        }
    };
    /**
     * @private
     * @param {?} element
     * @return {?}
     */
    PoDatepickerComponent.prototype.hasAttrCalendar = /**
     * @private
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var attrCalendar = 'attr-calendar';
        return (element && element.hasAttribute(attrCalendar)) || (element.parentElement && element.parentElement.hasAttribute(attrCalendar));
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnPicker(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.closeCalendar();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDatepickerComponent.prototype.setDialogPickerStyleDisplay = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.dialogPicker.nativeElement.style.display = value;
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerComponent.prototype.setCalendarPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.setDialogPickerStyleDisplay('block');
        this.controlPosition.setElements(this.dialogPicker.nativeElement, poCalendarContentOffset, this.inputEl, ['top-left', 'bottom-left'], false, true);
        this.controlPosition.adjustPosition(poCalendarPositionDefault);
    };
    PoDatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-datepicker',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n\n    <input #inp\n      class=\"po-input po-datepicker\"\n      [ngClass]=\"clean && inp.value ? 'po-input-double-icon-right' : 'po-input-icon-right'\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear()\"></po-clean>\n\n      <span #iconDatepicker\n        class=\"po-icon po-field-icon po-icon-calendar\"\n        [class.po-field-icon]=\"!disabled && !readonly\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"togglePicker()\">\n      </span>\n    </div>\n  </div>\n\n  <div #dialogPicker [class.po-datepicker-popup-calendar]=\"!verifyMobile()\">\n    <po-calendar #calendar\n      [p-date-end]=\"maxDate\"\n      [p-date-start]=\"minDate\"\n      [p-locale]=\"locale\"\n      [(p-selected-date)]=\"date\"\n      (p-submit)=\"dateSelected()\">\n    </po-calendar>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorPattern()\"></po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoDatepickerComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoDatepickerComponent; })),
                            multi: true,
                        },
                        PoControlPositionService
                    ]
                }] }
    ];
    /** @nocollapse */
    PoDatepickerComponent.ctorParameters = function () { return [
        { type: PoControlPositionService },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    PoDatepickerComponent.propDecorators = {
        calendar: [{ type: ViewChild, args: ['calendar', { static: true },] }],
        dialogPicker: [{ type: ViewChild, args: ['dialogPicker', { read: ElementRef, static: true },] }],
        iconDatepicker: [{ type: ViewChild, args: ['iconDatepicker', { read: ElementRef, static: true },] }],
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        onKeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return PoDatepickerComponent;
}(PoDatepickerBaseComponent));
if (false) {
    /** @type {?} */
    PoDatepickerComponent.prototype.date;
    /** @type {?} */
    PoDatepickerComponent.prototype.el;
    /** @type {?} */
    PoDatepickerComponent.prototype.hour;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.clickListener;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.dateRegex;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.isoRegex;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.timeoutChange;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.valueBeforeChange;
    /** @type {?} */
    PoDatepickerComponent.prototype.eventListenerFunction;
    /** @type {?} */
    PoDatepickerComponent.prototype.eventResizeListener;
    /** @type {?} */
    PoDatepickerComponent.prototype.calendar;
    /** @type {?} */
    PoDatepickerComponent.prototype.dialogPicker;
    /** @type {?} */
    PoDatepickerComponent.prototype.iconDatepicker;
    /** @type {?} */
    PoDatepickerComponent.prototype.inputEl;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    PoDatepickerComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoDatepickerComponent.prototype.help;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.onScroll;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poDatepickerRangeLiteralsDefault = {
    en: (/** @type {?} */ ({
        invalidFormat: 'Date in invalid format',
        startDateGreaterThanEndDate: 'Start date greater than end date',
    })),
    es: (/** @type {?} */ ({
        invalidFormat: 'Fecha en formato no válido',
        startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',
    })),
    pt: (/** @type {?} */ ({
        invalidFormat: 'Data no formato inválido',
        startDateGreaterThanEndDate: 'Data inicial maior que data final',
    })),
    ru: (/** @type {?} */ ({
        invalidFormat: 'Дата в неверном формате',
        startDateGreaterThanEndDate: 'Дата начала больше даты окончания',
    }))
};
/**
 * \@description
 *
 * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
 * a data inicial ou a data final.
 *
 * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface
 * `PoDatepickerRange`, contendo as seguintes propriedades:
 * ```
 * { "start": '2017-11-28', "end": '2017-11-30' }
 * ```
 *
 * <a id="accepted-formats"></a>
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * new Date(2017, 10, 28);
 * ```
 *
 * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
 * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
 *
 * Importante:
 *
 * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
 * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
 * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do
 * `[(ngModel)]`, no entanto sem a validação do formulário;
 * - Para a validação do formulário, utilize o `[(ngModel)]`.
 * @abstract
 */
var PoDatepickerRangeBaseComponent = /** @class */ (function () {
    function PoDatepickerRangeBaseComponent(poDateService) {
        this.poDateService = poDateService;
        this.errorMessage = '';
        this._clean = false;
        this._noAutocomplete = false;
        this._readonly = false;
        this._required = false;
        this.dateRange = { start: '', end: '' };
        this.format = 'dd/mm/yyyy';
        this.isDateRangeInputFormatValid = true;
        this.isStartDateRangeInputValid = true;
        /**
         * \@optional
         *
         * \@description
         *
         * Evento disparado ao alterar valor do campo.
         */
        this.onChange = new EventEmitter();
    }
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "isDateRangeInputValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "clean", {
        get: /**
         * @return {?}
         */
        function () {
            return this._clean;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita ação para limpar o campo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita ação para limpar o campo.
         *
         * \@default `false`
         * @param {?} clean
         * @return {?}
         */
        function (clean) {
            this._clean = convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o campo.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita o campo.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "endDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._endDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data final.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data final.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this._endDate = this.convertPatternDateFormat(date);
            this.dateRange.end = this.endDate;
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poDatepickerRangeLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-datepicker-range`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format',
         *    startDateGreaterThanEndDate: 'End date less than start date'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-datepicker-range
         *   [p-literals]="customLiterals">
         * </po-datepicker-range>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-datepicker-range`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format',
         *    startDateGreaterThanEndDate: 'End date less than start date'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-datepicker-range
         *   [p-literals]="customLiterals">
         * </po-datepicker-range>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poDatepickerRangeLiteralsDefault[poLocaleDefault], poDatepickerRangeLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poDatepickerRangeLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "noAutocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noAutocomplete;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noAutocomplete = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será somente leitura.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = convertToBoolean(value);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "startDate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._startDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data inicial.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Data inicial.
         * @param {?} date
         * @return {?}
         */
        function (date) {
            this._startDate = this.convertPatternDateFormat(date);
            this.dateRange.start = this.startDate;
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouchedModel = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.validate = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var value = control.value || {};
        /** @type {?} */
        var startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
        /** @type {?} */
        var endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
        if (this.requiredDateRangeFailed(startDate, endDate)) {
            this.errorMessage = '';
            return { required: {
                    valid: false,
                } };
        }
        if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
            this.errorMessage = this.literals.invalidFormat;
            return { date: {
                    valid: false,
                } };
        }
        if (this.dateRangeFailed(startDate, endDate)) {
            this.errorMessage = this.literals.startDateGreaterThanEndDate;
            return { date: {
                    valid: false,
                } };
        }
        return null;
    };
    /**
     * @param {?} dateRange
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.writeValue = /**
     * @param {?} dateRange
     * @return {?}
     */
    function (dateRange) {
        this.resetDateRangeInputValidation();
        if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
            this.dateRange = { start: '', end: '' };
        }
        if (!dateRange) {
            this.validateModel(this.dateRange);
        }
        if (this.dateRangeObjectFailed(dateRange)) {
            this.updateModel(dateRange);
        }
        if (this.isDateRangeObject(dateRange)) {
            this.dateRange = {
                start: this.convertPatternDateFormat(dateRange.start),
                end: this.convertPatternDateFormat(dateRange.end)
            };
            this.updateModel(this.dateRange);
        }
        this.updateScreenByModel(this.dateRange);
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.dateFormatFailed = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && !this.poDateService.isValidIso(value);
    };
    // Executa a função onChange
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.updateModel = 
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var model = typeof (value) === 'object' ? __assign({}, value) : value;
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(model);
        }
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var model = __assign({}, value);
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.convertPatternDateFormat = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Date) {
            return this.poDateService.convertDateToISO(value);
        }
        return value;
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.dateRangeFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return !this.poDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.dateRangeFormatFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.dateRangeObjectFailed = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && !this.isDateRangeObject(value);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.isDateRangeObject = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.requiredDateRangeFailed = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.isDateRangeInputValid &&
            requiredFailed(this.required, this.disabled, startDate) &&
            requiredFailed(this.required, this.disabled, endDate);
    };
    PoDatepickerRangeBaseComponent.propDecorators = {
        clean: [{ type: Input, args: ['p-clean',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        endDate: [{ type: Input, args: ['p-end-date',] }],
        help: [{ type: Input, args: ['p-help',] }],
        label: [{ type: Input, args: ['p-label',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        noAutocomplete: [{ type: Input, args: ['p-no-autocomplete',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        readonly: [{ type: Input, args: ['p-readonly',] }],
        required: [{ type: Input, args: ['p-required',] }],
        startDate: [{ type: Input, args: ['p-start-date',] }],
        onChange: [{ type: Output, args: ['p-change',] }]
    };
    return PoDatepickerRangeBaseComponent;
}());
if (false) {
    /** @type {?} */
    PoDatepickerRangeBaseComponent.prototype.errorMessage;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._clean;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._endDate;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._noAutocomplete;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype._startDate;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype.onChangeModel;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeBaseComponent.prototype.validatorChange;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.dateRange;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.format;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.isDateRangeInputFormatValid;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.isStartDateRangeInputValid;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.onTouchedModel;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto de apoio do campo.
     * @type {?}
     */
    PoDatepickerRangeBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Rótulo do campo.
     * @type {?}
     */
    PoDatepickerRangeBaseComponent.prototype.label;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoDatepickerRangeBaseComponent.prototype.optional;
    /**
     * \@optional
     *
     * \@description
     *
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    PoDatepickerRangeBaseComponent.prototype.onChange;
    /**
     * @type {?}
     * @protected
     */
    PoDatepickerRangeBaseComponent.prototype.poDateService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.resetDateRangeInputValidation = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} dateRange
     * @return {?}
     */
    PoDatepickerRangeBaseComponent.prototype.updateScreenByModel = function (dateRange) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var arrowLeftKey = 37;
/** @type {?} */
var arrowRightKey = 39;
/** @type {?} */
var backspaceKey = 8;
/** @type {?} */
var poDatepickerRangeDateLengthDefault = 10;
/**
 * \@docsExtends PoDatepickerRangeBaseComponent
 *
 * \@example
 *
 * <example name="po-datepicker-range-basic" title="Portinari Datepicker Range Basic">
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-labs" title="Portinari Datepicker Range Labs">
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations" title="Portinari Datepicker Range - Vacations Suggestion">
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.html"> </file>
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations-reactive-form" title="Portinari Datepicker Range - Vacations Reactive Form">
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.html">
 *  </file>
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.ts">
 *  </file>
 * </example>
 */
var PoDatepickerRangeComponent = /** @class */ (function (_super) {
    __extends(PoDatepickerRangeComponent, _super);
    function PoDatepickerRangeComponent(poDateService, poDatepickerRangeElement) {
        var _this = _super.call(this, poDateService) || this;
        _this.poDatepickerRangeElement = poDatepickerRangeElement;
        return _this;
    }
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "autocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "enableCleaner", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "endDateInputName", {
        get: /**
         * @return {?}
         */
        function () {
            return 'end-date';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "endDateInputValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInput.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "getErrorMessage", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.errorMessage !== '' && this.hasInvalidClass()) ? this.errorMessage : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "isDateRangeInputUncompleted", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInputValue.length < poDatepickerRangeDateLengthDefault
                && this.startDateInputValue.length < poDatepickerRangeDateLengthDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "isDirtyDateRangeInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "startDateInputName", {
        get: /**
         * @return {?}
         */
        function () {
            return 'start-date';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "startDateInputValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this.startDateInput.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    PoDatepickerRangeComponent.getKeyCode = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.keyCode || event.which;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoDatepickerRangeComponent.getTargetElement = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.target || event.srcElement;
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    PoDatepickerRangeComponent.isValidKey = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        /** @type {?} */
        var isNumericKey = keyCode >= 48 && keyCode <= 57;
        /** @type {?} */
        var isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
        return isNumericKey || isNumericNumpadKey;
    };
    /**
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Classe de máscara
        this.poMaskObject = this.buildMask();
    };
    /**
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.resetDateRangeInputValidation();
        this.dateRange = { start: '', end: '' };
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerRangeComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
     *
     * focusDatepickerRange() {
     *   this.datepickerRange.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerRangeComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
     *
     * focusDatepickerRange() {
     *   this.datepickerRange.focus();
     * }
     * ```
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerRangeComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
     *
     * focusDatepickerRange() {
     *   this.datepickerRange.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.startDateInput.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.removeFocusFromDatePickerRangeField();
    };
    /**
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.applyFocusOnDatePickerRangeField();
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.onKeydown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (this.readonly) {
            return;
        }
        if (this.isSetFocusOnBackspace(event)) {
            event.preventDefault();
            this.setFocusOnBackspace();
        }
        else {
            this.poMaskObject.keydown(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.onKeyup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.readonly) {
            return;
        }
        /** @type {?} */
        var isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.setFocus(event);
        this.poMaskObject.keyup(event);
        this.updateModelByScreen(isStartDateTargetEvent);
    };
    /**
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.resetDateRangeInputValidation = /**
     * @return {?}
     */
    function () {
        this.isStartDateRangeInputValid = true;
        this.isDateRangeInputFormatValid = true;
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.updateScreenByModel = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        var _this = this;
        /** @type {?} */
        var dateRange = { start: (/** @type {?} */ (model.start)), end: (/** @type {?} */ (model.end)) };
        /** @type {?} */
        var isStartDateValid = this.poDateService.isDateRangeValid(dateRange.end, dateRange.start);
        /** @type {?} */
        var isDateValid = (/**
         * @param {?} date
         * @return {?}
         */
        function (date) { return !_this.dateFormatFailed(date) && isStartDateValid; });
        /** @type {?} */
        var endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
        /** @type {?} */
        var startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
        this.endDateInput.nativeElement.value = endDateFormated;
        this.startDateInput.nativeElement.value = startDateFormated;
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.applyFocusOnDatePickerRangeField = /**
     * @private
     * @return {?}
     */
    function () {
        this.dateRangeField.nativeElement.classList.add('po-datepicker-range-field-focused');
    };
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    /**
     * @private
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.buildMask = 
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    };
    /**
     * @private
     * @param {?} format
     * @param {?=} day
     * @param {?=} month
     * @param {?=} year
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.formatDate = /**
     * @private
     * @param {?} format
     * @param {?=} day
     * @param {?=} month
     * @param {?=} year
     * @return {?}
     */
    function (format, day, month, year) {
        if (day === void 0) { day = ''; }
        if (month === void 0) { month = ''; }
        if (year === void 0) { year = ''; }
        /** @type {?} */
        var dateFormatted = format;
        day = day && day.includes('T') ? day.slice(0, 2) : day;
        dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (month)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(year));
        return dateFormatted;
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.formatScreenToModel = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        var _a = __read(value.split('/'), 3), day = _a[0], month = _a[1], year = _a[2];
        return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.formatModelToScreen = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        var _a = __read(value.split('-'), 3), year = _a[0], month = _a[1], day = _a[2];
        return value ? this.formatDate(this.format, day, month, year) : '';
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.getDateRangeFormatValidation = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (startDate, endDate, isStartDateTargetEvent) {
        this.setDateRangeInputValidation(startDate, endDate);
        return {
            isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid,
            dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
        };
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.getValidatedModel = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (startDate, endDate, isStartDateTargetEvent) {
        /** @type {?} */
        var dateRangeModel = { start: '', end: '' };
        dateRangeModel.end = (isStartDateTargetEvent || this.isStartDateRangeInputValid)
            && !this.dateFormatFailed(endDate) ? endDate : '';
        dateRangeModel.start = (!isStartDateTargetEvent || this.isStartDateRangeInputValid)
            && !this.dateFormatFailed(startDate) ? startDate : '';
        return dateRangeModel;
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.hasInvalidClass = /**
     * @private
     * @return {?}
     */
    function () {
        return (this.poDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
            this.poDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.isEqualBeforeValue = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.isSetFocusOnBackspace = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.target.name === this.endDateInputName &&
            this.endDateInput.nativeElement.selectionStart === 0 && this.endDateInput.nativeElement.selectionEnd === 0 &&
            event.keyCode === backspaceKey;
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.removeFocusFromDatePickerRangeField = /**
     * @private
     * @return {?}
     */
    function () {
        this.dateRangeField.nativeElement.classList.remove('po-datepicker-range-field-focused');
    };
    /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.setDateRangeInputValidation = /**
     * @private
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        this.isStartDateRangeInputValid = this.poDateService.isDateRangeValid(endDate, startDate);
        this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.setFocus = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inputElement = PoDatepickerRangeComponent.getTargetElement(event);
        /** @type {?} */
        var keyCode = PoDatepickerRangeComponent.getKeyCode(event);
        /** @type {?} */
        var inputName = inputElement['name'];
        this.setFocusOnArrowLeft(keyCode, inputName);
        this.setFocusOnArrowRight(keyCode, inputName, inputElement);
        this.setFocusOnStartDateCompleted(keyCode, inputName);
    };
    /**
     * @private
     * @param {?} position
     * @param {?} inputElement
     * @param {?} selectionRange
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.setFocusAndPosition = /**
     * @private
     * @param {?} position
     * @param {?} inputElement
     * @param {?} selectionRange
     * @return {?}
     */
    function (position, inputElement, selectionRange) {
        var _this = this;
        this.focusOnElement(inputElement);
        setTimeout((/**
         * @return {?}
         */
        function () {
            inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
            _this.poMaskObject.initialPosition = position;
            _this.poMaskObject.finalPosition = position;
        }));
    };
    /**
     * @private
     * @param {?} inputElement
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.focusOnElement = /**
     * @private
     * @param {?} inputElement
     * @return {?}
     */
    function (inputElement) {
        inputElement.nativeElement.focus();
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.setFocusOnArrowLeft = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    function (keyCode, inputName) {
        /** @type {?} */
        var isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
        if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
            /** @type {?} */
            var inputLength = this.startDateInput.nativeElement.value.length;
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        }
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @param {?} inputElement
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.setFocusOnArrowRight = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @param {?} inputElement
     * @return {?}
     */
    function (keyCode, inputName, inputElement) {
        /** @type {?} */
        var isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
        if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.setFocusOnBackspace = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputLength = this.startDateInput.nativeElement.value.length;
        this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
        this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
    };
    /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.setFocusOnStartDateCompleted = /**
     * @private
     * @param {?} keyCode
     * @param {?} inputName
     * @return {?}
     */
    function (keyCode, inputName) {
        /** @type {?} */
        var isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === poDatepickerRangeDateLengthDefault;
        /** @type {?} */
        var isNewDateCompleted = this.startDateInputValue.length === poDatepickerRangeDateLengthDefault && isLastKeyPressed;
        /** @type {?} */
        var isValidKey = PoDatepickerRangeComponent.isValidKey(keyCode);
        if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    };
    /**
     * @private
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    PoDatepickerRangeComponent.prototype.updateModelByScreen = /**
     * @private
     * @param {?} isStartDateTargetEvent
     * @return {?}
     */
    function (isStartDateTargetEvent) {
        /** @type {?} */
        var endDateFormatted = this.formatScreenToModel(this.endDateInputValue);
        /** @type {?} */
        var startDateFormatted = this.formatScreenToModel(this.startDateInputValue);
        if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
            this.updateModel(this.dateRange);
            return;
        }
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        /** @type {?} */
        var dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit(__assign({}, this.dateRange));
        }
        if (!dateFormatValidation.isValid) {
            this.dateRange = __assign({}, dateFormatValidation.dateRangeModel);
            this.updateModel(dateFormatValidation.dateRangeModel);
        }
    };
    PoDatepickerRangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-datepicker-range',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div\n    #dateRangeField\n    class=\"po-datepicker-range-field po-input\"\n    [class.po-datepicker-range-field-disabled]=\"disabled\">\n\n    <div class=\"po-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\">\n    </div>\n\n    <div class=\"po-datepicker-range-separator\">-</div>\n\n    <div class=\"po-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\">\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-clean *ngIf=\"enableCleaner\" (p-change-event)=\"clear()\"></po-clean>\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <span\n        class=\"po-icon po-field-icon po-icon-calendar\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\">\n      </span>\n    </div>\n\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorMessage\"></po-field-container-bottom>\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoDatepickerRangeComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoDatepickerRangeComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoDatepickerRangeComponent.ctorParameters = function () { return [
        { type: PoDateService },
        { type: ElementRef }
    ]; };
    PoDatepickerRangeComponent.propDecorators = {
        dateRangeField: [{ type: ViewChild, args: ['dateRangeField', { read: ElementRef, static: true },] }],
        endDateInput: [{ type: ViewChild, args: ['endDateInput', { read: ElementRef, static: true },] }],
        startDateInput: [{ type: ViewChild, args: ['startDateInput', { read: ElementRef, static: true },] }]
    };
    return PoDatepickerRangeComponent;
}(PoDatepickerRangeBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeComponent.prototype.poDatepickerRangeElement;
    /**
     * @type {?}
     * @private
     */
    PoDatepickerRangeComponent.prototype.poMaskObject;
    /** @type {?} */
    PoDatepickerRangeComponent.prototype.dateRangeField;
    /** @type {?} */
    PoDatepickerRangeComponent.prototype.endDateInput;
    /** @type {?} */
    PoDatepickerRangeComponent.prototype.startDateInput;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
 * @abstract
 */
var PoInputBaseComponent = /** @class */ (function () {
    function PoInputBaseComponent() {
        this._noAutocomplete = false;
        this._placeholder = '';
        this.passedWriteValue = false;
        /**
         * \@description
         *
         * Se verdadeiro, desabilita o campo.
         *
         * \@default `false`
         */
        this.disabled = false;
        /**
         * Indica que o campo será somente leitura.
         */
        this.readonly = false;
        /**
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
         *
         * \@default `false`
         */
        this.required = false;
        /**
         * Se verdadeiro, o campo receberá um botão para ser limpo.
         */
        this.clean = false;
        /**
         * \@description
         *
         * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
        /**
         * \@description
         *
         * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
         * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
         * através da propriedade p-pattern.
         * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
         * mesmo quando desabilitado.
         */
        this.mask = '';
        /**
         * \@description
         *
         * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
         *
         * \@default `false`
         */
        this.maskFormatModel = false;
        /**
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
        this.onChangePropagate = null;
        this.onTouched = null;
    }
    Object.defineProperty(PoInputBaseComponent.prototype, "noAutocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noAutocomplete;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noAutocomplete = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         *
         * @default ''
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         *
         * \@default ''
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._placeholder = value || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setDisabled", {
        set: /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setReadonly", {
        set: /**
         * @param {?} readonly
         * @return {?}
         */
        function (readonly) {
            this.readonly = readonly === '' ? true : convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setRequired", {
        set: /**
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this.required = required === '' ? true : convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "autofocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autofocus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * \@default `false`
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._autofocus = convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setClean", {
        set: /**
         * @param {?} clean
         * @return {?}
         */
        function (clean) {
            this.clean = clean === '' ? true : convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setPattern", {
        set: /**
         * @param {?} pattern
         * @return {?}
         */
        function (pattern) {
            this.pattern = pattern;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "maxlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                this._maxlength = parseInt((/** @type {?} */ (value)), 10);
                this.validateModel();
            }
            else if (!value) {
                this._maxlength = undefined;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "minlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                this._minlength = parseInt((/** @type {?} */ (value)), 10);
                this.validateModel();
            }
            else if (!value) {
                this._minlength = undefined;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setMask", {
        set: /**
         * @param {?} mask
         * @return {?}
         */
        function (mask) {
            this.mask = mask;
            // Atualiza Máscara do Campo
            this.objMask = new PoMask(this.mask, this.maskFormatModel);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setMaskFormatModel", {
        set: /**
         * @param {?} maskFormatModel
         * @return {?}
         */
        function (maskFormatModel) {
            this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
            if (this.objMask instanceof PoMask) {
                this.objMask.formatModel = this.maskFormatModel;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    PoInputBaseComponent.prototype.callOnChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoInputBaseComponent.prototype.callUpdateModelWithTimeout = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.updateModel(value); }));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoInputBaseComponent.prototype.controlChangeModelEmitter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoInputBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangePropagate = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoInputBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoInputBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoInputBaseComponent.prototype.updateModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PoInputBaseComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return { required: {
                    valid: false,
                } };
        }
        if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
            return { maxlength: {
                    valid: false,
                } };
        }
        if (minlengpoailed(this.minlength, this.getScreenValue())) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return { pattern: {
                    valid: false,
                } };
        }
        return this.extraValidation(c);
    };
    // Função implementada do ControlValueAccessor
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    PoInputBaseComponent.prototype.writeValue = 
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.writeValueModel(value);
    };
    /**
     * @protected
     * @return {?}
     */
    PoInputBaseComponent.prototype.validateModel = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoInputBaseComponent.prototype.validatePatternOnWriteValue = 
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value && this.passedWriteValue) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.updateModel(value);
            }));
            this.passedWriteValue = false;
        }
    };
    PoInputBaseComponent.propDecorators = {
        icon: [{ type: Input, args: ['p-icon',] }],
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        name: [{ type: Input, args: ['name',] }],
        noAutocomplete: [{ type: Input, args: ['p-no-autocomplete',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        setDisabled: [{ type: Input, args: ['p-disabled',] }],
        setReadonly: [{ type: Input, args: ['p-readonly',] }],
        setRequired: [{ type: Input, args: ['p-required',] }],
        autofocus: [{ type: Input, args: ['p-focus',] }],
        setClean: [{ type: Input, args: ['p-clean',] }],
        setPattern: [{ type: Input, args: ['p-pattern',] }],
        errorPattern: [{ type: Input, args: ['p-error-pattern',] }],
        maxlength: [{ type: Input, args: ['p-maxlength',] }],
        minlength: [{ type: Input, args: ['p-minlength',] }],
        setMask: [{ type: Input, args: ['p-mask',] }],
        setMaskFormatModel: [{ type: Input, args: ['p-mask-format-model',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        blur: [{ type: Output, args: ['p-blur',] }],
        enter: [{ type: Output, args: ['p-enter',] }],
        change: [{ type: Output, args: ['p-change',] }],
        changeModel: [{ type: Output, args: ['p-change-model',] }]
    };
    return PoInputBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._autofocus;
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._maxlength;
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._minlength;
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._noAutocomplete;
    /**
     * @type {?}
     * @private
     */
    PoInputBaseComponent.prototype._placeholder;
    /**
     * @type {?}
     * @protected
     */
    PoInputBaseComponent.prototype.passedWriteValue;
    /**
     * @type {?}
     * @protected
     */
    PoInputBaseComponent.prototype.validatorChange;
    /**
     * \@optional
     *
     * \@description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     * @type {?}
     */
    PoInputBaseComponent.prototype.icon;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.help;
    /**
     * Nome e identificador do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.name;
    /**
     * \@description
     *
     * Se verdadeiro, desabilita o campo.
     *
     * \@default `false`
     * @type {?}
     */
    PoInputBaseComponent.prototype.disabled;
    /**
     * Indica que o campo será somente leitura.
     * @type {?}
     */
    PoInputBaseComponent.prototype.readonly;
    /**
     * \@description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
     *
     * \@default `false`
     * @type {?}
     */
    PoInputBaseComponent.prototype.required;
    /**
     * Se verdadeiro, o campo receberá um botão para ser limpo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.clean;
    /**
     * \@description
     *
     * Expressão regular para validar o campo.
     * Quando o campo possuir uma máscara `(p-mask)` será automaticamente validado por ela, porém
     * é possível definir um p-pattern para substituir a validação da máscara.
     * @type {?}
     */
    PoInputBaseComponent.prototype.pattern;
    /**
     * \@description
     *
     * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
     * @type {?}
     */
    PoInputBaseComponent.prototype.errorPattern;
    /**
     * \@description
     *
     * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
     * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
     * através da propriedade p-pattern.
     * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
     * mesmo quando desabilitado.
     * @type {?}
     */
    PoInputBaseComponent.prototype.mask;
    /**
     * \@description
     *
     * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
     *
     * \@default `false`
     * @type {?}
     */
    PoInputBaseComponent.prototype.maskFormatModel;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoInputBaseComponent.prototype.optional;
    /**
     * Evento disparado ao sair do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.blur;
    /**
     * Evento disparado ao entrar do campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.enter;
    /**
     * Evento disparado ao alterar valor e deixar o campo.
     * @type {?}
     */
    PoInputBaseComponent.prototype.change;
    /**
     * Evento disparado ao alterar valor do model.
     * @type {?}
     */
    PoInputBaseComponent.prototype.changeModel;
    /** @type {?} */
    PoInputBaseComponent.prototype.type;
    /** @type {?} */
    PoInputBaseComponent.prototype.onChangePropagate;
    /** @type {?} */
    PoInputBaseComponent.prototype.onTouched;
    /** @type {?} */
    PoInputBaseComponent.prototype.objMask;
    /** @type {?} */
    PoInputBaseComponent.prototype.modelLastUpdate;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoNomeDoComponenteComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoNomeDoComponenteComponent, { static: true }) nomeDoComponente: PoNomeDoComponenteComponent;
     *
     * focusComponent() {
     *   this.nomeDoComponente.focus();
     * }
     * ```
     * @abstract
     * @return {?}
     */
    PoInputBaseComponent.prototype.focus = function () { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoInputBaseComponent.prototype.writeValueModel = function (value) { };
    /**
     * @abstract
     * @param {?} c
     * @return {?}
     */
    PoInputBaseComponent.prototype.extraValidation = function (c) { };
    /**
     * @abstract
     * @return {?}
     */
    PoInputBaseComponent.prototype.getScreenValue = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PO_DECIMAL_DEFAULT_DECIMALS_LENGTH = 2;
/** @type {?} */
var PO_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH = 13;
/**
 *
 * \@docsExtends PoInputBaseComponent
 *
 * \@description
 *
 * po-decimal é um input específico para receber apenas números decimais.
 * Quando utilizado, o componente terá comportamento de um campo de 'text' com algumas características:
 *
 * - Aceita apenas números;
 * - Utiliza ',' como separador de decimal;
 * - Utiliza '.' para separação de milhar;
 * - É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.
 *
 * \@example
 *
 * <example name="po-decimal-basic" title="Portinari Decimal Basic">
 *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.html"> </file>
 *  <file name="sample-po-decimal-basic/sample-po-decimal-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-labs" title="Portinari Decimal Labs">
 *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.html"> </file>
 *  <file name="sample-po-decimal-labs/sample-po-decimal-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-hourly-wage" title="Portinari Decimal - Hourly Wage">
 *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.html"> </file>
 *  <file name="sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.ts"> </file>
 * </example>
 *
 * <example name="po-decimal-hourly-wage-reactive-form" title="Portinari Decimal - Hourly Wage Reactive Form">
 *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.html"> </file>
 *  <file name="sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.ts"> </file>
 * </example>
 */
var PoDecimalComponent = /** @class */ (function (_super) {
    __extends(PoDecimalComponent, _super);
    function PoDecimalComponent(el) {
        var _this = _super.call(this) || this;
        _this.el = el;
        _this._decimalsLength = PO_DECIMAL_DEFAULT_DECIMALS_LENGTH;
        _this._thousandMaxlength = PO_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;
        _this.decimalSeparator = ',';
        _this.fireChange = false;
        _this.isKeyboardAndroid = false;
        _this.minusSign = '-';
        _this.oldDotsLength = null;
        _this.thousandSeparator = '.';
        _this.regex = {
            thousand: new RegExp('\\' + '.', 'g'),
            decimal: new RegExp('\\' + ',', 'g')
        };
        _this.isKeyboardAndroid = !!navigator.userAgent.match(/Android/i);
        return _this;
    }
    Object.defineProperty(PoDecimalComponent.prototype, "autocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDecimalComponent.prototype, "decimalsLength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._decimalsLength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Quantidade máxima de casas decimais.
         *
         * @default `2`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Quantidade máxima de casas decimais.
         *
         * \@default `2`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._decimalsLength = convertToInt(value, PO_DECIMAL_DEFAULT_DECIMALS_LENGTH);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDecimalComponent.prototype, "thousandMaxlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._thousandMaxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Número máximo de dígitos antes do separador de decimal. O valor máximo possível deve ser menor ou igual a 13.
         *
         * @default `13`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Número máximo de dígitos antes do separador de decimal. O valor máximo possível deve ser menor ou igual a 13.
         *
         * \@default `13`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var thousandMaxlength = convertToInt(value, PO_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH);
            this._thousandMaxlength = thousandMaxlength <= PO_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH ?
                thousandMaxlength : PO_DECIMAL_DEFAULT_THOUSAND_MAXLENGTH;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoDecimalComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.putFocus();
        this.setPaddingInput();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.clear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PoDecimalComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @return {?}
     */
    PoDecimalComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoDecimalComponent.prototype.getScreenValue = /**
     * @return {?}
     */
    function () {
        return (this.inputEl) ? this.inputEl.nativeElement.value : '';
    };
    /**
     * @return {?}
     */
    PoDecimalComponent.prototype.hasInvalidClass = /**
     * @return {?}
     */
    function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.getScreenValue() !== '');
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    PoDecimalComponent.prototype.hasLetters = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        return value.match(/[a-zA-Z:;+=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.isValidNumber = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // - event.key não existia em alguns browsers, como Samsung browser e Firefox.
        /** @type {?} */
        var keyValue = (/** @type {?} */ (String.fromCharCode(event.which)));
        /** @type {?} */
        var validKey = event.which !== 8 && event.which !== 0;
        return !this.hasLetters(keyValue) && validKey;
    };
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    /**
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.onBlur = 
    // função responsável por adicionar os zeroes com as casa decimais ao sair do campo.
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        if (value) {
            if (this.hasLetters(value) || this.containsMoreThanOneComma(value)) {
                this.setViewValue('');
                this.callOnChange(undefined);
                return;
            }
            /** @type {?} */
            var valueWithoutThousandSeparator = this.formatValueWithoutThousandSeparator(value);
            this.setViewValue(this.formatToViewValue(valueWithoutThousandSeparator));
        }
        this.blur.emit();
        this.controlChangeEmitter();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.onFocus = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.getScreenValue();
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.onInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var selectionStart = event.target.selectionStart;
        /** @type {?} */
        var selectionEnd = event.target.selectionEnd;
        /** @type {?} */
        var modelValue;
        /** @type {?} */
        var viewValue;
        // - Browsers nativos do Android ex: Samsung Browser.
        if (this.isKeyboardAndroid) {
            this.onInputKeyboardAndroid(event);
        }
        modelValue = this.formatValueWithoutThousandSeparator(event.target.value);
        modelValue = this.addZeroBefore(modelValue);
        viewValue = this.formatMask(modelValue);
        // validação para não quebrar IE com placeholder definido e Input vazio
        if (viewValue) {
            this.setViewValue(viewValue);
            this.setCursorInput(event, selectionStart, selectionEnd);
        }
        this.callOnChange(this.formatToModelValue(modelValue));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.onInputKeyboardAndroid = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var inputValue = event.target.value;
        /** @type {?} */
        var selectionStart = event.target.selectionStart;
        /** @type {?} */
        var hasLetters = this.hasLetters(inputValue);
        if (hasLetters) {
            this.setViewValue(inputValue.replace(hasLetters[0], ''));
            return event.preventDefault();
        }
        else {
            /** @type {?} */
            var position = selectionStart - 1;
            /** @type {?} */
            var key = inputValue.charAt(position);
            this.setPositionValue(event);
            if (this.isValidKey(event, key)) {
                this.setViewValue(inputValue);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.onKeyPress = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.isValidKey(event);
    };
    /**
     * @return {?}
     */
    PoDecimalComponent.prototype.setPaddingInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            /** @type {?} */
            var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (_this.clean) {
                icons++;
            }
            if (icons) {
                _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
            }
        }));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (value || value === 0) {
                /** @type {?} */
                var formatedViewValue = this.formatToViewValue(value);
                this.setViewValue(formatedViewValue);
            }
            else {
                this.setViewValue('');
            }
        }
        if (value) {
            this.change.emit(value);
        }
    };
    // reponsável por adicionar 0 antes da virgula (decimalSeparator).
    // reponsável por adicionar 0 antes da virgula (decimalSeparator).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.addZeroBefore = 
    // reponsável por adicionar 0 antes da virgula (decimalSeparator).
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var isDecimalSeparator = value === this.decimalSeparator;
        return isDecimalSeparator ? "0" + value : value;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.containsComma = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.includes(this.decimalSeparator);
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    PoDecimalComponent.prototype.containsMoreThanOneComma = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        /** @type {?} */
        var foundComma = value.match(/,/g);
        return !!(foundComma && foundComma.length > 1);
    };
    /**
     * @private
     * @return {?}
     */
    PoDecimalComponent.prototype.controlChangeEmitter = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var elementValue = this.getScreenValue();
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            this.fireChange = true;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.fireChange) {
                    _this.change.emit(elementValue);
                }
            }), 200);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.formatMask = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // necessário para não adicionar . nas casa decimais.
        // por exemplo: 12.345,123.45 (errado)
        // 12.345,12345 (correto)
        if (value.match(this.regex.decimal)) {
            /** @type {?} */
            var regex = new RegExp('(\\d)(?=(\\d{3})+(?!\\d),)', 'g');
            return value.toString().replace(regex, '$1.');
        }
        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.formatToModelValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var formattedValue = this.replaceCommaToDot(value);
        /** @type {?} */
        var parsedValue = formattedValue ? parseFloat(Number(formattedValue).toFixed(this.decimalsLength)) : undefined;
        return parsedValue === 0 || parsedValue ? parsedValue : undefined;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.formatToViewValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var formatedNumber;
        /** @type {?} */
        var numberValue;
        /** @type {?} */
        var valueBeforeDot;
        /** @type {?} */
        var valueAfterDot;
        // - Necessário para tratar valores que contenham decimalSeparator
        value = this.replaceCommaToDot(value);
        numberValue = Number(value).toFixed(this.decimalsLength);
        valueBeforeDot = this.getValueBeforeSeparator(numberValue, this.thousandSeparator);
        valueAfterDot = this.getValueAfterSeparator(numberValue, this.thousandSeparator);
        formatedNumber = this.formatMask(valueBeforeDot);
        if (this.decimalsLength === 0) {
            return formatedNumber;
        }
        else {
            return formatedNumber + this.decimalSeparator + valueAfterDot;
        }
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    PoDecimalComponent.prototype.formatValueWithoutThousandSeparator = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        return value.toString().replace(this.regex.thousand, '');
    };
    /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    PoDecimalComponent.prototype.getValueAfterSeparator = /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    function (value, separator) {
        if (value === void 0) { value = ''; }
        return value.split(separator)[1] || '';
    };
    /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    PoDecimalComponent.prototype.getValueBeforeSeparator = /**
     * @private
     * @param {?=} value
     * @param {?=} separator
     * @return {?}
     */
    function (value, separator) {
        if (value === void 0) { value = ''; }
        return value.split(separator)[0] || '';
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.hasLessDot = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            /** @type {?} */
            var dots = value.match(this.regex.thousand);
            /** @type {?} */
            var dotsLength = dots && dots.length;
            if (dotsLength < this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.hasMoreDot = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            /** @type {?} */
            var dots = value.match(this.regex.thousand);
            /** @type {?} */
            var dotsLength = dots && dots.length;
            if (dotsLength > this.oldDotsLength) {
                this.oldDotsLength = dotsLength;
                return true;
            }
        }
        if (!value) {
            this.oldDotsLength = null;
        }
        return false;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.hasMinusSignInvalidPosition = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyIsMinusSign = event.key === this.minusSign;
        /** @type {?} */
        var selectionStart = event.target.selectionStart;
        return keyIsMinusSign && selectionStart !== 0;
    };
    /**
     * @private
     * @param {?} event
     * @param {?} charCode
     * @return {?}
     */
    PoDecimalComponent.prototype.isInvalidKey = /**
     * @private
     * @param {?} event
     * @param {?} charCode
     * @return {?}
     */
    function (event, charCode) {
        /** @type {?} */
        var isInvalidNumber = !this.isValidNumber(event);
        return this.verifyInsertComma(event) || this.verifyThousandLength(event) ||
            this.verifyValueAfterComma(event) || this.verifyInsertMinusSign(event) ||
            this.hasMinusSignInvalidPosition(event) || isInvalidNumber ||
            this.validateCursorPositionBeforeSeparator(event) || this.verifyDecimalLengthIsZeroAndKeyPressedIsComma(charCode);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.isKeyDecimalSeparator = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return event.key === this.decimalSeparator || event.char === this.decimalSeparator;
    };
    /**
     * @private
     * @param {?} positionCursor
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.isPositionAfterDecimalSeparator = /**
     * @private
     * @param {?} positionCursor
     * @param {?} value
     * @return {?}
     */
    function (positionCursor, value) {
        /** @type {?} */
        var indexComma = value && value.indexOf(this.decimalSeparator);
        if (indexComma && this.decimalsLength > 0) {
            return positionCursor > indexComma;
        }
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    PoDecimalComponent.prototype.isSelectionStartDifferentSelectionEnd = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        return target.selectionStart !== target.selectionEnd;
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} key
     * @return {?}
     */
    PoDecimalComponent.prototype.isValidKey = /**
     * @private
     * @param {?} event
     * @param {?=} key
     * @return {?}
     */
    function (event, key) {
        /** @type {?} */
        var charCode = event.which || event.keyCode;
        /** @type {?} */
        var validKey = event.which === 8 || event.which === 0;
        if (validKey && !this.isKeyboardAndroid) {
            return;
        }
        if (key) {
            event.key = key;
        }
        if (this.isInvalidKey(event, charCode)) {
            event.preventDefault();
            return false;
        }
        return true;
    };
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    /**
     * @private
     * @param {?} charCode
     * @return {?}
     */
    PoDecimalComponent.prototype.verifyDecimalLengthIsZeroAndKeyPressedIsComma = 
    // Quando decimalsLength for 0 não deve permitir informar vírgula (decimalSeparator)
    /**
     * @private
     * @param {?} charCode
     * @return {?}
     */
    function (charCode) {
        return (charCode === 44 && this.decimalsLength === 0);
    };
    /**
     * @private
     * @return {?}
     */
    PoDecimalComponent.prototype.putFocus = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.autofocus) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @private
     * @param {?} target
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    PoDecimalComponent.prototype.setInitialSelectionRange = /**
     * @private
     * @param {?} target
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    function (target, selectionStart, selectionEnd) {
        if (selectionStart === 1 && selectionEnd === 1) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        return target.setSelectionRange(selectionStart - 1, selectionEnd - 1);
    };
    /**
     * @private
     * @param {?} value
     * @param {?} index
     * @param {?} replace
     * @return {?}
     */
    PoDecimalComponent.prototype.replaceAt = /**
     * @private
     * @param {?} value
     * @param {?} index
     * @param {?} replace
     * @return {?}
     */
    function (value, index, replace) {
        return value.substring(0, index) + replace + value.substring(index + 1);
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    PoDecimalComponent.prototype.replaceCommaToDot = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = ''; }
        return value.toString().replace(this.regex.decimal, '.');
    };
    /**
     * @private
     * @param {?} event
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    PoDecimalComponent.prototype.setCursorInput = /**
     * @private
     * @param {?} event
     * @param {?} selectionStart
     * @param {?} selectionEnd
     * @return {?}
     */
    function (event, selectionStart, selectionEnd) {
        /** @type {?} */
        var target = event.target;
        /** @type {?} */
        var viewValue = target.value;
        // Caso houver mais . do que anteriormente soma o valor com 1.
        if (this.hasMoreDot(viewValue) || viewValue === ('0' + this.decimalSeparator)) {
            return target.setSelectionRange(selectionStart + 1, selectionEnd + 1);
        }
        // Caso houver menos . do que anteriormente subtrai o valor por 1.
        if (this.hasLessDot(viewValue)) {
            this.setInitialSelectionRange(target, selectionStart, selectionEnd);
        }
        return target.setSelectionRange(selectionStart, selectionEnd);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.setPositionValue = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        /** @type {?} */
        var position = event.target.selectionStart - 1;
        if (position > 0 && event.key === this.minusSign) {
            event.target.value = value.substring(0, position) + value.substr(position + 1);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoDecimalComponent.prototype.setViewValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputEl.nativeElement.value = value;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.validateCursorPositionBeforeSeparator = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var target = event.target;
        /** @type {?} */
        var originalValue = this.formatValueWithoutThousandSeparator(target.value);
        /** @type {?} */
        var valueBeforeSeparator = this.getValueBeforeSeparator(target.value, this.decimalSeparator);
        /** @type {?} */
        var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return target.selectionStart <= valueBeforeSeparator.length &&
            valueBeforeSeparatorOriginal.length === this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.verifyThousandLength = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var target = event.target;
        /** @type {?} */
        var originalValue = this.formatValueWithoutThousandSeparator(target.value);
        /** @type {?} */
        var valueBeforeSeparatorOriginal = this.getValueBeforeSeparator(originalValue, this.decimalSeparator);
        if (this.isSelectionStartDifferentSelectionEnd(target)) {
            return false;
        }
        return valueBeforeSeparatorOriginal.length >= this.thousandMaxlength &&
            !this.isKeyDecimalSeparator(event) &&
            this.isPositionAfterDecimalSeparator(target.selectionStart - this.decimalsLength, target.value);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    PoDecimalComponent.prototype.verifyInsertComma = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var hasComma = this.containsComma(e.target.value);
        return hasComma && e.key === this.decimalSeparator;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.verifyInsertMinusSign = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        /** @type {?} */
        var indexMinusSign = (value.lastIndexOf(this.minusSign) !== -1);
        /** @type {?} */
        var positionMinusSign = value.lastIndexOf('-');
        /** @type {?} */
        var occurancesMinusSign = value.match(new RegExp('-', 'g'));
        if (this.isKeyboardAndroid && indexMinusSign && occurancesMinusSign.length > 1) {
            event.target.value = this.replaceAt(value, positionMinusSign, '');
        }
        return indexMinusSign && event.key === this.minusSign;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoDecimalComponent.prototype.verifyValueAfterComma = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = event.target.value;
        /** @type {?} */
        var selectionStart = event.target.selectionStart;
        /** @type {?} */
        var valueAfterSeparator = this.getValueAfterSeparator(value, this.decimalSeparator);
        return this.isPositionAfterDecimalSeparator(selectionStart, value) && valueAfterSeparator.length >= this.decimalsLength;
    };
    PoDecimalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-decimal',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      type=\"text\"\n      (blur)=\"onBlur($event)\"\n      (focus)=\"onFocus($event)\"\n      (input)=\"onInput($event)\"\n      (keypress)=\"onKeyPress($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom>\n  </po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoDecimalComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoDecimalComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoDecimalComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PoDecimalComponent.propDecorators = {
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
        decimalsLength: [{ type: Input, args: ['p-decimals-length',] }],
        thousandMaxlength: [{ type: Input, args: ['p-thousand-maxlength',] }]
    };
    return PoDecimalComponent;
}(PoInputBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype._decimalsLength;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype._thousandMaxlength;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.decimalSeparator;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.fireChange;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.isKeyboardAndroid;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.minusSign;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.oldDotsLength;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.thousandSeparator;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.valueBeforeChange;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.regex;
    /** @type {?} */
    PoDecimalComponent.prototype.inputEl;
    /**
     * @type {?}
     * @private
     */
    PoDecimalComponent.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var PoInputGeneric = /** @class */ (function (_super) {
    __extends(PoInputGeneric, _super);
    function PoInputGeneric(el) {
        var _this = _super.call(this) || this;
        _this.type = 'text';
        _this.el = el;
        return _this;
    }
    Object.defineProperty(PoInputGeneric.prototype, "autocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.afterViewInit();
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.afterViewInit = /**
     * @return {?}
     */
    function () {
        this.putFocus();
        if (this.type !== 'password') {
            this.setPaddingInput();
        }
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.focus = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.setPaddingInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var selectorIcons = '.po-field-icon-container:not(.po-field-icon-container-left) > .po-icon';
            /** @type {?} */
            var icons = _this.el.nativeElement.querySelectorAll(selectorIcons).length;
            if (_this.clean) {
                icons++;
            }
            if (icons) {
                _this.inputEl.nativeElement.style.paddingRight = icons * 36 + "px";
            }
        }));
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.putFocus = /**
     * @return {?}
     */
    function () {
        if (this.autofocus) {
            this.focus();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PoInputGeneric.prototype.onKeydown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask && !this.readonly && e.target.keyCode !== 229) {
            this.eventOnBlur(e);
            this.objMask.keydown(e);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PoInputGeneric.prototype.onKeyup = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask && !this.readonly) {
            if (e.target.keyCode !== 229) {
                this.eventOnBlur(e);
                this.objMask.keyup(e);
            }
            this.callOnChange(this.objMask.valueToModel);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PoInputGeneric.prototype.eventOnInput = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.mask) {
            /** @type {?} */
            var value = this.validMaxLength(this.maxlength, e.target.value);
            this.inputEl.nativeElement.value = value;
            this.callOnChange(value);
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    PoInputGeneric.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        return ((maxlength || maxlength === 0) && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PoInputGeneric.prototype.eventOnFocus = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PoInputGeneric.prototype.eventOnBlur = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.mask) {
            this.objMask.blur(e);
        }
        if (e.type === 'blur') {
            this.blur.emit();
            this.controlChangeEmitter();
        }
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.controlChangeEmitter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var elementValue = this.inputEl.nativeElement.value;
        // Emite o evento change manualmente quando o campo é alterado
        // Este evento é controlado manualmente devido ao preventDefault existente na máscara
        // e devido ao controle do p-clean, que também precisa emitir change
        if (elementValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.change.emit(elementValue);
            }), 200);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PoInputGeneric.prototype.eventOnClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // Atualiza a posição do cursor ao clicar
        if (this.mask) {
            this.objMask.click(e);
        }
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.hasInvalidClass = /**
     * @return {?}
     */
    function () {
        return (this.el.nativeElement.classList.contains('ng-invalid') &&
            this.el.nativeElement.classList.contains('ng-dirty') &&
            this.inputEl.nativeElement.value !== '');
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.getErrorPattern = /**
     * @return {?}
     */
    function () {
        return (this.errorPattern !== '' && this.hasInvalidClass()) ? this.errorPattern : '';
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.validateClassesForPattern = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.getScreenValue();
        /** @type {?} */
        var element = this.el.nativeElement;
        if (value && !this.verifyPattern(this.pattern, value)) {
            element.classList.add('ng-invalid');
            element.classList.add('ng-dirty');
        }
        else {
            element.classList.remove('ng-invalid');
        }
    };
    /**
     * @param {?} pattern
     * @param {?} value
     * @return {?}
     */
    PoInputGeneric.prototype.verifyPattern = /**
     * @param {?} pattern
     * @param {?} value
     * @return {?}
     */
    function (pattern, value) {
        return new RegExp(pattern).test(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoInputGeneric.prototype.clear = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.callOnChange(value);
        this.controlChangeEmitter();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoInputGeneric.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.passedWriteValue = true;
        if (this.inputEl) {
            if (value) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.callUpdateModelWithTimeout(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se o valor for indefinido, deve limpar o campo.
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.changeModel.emit(value);
        }
    };
    /**
     * @return {?}
     */
    PoInputGeneric.prototype.getScreenValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var screenValue = this.inputEl && this.inputEl.nativeElement.value || undefined;
        if (this.type === 'number') {
            /** @type {?} */
            var parsedValue = parseFloat(screenValue);
            return parsedValue || parsedValue === 0 ? parsedValue : null;
        }
        else {
            return screenValue;
        }
    };
    PoInputGeneric.propDecorators = {
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        onKeyup: [{ type: HostListener, args: ['keyup', ['$event'],] }]
    };
    return PoInputGeneric;
}(PoInputBaseComponent));
if (false) {
    /** @type {?} */
    PoInputGeneric.prototype.inputEl;
    /** @type {?} */
    PoInputGeneric.prototype.type;
    /** @type {?} */
    PoInputGeneric.prototype.el;
    /** @type {?} */
    PoInputGeneric.prototype.valueBeforeChange;
    /** @type {?} */
    PoInputGeneric.prototype.timeoutChange;
    /**
     * @abstract
     * @param {?} c
     * @return {?}
     */
    PoInputGeneric.prototype.extraValidation = function (c) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoInputBaseComponent
 *
 * \@description
 *
 * po-email é um input específico para receber E-mail, com o pattern já configurado.
 *
 * \@example
 *
 * <example name="po-email-basic" title="Portinari Email Basic">
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.html"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.ts"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-email-basic/sample-po-email-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-email-labs" title="Portinari Email Labs">
 *  <file name="sample-po-email-labs/sample-po-email-labs.component.html"> </file>
 *  <file name="sample-po-email-labs/sample-po-email-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-email-newsletter" title="Portinari Email - Newsletter">
 *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.html"> </file>
 *  <file name="sample-po-email-newsletter/sample-po-email-newsletter.component.ts"> </file>
 * </example>
 */
var PoEmailComponent = /** @class */ (function (_super) {
    __extends(PoEmailComponent, _super);
    function PoEmailComponent(el) {
        var _this = _super.call(this, el) || this;
        _this.icon = 'po-icon-mail';
        _this.maxlength = 254;
        _this.type = 'email';
        _this.pattern = '^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$';
        _this.mask = '';
        _this.listener = _this.validateClassesForPattern.bind(_this);
        return _this;
    }
    /**
     * @return {?}
     */
    PoEmailComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            // Se não tem ngModel ou reactive form adiciona validação com classes css
            if (!_this.onChangePropagate) {
                _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
            }
        }));
    };
    /**
     * @return {?}
     */
    PoEmailComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PoEmailComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    PoEmailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-email',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-error-pattern]=\"getErrorPattern()\">\n  </po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoEmailComponent; })),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoEmailComponent; })),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoEmailComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return PoEmailComponent;
}(PoInputGeneric));
if (false) {
    /** @type {?} */
    PoEmailComponent.prototype.icon;
    /** @type {?} */
    PoEmailComponent.prototype.maxlength;
    /** @type {?} */
    PoEmailComponent.prototype.type;
    /** @type {?} */
    PoEmailComponent.prototype.pattern;
    /** @type {?} */
    PoEmailComponent.prototype.mask;
    /**
     * @type {?}
     * @private
     */
    PoEmailComponent.prototype.listener;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoInputBaseComponent
 *
 * \@description
 * O po-login é um input específico para login. Já possui tipo, estilo e ícone predefinidos.
 *
 * \@example
 *
 * <example name="po-login-basic" title="Portinari Login Basic">
 *  <file name="sample-po-login-basic/sample-po-login-basic.component.html"> </file>
 *  <file name="sample-po-login-basic/sample-po-login-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-login-labs" title="Portinari Login Labs">
 *  <file name="sample-po-login-labs/sample-po-login-labs.component.html"> </file>
 *  <file name="sample-po-login-labs/sample-po-login-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-login-confirm" title="Portinari Login - Confirm Identity">
 *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.html"> </file>
 *  <file name="sample-po-login-confirm/sample-po-login-confirm.component.ts"> </file>
 * </example>
 *
 */
var PoLoginComponent = /** @class */ (function (_super) {
    __extends(PoLoginComponent, _super);
    function PoLoginComponent(el) {
        var _this = _super.call(this, el) || this;
        _this.type = 'text';
        return _this;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    PoLoginComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    PoLoginComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-login',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <div class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon po-icon-user\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"po-input po-input-icon-left\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-error-pattern]=\"getErrorPattern()\">\n  </po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoLoginComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoLoginComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoLoginComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return PoLoginComponent;
}(PoInputGeneric));
if (false) {
    /** @type {?} */
    PoLoginComponent.prototype.type;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar o registro que será enviado para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `po-select` ou o `po-combo`.
 * @abstract
 */
var PoLookupBaseComponent = /** @class */ (function () {
    function PoLookupBaseComponent(defaultService) {
        this.defaultService = defaultService;
        this._autofocus = false;
        this._disabled = false;
        this._required = false;
        this.oldValue = '';
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        this.placeholder = '';
        /**
         * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
         * Será passado por parâmetro o objeto de erro retornado.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer alguma seleção.
         * Será passado por parâmetro o objeto com o valor selecionado.
         */
        this.selected = new EventEmitter();
    }
    Object.defineProperty(PoLookupBaseComponent.prototype, "filterService", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterService;
        },
        /**
         * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
         * `PoLookupFilter` ou uma URL.
         *
         * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
         *
         * ```
         * url + ?page=1&pageSize=20&filter=Peter
         * ```
         *
         * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
         * - Coluna decrescente:
         * ```
         *  url + ?page=1&pageSize=20&filter=Peter&order=-name
         * ```
         *
         * - Coluna ascendente:
         * ```
         *  url + ?page=1&pageSize=20&filter=Peter&order=name
         * ```
         *
         * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
         * parâmetro `{ age: 23 }` a URL ficaria:
         *
         * ```
         * url + ?page=1&pageSize=20&age=23&filter=Peter
         * ```
         *
         * > Esta URL deve retornar e receber os dados no padrão de
         * [API da PORTINARI](http://tdn.portinari.com/display/public/INT/Guia+de+implementacao+das+APIs+PORTINARI) e utiliza os valores
         * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
         */
        set: /**
         * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
         * `PoLookupFilter` ou uma URL.
         *
         * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
         *
         * ```
         * url + ?page=1&pageSize=20&filter=Peter
         * ```
         *
         * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
         * - Coluna decrescente:
         * ```
         *  url + ?page=1&pageSize=20&filter=Peter&order=-name
         * ```
         *
         * - Coluna ascendente:
         * ```
         *  url + ?page=1&pageSize=20&filter=Peter&order=name
         * ```
         *
         * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
         * parâmetro `{ age: 23 }` a URL ficaria:
         *
         * ```
         * url + ?page=1&pageSize=20&age=23&filter=Peter
         * ```
         *
         * > Esta URL deve retornar e receber os dados no padrão de
         * [API da PORTINARI](http://tdn.portinari.com/display/public/INT/Guia+de+implementacao+das+APIs+PORTINARI) e utiliza os valores
         * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
         * @param {?} filterService
         * @return {?}
         */
        function (filterService) {
            this._filterService = filterService;
            this.setService(this.filterService);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoLookupBaseComponent.prototype, "noAutocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noAutocomplete;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noAutocomplete = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoLookupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         * @description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         * \@description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.valueToModel);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoLookupBaseComponent.prototype, "autofocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autofocus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * \@default `false`
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._autofocus = convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoLookupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default false
         * @optional
         */
        set: /**
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default false
         * \@optional
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoLookupBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    PoLookupBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeColumn();
    };
    /**
     * @private
     * @return {?}
     */
    PoLookupBaseComponent.prototype.initializeColumn = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element.fieldLabel; }))
                .map((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element.property; }));
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoLookupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    PoLookupBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangePropagate = func;
    };
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    PoLookupBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    // Seleciona o valor do model.
    // Seleciona o valor do model.
    /**
     * @param {?} valueSelected
     * @return {?}
     */
    PoLookupBaseComponent.prototype.selectValue = 
    // Seleciona o valor do model.
    /**
     * @param {?} valueSelected
     * @return {?}
     */
    function (valueSelected) {
        this.valueToModel = valueSelected[this.fieldValue];
        this.callOnChange(this.valueToModel);
        this.selected.emit(valueSelected);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoLookupBaseComponent.prototype.callOnChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoLookupBaseComponent.prototype.searchById = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (typeof (value) === 'string') {
            value = value.trim();
        }
        if (value !== '') {
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element) {
                    _this.oldValue = element[_this.fieldLabel];
                    _this.selectValue(element);
                    _this.setViewValue(_this.getFormattedLabel(element), element);
                }
                else {
                    _this.cleanModel();
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.cleanModel();
                _this.onError.emit(error);
            }));
        }
        else {
            this.cleanModel();
        }
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoLookupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoLookupBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && value instanceof Object) {
            // Esta condição é executada quando é retornado o objeto selecionado do componente Po Lookup Modal.
            this.oldValue = value[this.fieldLabel];
            this.valueToModel = value[this.fieldValue];
            this.setViewValue(this.getFormattedLabel(value), value);
        }
        else if (value) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    PoLookupBaseComponent.prototype.cleanModel = /**
     * @protected
     * @return {?}
     */
    function () {
        this.cleanViewValue();
        this.callOnChange(undefined);
    };
    /**
     * @protected
     * @return {?}
     */
    PoLookupBaseComponent.prototype.cleanViewValue = /**
     * @protected
     * @return {?}
     */
    function () {
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    };
    // Formata a label do campo.
    // Formata a label do campo.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoLookupBaseComponent.prototype.getFormattedLabel = 
    // Formata a label do campo.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value ? this.keysDescription.map((/**
         * @param {?} column
         * @return {?}
         */
        function (column) { return value[column]; })).join(' - ') : '';
    };
    // Chama o método writeValue e preenche o model.
    // Chama o método writeValue e preenche o model.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoLookupBaseComponent.prototype.selectModel = 
    // Chama o método writeValue e preenche o model.
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.writeValue(value);
        if (value && value instanceof Object) {
            this.selectValue(value);
        }
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    PoLookupBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    PoLookupBaseComponent.prototype.setService = /**
     * @private
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (isTypeof(service, 'object')) {
            this.service = (/** @type {?} */ (service));
        }
        if (service && isTypeof(service, 'string')) {
            this.service = this.defaultService;
            this.service.setUrl(service);
        }
    };
    PoLookupBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        help: [{ type: Input, args: ['p-help',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        name: [{ type: Input, args: ['name',] }],
        fieldValue: [{ type: Input, args: ['p-field-value',] }],
        fieldLabel: [{ type: Input, args: ['p-field-label',] }],
        filterParams: [{ type: Input, args: ['p-filter-params',] }],
        fieldFormat: [{ type: Input, args: ['p-field-format',] }],
        columns: [{ type: Input, args: ['p-columns',] }],
        filterService: [{ type: Input, args: ['p-filter-service',] }],
        noAutocomplete: [{ type: Input, args: ['p-no-autocomplete',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        required: [{ type: Input, args: ['p-required',] }],
        autofocus: [{ type: Input, args: ['p-focus',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        onError: [{ type: Output, args: ['p-error',] }],
        selected: [{ type: Output, args: ['p-selected',] }]
    };
    return PoLookupBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype._autofocus;
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype._filterService;
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype._noAutocomplete;
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype._required;
    /**
     * @type {?}
     * @protected
     */
    PoLookupBaseComponent.prototype.getSubscription;
    /**
     * @type {?}
     * @protected
     */
    PoLookupBaseComponent.prototype.keysDescription;
    /**
     * @type {?}
     * @protected
     */
    PoLookupBaseComponent.prototype.oldValue;
    /**
     * @type {?}
     * @protected
     */
    PoLookupBaseComponent.prototype.valueToModel;
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype.onChangePropagate;
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype.validatorChange;
    /** @type {?} */
    PoLookupBaseComponent.prototype.service;
    /**
     * Label do campo.
     *
     * > Quando utilizar esta propriedade o seu valor será utilizado como título da modal do componente caso não tenha
     * sido definido um `modalTitle` na propriedade `p-literals`.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.label;
    /**
     * \@description
     *
     * Objeto com as literais usadas no `po-lookup`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select',
     *    modalSecondaryActionLabel: 'Cancel',
     *    modalPlaceholder: 'Search Value',
     *    modalTableNoColumns: 'No columns',
     *    modalTableNoData: 'No data',
     *    modalTableLoadingData: 'Loading data',
     *    modalTableLoadMoreData: 'Load more',
     *    modalTitle: 'Select a user'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoLookupLiterals = {
     *    modalPrimaryActionLabel: 'Select'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-lookup
     *   [p-literals]="customLiterals">
     * </po-lookup>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     * @type {?}
     */
    PoLookupBaseComponent.prototype.literals;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.help;
    /**
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.placeholder;
    /**
     * Nome e Id do componente.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.name;
    /**
     * \@description
     *
     * Indica a coluna que será utilizada como valor do campo.
     *
     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.fieldValue;
    /**
     * Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.fieldLabel;
    /**
     * Valor que será repassado como parâmetro aos métodos do serviço que implementam a interface `PoLookupFilter`.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.filterParams;
    /**
     * \@optional
     *
     * \@description
     *
     * Formato de exibição do campo.
     *
     * Recebe uma função que deve retornar uma *string* com o/os valores do objeto formatados para exibição, por exemplo:
     *
     * ```
     * fieldFormat(obj) {
     *   return `${obj.id} - ${obj.name}`;
     * }
     * ```
     * > Esta propriedade sobrepõe o valor da propriedade `p-field-label` na descrição do campo.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.fieldFormat;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.columns;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoLookupBaseComponent.prototype.optional;
    /**
     * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
     * Será passado por parâmetro o objeto de erro retornado.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando ocorrer alguma seleção.
     * Será passado por parâmetro o objeto com o valor selecionado.
     * @type {?}
     */
    PoLookupBaseComponent.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    PoLookupBaseComponent.prototype.defaultService;
    /**
     * @abstract
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    PoLookupBaseComponent.prototype.setViewValue = function (value, object) { };
    /**
     * @abstract
     * @return {?}
     */
    PoLookupBaseComponent.prototype.openLookup = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
var PoLookupFilterService = /** @class */ (function () {
    function PoLookupFilterService(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @param {?} filteredItemsParams
     * @return {?}
     */
    PoLookupFilterService.prototype.getFilteredItems = /**
     * @param {?} filteredItemsParams
     * @return {?}
     */
    function (filteredItemsParams) {
        var filterParams = filteredItemsParams.filterParams, restFilteredItemsParams = __rest(filteredItemsParams, ["filterParams"]);
        /** @type {?} */
        var validatedFilterParams = this.validateParams(filterParams);
        /** @type {?} */
        var params = __assign({}, restFilteredItemsParams, validatedFilterParams);
        return this.httpClient.get(this.url, { params: params });
    };
    /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    PoLookupFilterService.prototype.getObjectByValue = /**
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    function (value, filterParams) {
        /** @type {?} */
        var validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(this.url + "/" + value, { params: validatedFilterParams });
    };
    /**
     * @param {?} url
     * @return {?}
     */
    PoLookupFilterService.prototype.setUrl = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.url = url;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    PoLookupFilterService.prototype.validateParams = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    };
    PoLookupFilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoLookupFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoLookupFilterService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLookupFilterService.prototype.url;
    /**
     * @type {?}
     * @private
     */
    PoLookupFilterService.prototype.httpClient;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@docsExtends PoPopupAction
 * @record
 */
function PoTableAction() { }

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Interface que define as colunas booleanas do `po-table`.
 * @record
 */
function PoTableBoolean() { }
if (false) {
    /**
     * Define o rótulo para valores `false`.
     * @type {?|undefined}
     */
    PoTableBoolean.prototype.falseLabel;
    /**
     * Define o rótulo para valores `true`.
     * @type {?|undefined}
     */
    PoTableBoolean.prototype.trueLabel;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Interface para configuração das colunas do `po-table`.
 *
 * As definições das colunas serão aplicadas linha a linha.
 * @record
 */
function PoTableColumn() { }
if (false) {
    /**
     * Define uma ação na coluna quando o tipo da coluna for `link` ou `icon`.
     *
     * > Quando for do tipo `link` será enviado como primeiro parâmetro o valor da coluna
     * e no segundo parâmetro o objeto completo da linha. Caso tenha sido definido uma ação e um link na coluna, a ação
     * será executada ao invés do link.
     *
     * > Quando for do tipo `icon` enviará o objeto completo da linha e o segundo parâmetro será a definição da coluna.
     * @type {?|undefined}
     */
    PoTableColumn.prototype.action;
    /**
     * Define um objeto do tipo `PoTableBoolean` para as colunas do tipo _boolean_. Por exemplo:
     *
     * ```
     *  { property: 'approbation', type: 'boolean', boolean: {
     *    trueLabel: 'Accepted', falseLabel: 'Rejected'
     *  }}
     * ```
     *
     * > Caso não seja definido um objeto para colunas do tipo *boolean*,
     * esta exibirá por padrão `Sim` e `Não` de acordo com os valores _booleanos_.
     * @type {?|undefined}
     */
    PoTableColumn.prototype.boolean;
    /**
     * \@optional
     *
     * \@description
     *
     * Define a cor que será aplicada no conteúdo da coluna.
     *
     * Valores válidos:
     * - <span class="dot po-color-01"></span> `color-01`
     * - <span class="dot po-color-02"></span> `color-02`
     * - <span class="dot po-color-03"></span> `color-03`
     * - <span class="dot po-color-04"></span> `color-04`
     * - <span class="dot po-color-05"></span> `color-05`
     * - <span class="dot po-color-06"></span> `color-06`
     * - <span class="dot po-color-07"></span> `color-07`
     * - <span class="dot po-color-08"></span> `color-08`
     * - <span class="dot po-color-09"></span> `color-09`
     * - <span class="dot po-color-10"></span> `color-10`
     * - <span class="dot po-color-11"></span> `color-11`
     * - <span class="dot po-color-12"></span> `color-12`
     *
     * > Existe a possibilidade de informar uma função que retorne um dos valores aceitos, serão passados
     * por parâmetro a linha e a coluna atual, por exemplo:
     *
     * ```
     * (row, column) => { row[column] == 'text' ? 'color-03' : 'color-09' }
     * ```
     *
     * > É possível também usá-la na coluna do tipo `icons` para alteração das cores de seu conteúdo conforme exemplo abaixo,
     * contudo, desta forma sobrepõe a cor especificada em cada objeto caso haja:
     *
     * ```
     * { property: 'columnIcon', label: 'Like', type: 'icon', color: 'color-08', icons: [
     *   { value: 'po-icon-star', action: () => this.notification() }
     * ]},
     * ```
     * @type {?|undefined}
     */
    PoTableColumn.prototype.color;
    /**
     * Define um objeto que segue a interface `PoTableDetail`, para as colunas de detalhes. Por exemplo:
     *
     * ```
     * { columns: [{ property: 'package', label: 'Pacote' }], typeHeader: 'top' }
     * ```
     *
     * @type {?|undefined}
     */
    PoTableColumn.prototype.detail;
    /**
     * Função que deve retornar um booleano para habilitar ou desabilitar o *link* e sua ação.
     *
     * > Propriedade disponível nas colunas do tipo `link`.
     * @type {?|undefined}
     */
    PoTableColumn.prototype.disabled;
    /**
     * Formato de exibição do valor da coluna:
     * - Formato para moeda (currency). Exemplos: 'BRL', 'USD'.
     * - Formato para data (date): aceita apenas os caracteres de dia(dd), mês(MM ou mm) e ano (yyyy ou yy),
     * caso não seja informado um formato o mesmo será 'dd/MM/yyyy'. Exemplos: 'dd/MM/yyyy', 'dd-MM-yy', 'mm/dd/yyyy'.
     * - Formato para horário (time): aceita apenas os caracteres de hora(HH), minutos(mm), segundos(ss) e
     *  milisegundos(f-ffffff), os milisegundos são opcionais, caso não seja informado um formato o mesmo será
     * 'HH:mm:ss'. Exemplos: 'HH:mm', 'HH:mm:ss.ffffff', 'HH:mm:ss.ff', 'mm:ss.fff'.
     * - Formato para números (number): aceita um valor seguindo o padrão [**DecimalPipe**](https://angular.io/api/common/DecimalPipe)
     *  para formatação, e caso não seja informado, o número será exibido na sua forma original. Exemplo:
     *
     *  +  Com o valor de entrada: `50` e a valor para formatação: `'1.2-5'` o resultado será: `50.00`
     * @type {?|undefined}
     */
    PoTableColumn.prototype.format;
    /**
     * \@description
     *
     * Define um *array* de objetos para colunas de ícones que irá sobrepor os valores como `action` e `color`
     * definidos na coluna, à partir do *value* da [`PoTableColumnIcon`](documentation/po-table#tableColumnIcon), por exemplo:
     *
     * ```
     *  { property: 'columnIcon', label: 'Icons', type: 'icon', action: this.favorite.bind(this), icons: [
     *    { value: 'delete', icon: 'po-icon-plus', color: 'color-06', action: this.add.bind(this), tooltip: 'Adiciona um novo item' },
     *    { value: 'edit', icon: 'po-icon-edit', action: this.edit.bind(this) },
     *    { value: 'delete', icon: 'po-icon-delete', color: 'color-12', action: this.remove.bind(this) }
     *  ]},
     * ```
     *
     * ```
     *  ...
     *  { id: 1, columnIcon: ['po-icon-edit', 'po-icon-remove', 'po-icon-star'] }
     *  ...
     *
     * ```
     * @type {?|undefined}
     */
    PoTableColumn.prototype.icons;
    /**
     * Texto para título da coluna.
     *
     * Caso não seja informado, será utilizado como *label* o valor da propriedade *property* com a primeira letra em maiúsculo.
     * @type {?|undefined}
     */
    PoTableColumn.prototype.label;
    /**
     * Define um array de objetos para as colunas de label, onde 'labels' é uma lista de objetos
     * do tipo `PoTableColumnLabel` na qual devem ser definidas os labels. Por exemplo:
     *
     * ```
     * { property: 'flightStatus', label: 'Status', type: 'label', width:'100px', labels: [
     *  { value: 'confirmed', color: 'color-11', label: 'Confirmado', tooltip: 'Flight Status' },
     *  { value: 'delayed', color: 'color-08', label: 'Atrasado', tooltip: 'Flight Status' }
     * }
     * ```
     *
     * @type {?|undefined}
     */
    PoTableColumn.prototype.labels;
    /**
     * Define o nome da propriedade que conterá o `link` a ser redirecionado.
     *
     * \@default link
     * @type {?|undefined}
     */
    PoTableColumn.prototype.link;
    /**
     * Nome identificador da coluna.
     * @type {?|undefined}
     */
    PoTableColumn.prototype.property;
    /**
     * Define um array de objetos para as colunas de legenda. Onde, `subtitles` é uma lista de objetos do tipo PoTableSubtitle na qual
     * devem ser definidas as opções de legenda. Por exemplo:
     *
     * ```
     * { property: 'flightStatus', label: 'Status', color: 'subtitle', width:'100px', subtitles: [
     *  { value: 'confirmed', color: 'color-11', label: 'Confirmado', content: '1' },
     *  { value: 'delayed', color: 'color-08', label: 'Atrasado', content: '2' }
     * }
     * ```
     * Nesse exemplo a coluna escolhida para legenda é 'flightStatus', se o valor dessa coluna for 'confirmed', o texto da legenda será
     * 'Confirmado'.
     *
     * @type {?|undefined}
     */
    PoTableColumn.prototype.subtitles;
    /**
     * Define um texto de ajuda que será exibido ao passar o *mouse* sobre um texto.
     *
     * > O tooltip só será visível se for uma coluna do tipo *link*.
     *
     * > Caso a propriedade `p-hide-text-overflow` esteja habilitada e o conteúdo da célula exceder a largura da coluna,
     * é ignorado o valor atribuído ao *tooltip* e será exibido justamente o conteúdo da célula.
     * @type {?|undefined}
     */
    PoTableColumn.prototype.tooltip;
    /**
     * Tipo da coluna.
     *
     * Valores válidos:
     * - `boolean`: Exibirá por padrão `Sim` e `Não` de acordo com os valores *booleanos*.
     * > Caso necessite exibir valores diferentes do padrão, deve-se utilizar a propriedade `boolean` desta interface.
     * - `currency`: valores monetários.
     *
     * - `date`: valor de datas.
     *  + Aceita os tipos _string_ e _Date_ padrão do Javascript,
     *  por exemplo: `'2017-11-28'` ou `new Date(2017, 10, 28)`.
     *
     * - `dateTime`: valor de data com horário.
     *  + Aceita o tipo _string_ no formato **ISO-8601** extendido **'yyyy-mm-ddThh:mm:ss+|-hh:mm'**
     * e o tipo _Date_ padrão do Javascript, por exemplo: `'2017-11-28T00:00:00-02:00'` ou `new Date(2017, 10, 28)`.
     *
     * - `detail`: array de objetos para o master-detail.
     * - `icon`: *array* de *string* ou objetos para a coluna de ícones.
     * - `label`: texto com destaque.
     * - `link`: habilita link na coluna para ação ou navegação.
     * - `number`: valores numéricos.
     * - `string`: textos.
     * - `subtitle`: array de objetos para a coluna de legenda.
     *
     * - `time`: valor de horário.
     *  + Aceita o tipo _string_ nos formatos **'HH:mm:ss'** ou **'HH:mm:ss.ffffff'**, por exemplo: `'23:12:45'`.
     *
     * \@default `string`
     * @type {?|undefined}
     */
    PoTableColumn.prototype.type;
    /**
     * \@optional
     *
     * \@description
     *
     * Controla a exibição da coluna. Caso seja definido um valor falso, a coluna não será exibida mas mas será possível torná-la
     * visível através do **gerenciador de colunas**.
     *
     * > A disponibilidade de visualização pode limitar-se de acordo com a definição de `p-max-columns`.
     *
     * \@default `true`
     * @type {?|undefined}
     */
    PoTableColumn.prototype.visible;
    /**
     * A largura da coluna pode ser informada em pixels ou porcentagem.
     * > Exemplo: '100px' ou '20%'.
     * @type {?|undefined}
     */
    PoTableColumn.prototype.width;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Interface para ordenação das colunas do componente table.
 * @record
 */
function PoTableColumnSort() { }
if (false) {
    /**
     * Coluna pela qual a tabela está ordenada.
     * @type {?|undefined}
     */
    PoTableColumnSort.prototype.column;
    /**
     * Tipo da ordenação.
     * @type {?}
     */
    PoTableColumnSort.prototype.type;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-table`.
 * @record
 */
function PoTableLiterals() { }
if (false) {
    /**
     * Texto do **Gerenciador de colunas** localizado no canto superior direito da tabela.
     * @type {?|undefined}
     */
    PoTableLiterals.prototype.columnsManager;
    /**
     * Título da modal 'Legenda completa' que aparece ao clicar no botão 'Ver legenda completa'.
     * @type {?|undefined}
     */
    PoTableLiterals.prototype.completeSubtitle;
    /**
     * Texto exibido quando não existem colunas definidas para a tabela.
     * @type {?|undefined}
     */
    PoTableLiterals.prototype.noColumns;
    /**
     * Texto exibido quando não existem itens para serem exibidos na tabela.
     * @type {?|undefined}
     */
    PoTableLiterals.prototype.noData;
    /**
     * Texto exibido quando não existem colunas visíveis para a tabela.
     * @type {?|undefined}
     */
    PoTableLiterals.prototype.noVisibleColumn;
    /**
     * Texto exibido enquanto uma requisição está sendo executada para carregar dados na tabela.
     * @type {?|undefined}
     */
    PoTableLiterals.prototype.loadingData;
    /**
     * Texto do botão de **Carregar mais resultados** localizado no rodapé da tabela.
     * @type {?|undefined}
     */
    PoTableLiterals.prototype.loadMoreData;
    /**
     * Texto do botão **Ver legenda completa** que aparece quando o rodapé de legendas é maior que a tabela.
     * @type {?|undefined}
     */
    PoTableLiterals.prototype.seeCompleteSubtitle;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * <a id="tableColumnIcon"></a>
 *
 * Interface que define a coluna com ícone(s) do `po-table`.
 * @record
 */
function PoTableColumnIcon() { }
if (false) {
    /**
     * Define a ação que será executada ao clicar no ícone.
     * @type {?|undefined}
     */
    PoTableColumnIcon.prototype.action;
    /**
     * \@optional
     *
     * \@description
     *
     * Define a cor do ícone.
     *
     * Valores válidos:
     * - <span class="dot po-color-01"></span> `color-01`
     * - <span class="dot po-color-02"></span> `color-02`
     * - <span class="dot po-color-03"></span> `color-03`
     * - <span class="dot po-color-04"></span> `color-04`
     * - <span class="dot po-color-05"></span> `color-05`
     * - <span class="dot po-color-06"></span> `color-06`
     * - <span class="dot po-color-07"></span> `color-07`
     * - <span class="dot po-color-08"></span> `color-08`
     * - <span class="dot po-color-09"></span> `color-09`
     * - <span class="dot po-color-10"></span> `color-10`
     * - <span class="dot po-color-11"></span> `color-11`
     * - <span class="dot po-color-12"></span> `color-12`
     *
     * @type {?|undefined}
     */
    PoTableColumnIcon.prototype.color;
    /**
     * Função que deve retornar um booleano para habilitar ou desabilitar o ícone e sua ação.
     * @type {?|undefined}
     */
    PoTableColumnIcon.prototype.disabled;
    /**
     * Ícone a ser exibido.
     *
     * > Veja os valores válidos na [Biblioteca de ícones](/guides/icons).
     * @type {?|undefined}
     */
    PoTableColumnIcon.prototype.icon;
    /**
     * Define um texto de ajuda que será exibido ao passar o *mouse* em cima do ícone.
     * @type {?|undefined}
     */
    PoTableColumnIcon.prototype.tooltip;
    /**
     * Define o valor do respectivo ícone que será exibido, o qual se refere a propriedade `icon`.
     *
     * > Caso propriedade `icon` não for informada, o componente utilizará o próprio `value` como valor.
     * @type {?}
     */
    PoTableColumnIcon.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Interface para configuração das colunas de labels do `po-table`.
 * @record
 */
function PoTableColumnLabel() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Define a cor do label.
     *
     * Valores válidos:
     * - <span class="dot po-color-01"></span> `color-01`
     * - <span class="dot po-color-02"></span> `color-02`
     * - <span class="dot po-color-03"></span> `color-03`
     * - <span class="dot po-color-04"></span> `color-04`
     * - <span class="dot po-color-05"></span> `color-05`
     * - <span class="dot po-color-06"></span> `color-06`
     * - <span class="dot po-color-07"></span> `color-07`
     * - <span class="dot po-color-08"></span> `color-08`
     * - <span class="dot po-color-09"></span> `color-09`
     * - <span class="dot po-color-10"></span> `color-10`
     * - <span class="dot po-color-11"></span> `color-11`
     * - <span class="dot po-color-12"></span> `color-12`
     * @type {?|undefined}
     */
    PoTableColumnLabel.prototype.color;
    /**
     * Texto de exibição.
     * @type {?}
     */
    PoTableColumnLabel.prototype.label;
    /**
     * Define um texto de ajuda que será exibido ao passar o *mouse* em cima do *label*.
     *
     * > Caso a propriedade `p-hide-text-overflow` esteja habilitada e o conteúdo da célula exceder a largura da coluna,
     * é ignorado o valor atribuido ao tooltip e será exibido justamente o conteúdo da célula.
     * @type {?|undefined}
     */
    PoTableColumnLabel.prototype.tooltip;
    /**
     * Valor da legenda.
     * @type {?}
     */
    PoTableColumnLabel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Interface para configuração das colunas do `po-table-detail`.
 * @record
 */
function PoTableDetailColumn() { }
if (false) {
    /**
     * Formato de exibição do valor da coluna:
     * - Formato para moeda (currency). Exemplos: 'BRL', 'USD'.
     * - Formato para data (date): aceita apenas os caracteres de dia(dd), mês(MM ou mm) e ano (yyyy ou yy),
     * caso não seja informado um formato o mesmo será 'dd/MM/yyyy'. Exemplos: 'dd/MM/yyyy', 'dd-MM-yy', 'mm/dd/yyyy'.
     * - Formato para horário (time): aceita apenas os caracteres de hora(HH), minutos(mm), segundos(ss) e
     *  milisegundos(f-ffffff), os milisegundos são opcionais, caso não seja informado um formato o mesmo será
     * 'HH:mm:ss'. Exemplos: 'HH:mm', 'HH:mm:ss.ffffff', 'HH:mm:ss.ff', 'mm:ss.fff'.
     * - Formato para números (number): aceita um valor seguindo o padrão [**DecimalPipe**](https://angular.io/api/common/DecimalPipe)
     *  para formatação, e caso não seja informado, o número será exibido na sua forma original. Exemplo:
     *
     *  +  Valor de entrada: `50` e valor para formatação: `'1.2-5'` o resultado será: `50.00`
     * @type {?|undefined}
     */
    PoTableDetailColumn.prototype.format;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto para título da coluna.
     * @type {?|undefined}
     */
    PoTableDetailColumn.prototype.label;
    /**
     * \@optional
     *
     * \@description
     *
     * Nome identificador da coluna.
     * @type {?|undefined}
     */
    PoTableDetailColumn.prototype.property;
    /**
     * Tipo da coluna.
     *
     * Valores válidos:
     * - `currency`: valores monetários.
     *
     * - `date`: valor de datas.
     *  + Aceita os tipos _string_ e _Date_ padrão do Javascript,
     *  por exemplo: `'2017-11-28'` ou `new Date(2017, 10, 28)`.
     *
     * - `time`: valor de horário.
     * - `number`: valores numéricos.
     *
     * - `dateTime`: valor de data com horário.
     *  + Aceita o tipo _string_ no formato **ISO-8601** extendido **'yyyy-mm-ddThh:mm:ss+|-hh:mm'**
     * e o tipo _Date_ padrão do Javascript, por exemplo: `'2017-11-28T00:00:00-02:00'` ou `new Date(2017, 10, 28)`.
     *
     *  + Aceita o tipo _string_ nos formatos **'HH:mm:ss'** ou **'HH:mm:ss.ffffff'**, por exemplo: `'23:12:45'`.
     *
     * \@default `string`
     * @type {?|undefined}
     */
    PoTableDetailColumn.prototype.type;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Interface para configuração do _detail_ do componente `po-table`.
 * @record
 */
function PoTableDetail() { }
if (false) {
    /**
     * Define uma lista do tipo `PoTableDetailColumn` para as colunas do objet *detail*. Por exemplo:
     *
     * ```
     *  [
     *   { property: 'miles', label: 'Miles', type: 'number', format: '1.0-5' },
     *   { property: 'departure', label: 'Departure time', type: 'date', format: 'dd/MM/yyyy' }
     *  ]
     * ```
     * @type {?}
     */
    PoTableDetail.prototype.columns;
    /**
     *
     * Define se o checkbox de seleção do detail será exibido. Valor padrão 'false'.
     * @type {?|undefined}
     */
    PoTableDetail.prototype.hideSelect;
    /**
     *
     * Define o tipo de cabeçalho para o conteúdo do _detail_ .
     *
     * Valores válidos:
     * - `inline`: Atribui o cabeçalho na mesma linha do _detail_.
     * - `top`: Atribui o cabeçalho acima do _detail_, idêntico ao `po-table`.
     * - `none`: Remove o cabeçalho do _detail_.
     * @type {?|undefined}
     */
    PoTableDetail.prototype.typeHeader;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTableComponent
 *
 * \@description
 *
 * Interface para configuração das colunas de legenda do Po-Table.
 * @record
 */
function PoTableSubtitleColumn() { }
if (false) {
    /**
     * Valor da legenda.
     * @type {?}
     */
    PoTableSubtitleColumn.prototype.value;
    /**
     * Texto de exibição.
     * @type {?}
     */
    PoTableSubtitleColumn.prototype.label;
    /**
     * \@optional
     *
     * \@description
     *
     * Define a cor do *status*.
     *
     * Valores válidos:
     * - <span class="dot po-color-01"></span> `color-01`
     * - <span class="dot po-color-02"></span> `color-02`
     * - <span class="dot po-color-03"></span> `color-03`
     * - <span class="dot po-color-04"></span> `color-04`
     * - <span class="dot po-color-05"></span> `color-05`
     * - <span class="dot po-color-06"></span> `color-06`
     * - <span class="dot po-color-07"></span> `color-07`
     * - <span class="dot po-color-08"></span> `color-08`
     * - <span class="dot po-color-09"></span> `color-09`
     * - <span class="dot po-color-10"></span> `color-10`
     * - <span class="dot po-color-11"></span> `color-11`
     * - <span class="dot po-color-12"></span> `color-12`
     *
     * \@default `color-01`
     * @type {?|undefined}
     */
    PoTableSubtitleColumn.prototype.color;
    /**
     * Conteúdo do status.
     * @type {?}
     */
    PoTableSubtitleColumn.prototype.content;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poLookupLiteralsDefault = {
    en: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Select',
        modalSecondaryActionLabel: 'Cancel',
        modalPlaceholder: 'Search',
        modalTitle: 'Select a record',
        modalTableNoColumns: poTableLiteralsDefault.en.noColumns,
        modalTableNoData: poTableLiteralsDefault.en.noData,
        modalTableLoadingData: poTableLiteralsDefault.en.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.en.loadMoreData
    })),
    es: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Seleccionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Buscar',
        modalTitle: 'Seleccione un registro',
        modalTableNoColumns: poTableLiteralsDefault.es.noColumns,
        modalTableNoData: poTableLiteralsDefault.es.noData,
        modalTableLoadingData: poTableLiteralsDefault.es.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.es.loadMoreData
    })),
    pt: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'Selecionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Pesquisar',
        modalTitle: 'Selecione um registro',
        modalTableNoColumns: poTableLiteralsDefault.pt.noColumns,
        modalTableNoData: poTableLiteralsDefault.pt.noData,
        modalTableLoadingData: poTableLiteralsDefault.pt.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.pt.loadMoreData
    })),
    ru: (/** @type {?} */ ({
        modalPrimaryActionLabel: 'выбирать',
        modalSecondaryActionLabel: 'отменить',
        modalPlaceholder: 'поиск',
        modalTitle: 'Выберите запись',
        modalTableNoColumns: poTableLiteralsDefault.ru.noColumns,
        modalTableNoData: poTableLiteralsDefault.ru.noData,
        modalTableLoadingData: poTableLiteralsDefault.ru.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.ru.loadMoreData
    }))
};
/**
 * \@docsPrivate
 *
 * Classe base do componente Po Lookup Modal.
 * @abstract
 */
var PoLookupModalBaseComponent = /** @class */ (function () {
    function PoLookupModalBaseComponent() {
        var _this = this;
        this.hasNext = true;
        this.isLoading = false;
        this.page = 1;
        this.pageSize = 10;
        this.primaryAction = {
            action: (/**
             * @return {?}
             */
            function () {
                _this.items.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    if (element['$selected']) {
                        _this.model.emit(element);
                        _this.poModal.close();
                    }
                }));
            }),
            label: this.literals.modalPrimaryActionLabel
        };
        this.searchValue = '';
        this.secondaryAction = {
            action: (/**
             * @return {?}
             */
            function () {
                _this.model.emit(null);
                _this.poModal.close();
            }),
            label: this.literals.modalSecondaryActionLabel
        };
        /**
         * Evento utilizado ao selecionar um registro da tabela.
         */
        this.model = new EventEmitter();
    }
    Object.defineProperty(PoLookupModalBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poLookupLiteralsDefault[browserLanguage()];
        },
        /** Objeto com as literais usadas no `po-lookup-modal`. */
        set: /**
         * Objeto com as literais usadas no `po-lookup-modal`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poLookupLiteralsDefault[poLocaleDefault], poLookupLiteralsDefault[browserLanguage()], value);
                if (value.modalTitle) {
                    this.title = this.literals.modalTitle;
                }
            }
            else {
                this._literals = poLookupLiteralsDefault[browserLanguage()];
            }
            this.primaryAction.label = this.literals.modalPrimaryActionLabel;
            this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
            this.setTableLiterals();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoLookupModalBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /** Título da modal. */
        set: /**
         * Título da modal.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.searchSubscription) {
            this.searchSubscription.unsubscribe();
        }
        if (this.showMoreSubscription) {
            this.showMoreSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initializeData();
        this.setTableLiterals();
    };
    /**
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.search = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.page = 1;
        if (this.searchValue) {
            this.isLoading = true;
            this.searchSubscription = this.getFilteredItems(this.searchValue).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.items = data.items;
                _this.hasNext = data.hasNext;
                _this.isLoading = false;
            }));
        }
        else {
            this.initializeData();
        }
    };
    /**
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.showMoreEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.page++;
        this.isLoading = true;
        this.showMoreSubscription = this.getFilteredItems(this.searchValue).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            data.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                _this.items.push(item);
            }));
            _this.hasNext = data.hasNext;
            _this.isLoading = false;
        }));
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.getFilteredItems = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _a = this, page = _a.page, pageSize = _a.pageSize, filterParams = _a.filterParams;
        if (this.filterService.getFilteredItems) {
            /** @type {?} */
            var filteredParams = this.getFilteredParams(filter);
            return this.filterService.getFilteredItems(filteredParams);
        }
        return this.filterService.getFilteredData(filter, page, pageSize, filterParams);
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.getFilteredParams = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _a = this, page = _a.page, pageSize = _a.pageSize, filterParams = _a.filterParams, sort = _a.sort;
        /** @type {?} */
        var filteredParams = {};
        /** @type {?} */
        var order = this.getOrderParam(sort);
        /** @type {?} */
        var params = { filter: filter, page: page, pageSize: pageSize, order: order, filterParams: filterParams };
        for (var key in params) {
            if (params.hasOwnProperty(key) && params[key]) {
                filteredParams[key] = params[key];
            }
        }
        return filteredParams;
    };
    /**
     * @private
     * @param {?=} sort
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.getOrderParam = /**
     * @private
     * @param {?=} sort
     * @return {?}
     */
    function (sort) {
        if (sort === void 0) { sort = { type: undefined }; }
        var column = sort.column, type = sort.type;
        if (!column) {
            return;
        }
        if (type === PoTableColumnSortType.Descending) {
            return "-" + column.property;
        }
        return "" + column.property;
    };
    /**
     * @private
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.initializeData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.isLoading = true;
        this.filterSubscription = this.getFilteredItems('').subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.items = data.items;
            _this.hasNext = data.hasNext;
            _this.isLoading = false;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.setTableLiterals = /**
     * @private
     * @return {?}
     */
    function () {
        this.tableLiterals = {
            'noColumns': this.literals.modalTableNoColumns,
            'noData': this.literals.modalTableNoData,
            'loadingData': this.literals.modalTableLoadingData,
            'loadMoreData': this.literals.modalTableLoadMoreData,
        };
    };
    PoLookupModalBaseComponent.propDecorators = {
        poModal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }],
        columns: [{ type: Input, args: ['p-columns',] }],
        items: [{ type: Input, args: ['p-items',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        title: [{ type: Input, args: ['p-title',] }],
        filterService: [{ type: Input, args: ['p-filter-service',] }],
        filterParams: [{ type: Input, args: ['p-filter-params',] }],
        model: [{ type: Output, args: ['p-change-model',] }]
    };
    return PoLookupModalBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLookupModalBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoLookupModalBaseComponent.prototype._title;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.hasNext;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.isLoading;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.page;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.pageSize;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.primaryAction;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.searchValue;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.secondaryAction;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.tableLiterals;
    /**
     * @type {?}
     * @protected
     */
    PoLookupModalBaseComponent.prototype.sort;
    /**
     * @type {?}
     * @private
     */
    PoLookupModalBaseComponent.prototype.filterSubscription;
    /**
     * @type {?}
     * @private
     */
    PoLookupModalBaseComponent.prototype.searchSubscription;
    /**
     * @type {?}
     * @private
     */
    PoLookupModalBaseComponent.prototype.showMoreSubscription;
    /** @type {?} */
    PoLookupModalBaseComponent.prototype.poModal;
    /**
     * Lista das colunas da tabela.
     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.
     * @type {?}
     */
    PoLookupModalBaseComponent.prototype.columns;
    /**
     * Lista de itens da tabela.
     * @type {?}
     */
    PoLookupModalBaseComponent.prototype.items;
    /**
     * Classe de serviço com a implementação do cliente.
     * @type {?}
     */
    PoLookupModalBaseComponent.prototype.filterService;
    /**
     * Classe de serviço com a implementação do cliente.
     * @type {?}
     */
    PoLookupModalBaseComponent.prototype.filterParams;
    /**
     * Evento utilizado ao selecionar um registro da tabela.
     * @type {?}
     */
    PoLookupModalBaseComponent.prototype.model;
    /**
     * @abstract
     * @return {?}
     */
    PoLookupModalBaseComponent.prototype.openModal = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoLookupModalBaseComponent
 */
var PoLookupModalComponent = /** @class */ (function (_super) {
    __extends(PoLookupModalComponent, _super);
    function PoLookupModalComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.keyUpObservable = null;
        _this.containerHeight = 375;
        _this.tableHeight = 370;
        return _this;
    }
    /**
     * @return {?}
     */
    PoLookupModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.initializeEventInput();
        this.setTableHeight();
    };
    /**
     * @return {?}
     */
    PoLookupModalComponent.prototype.initializeEventInput = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.keyUpObservable = fromEvent(this.inputSearchEl.nativeElement, 'keyup')
            .pipe(filter((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.validateEnterPressed(e); })), debounceTime(400));
        this.keyUpObservable.subscribe((/**
         * @return {?}
         */
        function () {
            _this.search();
        }));
    };
    /**
     * @return {?}
     */
    PoLookupModalComponent.prototype.openModal = /**
     * @return {?}
     */
    function () {
        this.poModal.open();
    };
    /**
     * @param {?} sort
     * @return {?}
     */
    PoLookupModalComponent.prototype.sortBy = /**
     * @param {?} sort
     * @return {?}
     */
    function (sort) {
        this.sort = sort;
    };
    /**
     * @private
     * @return {?}
     */
    PoLookupModalComponent.prototype.setTableHeight = /**
     * @private
     * @return {?}
     */
    function () {
        if (window.innerHeight < 615) {
            this.tableHeight -= 50;
            this.containerHeight -= 50;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    PoLookupModalComponent.prototype.validateEnterPressed = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        return e.keyCode === 13;
    };
    PoLookupModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-lookup-modal',
                    template: "<po-modal\n  p-click-out=\"false\"\n  p-hide-close=\"false\"\n  p-size=\"lg\"\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\"\n  [p-title]=\"title\">\n\n  <po-field-container\n    class=\"po-lookup-header po-md-6 po-pull-right\"\n    [p-optional]=\"false\">\n\n    <div class=\"po-field-container-content\">\n      <input #inpsearch\n        class=\"po-input po-input-icon-right\"\n        name=\"contentSearch\"\n        [(ngModel)]=\"searchValue\"\n        [placeholder]=\"literals.modalPlaceholder\"\n        type=\"text\">\n\n      <div class=\"po-field-icon-container-right\">\n        <span #iconLookup\n          class=\"po-icon po-field-icon po-icon-search\"\n          (click)=\"search()\">\n        </span>\n      </div>\n    </div>\n\n  </po-field-container>\n\n  <div class=\"po-row po-lookup-container-table\" [style.height.px]=\"containerHeight\">\n\n    <po-table\n      class=\"po-md-12\"\n      p-checkbox=\"true\"\n      p-hide-detail=\"true\"\n      p-single-select=\"true\"\n      p-sort=\"true\"\n      [p-columns]=\"columns\"\n      [p-height]=\"tableHeight\"\n      [p-items]=\"items\"\n      [p-literals]=\"tableLiterals\"\n      [p-loading]=\"isLoading\"\n      [p-show-more-disabled]=\"!hasNext\"\n      (p-show-more)=\"showMoreEvent()\"\n      (p-sort-by)=\"sortBy($event)\">\n    </po-table>\n\n  </div>\n\n</po-modal>\n"
                }] }
    ];
    PoLookupModalComponent.propDecorators = {
        inputSearchEl: [{ type: ViewChild, args: ['inpsearch', { static: true },] }]
    };
    return PoLookupModalComponent;
}(PoLookupModalBaseComponent));
if (false) {
    /** @type {?} */
    PoLookupModalComponent.prototype.inputSearchEl;
    /** @type {?} */
    PoLookupModalComponent.prototype.keyUpObservable;
    /** @type {?} */
    PoLookupModalComponent.prototype.containerHeight;
    /** @type {?} */
    PoLookupModalComponent.prototype.tableHeight;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
var PoLookupModalService = /** @class */ (function () {
    function PoLookupModalService(poComponentInjector) {
        this.poComponentInjector = poComponentInjector;
        this.componentRef = null;
        this.selectValueEvent = new EventEmitter();
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     */
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    PoLookupModalService.prototype.openModal = /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        var service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals;
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            _this.selectValue($event);
        }));
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    };
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    PoLookupModalService.prototype.selectValue = 
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    };
    PoLookupModalService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoLookupModalService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };
    return PoLookupModalService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLookupModalService.prototype.componentRef;
    /** @type {?} */
    PoLookupModalService.prototype.selectValueEvent;
    /**
     * @type {?}
     * @private
     */
    PoLookupModalService.prototype.poComponentInjector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoLookupBaseComponent
 *
 * \@description
 *
 * Quando existe muitos dados o po-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
 * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
 * [Guia de implementação das APIs TOTVS](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444).
 *
 * Importante:
 *
 * - Caso o po-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * ```
 * <po-lookup
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-lookup>
 * ```
 *
 * \@example
 *
 * <example name="po-lookup-basic" title="Portinari Lookup Basic">
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.html"> </file>
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-labs" title="Portinari Lookup Labs">
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.html"> </file>
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero" title="Portinari Lookup - Hero">
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.html"> </file>
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero-reactive-form" title="Portinari Lookup - Hero Reactive Form">
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.html"> </file>
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-sw-films" title="Portinari Lookup - Star Wars films">
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.html"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.ts"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.service.ts"> </file>
 * </example>
 */
var PoLookupComponent = /** @class */ (function (_super) {
    __extends(PoLookupComponent, _super);
    function PoLookupComponent(poLookupFilterService, poLookupModalService) {
        var _this = _super.call(this, poLookupFilterService) || this;
        _this.poLookupModalService = poLookupModalService;
        return _this;
    }
    Object.defineProperty(PoLookupComponent.prototype, "autocomplete", {
        get: /**
         * @return {?}
         */
        function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoLookupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.modalSubscription) {
            this.modalSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    PoLookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoLookupComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
     *
     * focusLookup() {
     *   this.lookup.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoLookupComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
     *
     * focusLookup() {
     *   this.lookup.focus();
     * }
     * ```
     * @return {?}
     */
    PoLookupComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoLookupComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
     *
     * focusLookup() {
     *   this.lookup.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoLookupComponent.prototype.openLookup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isAllowedOpenModal()) {
            var _a = this, service = _a.service, columns = _a.columns, filterParams = _a.filterParams, literals = _a.literals;
            this.poLookupModalService.openModal({ service: service, columns: columns, filterParams: filterParams, title: this.label, literals: literals });
            if (!this.modalSubscription) {
                this.modalSubscription = this.poLookupModalService.selectValueEvent.subscribe((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.selectModel(element);
                }));
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    PoLookupComponent.prototype.setViewValue = /**
     * @param {?} value
     * @param {?} object
     * @return {?}
     */
    function (value, object) {
        if (this.fieldFormat) {
            this.setInputValueWipoieldFormat(object);
        }
        else {
            this.inputEl.nativeElement.value = this.valueToModel || this.valueToModel === 0 ? value : '';
        }
    };
    /**
     * @return {?}
     */
    PoLookupComponent.prototype.getViewValue = /**
     * @return {?}
     */
    function () {
        return this.inputEl.nativeElement.value;
    };
    /**
     * @return {?}
     */
    PoLookupComponent.prototype.searchEvent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.getViewValue();
        if (this.oldValue !== value) {
            this.searchById(value);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoLookupComponent.prototype.isAllowedOpenModal = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.service) {
            console.warn('No service informed');
        }
        return !!(this.service && !this.disabled);
    };
    /**
     * @private
     * @param {?} objectSelected
     * @return {?}
     */
    PoLookupComponent.prototype.setInputValueWipoieldFormat = /**
     * @private
     * @param {?} objectSelected
     * @return {?}
     */
    function (objectSelected) {
        /** @type {?} */
        var isEmpty = Object.keys(objectSelected).length === 0;
        /** @type {?} */
        var fieldFormated = this.fieldFormat(objectSelected);
        this.oldValue = isEmpty ? '' : fieldFormated;
        this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
    };
    PoLookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-lookup',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <input #inp\n      class=\"po-input po-input-icon-right\"\n      type=\"text\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (blur)=\"searchEvent()\">\n\n    <div class=\"po-field-icon-container-right\">\n      <span tabindex=\"1\" #iconLookup (click)=\"openLookup()\" (focus)=\"inp.focus()\" class=\"po-icon po-field-icon po-icon-search\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [class.po-field-icon]=\"!disabled\">\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        PoLookupFilterService,
                        PoLookupModalService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoLookupComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoLookupComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoLookupComponent.ctorParameters = function () { return [
        { type: PoLookupFilterService },
        { type: PoLookupModalService }
    ]; };
    PoLookupComponent.propDecorators = {
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }]
    };
    return PoLookupComponent;
}(PoLookupBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoLookupComponent.prototype.modalSubscription;
    /** @type {?} */
    PoLookupComponent.prototype.inputEl;
    /**
     * @type {?}
     * @private
     */
    PoLookupComponent.prototype.poLookupModalService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de pesquisa que será criado dentro do dropdown do `po-multiselect`.
 */
var PoMultiselectSearchComponent = /** @class */ (function () {
    function PoMultiselectSearchComponent() {
        /**
         * Evento que será disparado a cada tecla digitada no campo de busca.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoMultiselectSearchComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder || this.literals.placeholderSearch;
        },
        /**
         * @optional
         *
         * @description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * @default `Buscar`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         * @param {?} placeholder
         * @return {?}
         */
        function (placeholder) {
            this._placeholder = placeholder && isTypeof(placeholder, 'string') ? placeholder : this.literals.placeholderSearch;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    PoMultiselectSearchComponent.prototype.onChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.change.emit({ event: event, value: this.inputElement.nativeElement.value });
    };
    /**
     * @return {?}
     */
    PoMultiselectSearchComponent.prototype.setFocus = /**
     * @return {?}
     */
    function () {
        this.inputElement.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    PoMultiselectSearchComponent.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.inputElement.nativeElement.value = '';
    };
    PoMultiselectSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-multiselect-search',
                    template: "<div class=\"po-field-container-content po-multiselect-container-search\">\n\n  <div class=\"po-field-icon-container-left\">\n    <span class=\"po-icon po-icon-search po-field-icon\"></span>\n  </div>\n\n  <input #inputElement\n    class=\"po-input po-input-icon-left\"\n    type=\"text\"\n    [placeholder]=\"placeholder\"\n    (keyup)=\"onChange($event)\">\n\n</div>\n"
                }] }
    ];
    PoMultiselectSearchComponent.propDecorators = {
        literals: [{ type: Input, args: ['p-literals',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        change: [{ type: Output, args: ['p-change',] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef, static: true },] }]
    };
    return PoMultiselectSearchComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMultiselectSearchComponent.prototype._placeholder;
    /**
     * Propriedade que recebe as literais definidas no `po-multiselect`.
     * @type {?}
     */
    PoMultiselectSearchComponent.prototype.literals;
    /**
     * Evento que será disparado a cada tecla digitada no campo de busca.
     * @type {?}
     */
    PoMultiselectSearchComponent.prototype.change;
    /** @type {?} */
    PoMultiselectSearchComponent.prototype.inputElement;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
var PoMultiselectDropdownComponent = /** @class */ (function () {
    function PoMultiselectDropdownComponent() {
        this.scrollTop = 0;
        this.show = false;
        this.haveOptions = false;
        /**
         * Propriedade que indica se o campo de pesquisa deverá ser escondido.
         */
        this.hideSearch = false;
        /**
         * Propriedade que recebe a lista de opções selecionadas.
         */
        this.selectedValues = [];
        /**
         * Propriedade que recebe a lista de opções que deverão ser criadas no dropdown.
         */
        this.options = [];
        /**
         * Evento disparado a cada tecla digitada na pesquisa.
         */
        this.changeSearch = new EventEmitter();
        /**
         * Evento disparado a cada alteração na lista das opções selecionadas.
         */
        this.change = new EventEmitter();
        /**
         * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
         * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
         * para notificar o componente principal que deve fechar o dropdown.
         */
        this.closeDropdown = new EventEmitter();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    PoMultiselectDropdownComponent.prototype.scrollTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    PoMultiselectDropdownComponent.prototype.isSelectedItem = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        return this.selectedValues.some((/**
         * @param {?} selectedItem
         * @return {?}
         */
        function (selectedItem) { return selectedItem === option.value; }));
    };
    /**
     * @param {?} check
     * @param {?} option
     * @return {?}
     */
    PoMultiselectDropdownComponent.prototype.clickItem = /**
     * @param {?} check
     * @param {?} option
     * @return {?}
     */
    function (check, option) {
        this.updateSelectedValues(check, option);
        if (!this.hideSearch) {
            this.searchElement.setFocus();
        }
    };
    /**
     * @param {?} checked
     * @param {?} option
     * @return {?}
     */
    PoMultiselectDropdownComponent.prototype.updateSelectedValues = /**
     * @param {?} checked
     * @param {?} option
     * @return {?}
     */
    function (checked, option) {
        if (checked) {
            this.selectedValues.push(option.value);
        }
        else {
            /** @type {?} */
            var indexSelectedValues = this.selectedValues.indexOf(option.value);
            this.selectedValues.splice(indexSelectedValues, 1);
        }
        this.change.emit(this.selectedValues);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoMultiselectDropdownComponent.prototype.callChangeSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.changeSearch.emit(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoMultiselectDropdownComponent.prototype.onKeydown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === 9) {
            this.closeDropdown.emit();
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    PoMultiselectDropdownComponent.prototype.controlVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        var _this = this;
        this.show = toOpen;
        this.checkInitialOptions();
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (toOpen && _this.searchElement && !_this.hideSearch) {
                _this.searchElement.setFocus();
                _this.searchElement.clean();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoMultiselectDropdownComponent.prototype.checkInitialOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.options.length) {
            this.haveOptions = true;
        }
    };
    PoMultiselectDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-multiselect-dropdown',
                    template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\n\n  <po-multiselect-search #searchElement\n    *ngIf=\"!hideSearch && haveOptions\"\n    [p-literals]=\"literals\"\n    [p-placeholder]=\"placeholderSearch\"\n    (p-change)=\"callChangeSearch($event)\">\n  </po-multiselect-search>\n\n  <ul class=\"po-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\n    <div *ngIf=\"!options.length\" class=\"po-multiselect-container-no-data po-text-center\">\n      <span> {{ literals.noData }}</span>\n    </div>\n\n    <po-multiselect-item *ngFor=\"let option of options\"\n      [p-label]=\"option.label\"\n      [p-selected]=\"isSelectedItem(option)\"\n      (p-change)=\"clickItem($event, option)\">\n    </po-multiselect-item>\n  </ul>\n</div>\n"
                }] }
    ];
    PoMultiselectDropdownComponent.propDecorators = {
        hideSearch: [{ type: Input, args: ['p-hide-search',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        placeholderSearch: [{ type: Input, args: ['p-placeholder-search',] }],
        selectedValues: [{ type: Input, args: ['p-selected-values',] }],
        options: [{ type: Input, args: ['p-options',] }],
        changeSearch: [{ type: Output, args: ['p-change-search',] }],
        change: [{ type: Output, args: ['p-change',] }],
        closeDropdown: [{ type: Output, args: ['p-close-dropdown',] }],
        container: [{ type: ViewChild, args: ['container', { read: ElementRef, static: true },] }],
        ulElement: [{ type: ViewChild, args: ['ulElement', { read: ElementRef, static: true },] }],
        searchElement: [{ type: ViewChild, args: ['searchElement', { static: false },] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return PoMultiselectDropdownComponent;
}());
if (false) {
    /** @type {?} */
    PoMultiselectDropdownComponent.prototype.scrollTop;
    /** @type {?} */
    PoMultiselectDropdownComponent.prototype.show;
    /** @type {?} */
    PoMultiselectDropdownComponent.prototype.haveOptions;
    /**
     * Propriedade que indica se o campo de pesquisa deverá ser escondido.
     * @type {?}
     */
    PoMultiselectDropdownComponent.prototype.hideSearch;
    /**
     * Propriedade que que recebe as literais definidas no componente `po-multiselect`.
     * @type {?}
     */
    PoMultiselectDropdownComponent.prototype.literals;
    /**
     * Placeholder do campo de pesquisa.
     * @type {?}
     */
    PoMultiselectDropdownComponent.prototype.placeholderSearch;
    /**
     * Propriedade que recebe a lista de opções selecionadas.
     * @type {?}
     */
    PoMultiselectDropdownComponent.prototype.selectedValues;
    /**
     * Propriedade que recebe a lista de opções que deverão ser criadas no dropdown.
     * @type {?}
     */
    PoMultiselectDropdownComponent.prototype.options;
    /**
     * Evento disparado a cada tecla digitada na pesquisa.
     * @type {?}
     */
    PoMultiselectDropdownComponent.prototype.changeSearch;
    /**
     * Evento disparado a cada alteração na lista das opções selecionadas.
     * @type {?}
     */
    PoMultiselectDropdownComponent.prototype.change;
    /**
     * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
     * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
     * para notificar o componente principal que deve fechar o dropdown.
     * @type {?}
     */
    PoMultiselectDropdownComponent.prototype.closeDropdown;
    /** @type {?} */
    PoMultiselectDropdownComponent.prototype.container;
    /** @type {?} */
    PoMultiselectDropdownComponent.prototype.ulElement;
    /** @type {?} */
    PoMultiselectDropdownComponent.prototype.searchElement;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var PoMultiselectFilterMode = {
    /** Verifica se o texto *inicia* com o valor pesquisado. */
    startsWith: 0,
    /** Verifica se o texto *contém* o valor pesquisado. */
    contains: 1,
    /** Verifica se o texto *finaliza* com o valor pesquisado. */
    endsWith: 2,
};
PoMultiselectFilterMode[PoMultiselectFilterMode.startsWith] = 'startsWith';
PoMultiselectFilterMode[PoMultiselectFilterMode.contains] = 'contains';
PoMultiselectFilterMode[PoMultiselectFilterMode.endsWith] = 'endsWith';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poMultiselectLiteralsDefault = {
    en: (/** @type {?} */ ({
        noData: 'No data found',
        placeholderSearch: 'Search'
    })),
    es: (/** @type {?} */ ({
        noData: 'Datos no encontrados',
        placeholderSearch: 'Busca'
    })),
    pt: (/** @type {?} */ ({
        noData: 'Nenhum dado encontrado',
        placeholderSearch: 'Buscar'
    })),
    ru: (/** @type {?} */ ({
        noData: 'Данные не найдены',
        placeholderSearch: 'искать'
    }))
};
/**
 * \@description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 * @abstract
 */
var PoMultiselectBaseComponent = /** @class */ (function () {
    function PoMultiselectBaseComponent() {
        this._autofocus = false;
        this._disabled = false;
        this._filterMode = PoMultiselectFilterMode.startsWith;
        this._hideSearch = false;
        this._required = false;
        this._sort = false;
        this.readyToValidation = false;
        this.selectedOptions = [];
        this.visibleOptionsDropdown = [];
        this.visibleDisclaimers = [];
        /**
         * Mensagem apresentada enquanto o campo estiver vazio.
         */
        this.placeholder = '';
        /**
         * \@description
         *
         * Placeholder do campo de pesquisa.
         *
         * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
         *
         * \@default `Buscar`
         */
        this.placeholderSearch = '';
        /**
         * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poMultiselectLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-multiselect
         *   [p-literals]="customLiterals">
         * </po-po-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-multiselect`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Nenhum dado encontrado',
         *    placeholderSearch: 'Buscar'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoMultiselectLiterals = {
         *    noData: 'Sem dados'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-multiselect
         *   [p-literals]="customLiterals">
         * </po-po-multiselect>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poMultiselectLiteralsDefault[poLocaleDefault], poMultiselectLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poMultiselectLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = (/** @type {?} */ (required)) === '' ? true : convertToBoolean(required);
            this.updateModelToValidate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = (/** @type {?} */ (disabled)) === '' ? true : convertToBoolean(disabled);
            this.updateModelToValidate();
            this.updateVisibleItems();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "hideSearch", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSearch;
        },
        /**
         * @optional
         *
         * @description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
         *
         * \@default `false`
         * @param {?} hideSearch
         * @return {?}
         */
        function (hideSearch) {
            this._hideSearch = (/** @type {?} */ (hideSearch)) === '' ? true : convertToBoolean(hideSearch);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * @description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         */
        set: /**
         * \@description
         *
         * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
         * Esta lista deve conter os valores e os labels que serão apresentados na tela.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = options;
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "sort", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sort;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
         * dropdown.
         *
         * \@default `false`
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            this._sort = (/** @type {?} */ (sort)) === '' ? true : convertToBoolean(sort);
            this.validAndSortOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "autofocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autofocus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * \@default `false`
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._autofocus = convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMultiselectBaseComponent.prototype, "filterMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filterMode;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: PoMultiselectFilterMode
         *
         * @default `startsWith`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
         * Valores definidos no enum: PoMultiselectFilterMode
         *
         * \@default `startsWith`
         * @param {?} filterMode
         * @return {?}
         */
        function (filterMode) {
            this._filterMode = (filterMode in PoMultiselectFilterMode) ? filterMode : PoMultiselectFilterMode.startsWith;
            switch (this._filterMode.toString()) {
                case 'startsWith':
                    this._filterMode = PoMultiselectFilterMode.startsWith;
                    break;
                case 'contains':
                    this._filterMode = PoMultiselectFilterMode.contains;
                    break;
                case 'endsWith':
                    this._filterMode = PoMultiselectFilterMode.endsWith;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.updateList(this.options);
    };
    /**
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        // Seta esta variável para indicar que a tela já foi carregada e podem ser aplicadas as validações.
        // A partir desse momento, toda vez que uma propriedade que interfere na validação, for alterada, o model será atualizado
        // para que o campo seja validado novamente.
        this.readyToValidation = true;
    };
    /**
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.validAndSortOptions = /**
     * @return {?}
     */
    function () {
        if (this.options && this.options.length) {
            removeUndefinedAndNullOptions(this.options);
            removeDuplicatedOptions(this.options);
            this.setUndefinedLabels(this.options);
            if (this.sort) {
                sortOptionsByProperty(this.options, 'label');
            }
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.setUndefinedLabels = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            if (!option['label']) {
                option.label = option.value;
            }
        }));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateList = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (options) {
            this.visibleOptionsDropdown = options;
        }
    };
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateModelToValidate = 
    // Emite a atualização do model caso esta propriedade seja alterada dinamicamente.
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.readyToValidation) {
            // Este timeout é necessário para quando for atualizado o model e uma propriedade do Datepicker ao mesmo tempo.
            // Caso contrário, o writeValue não é disparado, não atualizando o model do componente.
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.callOnChange(_this.selectedOptions);
            }));
        }
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.callOnChange = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        if (this.onModelChange) {
            this.onModelChange(this.getValuesFromOptions(selectedOptions));
            this.eventChange(selectedOptions);
        }
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.eventChange = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        if (selectedOptions && this.lastLengthModel !== selectedOptions.length) {
            this.change.emit(selectedOptions);
        }
        this.lastLengthModel = selectedOptions ? selectedOptions.length : null;
    };
    /**
     * @param {?} selectedOptions
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.getValuesFromOptions = /**
     * @param {?} selectedOptions
     * @return {?}
     */
    function (selectedOptions) {
        return selectedOptions && selectedOptions.length ? selectedOptions.map((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.value; })) : [];
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.getLabelByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var index = this.options.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.value === value; }));
        return this.options[index].label;
    };
    /**
     * @param {?} selectedValues
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.changeItems = /**
     * @param {?} selectedValues
     * @return {?}
     */
    function (selectedValues) {
        this.updateSelectedOptions(selectedValues);
        this.callOnChange(this.selectedOptions);
    };
    /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.searchByLabel = /**
     * @param {?} search
     * @param {?} options
     * @param {?} filterMode
     * @return {?}
     */
    function (search, options, filterMode) {
        var _this = this;
        if (search && options && options.length) {
            /** @type {?} */
            var newOptions_1 = [];
            options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (option.label && _this.compareMethod(search, option, filterMode)) {
                    newOptions_1.push(option);
                }
            }));
            this.visibleOptionsDropdown = newOptions_1;
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.compareMethod = /**
     * @param {?} search
     * @param {?} option
     * @param {?} filterMode
     * @return {?}
     */
    function (search, option, filterMode) {
        switch (filterMode) {
            case PoMultiselectFilterMode.startsWith:
                return this.startsWith(search, option);
            case PoMultiselectFilterMode.contains:
                return this.contains(search, option);
            case PoMultiselectFilterMode.endsWith:
                return this.endsWith(search, option);
        }
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.startsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().startsWith(search.toLowerCase());
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.contains = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().indexOf(search.toLowerCase()) > -1;
    };
    /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.endsWith = /**
     * @param {?} search
     * @param {?} option
     * @return {?}
     */
    function (search, option) {
        return option.label.toLowerCase().endsWith(search.toLowerCase());
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        return null;
    };
    /**
     * @param {?} values
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateSelectedOptions = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        this.selectedOptions = [];
        values.forEach((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (option.value === value) {
                    _this.selectedOptions.push(option);
                }
            }));
        }));
        this.updateVisibleItems();
    };
    /**
     * @param {?} values
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.writeValue = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        if (!values) {
            values = [];
            this.callOnChange([]);
        }
        // Validar se todos os items existem entre os options, senão atualizar o model
        this.updateSelectedOptions(values);
        if (this.selectedOptions.length < values.length) {
            this.callOnChange(this.selectedOptions);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    PoMultiselectBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        placeholderSearch: [{ type: Input, args: ['p-placeholder-search',] }],
        name: [{ type: Input, args: ['name',] }],
        required: [{ type: Input, args: ['p-required',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        hideSearch: [{ type: Input, args: ['p-hide-search',] }],
        options: [{ type: Input, args: ['p-options',] }],
        sort: [{ type: Input, args: ['p-sort',] }],
        autofocus: [{ type: Input, args: ['p-focus',] }],
        filterMode: [{ type: Input, args: ['p-filter-mode',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoMultiselectBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._autofocus;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._filterMode;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._hideSearch;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype._sort;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.lastLengthModel;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.onModelChange;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectBaseComponent.prototype.readyToValidation;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.selectedOptions;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.visibleOptionsDropdown;
    /** @type {?} */
    PoMultiselectBaseComponent.prototype.visibleDisclaimers;
    /**
     * Label no componente.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.optional;
    /**
     * Mensagem apresentada enquanto o campo estiver vazio.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.placeholder;
    /**
     * \@description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * \@default `Buscar`
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.placeholderSearch;
    /**
     * Nome do componente.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.name;
    /**
     * Pode ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    PoMultiselectBaseComponent.prototype.change;
    /**
     * @type {?}
     * @protected
     */
    PoMultiselectBaseComponent.prototype.clickOutListener;
    /**
     * @type {?}
     * @protected
     */
    PoMultiselectBaseComponent.prototype.resizeListener;
    /**
     * @abstract
     * @return {?}
     */
    PoMultiselectBaseComponent.prototype.updateVisibleItems = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poMultiselectContainerOffset = 8;
/** @type {?} */
var poMultiselectContainerPositionDefault = 'bottom';
/**
 * \@docsExtends PoMultiselectBaseComponent
 *
 * \@example
 *
 * <example name="po-multiselect-basic" title="Portinari Multiselect Basic">
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.html"> </file>
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-labs" title="Portinari Multiselect Labs">
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.html"> </file>
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation" title="Portinari Multiselect - Vacation">
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation-reactive-form" title="Portinari Multiselect - Vacation Reactive Form">
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.ts"> </file>
 * </example>
 */
var PoMultiselectComponent = /** @class */ (function (_super) {
    __extends(PoMultiselectComponent, _super);
    function PoMultiselectComponent(renderer, changeDetector, controlPosition, el) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.changeDetector = changeDetector;
        _this.controlPosition = controlPosition;
        _this.el = el;
        _this.disclaimerOffset = 0;
        _this.dropdownIcon = 'po-icon-arrow-down';
        _this.dropdownOpen = false;
        _this.initialized = false;
        _this.visibleElement = false;
        _this.isCalculateVisibleItems = true;
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            _this.adjustContainerPosition();
        });
        return _this;
    }
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.autofocus) {
            this.inputElement.nativeElement.focus();
        }
        this.initialized = true;
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var inputWidth = this.inputElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
            return;
        }
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoMultiselectComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
     *
     * focusMultiselect() {
     *   this.multiselect.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoMultiselectComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
     *
     * focusMultiselect() {
     *   this.multiselect.focus();
     * }
     * ```
     * @return {?}
     */
    PoMultiselectComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoMultiselectComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
     *
     * focusMultiselect() {
     *   this.multiselect.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.inputElement.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.getInputWidth = /**
     * @return {?}
     */
    function () {
        return this.el.nativeElement.querySelector('.po-input').offsetWidth - 40;
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.getDisclaimersWidth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var disclaimers = this.el.nativeElement.querySelectorAll('po-disclaimer');
        return Array.from(disclaimers).map((/**
         * @param {?} disclaimer
         * @return {?}
         */
        function (disclaimer) { return disclaimer['offsetWidth']; }));
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.calculateVisibleItems = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var disclaimersWidth = this.getDisclaimersWidth();
        /** @type {?} */
        var inputWidth = this.getInputWidth();
        /** @type {?} */
        var extraDisclaimerSize = 38;
        /** @type {?} */
        var disclaimersVisible = disclaimersWidth[0];
        this.visibleDisclaimers = [];
        if (inputWidth > 0) {
            /** @type {?} */
            var sum = 0;
            /** @type {?} */
            var i = 0;
            for (i = 0; i < this.selectedOptions.length; i++) {
                sum += disclaimersWidth[i];
                this.visibleDisclaimers.push(this.selectedOptions[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !this.selectedOptions.length) {
                if (i === this.selectedOptions.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    this.visibleDisclaimers.splice(-2, 2);
                    /** @type {?} */
                    var label = '+' + (this.selectedOptions.length + 1 - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
                else {
                    this.visibleDisclaimers.splice(-1, 1);
                    /** @type {?} */
                    var label = '+' + (this.selectedOptions.length - i).toString();
                    this.visibleDisclaimers.push({ value: '', label: label });
                }
            }
        }
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.updateVisibleItems = /**
     * @return {?}
     */
    function () {
        this.visibleDisclaimers = [].concat(this.selectedOptions);
        this.debounceResize();
        // quando estiver dentro de modal
        if (!this.inputElement.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.debounceResize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.calculateVisibleItems();
        }), 200);
    };
    /**
     * @param {?=} event
     * @return {?}
     */
    PoMultiselectComponent.prototype.onKeyDown = /**
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === PoKeyCodeEnum.arrowUp || event.keyCode === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            this.controlDropdownVisibility(true);
            return;
        }
        if (event.keyCode === PoKeyCodeEnum.tab) {
            this.controlDropdownVisibility(false);
            return;
        }
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.toggleDropdownVisibility = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        this.controlDropdownVisibility(!this.dropdownOpen);
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    PoMultiselectComponent.prototype.openDropdown = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        if (toOpen && !this.disabled) {
            this.controlDropdownVisibility(true);
        }
    };
    /**
     * @param {?} toOpen
     * @return {?}
     */
    PoMultiselectComponent.prototype.controlDropdownVisibility = /**
     * @param {?} toOpen
     * @return {?}
     */
    function (toOpen) {
        toOpen ? this.open() : this.close();
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.scrollToSelectedOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedOptions && this.selectedOptions.length) {
            /** @type {?} */
            var index = this.options.findIndex((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value === _this.selectedOptions[0].value; }));
            this.dropdown.scrollTo(index);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PoMultiselectComponent.prototype.setVisibleOptionsDropdown = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.visibleOptionsDropdown = options;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoMultiselectComponent.prototype.changeSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        (event && event.value) ? this.searchByLabel(event.value, this.options, this.filterMode) : this.setVisibleOptionsDropdown(this.options);
        // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.adjustContainerPosition(); }));
    };
    /**
     * @return {?}
     */
    PoMultiselectComponent.prototype.getPlaceholder = /**
     * @return {?}
     */
    function () {
        return (this.placeholder && !this.visibleDisclaimers.length) ? this.placeholder : '';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoMultiselectComponent.prototype.closeDisclaimer = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var index = this.selectedOptions.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.value === value; }));
        this.selectedOptions.splice(index, 1);
        this.updateVisibleItems();
        this.callOnChange(this.selectedOptions);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoMultiselectComponent.prototype.wasClickedOnToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.dropdownElement.nativeElement.contains(event.target) &&
            !this.disclaimerContainerElement.nativeElement.contains(event.target) &&
            this.dropdownOpen) {
            this.controlDropdownVisibility(false);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoMultiselectComponent.prototype.adjustContainerPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.adjustPosition(poMultiselectContainerPositionDefault);
    };
    /**
     * @private
     * @return {?}
     */
    PoMultiselectComponent.prototype.close = /**
     * @private
     * @return {?}
     */
    function () {
        this.dropdownIcon = 'po-icon-arrow-down';
        this.dropdownOpen = false;
        this.dropdown.controlVisibility(false);
        this.setVisibleOptionsDropdown(this.options);
        this.removeListeners();
    };
    /**
     * @private
     * @return {?}
     */
    PoMultiselectComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickOutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnToggle(event);
        }));
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.updateVisibleItems();
            isMobile() ? _this.adjustContainerPosition() : _this.close();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoMultiselectComponent.prototype.open = /**
     * @private
     * @return {?}
     */
    function () {
        this.dropdownIcon = 'po-icon-arrow-up';
        this.dropdownOpen = true;
        this.dropdown.controlVisibility(true);
        this.setVisibleOptionsDropdown(this.options);
        this.initializeListeners();
        this.scrollToSelectedOptions();
        this.changeDetector.detectChanges();
        this.setPositionDropdown();
    };
    /**
     * @private
     * @return {?}
     */
    PoMultiselectComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickOutListener) {
            this.clickOutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoMultiselectComponent.prototype.setPositionDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.setElements(this.dropdown.container.nativeElement, poMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    };
    PoMultiselectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-multiselect',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\"\n    [class.po-multiselect-show]=\"dropdownOpen\">\n\n    <input #inputElement\n      class=\"po-input po-input-icon-right po-clickable\"\n      readonly\n      type=\"text\"\n      [value]=\"getPlaceholder()\"\n      [disabled]=\"disabled\"\n      (keydown)=\"onKeyDown($event)\"\n      (click)=\"toggleDropdownVisibility()\">\n\n    <div class=\"po-field-icon-container-right\">\n      <span #iconElement\n        class=\"po-icon po-field-icon {{ dropdownIcon }}\"\n        [ngClass]=\"disabled ? 'po-field-icon-disabled' : ''\"\n        (click)=\"toggleDropdownVisibility()\">\n      </span>\n    </div>\n\n    <div #disclaimerContainer\n      class=\"po-multiselect-field\"\n      [class.po-multiselect-field-disabled]=\"disabled\">\n\n      <po-disclaimer *ngFor=\"let disclaimer of visibleDisclaimers\"\n        [p-label]=\"disclaimer.label\"\n        [p-value]=\"disclaimer.value\"\n        [p-hide-close]=\"disclaimer.value === '' || disabled\"\n        [class.po-clickable]=\"disclaimer.value === '' && !disabled\"\n        (click)=\"openDropdown(disclaimer.value === '')\"\n        (p-close-action)=\"closeDisclaimer(disclaimer.value)\">\n      </po-disclaimer>\n    </div>\n  </div>\n\n  <po-multiselect-dropdown #dropdownElement\n    [p-hide-search]=\"hideSearch\"\n    [p-literals]=\"literals\"\n    [p-options]=\"visibleOptionsDropdown\"\n    [p-selected-values]=\"getValuesFromOptions(selectedOptions)\"\n    [p-placeholder-search]=\"placeholderSearch\"\n    (p-change)=\"changeItems($event)\"\n    (p-change-search)=\"changeSearch($event)\"\n    (p-close-dropdown)=\"controlDropdownVisibility(false)\">\n  </po-multiselect-dropdown>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        PoControlPositionService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoMultiselectComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoMultiselectComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoMultiselectComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: PoControlPositionService },
        { type: ElementRef }
    ]; };
    PoMultiselectComponent.propDecorators = {
        dropdownElement: [{ type: ViewChild, args: ['dropdownElement', { read: ElementRef, static: true },] }],
        dropdown: [{ type: ViewChild, args: ['dropdownElement', { static: true },] }],
        disclaimerContainerElement: [{ type: ViewChild, args: ['disclaimerContainer', { read: ElementRef, static: true },] }],
        iconElement: [{ type: ViewChild, args: ['iconElement', { read: ElementRef, static: true },] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { read: ElementRef, static: true },] }]
    };
    return PoMultiselectComponent;
}(PoMultiselectBaseComponent));
if (false) {
    /** @type {?} */
    PoMultiselectComponent.prototype.dropdownElement;
    /** @type {?} */
    PoMultiselectComponent.prototype.dropdown;
    /** @type {?} */
    PoMultiselectComponent.prototype.disclaimerContainerElement;
    /** @type {?} */
    PoMultiselectComponent.prototype.iconElement;
    /** @type {?} */
    PoMultiselectComponent.prototype.inputElement;
    /** @type {?} */
    PoMultiselectComponent.prototype.disclaimerOffset;
    /** @type {?} */
    PoMultiselectComponent.prototype.dropdownIcon;
    /** @type {?} */
    PoMultiselectComponent.prototype.dropdownOpen;
    /** @type {?} */
    PoMultiselectComponent.prototype.initialized;
    /** @type {?} */
    PoMultiselectComponent.prototype.positionDisclaimerExtra;
    /** @type {?} */
    PoMultiselectComponent.prototype.timeoutResize;
    /** @type {?} */
    PoMultiselectComponent.prototype.visibleElement;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectComponent.prototype.isCalculateVisibleItems;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectComponent.prototype.onScroll;
    /** @type {?} */
    PoMultiselectComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectComponent.prototype.controlPosition;
    /**
     * @type {?}
     * @private
     */
    PoMultiselectComponent.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que constrói cada item no dropdown, contendo o checkbox e o label.
 */
var PoMultiselectItemComponent = /** @class */ (function () {
    function PoMultiselectItemComponent() {
        /**
         * Esta propriedade indica se o campo está selecionado ou não.
         */
        this.selected = false;
        /**
         * Evento que será disparado toda vez que o usuário marcar ou desmarcar um item.
         */
        this.change = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PoMultiselectItemComponent.prototype.itemClicked = /**
     * @return {?}
     */
    function () {
        this.selected = !this.selected;
        this.change.emit(this.selected);
    };
    PoMultiselectItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-multiselect-item',
                    template: "<li [class.po-multiselect-item-selected]=\"selected\" (click)=\"itemClicked()\">\n\n  <a class=\"po-multiselect-item\">\n    <input\n      [checked]=\"selected\"\n      class=\"po-multiselect-checkbox-input\"\n      [class.po-multiselect-checkbox-input-checked]=\"selected\"\n      type=\"checkbox\">\n\n    <label class=\"po-multiselect-checkbox-label po-clickable\">\n      {{ label }}\n    </label>\n  </a>\n</li>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    PoMultiselectItemComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        selected: [{ type: Input, args: ['p-selected',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoMultiselectItemComponent;
}());
if (false) {
    /**
     * Rótulo do item.
     * @type {?}
     */
    PoMultiselectItemComponent.prototype.label;
    /**
     * Esta propriedade indica se o campo está selecionado ou não.
     * @type {?}
     */
    PoMultiselectItemComponent.prototype.selected;
    /**
     * Evento que será disparado toda vez que o usuário marcar ou desmarcar um item.
     * @type {?}
     */
    PoMultiselectItemComponent.prototype.change;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poRichTextBodyCommands = [
    'bold', 'italic', 'underline', 'justifyleft', 'justifycenter', 'justifyright', 'justifyfull', 'insertUnorderedList', 'Createlink'
];
var PoRichTextBodyComponent = /** @class */ (function () {
    function PoRichTextBodyComponent() {
        this.change = new EventEmitter();
        this.commands = new EventEmitter();
        this.shortcutCommand = new EventEmitter();
        this.value = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.bodyElement.nativeElement.designMode = 'on';
        // timeout necessário para setar o valor vindo do writeValue do componente principal.
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.updateValueWithModelValue(); }));
    };
    /**
     * @param {?} command
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.executeCommand = /**
     * @param {?} command
     * @return {?}
     */
    function (command) {
        this.bodyElement.nativeElement.focus();
        if (typeof (command) === 'object') {
            if (command.command === 'InsertHTML') {
                var linkCommand = command.command, urlLink = command.value.urlLink, urlLinkText = command.value.urlLinkText;
                this.handleCommandLink(linkCommand, urlLink, urlLinkText);
            }
            else {
                document.execCommand(command.command, false, command.value);
            }
        }
        else {
            document.execCommand(command, false, null);
        }
        this.updateModel();
        this.value.emit(this.modelValue);
    };
    /**
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.modelValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.change.emit(_this.modelValue);
            }), 200);
        }
    };
    /**
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.bodyElement.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.emitSelectionCommands();
    };
    /**
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        this.valueBeforeChange = this.modelValue;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyL = event.keyCode === PoKeyCodeEnum.keyL;
        if (keyL && event.ctrlKey || keyL && event.metaKey) {
            event.preventDefault();
            this.shortcutCommand.emit();
        }
    };
    /**
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.onKeyUp = /**
     * @return {?}
     */
    function () {
        // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
        /** @type {?} */
        var bodyElement = this.bodyElement.nativeElement;
        if (!bodyElement.innerText.trim() && bodyElement.childNodes.length === 1 && bodyElement.querySelector('br')) {
            bodyElement.querySelector('br').remove();
        }
        this.updateModel();
        this.emitSelectionCommands();
    };
    /**
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.updateModel(); }));
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.onKeyUp(); }));
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.cursorPositionedInALink = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var link = document.getSelection();
        return link.focusNode.parentElement.tagName === 'A';
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.emitSelectionCommands = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var commands = poRichTextBodyCommands.filter((/**
         * @param {?} command
         * @return {?}
         */
        function (command) { return document.queryCommandState(command); }));
        /** @type {?} */
        var rgbColor = document.queryCommandValue('ForeColor');
        /** @type {?} */
        var hexColor = this.rgbToHex(rgbColor);
        if (this.cursorPositionedInALink()) {
            commands.push('Createlink');
        }
        this.commands.emit({ commands: commands, hexColor: hexColor });
    };
    /**
     * @private
     * @param {?} linkCommand
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.handleCommandLink = /**
     * @private
     * @param {?} linkCommand
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    function (linkCommand, urlLink, urlLinkText) {
        if (isIE()) {
            this.insertHtmlLinkElement(urlLink, urlLinkText);
        }
        else {
            // necessário '&nbsp;' no fim pois o Firefox mantém o cursor dentro da tag;
            /** @type {?} */
            var linkValue = "<a class=\"po-rich-text-link\" href=\"" + urlLink + "\" target=\"_blank\">" + (urlLinkText || urlLink) + "</a>";
            document.execCommand(linkCommand, false, linkValue);
        }
    };
    // tratamento específico para IE pois não suporta o comando 'insertHTML'.
    // tratamento específico para IE pois não suporta o comando 'insertHTML'.
    /**
     * @private
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.insertHtmlLinkElement = 
    // tratamento específico para IE pois não suporta o comando 'insertHTML'.
    /**
     * @private
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    function (urlLink, urlLinkText) {
        /** @type {?} */
        var selection = document.getSelection();
        /** @type {?} */
        var selectionRange = selection.getRangeAt(0);
        /** @type {?} */
        var elementLink = document.createElement('a');
        /** @type {?} */
        var elementlinkText = document.createTextNode(urlLinkText);
        elementLink.appendChild(elementlinkText);
        elementLink.href = urlLink;
        elementLink.setAttribute('target', '_blank');
        elementLink.classList.add('po-rich-text-link');
        selectionRange.deleteContents();
        selectionRange.insertNode(elementLink);
    };
    /**
     * @private
     * @param {?} rgb
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.rgbToHex = /**
     * @private
     * @param {?} rgb
     * @return {?}
     */
    function (rgb) {
        // Tratamento necessário para converter o código rgb para hexadecimal.
        /** @type {?} */
        var sep = rgb.indexOf(',') > -1 ? ',' : ' ';
        rgb = rgb.substr(4).split(')')[0].split(sep);
        /** @type {?} */
        var r = (+rgb[0]).toString(16);
        /** @type {?} */
        var g = (+rgb[1]).toString(16);
        /** @type {?} */
        var b = (+rgb[2]).toString(16);
        if (r.length === 1) {
            r = '0' + r;
        }
        if (g.length === 1) {
            g = '0' + g;
        }
        if (b.length === 1) {
            b = '0' + b;
        }
        return '#' + r + g + b;
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.updateModel = /**
     * @private
     * @return {?}
     */
    function () {
        this.modelValue = this.bodyElement.nativeElement.innerHTML;
        this.value.emit(this.modelValue);
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextBodyComponent.prototype.updateValueWithModelValue = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.modelValue) {
            this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
        }
    };
    PoRichTextBodyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-rich-text-body',
                    template: "<div #bodyElement\n  class=\"po-rich-text-body\"\n  tabindex=\"0\"\n  [attr.contenteditable]=\"!readonly\"\n  [attr.data-placeholder]=\"placeholder\"\n  [style.height.px]=\"height\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (cut)=\"update()\"\n  (focus)=\"onFocus()\"\n  (keydown)=\"onKeyDown($event)\"\n  (keyup)=\"onKeyUp()\"\n  (paste)=\"update()\">\n</div>\n"
                }] }
    ];
    PoRichTextBodyComponent.propDecorators = {
        bodyElement: [{ type: ViewChild, args: ['bodyElement', { static: true },] }],
        height: [{ type: Input, args: ['p-height',] }],
        modelValue: [{ type: Input, args: ['p-model-value',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        readonly: [{ type: Input, args: ['p-readonly',] }],
        change: [{ type: Output, args: ['p-change',] }],
        commands: [{ type: Output, args: ['p-commands',] }],
        shortcutCommand: [{ type: Output, args: ['p-shortcut-command',] }],
        value: [{ type: Output, args: ['p-value',] }]
    };
    return PoRichTextBodyComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRichTextBodyComponent.prototype.timeoutChange;
    /**
     * @type {?}
     * @private
     */
    PoRichTextBodyComponent.prototype.valueBeforeChange;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.bodyElement;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.height;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.modelValue;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.placeholder;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.readonly;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.change;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.commands;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.shortcutCommand;
    /** @type {?} */
    PoRichTextBodyComponent.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
 *
 * > No navegador Internet Explorer não é possível alterar a cor do texto.
 * @abstract
 */
var PoRichTextBaseComponent = /** @class */ (function () {
    function PoRichTextBaseComponent() {
        this.invalid = false;
        this.onChangeModel = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * \@description
         *
         * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
         */
        this.errorMessage = '';
        /**
         * Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado.
         */
        this.change = new EventEmitter();
        /**
         * Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado.
         */
        this.changeModel = new EventEmitter();
    }
    Object.defineProperty(PoRichTextBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura da área de edição de texto.
         *
         * > Altura mínima do componente é `94` e a altura máxima é `262`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura da área de edição de texto.
         *
         * > Altura mínima do componente é `94` e a altura máxima é `262`.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextBaseComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         *
         * @default ''
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         *
         * \@default ''
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._placeholder = value || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextBaseComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será somente leitura.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._required = convertToBoolean(value);
            this.validateModel(this.value);
        },
        enumerable: true,
        configurable: true
    });
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoRichTextBaseComponent.prototype.registerOnChange = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoRichTextBaseComponent.prototype.registerOnTouched = 
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoRichTextBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoRichTextBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, false, abstractControl.value)) {
            return { required: {
                    valid: false,
                } };
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoRichTextBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    // Executa a função onChange
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoRichTextBaseComponent.prototype.updateModel = 
    // Executa a função onChange
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o rich-text não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
    };
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoRichTextBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.validatorChange) {
            this.validatorChange(value);
        }
    };
    PoRichTextBaseComponent.propDecorators = {
        errorMessage: [{ type: Input, args: ['p-error-message',] }],
        height: [{ type: Input, args: ['p-height',] }],
        help: [{ type: Input, args: ['p-help',] }],
        label: [{ type: Input, args: ['p-label',] }],
        name: [{ type: Input, args: ['name',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        readonly: [{ type: Input, args: ['p-readonly',] }],
        required: [{ type: Input, args: ['p-required',] }],
        change: [{ type: Output, args: ['p-change',] }],
        changeModel: [{ type: Output, args: ['p-change-model',] }]
    };
    return PoRichTextBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRichTextBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoRichTextBaseComponent.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    PoRichTextBaseComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    PoRichTextBaseComponent.prototype._required;
    /** @type {?} */
    PoRichTextBaseComponent.prototype.invalid;
    /** @type {?} */
    PoRichTextBaseComponent.prototype.onChangeModel;
    /** @type {?} */
    PoRichTextBaseComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    PoRichTextBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    PoRichTextBaseComponent.prototype.validatorChange;
    /**
     * \@description
     *
     * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
     * @type {?}
     */
    PoRichTextBaseComponent.prototype.errorMessage;
    /**
     * \@optional
     *
     * \@description
     *
     * Texto de apoio do campo.
     * @type {?}
     */
    PoRichTextBaseComponent.prototype.help;
    /**
     * \@optional
     *
     * \@description
     *
     * Rótulo do campo.
     * @type {?}
     */
    PoRichTextBaseComponent.prototype.label;
    /**
     * Nome e identificador do campo.
     * @type {?}
     */
    PoRichTextBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoRichTextBaseComponent.prototype.optional;
    /**
     * Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado.
     * @type {?}
     */
    PoRichTextBaseComponent.prototype.change;
    /**
     * Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado.
     * @type {?}
     */
    PoRichTextBaseComponent.prototype.changeModel;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoRichTextBaseComponent
 *
 * \@example
 *
 * <example name="po-rich-text-basic" title="Portinari Rich Text Basic">
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.html"> </file>
 *   <file name="sample-po-rich-text-basic/sample-po-rich-text-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-labs" title="Portinari Rich Text Labs">
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.html"> </file>
 *   <file name="sample-po-rich-text-labs/sample-po-rich-text-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-rich-text-recipe" title="Portinari Rich Text Recipe">
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe-image-base-64.ts"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.html"> </file>
 *   <file name="sample-po-rich-text-recipe/sample-po-rich-text-recipe.component.ts"> </file>
 * </example>
 */
var PoRichTextComponent = /** @class */ (function (_super) {
    __extends(PoRichTextComponent, _super);
    function PoRichTextComponent(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.listener = _this.validateClassesForRequired.bind(_this);
        return _this;
    }
    Object.defineProperty(PoRichTextComponent.prototype, "errorMsg", {
        get: /**
         * @return {?}
         */
        function () {
            return (this.errorMessage !== '' && !this.value && this.required && this.invalid) ? this.errorMessage : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoRichTextComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        if (!this.onChangeModel) {
            this.element.nativeElement.addEventListener('keyup', this.listener);
            this.element.nativeElement.addEventListener('keydown', this.listener);
            this.element.nativeElement.addEventListener('cut', this.listener);
            this.element.nativeElement.addEventListener('paste', this.listener);
        }
    };
    /**
     * @return {?}
     */
    PoRichTextComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!this.onChangeModel) {
            this.element.nativeElement.removeEventListener('keyup', this.listener);
            this.element.nativeElement.removeEventListener('keydown', this.listener);
            this.element.nativeElement.removeEventListener('cut', this.listener);
            this.element.nativeElement.removeEventListener('paste', this.listener);
        }
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRichTextComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
     *
     * focusRichText() {
     *   this.richText.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRichTextComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
     *
     * focusRichText() {
     *   this.richText.focus();
     * }
     * ```
     * @return {?}
     */
    PoRichTextComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRichTextComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoRichTextComponent, { static: true }) richText: PoRichTextComponent;
     *
     * focusRichText() {
     *   this.richText.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        this.bodyElement.focus();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoRichTextComponent.prototype.onChangeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.change.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoRichTextComponent.prototype.updateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this.invalid = !value;
        this.controlChangeModelEmitter(this.value);
        this.updateModel(this.value);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoRichTextComponent.prototype.controlChangeModelEmitter = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextComponent.prototype.validateClassesForRequired = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var value = _this.value;
            /** @type {?} */
            var element = _this.element.nativeElement;
            if (!value && _this.required) {
                element.classList.add('ng-invalid');
                element.classList.add('ng-dirty');
            }
            else {
                element.classList.remove('ng-invalid');
            }
        }));
    };
    PoRichTextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-rich-text',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n\n    <po-rich-text-body #richTextBody\n      [p-height]=\"height\"\n      [p-model-value]=\"value\"\n      [p-placeholder]=\"placeholder\"\n      [p-readonly]=\"readonly\"\n      (p-change)=\"onChangeValue($event)\"\n      (p-commands)=\"richTextToolbar.setButtonsStates($event)\"\n      (p-shortcut-command)=\"richTextToolbar.shortcutTrigger()\"\n      (p-value)=\"updateValue($event)\">\n    </po-rich-text-body>\n\n    <po-rich-text-toolbar #richTextToolbar\n      [p-readonly]=\"readonly\"\n      (p-command)=\"richTextBody.executeCommand($event)\"\n      (p-modal)=\"richTextModal.openModal($event)\">\n    </po-rich-text-toolbar>\n\n    <po-rich-text-modal #richTextModal\n      (p-command)=\"richTextBody.executeCommand($event)\">\n    </po-rich-text-modal>\n\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"errorMsg\"></po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoRichTextComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoRichTextComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoRichTextComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PoRichTextComponent.propDecorators = {
        bodyElement: [{ type: ViewChild, args: [PoRichTextBodyComponent, { static: true },] }]
    };
    return PoRichTextComponent;
}(PoRichTextBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRichTextComponent.prototype.listener;
    /**
     * @type {?}
     * @private
     */
    PoRichTextComponent.prototype.modelLastUpdate;
    /** @type {?} */
    PoRichTextComponent.prototype.bodyElement;
    /**
     * @type {?}
     * @private
     */
    PoRichTextComponent.prototype.element;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoModalComponent
 *
 * \@description
 *
 * Interface que define os botões de ação do componente `po-modal`.
 * @record
 */
function PoModalAction() { }
if (false) {
    /**
     * Função que será executada ao clicar sobre o botão.
     * @type {?}
     */
    PoModalAction.prototype.action;
    /**
     * Define o tipo *danger* no botão.
     *
     * > Caso a propriedade esteja definida em ambos os botões, apenas o botão primário recebe o tipo *danger*.
     * @type {?|undefined}
     */
    PoModalAction.prototype.danger;
    /**
     * Desabilita o botão impossibilitando que sua ação seja executada.
     * @type {?|undefined}
     */
    PoModalAction.prototype.disabled;
    /**
     * Rótulo do botão.
     * @type {?}
     */
    PoModalAction.prototype.label;
    /**
     * Habilita um estado de carregamento ao botão, desabilitando-o e exibindo um ícone de carregamento à esquerda de seu rótulo.
     * @type {?|undefined}
     */
    PoModalAction.prototype.loading;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poRichTextLiteralsDefault = {
    en: {
        bold: 'Bold',
        italic: 'Italic',
        underline: 'Underline',
        left: 'Left',
        center: 'Center',
        right: 'Right',
        justify: 'Justify',
        textColor: 'Text color',
        unorderedList: 'Bulleted list',
        insertLink: 'Insert link',
        linkTextLabel: 'Text with link',
        linkUrlTextHelper: 'Paste in the text box below the copied browser link',
        linkUrlTextPlaceholder: 'Enter the link address that will be attached to the text.',
        cancel: 'Cancel',
        insert: 'Insert',
        insertImage: 'Insert image',
        urlImage: 'URL image'
    },
    es: {
        bold: 'Negrita',
        italic: 'Cursiva',
        underline: 'Subrayado',
        left: 'Izquierda',
        center: 'Centro',
        right: 'Derecha',
        justify: 'Justificado',
        textColor: 'Color del texto',
        unorderedList: 'Lista con viñetas',
        insertLink: 'Insertar el link',
        linkTextLabel: 'Texto con enlace',
        linkUrlTextHelper: 'Pegue en el cuadro de texto debajo del enlace del navegador copiado',
        linkUrlTextPlaceholder: 'Ingrese la dirección del enlace que se adjuntará al texto.',
        cancel: 'Cancelar',
        insert: 'Insertar',
        insertImage: 'Insertar imagen',
        urlImage: 'Imagen URL'
    },
    pt: {
        bold: 'Negrito',
        italic: 'Itálico',
        underline: 'Sublinhado',
        left: 'Esquerda',
        center: 'Centro',
        right: 'Direita',
        justify: 'Justificado',
        textColor: 'Cor do texto',
        unorderedList: 'Lista com marcadores',
        insertLink: 'Inserir link',
        linkTextLabel: 'Texto com link',
        linkUrlTextHelper: 'Cole na caixa de texto abaixo o link copiado do navegador',
        linkUrlTextPlaceholder: 'Insira o endereço do link que será anexado ao texto',
        cancel: 'Cancelar',
        insert: 'Inserir',
        insertImage: 'Inserir imagem',
        urlImage: 'Imagem em URL'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoRichTextModalType = {
    /**
     * Exibe os dados para inserção de imagens.
     */
    Image: 'image',
    /**
     * Exibe os dados para inserção de link e texto customizado para link.
     */
    Link: 'link',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "PoNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos por padrão, podendo ser alterada conforme necessidade.
 * Após este tempo a mesma é removida automaticamente.
 *
 * @abstract
 */
var  /**
 * \@description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto "PoNotification" que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos por padrão, podendo ser alterada conforme necessidade.
 * Após este tempo a mesma é removida automaticamente.
 *
 * @abstract
 */
PoNotificationBaseService = /** @class */ (function () {
    function PoNotificationBaseService() {
        // Array responsável por guardar a instância de po-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de po-toaster's inferiores.
        this.stackBottom = [];
        // Duração da notificação ativa.
        this.defaultDuration = 10000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    PoNotificationBaseService.prototype.success = /**
     * Emite uma notificação de sucesso.
     *
     * @param {?} notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Success));
    };
    /**
     * Emite uma notificação de atenção.
     *
     * @param notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    PoNotificationBaseService.prototype.warning = /**
     * Emite uma notificação de atenção.
     *
     * @param {?} notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Warning));
    };
    /**
     * Emite uma notificação de erro.
     *
     * @param notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    PoNotificationBaseService.prototype.error = /**
     * Emite uma notificação de erro.
     *
     * @param {?} notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Error));
    };
    /**
     * Emite uma notificação de informação.
     *
     * @param notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    PoNotificationBaseService.prototype.information = /**
     * Emite uma notificação de informação.
     *
     * @param {?} notification {PoNotification | string} Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     * @return {?}
     */
    function (notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Information));
    };
    /**
     * Define em milissegundos a duração padrão para as notificações.
     *
     * > Padrão 10 segundos.
     *
     * @param defaultDuration {number} Duração em milisegundos
     */
    /**
     * Define em milissegundos a duração padrão para as notificações.
     *
     * > Padrão 10 segundos.
     *
     * @param {?} defaultDuration {number} Duração em milisegundos
     * @return {?}
     */
    PoNotificationBaseService.prototype.setDefaultDuration = /**
     * Define em milissegundos a duração padrão para as notificações.
     *
     * > Padrão 10 segundos.
     *
     * @param {?} defaultDuration {number} Duração em milisegundos
     * @return {?}
     */
    function (defaultDuration) {
        this.defaultDuration = defaultDuration;
    };
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo PoToaster de acordo o tipo.
     *
     * @param notification {PoNotification | string} Objeto PoNotification com os dados da notificação
     */
    /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo PoToaster de acordo o tipo.
     *
     * @private
     * @param {?} notification {PoNotification | string} Objeto PoNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    PoNotificationBaseService.prototype.buildToaster = /**
     * \@docsPrivate
     *
     * Cria um objeto do tipo PoToaster de acordo o tipo.
     *
     * @private
     * @param {?} notification {PoNotification | string} Objeto PoNotification com os dados da notificação
     * @param {?} type
     * @return {?}
     */
    function (notification, type) {
        var _this = this;
        /** @type {?} */
        var index = 0;
        /** @type {?} */
        var orientation;
        if (((/** @type {?} */ (notification))).orientation === undefined ||
            ((/** @type {?} */ (notification))).orientation === PoToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = PoToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = PoToasterOrientation.Top;
        }
        /** @type {?} */
        var toaster = {
            componentRef: undefined,
            message: ((/** @type {?} */ (notification))).message || (/** @type {?} */ (notification)),
            type: type,
            orientation: orientation,
            action: ((/** @type {?} */ (notification))).action,
            actionLabel: ((/** @type {?} */ (notification))).actionLabel,
            position: index,
            duration: ((/** @type {?} */ (notification))).duration || this.defaultDuration
        };
        if (((/** @type {?} */ (notification))).action) {
            toaster.action = (/**
             * @param {?} param
             * @return {?}
             */
            function (param) {
                ((/** @type {?} */ (notification))).action();
                _this.destroyToaster(param.componentRef);
            });
        }
        return toaster;
    };
    return PoNotificationBaseService;
}());
if (false) {
    /** @type {?} */
    PoNotificationBaseService.prototype.stackTop;
    /** @type {?} */
    PoNotificationBaseService.prototype.stackBottom;
    /**
     * @type {?}
     * @private
     */
    PoNotificationBaseService.prototype.defaultDuration;
    /**
     * \@docsPrivate
     *
     * Método responsável por criar o po-toaster.
     *
     * @abstract
     * @param {?} toaster {PoToaster} Objeto contendo as informações do toaster.
     * @return {?}
     */
    PoNotificationBaseService.prototype.createToaster = function (toaster) { };
    /**
     * \@docsPrivate
     *
     * Método responsável por destruir o po-toaster.
     *
     * @abstract
     * @param {?} toaster {ComponentRef} Número da posição ou instancia do toaster a ser destruído.
     * @return {?}
     */
    PoNotificationBaseService.prototype.destroyToaster = function (toaster) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoNotificationBaseService
 *
 * \@example
 *
 * <example name="po-notification-basic" title="Portinari Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="Portinari Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="Portinari Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
var PoNotificationService = /** @class */ (function (_super) {
    __extends(PoNotificationService, _super);
    function PoNotificationService(poComponentInjector) {
        var _this = _super.call(this) || this;
        _this.poComponentInjector = poComponentInjector;
        return _this;
    }
    /**
     * @param {?} toaster
     * @return {?}
     */
    PoNotificationService.prototype.createToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        var _this = this;
        /** @type {?} */
        var componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === PoToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.destroyToaster(componentRef);
            }), toaster.duration);
        }
    };
    /**
     * @param {?} toaster
     * @return {?}
     */
    PoNotificationService.prototype.destroyToaster = /**
     * @param {?} toaster
     * @return {?}
     */
    function (toaster) {
        /** @type {?} */
        var stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        /** @type {?} */
        var index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.poComponentInjector.destroyComponentInApplication(toaster);
        for (var count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    };
    /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    PoNotificationService.prototype.observableOnClose = /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        var _this = this;
        componentRef.instance.observableOnClose.subscribe((/**
         * @return {?}
         */
        function () {
            _this.destroyToaster(componentRef);
        }));
    };
    PoNotificationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PoNotificationService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };
    /** @nocollapse */ PoNotificationService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PoNotificationService_Factory() { return new PoNotificationService(ɵɵinject(PoComponentInjectorService)); }, token: PoNotificationService, providedIn: "root" });
    return PoNotificationService;
}(PoNotificationBaseService));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoNotificationService.prototype.poComponentInjector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var PoUploadStatus = {
    // Enviou com sucesso.
    Uploaded: 0,
    // Está enviando.
    Uploading: 1,
    // Ocorreu algum erro no envio.
    Error: 2,
    // Não enviou ou aconteceu algum erro.
    None: 3,
};
PoUploadStatus[PoUploadStatus.Uploaded] = 'Uploaded';
PoUploadStatus[PoUploadStatus.Uploading] = 'Uploading';
PoUploadStatus[PoUploadStatus.Error] = 'Error';
PoUploadStatus[PoUploadStatus.None] = 'None';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Classe responsável pelo arquivo do PO Upload
var 
// Classe responsável pelo arquivo do PO Upload
PoUploadFile = /** @class */ (function () {
    function PoUploadFile(file) {
        if (file) {
            this.name = file.name;
            this.displayName = file.name + " - " + this.getFileSize(file.size);
            this.extension = this.getExtension(file.name);
            this.size = file.size;
            this.rawFile = file;
            this.uid = this.generateUUID();
            this.status = PoUploadStatus.None;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoUploadFile.prototype.getExtension = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            /** @type {?} */
            var extension = value.substr(value.lastIndexOf('.'));
            return extension.toLowerCase();
        }
        return '';
    };
    /**
     * @private
     * @return {?}
     */
    PoUploadFile.prototype.generateUUID = /**
     * @private
     * @return {?}
     */
    function () {
        /**
         * @return {?}
         */
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
            s4() + '-' + s4() + s4() + s4();
    };
    // Retorna o tamanho do arquivo em KBytes.
    // Retorna o tamanho do arquivo em KBytes.
    /**
     * @private
     * @param {?} size
     * @return {?}
     */
    PoUploadFile.prototype.getFileSize = 
    // Retorna o tamanho do arquivo em KBytes.
    /**
     * @private
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var kbSize = 0;
        if (size) {
            kbSize = Math.ceil(size / 1024);
        }
        return kbSize + " KB";
    };
    return PoUploadFile;
}());
if (false) {
    /** @type {?} */
    PoUploadFile.prototype.name;
    /** @type {?} */
    PoUploadFile.prototype.rawFile;
    /** @type {?} */
    PoUploadFile.prototype.status;
    /** @type {?} */
    PoUploadFile.prototype.uid;
    /** @type {?} */
    PoUploadFile.prototype.extension;
    /** @type {?} */
    PoUploadFile.prototype.size;
    /** @type {?} */
    PoUploadFile.prototype.displayName;
    /** @type {?} */
    PoUploadFile.prototype.percent;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poUploadLiteralsDefault = {
    en: (/** @type {?} */ ({
        files: 'files',
        folders: 'folders',
        selectFile: 'Select file',
        selectFiles: 'Select files',
        selectFolder: 'Select folder',
        deleteFile: 'Delete',
        cancel: 'Cancel',
        tryAgain: 'Try again',
        startSending: 'Start sending',
        dragFilesHere: 'Drag files here',
        dragFoldersHere: 'Drag folders here',
        selectFilesOnComputer: 'or select files on your computer',
        selectFolderOnComputer: 'or select folder on your computer',
        dropFilesHere: 'Drop files here',
        dropFoldersHere: 'Drop folders here',
        invalidDropArea: '{0} were not dropped in the correct area',
        invalidFileType: 'Failed to load {0} file(s) as it is not the allowed file type.',
        invalidAmount: 'Failed to load {0} file(s), as it exceeds the limit amount of files.',
        invalidFormat: 'Failed to load {0} file(s), as it does not match the format(s): {1}.',
        invalidSize: 'Failed to load {0} files(s), as it is not the allowed size: from {1} to {2}.',
        numberOfFilesAllowed: '{0} file(s) allowed',
        allowedFormats: 'Accepted file formats: {0}.',
        allowedFileSizeRange: 'Size limit per file: from {0} to {1}',
        maxFileSizeAllowed: 'Size limit per file: {0} maximum',
        minFileSizeAllowed: 'Size limit per file: {0} minimum',
        errorOccurred: 'An error has occurred',
        sentWithSuccess: 'Sent with success'
    })),
    es: (/** @type {?} */ ({
        files: 'archivos',
        folders: 'carpetas',
        selectFile: 'Seleccionar archivo',
        selectFiles: 'Seleccionar archivos',
        selectFolder: 'Seleccionar carpeta',
        deleteFile: 'Borrar',
        cancel: 'Cancelar',
        tryAgain: 'Intentar de nuevo',
        startSending: 'Iniciar carga',
        dragFilesHere: 'Arrastra los archivos aquí',
        dragFoldersHere: 'Arrastra las carpetas aquí',
        selectFilesOnComputer: 'o selecciona los archivos en tu computadora',
        selectFolderOnComputer: 'o selecciona la carpeta en tu computadora',
        dropFilesHere: 'Deja los archivos aquí',
        dropFoldersHere: 'Deja las carpetas aquí',
        invalidDropArea: 'Los {0} no se insertaron en la ubicación correcta',
        invalidFileType: 'Error al cargar {0} archivo (s) ya que no es el tipo de archivo permitido',
        invalidAmount: 'Error al cargar {0} archivo (s) ya que excede la cantidad limite de archivos.',
        invalidFormat: 'Error al cargar {0} archivo (s) ya que no coincide con el formato (s): {1}.',
        invalidSize: 'Error al cargar {0} archivo (s) ya que no cumple con el tamaño permitido: desde {1} hasta {2}.',
        numberOfFilesAllowed: '{0} archivo(s) permitido(s)',
        allowedFormats: 'Formatos aceptados: {0}.',
        allowedFileSizeRange: 'Limite de tamaño de archivo: desde {0} hasta {1}',
        maxFileSizeAllowed: 'Limite de tamaño de archivo: hasta {0}',
        minFileSizeAllowed: 'Limite de tamaño de archivo: minimo {0}',
        errorOccurred: 'Ocurrio un error',
        sentWithSuccess: 'Enviado con éxito'
    })),
    pt: (/** @type {?} */ ({
        files: 'arquivos',
        folders: 'diretórios',
        selectFile: 'Selecionar arquivo',
        selectFiles: 'Selecionar arquivos',
        selectFolder: 'Selecionar pasta',
        deleteFile: 'Excluir',
        cancel: 'Cancelar',
        tryAgain: 'Tentar Novamente',
        startSending: 'Iniciar envio',
        dragFilesHere: 'Arraste os arquivos aqui',
        dragFoldersHere: 'Arraste as pastas aqui',
        selectFilesOnComputer: 'ou selecione os arquivos no computador',
        selectFolderOnComputer: 'ou selecione a pasta no computador',
        dropFilesHere: 'Solte os arquivos aqui',
        dropFoldersHere: 'Solte as pastas aqui',
        invalidDropArea: 'Os {0} não foram inseridos no local correto',
        invalidFileType: 'Falha ao carregar {0} arquivo (s), pois não é o tipo de arquivo permitido',
        invalidAmount: 'Falha ao carregar {0} arquivo(s), pois excede(m) a quantidade limite de arquivos.',
        invalidFormat: 'Falha ao carregar {0} arquivo(s), pois não corresponde(m) ao(s) formato(s): {1}.',
        invalidSize: 'Falha ao carregar {0} arquivo(s), pois não atende ao tamanho permitido: {1} até {2}.',
        numberOfFilesAllowed: 'Quantidade máxima: {0} arquivo(s)',
        allowedFormats: 'Formatos adotados: {0}.',
        allowedFileSizeRange: 'Limite de tamanho por arquivo: de {0} até {1}',
        maxFileSizeAllowed: 'Limite de tamanho por arquivo: até {0}',
        minFileSizeAllowed: 'Limite de tamanho por arquivo: no mínimo {0}',
        errorOccurred: 'Ocorreu um erro',
        sentWithSuccess: 'Enviado com sucesso'
    })),
    ru: (/** @type {?} */ ({
        files: 'файлы',
        folders: 'папки с файлами',
        selectFile: 'Выберите файл',
        selectFiles: 'Выберите файлы',
        selectFolder: 'Выберите папку с файлами',
        deleteFile: 'удалять',
        cancel: 'отменить',
        tryAgain: 'попробуйте еще раз',
        startSending: 'Начать загрузку',
        dragFilesHere: 'Перетащите файлы сюда',
        dragFoldersHere: 'Перетащите сюда папки',
        selectFilesOnComputer: 'или выберите файлы на компьютере',
        selectFolderOnComputer: 'или выберите папку на вашем компьютере',
        dropFilesHere: 'Оставьте файлы здесь',
        dropFoldersHere: 'Перетащите сюда папки',
        invalidDropArea: '{0} не были вставлены в правильном месте.',
        invalidFileType: 'Не удалось загрузить файлы {0}, так как это неверный тип файла',
        invalidAmount: 'Não foi possível carregar os arquivos {0} porque eles excederam o limite de arquivos.',
        invalidFormat: 'Не удалось загрузить файлы {0}, так как они не соответствуют формату (ам): {1}.',
        invalidSize: 'Не удалось загрузить файлы {0}, поскольку они не соответствуют разрешенному размеру: от {1} до {2}.',
        numberOfFilesAllowed: 'Максимальное количество: {0} файлов',
        allowedFormats: 'Форматы приняты: {0}.',
        allowedFileSizeRange: 'Ограничение размера файла: от {0} до {1}',
        maxFileSizeAllowed: 'Ограничение размера файла: до {0}',
        minFileSizeAllowed: 'Ограничение размера файла: не менее {0}',
        errorOccurred: 'Произошла ошибка.',
        sentWithSuccess: 'Успешно отправлено'
    }))
};
/** @type {?} */
var poUploadFormFieldDefault = 'files';
/** @type {?} */
var poUploadMaxFileSize = 31457280;
// 30MB
/** @type {?} */
var poUploadMinFileSize = 0;
/**
 * \@description
 *
 * O componente `po-upload` permite que o usuário envie arquivo(s) ao servidor e acompanhe o progresso.
 * Este componente também possibilita algumas configurações como:
 *  – Envio de diretórios, onde ele acessa o diretório selecionado assim como seus sub-diretórios;
 *  - Múltipla seleção, onde o usuário pode enviar mais de um arquivo ao servidor.
 *  - Auto envio, onde o arquivo é enviado imediatamente após a seleção do usuário, não necessitando que o usuário
 * clique em enviar.
 *  - Restrições de formatos de arquivo e tamanho.
 *  - Função de sucesso que será disparada quando os arquivos forem enviados com sucesso.
 *  - Função de erro que será disparada quando houver erro no envio dos arquivos.
 *  - Permite habilitar uma área onde os arquivos podem ser arrastados.
 * @abstract
 */
var PoUploadBaseComponent = /** @class */ (function () {
    function PoUploadBaseComponent(uploadService) {
        this.uploadService = uploadService;
        this._dragDrop = false;
        this.extensionNotAllowed = 0;
        this.quantityNotAllowed = 0;
        this.sizeNotAllowed = 0;
        /**
         * Define o valor do atributo `name` do componente.
         */
        this.name = 'file';
        /**
         * \@optional
         *
         * \@description
         *
         * Define se o envio do arquivo será automático ao selecionar o mesmo.
         *
         * \@default `false`
         */
        this.autoUpload = false;
        /**
         * Função que será executada no momento de realizar o envio do arquivo,
         * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
         * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
         * que será enviado em conjunto com o arquivo na requisição, por exemplo:
         *
         * ```
         *   event.data = {id: 'id do usuario'};
         * ```
         */
        this.onUpload = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer algum erro no envio do arquivo.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando o envio do arquivo for realizado com sucesso.
         * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
         */
        this.onSuccess = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da *tag* `form`.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(PoUploadBaseComponent.prototype, "directory", {
        get: /**
         * @return {?}
         */
        function () {
            return this._directory;
        },
        /**
         * @optional
         *
         * @description
         *
         * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
         *
         * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
         *
         * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Permite a seleção de diretórios contendo um ou mais arquivos para envio.
         *
         * > A habilitação desta propriedade se restringe apenas à seleção de diretórios.
         *
         * > Definição não suportada pelo browser **Internet Explorer**, todavia será possível a seleção de arquivos padrão.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._directory = convertToBoolean(value);
            this.canHandleDirectory = this._directory && !isIE() && !isMobile();
            this.setDirectoryAttribute(this.canHandleDirectory);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "dragDrop", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dragDrop;
        },
        /**
         * @optional
         *
         * @description
         *
         * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
         * automaticamente.
         *
         * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Exibe a área onde é possível arrastar e selecionar os arquivos. Quando estiver definida, omite o botão para seleção de arquivos
         * automaticamente.
         *
         * > Recomendamos utilizar apenas um `po-upload` com esta funcionalidade por tela.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._dragDrop = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideRestrictionsInfo", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideRestrictionsInfo;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta visualmente as informações de restrições para o upload.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta visualmente as informações de restrições para o upload.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideRestrictionsInfo = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideSelectButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSelectButton;
        },
        /**
         * @optional
         *
         * @description
         *
         * Omite o botão de seleção de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `selectFiles()` para seleção de arquivos.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Omite o botão de seleção de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `selectFiles()` para seleção de arquivos.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideSelectButton = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "hideSendButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSendButton;
        },
        /**
         * @optional
         *
         * @description
         *
         * Omite o botão de envio de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Omite o botão de envio de arquivos.
         *
         * > Caso o valor definido seja `true`, caberá ao desenvolvedor a responsabilidade
         * pela chamada do método `sendFiles()` para envio do(s) arquivo(s) selecionado(s).
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hideSendButton = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poUploadLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    cancel: 'Desistir',
         *    deleteFile: 'Deletar',
         *  };
         *
         * Ou passando apenas as literais que deseja customizar:,
         *    selectFile: 'Buscar arquivo',
         * ```
         *    startSending: 'Enviar'
         *   tryAgain: 'Recomeçar',
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-upload
         *   [p-literals]="customLiterals">
         * </po-upload>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-upload`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    cancel: 'Desistir',
         *    deleteFile: 'Deletar',
         *  };
         *
         * Ou passando apenas as literais que deseja customizar:,
         *    selectFile: 'Buscar arquivo',
         * ```
         *    startSending: 'Enviar'
         *   tryAgain: 'Recomeçar',
         *
         * ```
         *  const customLiterals: PoUploadLiterals = {
         *    deleteFile: 'Deletar'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
         *
         * ```
         * <po-upload
         *   [p-literals]="customLiterals">
         * </po-upload>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poUploadLiteralsDefault[poLocaleDefault], poUploadLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poUploadLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "fileRestrictions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileRestrictions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
         * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que segue a definição da interface `PoUploadFileRestrictions`,
         * que possibilita definir tamanho máximo/mínimo e extensão dos arquivos permitidos.
         * @param {?} restrictions
         * @return {?}
         */
        function (restrictions) {
            this._fileRestrictions = this.initRestrictions(restrictions);
            this.setAllowedExtensions(restrictions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "formField", {
        get: /**
         * @return {?}
         */
        function () {
            return this._formField;
        },
        /**
         * @optional
         *
         * @description
         *
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
         *
         * @default `files`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Nome do campo de formulário que será enviado para o serviço informado na propriedade `p-url`.
         *
         * \@default `files`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._formField = value && typeof value === 'string' ? value : poUploadFormFieldDefault;
            this.getUploadService().formField = this.formField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "isMultiple", {
        get: /**
         * @return {?}
         */
        function () {
            return this.canHandleDirectory ? true : this._isMultiple;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se pode selecionar mais de um arquivo.
         *
         * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se pode selecionar mais de um arquivo.
         *
         * > Se utilizada a `p-directory`, habilita-se automaticamente esta propriedade.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isMultiple = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.currentFiles);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    PoUploadBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoUploadBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoUploadBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoUploadBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    PoUploadBaseComponent.prototype.writeValue = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (model) {
            if (!isEquals(this.currentFiles, model)) {
                this.currentFiles = this.parseFiles(model);
            }
        }
        else {
            this.currentFiles = undefined;
        }
    };
    /**
     * @protected
     * @param {?} currentFilesLength
     * @return {?}
     */
    PoUploadBaseComponent.prototype.isExceededFileLimit = /**
     * @protected
     * @param {?} currentFilesLength
     * @return {?}
     */
    function (currentFilesLength) {
        return this.isMultiple &&
            this.fileRestrictions &&
            this.fileRestrictions.maxFiles > 0 &&
            this.fileRestrictions.maxFiles <= currentFilesLength;
    };
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    PoUploadBaseComponent.prototype.parseFiles = 
    // Faz o parse dos arquivos selecionados para arquivos do formato PoUploadFile e atualiza os arquivos correntes.
    /**
     * @protected
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var poUploadFiles = this.currentFiles || [];
        /** @type {?} */
        var filesLength = files.length;
        for (var i = 0; i < filesLength; i++) {
            if (this.isExceededFileLimit(poUploadFiles.length)) {
                this.quantityNotAllowed = filesLength - this.fileRestrictions.maxFiles;
                break;
            }
            /** @type {?} */
            var file = new PoUploadFile(files[i]);
            if (this.checkRestrictions(file)) {
                poUploadFiles = this.insertFileInFiles(file, poUploadFiles);
            }
        }
        this.sendFeedback();
        return poUploadFiles;
    };
    /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    PoUploadBaseComponent.prototype.validateModel = /**
     * @protected
     * @param {?} model
     * @return {?}
     */
    function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    // Verifica se o arquivo está de acordo com as restrições.
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    PoUploadBaseComponent.prototype.checkRestrictions = 
    // Verifica se o arquivo está de acordo com as restrições.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var restrictions = this.fileRestrictions;
        if (restrictions) {
            /** @type {?} */
            var allowedExtensions = restrictions.allowedExtensions;
            /** @type {?} */
            var minFileSize = restrictions.minFileSize;
            /** @type {?} */
            var maxFileSize = restrictions.maxFileSize;
            /** @type {?} */
            var isAccept = allowedExtensions ? this.isAllowedExtension(file.extension, allowedExtensions) : true;
            /** @type {?} */
            var isAcceptSize = file.size >= minFileSize && file.size <= maxFileSize;
            if (!isAcceptSize) {
                this.sizeNotAllowed = this.sizeNotAllowed + 1;
            }
            return isAccept && isAcceptSize;
        }
        return true;
    };
    /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    PoUploadBaseComponent.prototype.existsFileSameName = /**
     * @private
     * @param {?} file
     * @param {?} files
     * @return {?}
     */
    function (file, files) {
        return files.some((/**
         * @param {?} currentFile
         * @return {?}
         */
        function (currentFile) { return file.name === currentFile.name; }));
    };
    /**
     * @private
     * @return {?}
     */
    PoUploadBaseComponent.prototype.getUploadService = /**
     * @private
     * @return {?}
     */
    function () {
        return this.uploadService;
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    PoUploadBaseComponent.prototype.insertFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        if (this.existsFileSameName(newFile, files)) {
            return this.updateExistsFileInFiles(newFile, files);
        }
        if (this.isMultiple) {
            files.push(newFile);
        }
        else {
            files.splice(0, files.length, newFile);
        }
        return files;
    };
    /**
     * @private
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    PoUploadBaseComponent.prototype.isAllowedExtension = /**
     * @private
     * @param {?} extension
     * @param {?=} allowedExtensions
     * @return {?}
     */
    function (extension, allowedExtensions) {
        if (allowedExtensions === void 0) { allowedExtensions = []; }
        /** @type {?} */
        var isAllowed = allowedExtensions.some((/**
         * @param {?} ext
         * @return {?}
         */
        function (ext) { return ext.toLowerCase() === extension; }));
        if (!isAllowed) {
            this.extensionNotAllowed = this.extensionNotAllowed + 1;
        }
        return isAllowed;
    };
    /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    PoUploadBaseComponent.prototype.setAllowedExtensions = /**
     * @private
     * @param {?=} restrictions
     * @return {?}
     */
    function (restrictions) {
        if (restrictions === void 0) { restrictions = {}; }
        /** @type {?} */
        var _allowedExtensions = restrictions.allowedExtensions || [];
        this.allowedExtensions = _allowedExtensions.join(',');
    };
    /**
     * @private
     * @param {?} restrictions
     * @return {?}
     */
    PoUploadBaseComponent.prototype.initRestrictions = /**
     * @private
     * @param {?} restrictions
     * @return {?}
     */
    function (restrictions) {
        if (!restrictions) {
            return;
        }
        /** @type {?} */
        var minFileSize = restrictions.minFileSize || poUploadMinFileSize;
        /** @type {?} */
        var maxFileSize = restrictions.maxFileSize || poUploadMaxFileSize;
        return __assign({}, restrictions, { maxFileSize: maxFileSize, minFileSize: minFileSize });
    };
    /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    PoUploadBaseComponent.prototype.updateExistsFileInFiles = /**
     * @private
     * @param {?} newFile
     * @param {?} files
     * @return {?}
     */
    function (newFile, files) {
        /** @type {?} */
        var fileIndex = files.findIndex((/**
         * @param {?} currentFile
         * @return {?}
         */
        function (currentFile) { return newFile.name === currentFile.name && currentFile.status !== PoUploadStatus.Uploaded; }));
        if (fileIndex !== -1) {
            files.splice(fileIndex, 1, newFile);
        }
        return files;
    };
    PoUploadBaseComponent.propDecorators = {
        directory: [{ type: Input, args: ['p-directory',] }],
        dragDropHeight: [{ type: Input, args: ['p-drag-drop-height',] }],
        dragDrop: [{ type: Input, args: ['p-drag-drop',] }],
        hideRestrictionsInfo: [{ type: Input, args: ['p-hide-restrictions-info',] }],
        hideSelectButton: [{ type: Input, args: ['p-hide-select-button',] }],
        hideSendButton: [{ type: Input, args: ['p-hide-send-button',] }],
        label: [{ type: Input, args: ['p-label',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        help: [{ type: Input, args: ['p-help',] }],
        url: [{ type: Input, args: ['p-url',] }],
        fileRestrictions: [{ type: Input, args: ['p-restrictions',] }],
        name: [{ type: Input, args: ['name',] }],
        formField: [{ type: Input, args: ['p-form-field',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        autoUpload: [{ type: Input, args: ['p-auto-upload',] }],
        isMultiple: [{ type: Input, args: ['p-multiple',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        required: [{ type: Input, args: ['p-required',] }],
        onUpload: [{ type: Output, args: ['p-upload',] }],
        onError: [{ type: Output, args: ['p-error',] }],
        onSuccess: [{ type: Output, args: ['p-success',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return PoUploadBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._directory;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._dragDrop;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._fileRestrictions;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._formField;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._hideRestrictionsInfo;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._hideSelectButton;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._hideSendButton;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._isMultiple;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype._required;
    /** @type {?} */
    PoUploadBaseComponent.prototype.allowedExtensions;
    /** @type {?} */
    PoUploadBaseComponent.prototype.currentFiles;
    /** @type {?} */
    PoUploadBaseComponent.prototype.canHandleDirectory;
    /** @type {?} */
    PoUploadBaseComponent.prototype.onModelChange;
    /** @type {?} */
    PoUploadBaseComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseComponent.prototype.validatorChange;
    /**
     * @type {?}
     * @protected
     */
    PoUploadBaseComponent.prototype.extensionNotAllowed;
    /**
     * @type {?}
     * @protected
     */
    PoUploadBaseComponent.prototype.quantityNotAllowed;
    /**
     * @type {?}
     * @protected
     */
    PoUploadBaseComponent.prototype.sizeNotAllowed;
    /**
     * \@optional
     *
     * \@description
     *
     * Define em *pixels* a altura da área onde podem ser arrastados os arquivos. A altura mínima aceita é `160px`.
     *
     * > Esta propriedade funciona somente se a propriedade `p-drag-drop` estiver habilitada.
     *
     * \@default `320`
     * @type {?}
     */
    PoUploadBaseComponent.prototype.dragDropHeight;
    /**
     * Rótulo do campo.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.help;
    /**
     * URL que deve ser feita a requisição com os arquivos selecionados.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.url;
    /**
     * Define o valor do atributo `name` do componente.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se o envio do arquivo será automático ao selecionar o mesmo.
     *
     * \@default `false`
     * @type {?}
     */
    PoUploadBaseComponent.prototype.autoUpload;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     *  - O campo conter `p-required`;
     *  - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoUploadBaseComponent.prototype.optional;
    /**
     * Função que será executada no momento de realizar o envio do arquivo,
     * onde será possível adicionar informações ao parâmetro que será enviado na requisição.
     * É passado por parâmetro um objeto com o arquivo e a propiedade data nesta propriedade pode ser informado algum dado,
     * que será enviado em conjunto com o arquivo na requisição, por exemplo:
     *
     * ```
     *   event.data = {id: 'id do usuario'};
     * ```
     * @type {?}
     */
    PoUploadBaseComponent.prototype.onUpload;
    /**
     * Evento será disparado quando ocorrer algum erro no envio do arquivo.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpErrorResponse`.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.onError;
    /**
     * Evento será disparado quando o envio do arquivo for realizado com sucesso.
     * > Por parâmetro será passado o objeto do retorno que é do tipo `HttpResponse`.
     * @type {?}
     */
    PoUploadBaseComponent.prototype.onSuccess;
    /** @type {?} */
    PoUploadBaseComponent.prototype.ngModelChange;
    /**
     * @type {?}
     * @protected
     */
    PoUploadBaseComponent.prototype.uploadService;
    /**
     * @abstract
     * @return {?}
     */
    PoUploadBaseComponent.prototype.sendFeedback = function () { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoUploadBaseComponent.prototype.setDirectoryAttribute = function (value) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoUploadDragDropAreaComponent = /** @class */ (function () {
    function PoUploadDragDropAreaComponent(elementRef) {
        this.elementRef = elementRef;
        this.selectFiles = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PoUploadDragDropAreaComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.selectFilesLinkElement.nativeElement.focus();
    };
    PoUploadDragDropAreaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-upload-drag-drop-area',
                    template: "<div\r\n  class=\"po-upload-drag-drop-area\"\r\n  [ngClass]=\"{'po-upload-drag-drop-area-disabled': disabled}\"\r\n  [style.height.px]=\"height\">\r\n\r\n  <div class=\"po-upload-drag-drop-area-container\">\r\n    <ng-container *ngIf=\"overlay && !disabled; then overlayTemplate; else defaultTemplate\">\r\n    </ng-container>\r\n  </div>\r\n\r\n</div>\r\n\r\n<ng-template #overlayTemplate>\r\n  <span class=\"po-upload-drag-drop-area-overlay-icon po-icon po-icon-upload-cloud\"></span>\r\n\r\n  <div class=\"po-upload-drag-drop-area-overlay-label\">{{ directoryCompatible ? literals?.dropFoldersHere : literals?.dropFilesHere }}</div>\r\n</ng-template>\r\n\r\n<ng-template #defaultTemplate>\r\n  <span class=\"po-upload-drag-drop-area-icon po-icon po-icon-upload-cloud\"></span>\r\n\r\n  <div class=\"po-upload-drag-drop-area-label\">{{ directoryCompatible ? literals?.dragFoldersHere : literals?.dragFilesHere }}</div>\r\n\r\n  <button #selectFilesLink\r\n    class=\"po-upload-drag-drop-area-select-files\"\r\n    [disabled]=\"disabled\"\r\n    [ngClass]=\"{'po-clickable': !disabled}\"\r\n    (click)=\"selectFiles.emit()\">{{ directoryCompatible ? literals?.selectFolderOnComputer : literals?.selectFilesOnComputer }}</button>\r\n</ng-template>\r\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PoUploadDragDropAreaComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PoUploadDragDropAreaComponent.propDecorators = {
        directoryCompatible: [{ type: Input, args: ['p-directory-compatible',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        height: [{ type: Input, args: ['p-height',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        overlay: [{ type: Input, args: ['p-overlay',] }],
        selectFiles: [{ type: Output, args: ['p-select-files',] }],
        selectFilesLinkElement: [{ type: ViewChild, args: ['selectFilesLink', { static: false },] }]
    };
    return PoUploadDragDropAreaComponent;
}());
if (false) {
    /** @type {?} */
    PoUploadDragDropAreaComponent.prototype.directoryCompatible;
    /** @type {?} */
    PoUploadDragDropAreaComponent.prototype.disabled;
    /** @type {?} */
    PoUploadDragDropAreaComponent.prototype.height;
    /** @type {?} */
    PoUploadDragDropAreaComponent.prototype.literals;
    /** @type {?} */
    PoUploadDragDropAreaComponent.prototype.overlay;
    /** @type {?} */
    PoUploadDragDropAreaComponent.prototype.selectFiles;
    /** @type {?} */
    PoUploadDragDropAreaComponent.prototype.selectFilesLinkElement;
    /** @type {?} */
    PoUploadDragDropAreaComponent.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PoUploadDragDropHeightDefault = 320;
/** @type {?} */
var PoUploadDragDropHeightMin = 160;
var PoUploadDragDropComponent = /** @class */ (function () {
    function PoUploadDragDropComponent(changeDetector) {
        this.changeDetector = changeDetector;
        this._dragDropHeight = PoUploadDragDropHeightDefault;
        this.isDragOver = false;
        this.fileChange = new EventEmitter();
        this.selectFiles = new EventEmitter();
    }
    Object.defineProperty(PoUploadDragDropComponent.prototype, "dragDropHeight", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dragDropHeight;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var dragDropHeight = convertToInt(value, PoUploadDragDropHeightDefault);
            this._dragDropHeight = (dragDropHeight < PoUploadDragDropHeightMin) ? PoUploadDragDropHeightMin : dragDropHeight;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoUploadDragDropComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.dragDropAreaComponent.focus();
    };
    /**
     * @param {?} element
     * @return {?}
     */
    PoUploadDragDropComponent.prototype.onAreaElement = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        this.areaElement = element;
        // necessário para não ocorrer o erro HasBeenChecked
        this.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    PoUploadDragDropComponent.prototype.onDragLeave = /**
     * @return {?}
     */
    function () {
        this.isDragOver = false;
    };
    /**
     * @return {?}
     */
    PoUploadDragDropComponent.prototype.onDragOver = /**
     * @return {?}
     */
    function () {
        this.isDragOver = true;
    };
    /**
     * @param {?} files
     * @return {?}
     */
    PoUploadDragDropComponent.prototype.onFileChange = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        this.isDragOver = false;
        this.fileChange.emit(files);
    };
    PoUploadDragDropComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-upload-drag-drop',
                    template: "<po-upload-drag-drop-area-overlay #dragDropOverlay *ngIf=\"isDragOver\"\r\n  [p-directory-compatible]=\"directoryCompatible\"\r\n  [p-disabled]=\"disabled\"\r\n  [p-literals]=\"literals\"\r\n  [p-target]=\"dragDropAreaComponent.elementRef\"\r\n  (p-area-element)=\"onAreaElement($event)\">\r\n</po-upload-drag-drop-area-overlay>\r\n\r\n<po-upload-drag-drop-area\r\n  p-upload-drag-drop\r\n  [p-area-element]=\"areaElement\"\r\n  [p-directory-compatible]=\"directoryCompatible\"\r\n  [p-disabled]=\"disabled\"\r\n  [p-height]=\"dragDropHeight\"\r\n  [p-literals]=\"literals\"\r\n  [p-overlay]=\"false\"\r\n  (p-drag-leave)=\"onDragLeave()\"\r\n  (p-drag-over)=\"onDragOver()\"\r\n  (p-file-change)=\"onFileChange($event)\"\r\n  (p-select-files)=\"selectFiles.emit()\">\r\n</po-upload-drag-drop-area>\r\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PoUploadDragDropComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoUploadDragDropComponent.propDecorators = {
        dragDropOverlayElement: [{ type: ViewChild, args: ['dragDropOverlay', { read: ElementRef, static: false },] }],
        dragDropAreaComponent: [{ type: ViewChild, args: [PoUploadDragDropAreaComponent, { static: true },] }],
        directoryCompatible: [{ type: Input, args: ['p-directory-compatible',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        dragDropHeight: [{ type: Input, args: ['p-drag-drop-height',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        fileChange: [{ type: Output, args: ['p-file-change',] }],
        selectFiles: [{ type: Output, args: ['p-select-files',] }]
    };
    return PoUploadDragDropComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropComponent.prototype._dragDropHeight;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.areaElement;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.isDragOver;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.dragDropOverlayElement;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.dragDropAreaComponent;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.directoryCompatible;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.disabled;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.literals;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.fileChange;
    /** @type {?} */
    PoUploadDragDropComponent.prototype.selectFiles;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoUploadBaseService = /** @class */ (function () {
    function PoUploadBaseService(http) {
        this.http = http;
        this.formField = 'files';
        this.requests = [];
    }
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    PoUploadBaseService.prototype.upload = /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param {?} url URL da requisição a ser efetuada.
     * @param {?} files Arquivos a serem enviados.
     * @param {?} tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param {?} uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param {?} successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param {?} errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     * @return {?}
     */
    function (url, files, tOnUpload, uploadCallback, successCallback, errorCallback) {
        /** @type {?} */
        var filesLength = files.length;
        /** @type {?} */
        var uploadEvent = {
            data: {},
            file: null
        };
        for (var i = 0; i < filesLength; i++) {
            /** @type {?} */
            var formData = new FormData();
            /** @type {?} */
            var file = files[i];
            /** @type {?} */
            var fileName = file.rawFile.name;
            formData.append(this.formField, file.rawFile, fileName);
            // Função upload, onde o desenvolvedor pode enviar dados para a requisição.
            if (tOnUpload) {
                uploadEvent['file'] = file;
                tOnUpload.emit(uploadEvent);
                formData.append('data', JSON.stringify(uploadEvent.data));
            }
            this.sendFile(url, file, formData, uploadCallback, successCallback, errorCallback);
        }
    };
    /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    PoUploadBaseService.prototype.sendFile = /**
     * @param {?} url
     * @param {?} file
     * @param {?} formData
     * @param {?} uploadCallback
     * @param {?} successCallback
     * @param {?} errorCallback
     * @return {?}
     */
    function (url, file, formData, uploadCallback, successCallback, errorCallback) {
        var _this = this;
        /** @type {?} */
        var request = this.getRequest(url, formData).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.type === HttpEventType.UploadProgress) {
                _this.addRequest(file, request);
                /** @type {?} */
                var percentDone = Math.round(100 * event.loaded / event.total);
                uploadCallback(file, percentDone);
            }
            else if (event instanceof HttpResponse) {
                // Sucesso, arquivos enviados.
                successCallback(file, event);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            errorCallback(file, err);
        }));
    };
    /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    PoUploadBaseService.prototype.getRequest = /**
     * @param {?} url
     * @param {?} formData
     * @return {?}
     */
    function (url, formData) {
        /** @type {?} */
        var req = new HttpRequest('POST', url, formData, {
            reportProgress: true
        });
        return this.http.request(req);
    };
    /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    PoUploadBaseService.prototype.stopRequestByFile = /**
     * @param {?} file
     * @param {?} callback
     * @return {?}
     */
    function (file, callback) {
        /** @type {?} */
        var requestObj = this.requests.find((/**
         * @param {?} req
         * @return {?}
         */
        function (req) {
            return req.file.uid === file.uid;
        }));
        if (requestObj) {
            /** @type {?} */
            var request = requestObj.request;
            request.unsubscribe();
            this.removeRequest(requestObj);
            callback();
        }
    };
    /**
     * @param {?} requestObj
     * @return {?}
     */
    PoUploadBaseService.prototype.removeRequest = /**
     * @param {?} requestObj
     * @return {?}
     */
    function (requestObj) {
        /** @type {?} */
        var index = this.requests.indexOf(requestObj);
        this.requests.splice(index, 1);
    };
    /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    PoUploadBaseService.prototype.addRequest = /**
     * @param {?} file
     * @param {?} request
     * @return {?}
     */
    function (file, request) {
        /** @type {?} */
        var hasRequest = this.requests.some((/**
         * @param {?} req
         * @return {?}
         */
        function (req) {
            return req.file.uid === file.uid;
        }));
        if (!hasRequest) {
            this.requests.push({ file: file, request: request });
        }
    };
    PoUploadBaseService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoUploadBaseService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoUploadBaseService;
}());
if (false) {
    /** @type {?} */
    PoUploadBaseService.prototype.formField;
    /** @type {?} */
    PoUploadBaseService.prototype.requests;
    /**
     * @type {?}
     * @private
     */
    PoUploadBaseService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoUploadService = /** @class */ (function (_super) {
    __extends(PoUploadService, _super);
    function PoUploadService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoUploadService.decorators = [
        { type: Injectable }
    ];
    return PoUploadService;
}(PoUploadBaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoUploadBaseComponent
 *
 * \@example
 *
 * <example name="po-upload-basic" title="Portinari Upload Basic">
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-labs" title="Portinari Upload Labs">
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-resume" title="Portinari Upload - Resume">
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-rs" title="Portinari Upload - Realize & Show">
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
 * </example>
 */
var PoUploadComponent = /** @class */ (function (_super) {
    __extends(PoUploadComponent, _super);
    function PoUploadComponent(uploadService, renderer, i18nPipe, notification) {
        var _a, _b;
        var _this = _super.call(this, uploadService) || this;
        _this.renderer = renderer;
        _this.i18nPipe = i18nPipe;
        _this.notification = notification;
        _this.infoByUploadStatus = (_a = {},
            _a[PoUploadStatus.Uploaded] = {
                text: (/**
                 * @return {?}
                 */
                function () { return _this.literals.sentWithSuccess; }),
                icon: 'po-icon-ok'
            },
            _a[PoUploadStatus.Error] = {
                text: (/**
                 * @return {?}
                 */
                function () { return _this.literals.errorOccurred; })
            },
            _a[PoUploadStatus.Uploading] = {
                text: (/**
                 * @param {?} percent
                 * @return {?}
                 */
                function (percent) { return percent + '%'; })
            },
            _a);
        _this.progressStatusByFileStatus = (_b = {},
            _b[PoUploadStatus.Uploaded] = PoProgressStatus.Success,
            _b[PoUploadStatus.Error] = PoProgressStatus.Error,
            _b);
        _this.calledByCleanInputValue = false;
        return _this;
    }
    Object.defineProperty(PoUploadComponent.prototype, "displayDragDrop", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dragDrop && !isMobile();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "displaySendButton", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var currentFiles = this.currentFiles || [];
            return !this.hideSendButton && !this.autoUpload && (currentFiles.length > 0 && this.hasFileNotUploaded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "selectFileButtonLabel", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.canHandleDirectory) {
                return this.literals.selectFolder;
            }
            else if (this.isMultiple) {
                return this.literals.selectFiles;
            }
            else {
                return this.literals.selectFile;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "hasMoreThanFourItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currentFiles && this.currentFiles.length > 4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "hasMultipleFiles", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currentFiles && this.currentFiles.length > 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "hasFileNotUploaded", {
        get: /**
         * @return {?}
         */
        function () {
            if (Array.isArray(this.currentFiles)) {
                return this.currentFiles.some((/**
                 * @param {?} file
                 * @return {?}
                 */
                function (file) { return file.status !== PoUploadStatus.Uploaded; }));
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var currentFiles = this.currentFiles || [];
            return !!(this.hasAnyFileUploading(currentFiles) ||
                !this.url ||
                this.disabled ||
                this.isExceededFileLimit(currentFiles.length));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadComponent.prototype, "maxFiles", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isMultiple && this.fileRestrictions && this.fileRestrictions.maxFiles;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.cancel = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        if (file.status === PoUploadStatus.Uploading) {
            return this.stopUpload(file);
        }
        this.removeFile(file);
    };
    /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
    /**
     * Método responsável por **limpar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    PoUploadComponent.prototype.clear = /**
     * Método responsável por **limpar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    function () {
        this.currentFiles = undefined;
        this.updateModel([]);
        this.cleanInputValue();
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     * @return {?}
     */
    PoUploadComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            if (this.uploadButton) {
                this.uploadButton.focus();
                return;
            }
            if (this.displayDragDrop) {
                this.poUploadDragDropComponent.focus();
            }
        }
    };
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.hasAnyFileUploading = 
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (files && files.length) {
            return files.some((/**
             * @param {?} file
             * @return {?}
             */
            function (file) { return file.status === PoUploadStatus.Uploading; }));
        }
        return false;
    };
    // retorna se o status do arquivo é diferente de enviado
    // retorna se o status do arquivo é diferente de enviado
    /**
     * @param {?} status
     * @return {?}
     */
    PoUploadComponent.prototype.isAllowCancelEvent = 
    // retorna se o status do arquivo é diferente de enviado
    /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        return status !== PoUploadStatus.Uploaded;
    };
    // Função disparada ao selecionar algum arquivo.
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    PoUploadComponent.prototype.onFileChange = 
    // Função disparada ao selecionar algum arquivo.
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // necessário este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        /** @type {?} */
        var files = event.target.files;
        this.updateFiles(files);
        this.cleanInputValue();
    };
    /**
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.onFileChangeDragDrop = /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        this.updateFiles(files);
    };
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.removeFile = 
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel(__spread(this.currentFiles));
    };
    /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
    /**
     * Método responsável por **abrir** a janela para seleção de arquivo(s).
     * @return {?}
     */
    PoUploadComponent.prototype.selectFiles = /**
     * Método responsável por **abrir** a janela para seleção de arquivo(s).
     * @return {?}
     */
    function () {
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    };
    /**
     * @return {?}
     */
    PoUploadComponent.prototype.sendFeedback = /**
     * @return {?}
     */
    function () {
        if (this.sizeNotAllowed > 0) {
            /** @type {?} */
            var minFileSize = formatBytes(this.fileRestrictions.minFileSize);
            /** @type {?} */
            var maxFileSize = formatBytes(this.fileRestrictions.maxFileSize);
            /** @type {?} */
            var args = [this.sizeNotAllowed, minFileSize || '0', maxFileSize];
            this.setPipeArguments('invalidSize', args);
            this.sizeNotAllowed = 0;
        }
        if (this.extensionNotAllowed > 0) {
            /** @type {?} */
            var allowedExtensionsFormatted = this.fileRestrictions.allowedExtensions.join(', ').toUpperCase();
            /** @type {?} */
            var args = [this.extensionNotAllowed, allowedExtensionsFormatted];
            this.setPipeArguments('invalidFormat', args);
            this.extensionNotAllowed = 0;
        }
        if (this.quantityNotAllowed > 0) {
            /** @type {?} */
            var args = [this.quantityNotAllowed];
            this.setPipeArguments('invalidAmount', args);
            this.quantityNotAllowed = 0;
        }
    };
    /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
    /**
     * Método responsável por **enviar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    PoUploadComponent.prototype.sendFiles = /**
     * Método responsável por **enviar** o(s) arquivo(s) selecionado(s).
     * @return {?}
     */
    function () {
        if (this.currentFiles && this.currentFiles.length) {
            this.uploadFiles(this.currentFiles);
        }
    };
    /**
     * @param {?} canHandleDirectory
     * @return {?}
     */
    PoUploadComponent.prototype.setDirectoryAttribute = /**
     * @param {?} canHandleDirectory
     * @return {?}
     */
    function (canHandleDirectory) {
        if (canHandleDirectory) {
            this.renderer.setAttribute(this.inputFile.nativeElement, 'webkitdirectory', 'true');
        }
        else {
            this.renderer.removeAttribute(this.inputFile.nativeElement, 'webkitdirectory');
        }
    };
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.stopUpload = 
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var _this = this;
        this.uploadService.stopRequestByFile(file, (/**
         * @return {?}
         */
        function () {
            if (_this.autoUpload) {
                _this.removeFile(file);
            }
            else {
                _this.stopUploadHandler(file);
            }
        }));
    };
    /**
     * @param {?} index
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.trackByFn = /**
     * @param {?} index
     * @param {?} file
     * @return {?}
     */
    function (index, file) {
        return file.uid;
    };
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.uploadFiles = 
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    /**
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        /** @type {?} */
        var filesFiltered = files.filter((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.status !== PoUploadStatus.Uploaded; }));
        this.uploadService.upload(this.url, filesFiltered, this.onUpload, (/**
         * @param {?} file
         * @param {?} percent
         * @return {?}
         */
        function (file, percent) {
            _this.uploadingHandler(file, percent);
        }), (/**
         * @param {?} file
         * @param {?} eventResponse
         * @return {?}
         */
        function (file, eventResponse) {
            _this.responseHandler(file, PoUploadStatus.Uploaded);
            _this.onSuccess.emit(eventResponse);
        }), (/**
         * @param {?} file
         * @param {?} eventError
         * @return {?}
         */
        function (file, eventError) {
            _this.responseHandler(file, PoUploadStatus.Error);
            _this.onError.emit(eventError);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoUploadComponent.prototype.cleanInputValue = /**
     * @private
     * @return {?}
     */
    function () {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
    };
    // função disparada na resposta do sucesso ou error
    // função disparada na resposta do sucesso ou error
    /**
     * @private
     * @param {?} file
     * @param {?} status
     * @return {?}
     */
    PoUploadComponent.prototype.responseHandler = 
    // função disparada na resposta do sucesso ou error
    /**
     * @private
     * @param {?} file
     * @param {?} status
     * @return {?}
     */
    function (file, status) {
        file.status = status;
        file.percent = 100;
    };
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    /**
     * @private
     * @param {?} literalAttributes
     * @param {?=} literalArguments
     * @return {?}
     */
    PoUploadComponent.prototype.setPipeArguments = 
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    /**
     * @private
     * @param {?} literalAttributes
     * @param {?=} literalArguments
     * @return {?}
     */
    function (literalAttributes, literalArguments) {
        /** @type {?} */
        var pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], literalArguments);
        this.notification.information(pipeArguments);
    };
    // Função disparada ao parar um envio de arquivo.
    // Função disparada ao parar um envio de arquivo.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    PoUploadComponent.prototype.stopUploadHandler = 
    // Função disparada ao parar um envio de arquivo.
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        file.status = PoUploadStatus.None;
        file.percent = 0;
    };
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.updateFiles = /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        this.currentFiles = this.parseFiles(files);
        this.updateModel(__spread(this.currentFiles));
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    };
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.updateModel = 
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var modelFiles = this.mapCleanUploadFiles(files);
        this.onModelChange ? this.onModelChange(modelFiles) : this.ngModelChange.emit(modelFiles);
    };
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @private
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    PoUploadComponent.prototype.uploadingHandler = 
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    /**
     * @private
     * @param {?} file
     * @param {?} percent
     * @return {?}
     */
    function (file, percent) {
        file.status = PoUploadStatus.Uploading;
        file.percent = percent;
    };
    // retorna os objetos do array sem as propriedades: percent e displayName
    // retorna os objetos do array sem as propriedades: percent e displayName
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    PoUploadComponent.prototype.mapCleanUploadFiles = 
    // retorna os objetos do array sem as propriedades: percent e displayName
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        /** @type {?} */
        var mapedByUploadFile = (/**
         * @param {?} progressFile
         * @return {?}
         */
        function (progressFile) {
            var percent = progressFile.percent, displayName = progressFile.displayName, uploadFile = __rest(progressFile, ["percent", "displayName"]);
            return uploadFile;
        });
        return files.map(mapedByUploadFile);
    };
    PoUploadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-upload',
                    template: "<po-field-container\r\n  [p-label]=\"label\"\r\n  [p-help]=\"help\"\r\n  [p-optional]=\"!required && optional\">\r\n\r\n  <div class=\"po-upload\">\r\n    <input\r\n      #inputFile\r\n      class=\"po-upload-input\"\r\n      type=\"file\"\r\n      [accept]=\"allowedExtensions\"\r\n      [attr.name]=\"name\"\r\n      [disabled]=\"isDisabled\"\r\n      [multiple]=\"isMultiple\"\r\n      [required]=\"required\"\r\n      (change)=\"onFileChange($event)\">\r\n\r\n    <po-upload-drag-drop *ngIf=\"displayDragDrop\"\r\n      [p-directory-compatible]=\"canHandleDirectory\"\r\n      [p-disabled]=\"isDisabled\"\r\n      [p-drag-drop-height]=\"dragDropHeight\"\r\n      [p-literals]=\"literals\"\r\n      (p-file-change)=\"onFileChangeDragDrop($event)\"\r\n      (p-select-files)=\"selectFiles()\">\r\n    </po-upload-drag-drop>\r\n\r\n    <po-button *ngIf=\"!hideSelectButton && !displayDragDrop\"\r\n      #uploadButton\r\n      class=\"po-upload-button\"\r\n      for=\"file\"\r\n      [p-disabled]=\"isDisabled\"\r\n      [p-label]=\"selectFileButtonLabel\"\r\n      (p-click)=\"selectFiles()\">\r\n    </po-button>\r\n\r\n    <po-upload-file-restrictions *ngIf=\"fileRestrictions && !hideRestrictionsInfo\"\r\n      class=\"po-upload-file-restrictions\"\r\n      [ngClass]=\"{'po-upload-file-restrictions-drag-drop' : displayDragDrop}\"\r\n      [p-allowed-extensions]=\"fileRestrictions?.allowedExtensions\"\r\n      [p-max-files]=\"maxFiles\"\r\n      [p-max-file-size]=\"fileRestrictions?.maxFileSize\"\r\n      [p-min-file-size]=\"fileRestrictions?.minFileSize\">\r\n    </po-upload-file-restrictions>\r\n\r\n    <div *ngIf=\"currentFiles && currentFiles.length\" class=\"po-upload-progress-container\">\r\n      <po-container\r\n        p-no-shadow\r\n        [p-height]=\"hasMoreThanFourItems ? 280 : 'auto'\"\r\n        [p-no-border]=\"!hasMoreThanFourItems\"\r\n        [p-no-padding]=\"!hasMoreThanFourItems\">\r\n        <div [ngClass]=\"{'po-upload-progress-container-area po-pt-2 po-pl-1': hasMoreThanFourItems}\">\r\n          <po-progress\r\n            *ngFor=\"let file of currentFiles; trackBy: trackByFn\"\r\n            [p-info]=\"infoByUploadStatus[file.status]?.text(file.percent)\"\r\n            [p-info-icon]=\"infoByUploadStatus[file.status]?.icon\"\r\n            [p-status]=\"progressStatusByFileStatus[file.status]\"\r\n            [p-text]=\"file.displayName\"\r\n            [p-value]=\"file.percent\"\r\n            (p-cancel)=\"cancel(file)\"\r\n            (p-retry)=\"uploadFiles([file])\">\r\n          </po-progress>\r\n        </div>\r\n      </po-container>\r\n    </div>\r\n\r\n    <po-button\r\n      *ngIf=\"displaySendButton\"\r\n      class=\"po-upload-send-button\"\r\n      [class.po-mt-3]=\"hasMoreThanFourItems\"\r\n      p-type=\"primary\"\r\n      [p-disabled]=\"hasAnyFileUploading(currentFiles)\"\r\n      [p-label]=\"literals.startSending\"\r\n      (p-click)=\"uploadFiles(currentFiles)\">\r\n    </po-button>\r\n  </div>\r\n\r\n</po-field-container>\r\n",
                    providers: [
                        PoI18nPipe,
                        PoUploadService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoUploadComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoUploadComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoUploadComponent.ctorParameters = function () { return [
        { type: PoUploadService },
        { type: Renderer2 },
        { type: PoI18nPipe },
        { type: PoNotificationService }
    ]; };
    PoUploadComponent.propDecorators = {
        inputFile: [{ type: ViewChild, args: ['inputFile', { read: ElementRef, static: true },] }],
        poUploadDragDropComponent: [{ type: ViewChild, args: [PoUploadDragDropComponent, { static: false },] }],
        uploadButton: [{ type: ViewChild, args: ['uploadButton', { static: false },] }]
    };
    return PoUploadComponent;
}(PoUploadBaseComponent));
if (false) {
    /** @type {?} */
    PoUploadComponent.prototype.infoByUploadStatus;
    /** @type {?} */
    PoUploadComponent.prototype.progressStatusByFileStatus;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.calledByCleanInputValue;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.inputFile;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.poUploadDragDropComponent;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.uploadButton;
    /** @type {?} */
    PoUploadComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.i18nPipe;
    /**
     * @type {?}
     * @private
     */
    PoUploadComponent.prototype.notification;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
var PoRichTextModalComponent = /** @class */ (function () {
    function PoRichTextModalComponent(languageService) {
        var _this = this;
        this.languageService = languageService;
        this.selection = document.getSelection();
        this.uploadRestrictions = {
            allowedExtensions: uploadRestrictions
        };
        this.literals = __assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: (/**
             * @return {?}
             */
            function () {
                _this.modal.close();
                _this.cleanUpFields();
            })
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: (/**
             * @return {?}
             */
            function () { return _this.insertElementRef(); })
        };
        this.modalLinkConfirmAction = {
            label: this.literals.insertLink,
            disabled: true,
            action: (/**
             * @return {?}
             */
            function () { return _this.toInsertLink(_this.urlLink, _this.urlLinkText); })
        };
        this.command = new EventEmitter();
    }
    Object.defineProperty(PoRichTextModalComponent.prototype, "modalTitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.modalType === 'image' ? this.literals.insertImage : this.literals.insertLink;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextModalComponent.prototype, "isUploadValid", {
        get: /**
         * @return {?}
         */
        function () {
            return !!(this.uploadModel && this.uploadModel.length);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextModalComponent.prototype, "isUrlValid", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextModalComponent.prototype, "modalPrimaryAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.modalType === 'image' ? this.modalConfirmAction : this.modalLinkConfirmAction;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoRichTextModalComponent.prototype.convertToBase64 = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var uploadImage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isUploadValid) return [3 /*break*/, 2];
                        uploadImage = this.uploadModel[0].rawFile;
                        return [4 /*yield*/, convertImageToBase64(uploadImage)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoRichTextModalComponent.prototype.emitCommand = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var command;
        if (value && this.modalType === PoRichTextModalType.Image) {
            command = 'insertImage';
            this.command.emit(({ command: command, value: value }));
        }
    };
    /**
     * @return {?}
     */
    PoRichTextModalComponent.prototype.formModelValidate = /**
     * @return {?}
     */
    function () {
        return this.modalLinkConfirmAction.disabled = this.modalLinkForm && this.modalLinkForm.invalid;
    };
    /**
     * @return {?}
     */
    PoRichTextModalComponent.prototype.insertElementRef = /**
     * @return {?}
     */
    function () {
        return __awaiter(this, void 0, void 0, function () {
            var uploadImage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.modalType === PoRichTextModalType.Image && !this.urlImage)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.convertToBase64()];
                    case 1:
                        uploadImage = _a.sent();
                        _a.label = 2;
                    case 2:
                        this.retrieveCursorPosition();
                        this.modal.close();
                        if (this.isUrlValid || this.isUploadValid) {
                            this.emitCommand(this.urlImage || uploadImage);
                        }
                        this.cleanUpFields();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @param {?} type
     * @return {?}
     */
    PoRichTextModalComponent.prototype.openModal = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        this.modalType = type;
        if (this.modalType === PoRichTextModalType.Image) {
            this.saveCursorPosition();
        }
        else {
            this.saveSelectionTextRange();
            this.formReset(this.modalLinkForm.control);
            this.formModelValidate();
        }
        this.modal.open();
    };
    /**
     * @private
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    PoRichTextModalComponent.prototype.checkIfIsEmpty = /**
     * @private
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    function (urlLink, urlLinkText) {
        return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextModalComponent.prototype.cleanUpFields = /**
     * @private
     * @return {?}
     */
    function () {
        this.urlImage = undefined;
        this.urlLink = undefined;
        this.urlLinkText = undefined;
        this.uploadModel = undefined;
    };
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    PoRichTextModalComponent.prototype.formReset = /**
     * @private
     * @param {?} control
     * @return {?}
     */
    function (control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextModalComponent.prototype.restoreSelection = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.savedSelection) {
            if (this.selection) {
                this.selection.removeAllRanges();
                this.selection.addRange(this.savedSelection);
            }
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextModalComponent.prototype.retrieveCursorPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextModalComponent.prototype.saveCursorPosition = /**
     * @private
     * @return {?}
     */
    function () {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextModalComponent.prototype.saveSelectionTextRange = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.selection.anchorNode !== null) {
            this.savedSelection = this.selection.getRangeAt(0);
            this.urlLinkText = this.selection.toString();
        }
        else {
            return null;
        }
    };
    /**
     * @private
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    PoRichTextModalComponent.prototype.toInsertLink = /**
     * @private
     * @param {?} urlLink
     * @param {?} urlLinkText
     * @return {?}
     */
    function (urlLink, urlLinkText) {
        this.modal.close();
        this.restoreSelection();
        /** @type {?} */
        var urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
        /** @type {?} */
        var command = 'InsertHTML';
        /** @type {?} */
        var value = { urlLink: urlLink, urlLinkText: urlLinkTextValue };
        this.command.emit({ command: command, value: value });
        this.cleanUpFields();
    };
    PoRichTextModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-rich-text-modal',
                    template: "<po-modal #modal\r\n  p-hide-close\r\n  [p-primary-action]=\"modalPrimaryAction\"\r\n  [p-secondary-action]=\"modalCancelAction\"\r\n  [p-title]=\"modalTitle\">\r\n\r\n  <ng-container *ngTemplateOutlet=\"modalType === 'image' ? modalImage : modalLink\"></ng-container>\r\n</po-modal>\r\n\r\n<ng-template #modalImage>\r\n  <form #modalImageForm=\"ngForm\">\r\n    <div class=\"po-row\">\r\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\r\n      <po-upload #upload\r\n        class=\"po-md-12\"\r\n        name=\"upload\"\r\n        [(ngModel)]=\"uploadModel\"\r\n        p-drag-drop-height=\"160\"\r\n        p-hide-restrictions-info\r\n        p-hide-send-button\r\n        p-url=\"x\"\r\n        [p-drag-drop]=\"!modal.isHidden\"\r\n        [p-disabled]=\"isUrlValid\"\r\n        [p-restrictions]=\"uploadRestrictions\">\r\n      </po-upload>\r\n    </div>\r\n\r\n    <div class=\"po-row\">\r\n      <po-url\r\n        class=\"po-md-12 po-mt-3\"\r\n        name=\"url\"\r\n        [(ngModel)]=\"urlImage\"\r\n        [p-label]=\"literals.urlImage\"\r\n        [p-disabled]=\"isUploadValid\">\r\n      </po-url>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n\r\n<ng-template #modalLink>\r\n  <form #modalLinkForm=\"ngForm\">\r\n    <div class=\"po-row\">\r\n      <po-input class=\"po-md-12 po-mb-2\"\r\n        name=\"urlLinkText\"\r\n        [(ngModel)]=\"urlLinkText\"\r\n        p-optional\r\n        [p-label]=\"literals.linkTextLabel\"\r\n        [p-placeholder]=\"literals.linkTextLabel\">\r\n      </po-input>\r\n\r\n      <po-url class=\"po-md-12\"\r\n        name=\"urlLink\"\r\n        [(ngModel)]=\"urlLink\"\r\n        p-label=\"Link\"\r\n        p-required\r\n        [p-help]=\"literals.linkUrlTextHelper\"\r\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\r\n        (p-change-model)=\"formModelValidate()\">\r\n      </po-url>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n"
                }] }
    ];
    /** @nocollapse */
    PoRichTextModalComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoRichTextModalComponent.propDecorators = {
        modal: [{ type: ViewChild, args: ['modal', { static: true },] }],
        modalImageForm: [{ type: ViewChild, args: ['modalImageForm', { static: false },] }],
        upload: [{ type: ViewChild, args: ['upload', { static: true },] }],
        modalImage: [{ type: ViewChild, args: ['modalImage', { static: true },] }],
        modalLink: [{ type: ViewChild, args: ['modalLink', { static: true },] }],
        modalLinkForm: [{ type: ViewChild, args: ['modalLinkForm', { static: false },] }],
        command: [{ type: Output, args: ['p-command',] }]
    };
    return PoRichTextModalComponent;
}());
if (false) {
    /** @type {?} */
    PoRichTextModalComponent.prototype.modalType;
    /** @type {?} */
    PoRichTextModalComponent.prototype.savedCursorPosition;
    /** @type {?} */
    PoRichTextModalComponent.prototype.selection;
    /** @type {?} */
    PoRichTextModalComponent.prototype.uploadModel;
    /** @type {?} */
    PoRichTextModalComponent.prototype.uploadRestrictions;
    /** @type {?} */
    PoRichTextModalComponent.prototype.urlImage;
    /** @type {?} */
    PoRichTextModalComponent.prototype.urlLink;
    /** @type {?} */
    PoRichTextModalComponent.prototype.urlLinkText;
    /**
     * @type {?}
     * @private
     */
    PoRichTextModalComponent.prototype.savedSelection;
    /** @type {?} */
    PoRichTextModalComponent.prototype.literals;
    /** @type {?} */
    PoRichTextModalComponent.prototype.modalCancelAction;
    /** @type {?} */
    PoRichTextModalComponent.prototype.modalConfirmAction;
    /** @type {?} */
    PoRichTextModalComponent.prototype.modalLinkConfirmAction;
    /** @type {?} */
    PoRichTextModalComponent.prototype.modal;
    /** @type {?} */
    PoRichTextModalComponent.prototype.modalImageForm;
    /** @type {?} */
    PoRichTextModalComponent.prototype.upload;
    /** @type {?} */
    PoRichTextModalComponent.prototype.modalImage;
    /** @type {?} */
    PoRichTextModalComponent.prototype.modalLink;
    /** @type {?} */
    PoRichTextModalComponent.prototype.modalLinkForm;
    /** @type {?} */
    PoRichTextModalComponent.prototype.command;
    /**
     * @type {?}
     * @private
     */
    PoRichTextModalComponent.prototype.languageService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poRichTextDefaultColor = '#000000';
var PoRichTextToolbarComponent = /** @class */ (function () {
    function PoRichTextToolbarComponent(languageService) {
        var _this = this;
        this.languageService = languageService;
        this.selection = document.getSelection();
        this.literals = __assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.alignButtons = [
            {
                command: 'justifyleft',
                icon: 'po-icon-align-left',
                tooltip: this.literals.left,
                action: this.emitAlignCommand.bind(this, 'justifyleft'),
                selected: true
            },
            {
                command: 'justifycenter',
                icon: 'po-icon-align-center',
                tooltip: this.literals.center,
                action: this.emitAlignCommand.bind(this, 'justifycenter')
            },
            {
                command: 'justifyright',
                icon: 'po-icon-align-right',
                tooltip: this.literals.right,
                action: this.emitAlignCommand.bind(this, 'justifyright')
            },
            {
                command: 'justifyfull',
                icon: 'po-icon-align-justify',
                tooltip: this.literals.justify,
                action: this.emitAlignCommand.bind(this, 'justifyfull')
            }
        ];
        this.formatButtons = [
            {
                command: 'bold',
                icon: 'po-icon-text-bold',
                tooltip: this.literals.bold,
                action: this.emitCommand.bind(this, 'bold')
            },
            {
                command: 'italic',
                icon: 'po-icon-text-italic',
                tooltip: this.literals.italic,
                action: this.emitCommand.bind(this, 'italic')
            },
            {
                command: 'underline',
                icon: 'po-icon-text-underline',
                tooltip: this.literals.underline,
                action: this.emitCommand.bind(this, 'underline')
            }
        ];
        this.listButtons = [
            {
                command: 'insertUnorderedList',
                icon: 'po-icon-list',
                tooltip: this.literals.unorderedList,
                action: this.emitCommand.bind(this, 'insertUnorderedList')
            }
        ];
        this.linkButtons = [
            {
                command: 'Createlink',
                icon: 'po-icon-link',
                tooltip: this.literals.insertLink + " (Ctrl + L)",
                action: (/**
                 * @return {?}
                 */
                function () { return _this.modal.emit(PoRichTextModalType.Link); })
            }
        ];
        this.mediaButtons = [
            {
                tooltip: this.literals.insertImage,
                icon: 'po-icon-picture',
                action: (/**
                 * @return {?}
                 */
                function () { return _this.modal.emit(PoRichTextModalType.Image); })
            }
        ];
        this.command = new EventEmitter();
        this.modal = new EventEmitter();
    }
    Object.defineProperty(PoRichTextToolbarComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = value;
            this.toggleDisableButtons(this._readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextToolbarComponent.prototype, "isInternetExplorer", {
        get: /**
         * @return {?}
         */
        function () {
            return isIE();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.removeButtonFocus();
        this.setColorInColorPicker(poRichTextDefaultColor);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.changeTextColor = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var command = 'foreColor';
        this.command.emit({ command: command, value: value });
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.setButtonsStates = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (!this.readonly) {
            this.alignButtons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { return button.selected = obj.commands.includes(button.command); }));
            this.formatButtons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) { return button.selected = obj.commands.includes(button.command); }));
            this.listButtons[0].selected = obj.commands.includes(this.listButtons[0].command);
            this.linkButtons[0].selected = obj.commands.includes(this.linkButtons[0].command);
            this.setColorInColorPicker(obj.hexColor);
        }
    };
    /**
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.shortcutTrigger = /**
     * @return {?}
     */
    function () {
        this.modal.emit(PoRichTextModalType.Link);
    };
    /**
     * @private
     * @param {?} command
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.emitAlignCommand = /**
     * @private
     * @param {?} command
     * @return {?}
     */
    function (command) {
        /** @type {?} */
        var index = this.alignButtons.findIndex((/**
         * @param {?} btn
         * @return {?}
         */
        function (btn) { return btn.command === command; }));
        if (this.alignButtons[index].selected) {
            this.alignButtons[index].selected = false;
        }
        this.command.emit(command);
    };
    /**
     * @private
     * @param {?} command
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.emitCommand = /**
     * @private
     * @param {?} command
     * @return {?}
     */
    function (command) {
        this.command.emit(command);
    };
    /**
     * @private
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.removeButtonFocus = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var buttons = this.toolbarElement.nativeElement.querySelectorAll('button');
        buttons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { return button.setAttribute('tabindex', '-1'); }));
    };
    /**
     * @private
     * @param {?} color
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.setColorInColorPicker = /**
     * @private
     * @param {?} color
     * @return {?}
     */
    function (color) {
        this.colorPickerInput.nativeElement.value = color;
    };
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    PoRichTextToolbarComponent.prototype.toggleDisableButtons = /**
     * @private
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.alignButtons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { return button.disabled = state; }));
        this.formatButtons.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) { return button.disabled = state; }));
        this.listButtons[0].disabled = state;
        this.linkButtons[0].disabled = state;
        this.mediaButtons[0].disabled = state;
    };
    PoRichTextToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-rich-text-toolbar',
                    template: "<div class=\"po-rich-text-toolbar\" #toolbarElement>\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"multiple\" [p-buttons]=\"formatButtons\">\n    </po-button-group>\n  </div>\n\n  <div *ngIf=\"!isInternetExplorer\" class=\"po-rich-text-toolbar-button-align\">\n    <div class=\"po-rich-text-toolbar-color-picker-container\">\n      <button class=\"po-button po-text-ellipsis po-rich-text-toolbar-color-picker-button\"\n        [disabled]=\"readonly\"\n        [p-tooltip]=\"literals.textColor\">\n        <input\n          #colorPickerInput\n          class=\"po-rich-text-toolbar-color-picker-input\"\n          type=\"color\"\n          [disabled]=\"readonly\"\n          (change)=\"changeTextColor($event.target.value)\">\n      </button>\n    </div>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"alignButtons\">\n    </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group p-toggle=\"single\" [p-buttons]=\"listButtons\">\n    </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"linkButtons\">\n    </po-button-group>\n  </div>\n\n  <div class=\"po-rich-text-toolbar-button-align\">\n    <po-button-group [p-buttons]=\"mediaButtons\">\n    </po-button-group>\n  </div>\n\n</div>\n\n\n"
                }] }
    ];
    /** @nocollapse */
    PoRichTextToolbarComponent.ctorParameters = function () { return [
        { type: PoLanguageService }
    ]; };
    PoRichTextToolbarComponent.propDecorators = {
        colorPickerInput: [{ type: ViewChild, args: ['colorPickerInput', { read: ElementRef, static: false },] }],
        toolbarElement: [{ type: ViewChild, args: ['toolbarElement', { static: true },] }],
        readonly: [{ type: Input, args: ['p-readonly',] }],
        command: [{ type: Output, args: ['p-command',] }],
        modal: [{ type: Output, args: ['p-modal',] }]
    };
    return PoRichTextToolbarComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRichTextToolbarComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    PoRichTextToolbarComponent.prototype.selection;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.literals;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.alignButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.formatButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.listButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.linkButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.mediaButtons;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.colorPickerInput;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.toolbarElement;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.command;
    /** @type {?} */
    PoRichTextToolbarComponent.prototype.modal;
    /**
     * @type {?}
     * @private
     */
    PoRichTextToolbarComponent.prototype.languageService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoInputBaseComponent
 *
 * \@example
 *
 * <example name="po-input-basic" title="Portinari Input Basic">
 *  <file name="sample-po-input-basic/sample-po-input-basic.component.html"> </file>
 *  <file name="sample-po-input-basic/sample-po-input-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-input-labs" title="Portinari Input Labs">
 *  <file name="sample-po-input-labs/sample-po-input-labs.component.html"> </file>
 *  <file name="sample-po-input-labs/sample-po-input-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-input-reactive-form" title="Portinari Input - Reactive Form">
 *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.html"> </file>
 *  <file name="sample-po-input-reactive-form/sample-po-input-reactive-form.component.ts"> </file>
 * </example>
 */
var PoInputComponent = /** @class */ (function (_super) {
    __extends(PoInputComponent, _super);
    function PoInputComponent(el) {
        return _super.call(this, el) || this;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    PoInputComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    PoInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-input',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-error-pattern]=\"getErrorPattern()\">\n  </po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoInputComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoInputComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoInputComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return PoInputComponent;
}(PoInputGeneric));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
PoNumberBaseComponent = /** @class */ (function (_super) {
    __extends(PoNumberBaseComponent, _super);
    function PoNumberBaseComponent(elementRef) {
        var _this = _super.call(this, elementRef) || this;
        _this.type = 'number';
        return _this;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    PoNumberBaseComponent.prototype.eventOnInput = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.mask) {
            /** @type {?} */
            var value = e.target.value;
            /** @type {?} */
            var valueMaxlength = this.validMaxLength(this.maxlength, value);
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    PoNumberBaseComponent.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        if (maxlength && value.length > maxlength) {
            /** @type {?} */
            var substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoNumberBaseComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else { // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoNumberBaseComponent.prototype.isEndWithDot = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoNumberBaseComponent.prototype.formatNumber = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value ? Number(value) : null;
    };
    return PoNumberBaseComponent;
}(PoInputGeneric));
if (false) {
    /** @type {?} */
    PoNumberBaseComponent.prototype.type;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoInputBaseComponent
 *
 * \@description
 *
 * po-number é um input específico para receber apenas números.
 * É possível configurar um valor mínimo, máximo e um step com p-min, p-max e p-step,
 * respectivamente.
 *
 * \@example
 *
 * <example name="po-number-basic" title="Portinari Number Basic">
 *  <file name="sample-po-number-basic/sample-po-number-basic.component.html"> </file>
 *  <file name="sample-po-number-basic/sample-po-number-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-number-labs" title="Portinari Number Labs">
 *  <file name="sample-po-number-labs/sample-po-number-labs.component.html"> </file>
 *  <file name="sample-po-number-labs/sample-po-number-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-number-calculate" title="Portinari Number - Calculate">
 *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.html"> </file>
 *  <file name="sample-po-number-calculate/sample-po-number-calculate.component.ts"> </file>
 * </example>
 */
var PoNumberComponent = /** @class */ (function (_super) {
    __extends(PoNumberComponent, _super);
    function PoNumberComponent(el) {
        var _this = _super.call(this, el) || this;
        /**
         * \@optional
         *
         * \@description
         *
         * Intervalo.
         *
         * \@default 1
         */
        _this.step = '1';
        return _this;
    }
    Object.defineProperty(PoNumberComponent.prototype, "setMin", {
        set: /**
         * @param {?} min
         * @return {?}
         */
        function (min) {
            /** @type {?} */
            var parsedInt = parseInt(min, 10);
            this.min = !isNaN(parsedInt) ? parsedInt : undefined;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNumberComponent.prototype, "setMax", {
        set: /**
         * @param {?} max
         * @return {?}
         */
        function (max) {
            /** @type {?} */
            var parsedInt = parseInt(max, 10);
            this.max = !isNaN(parsedInt) ? parsedInt : undefined;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoNumberComponent.prototype.extraValidation = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (minFailed(this.min, abstractControl.value)) {
            return { min: {
                    valid: false,
                } };
        }
        if (maxFailed(this.max, abstractControl.value)) {
            return { max: {
                    valid: false,
                } };
        }
        return null;
    };
    PoNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-number',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <input #inp\n      class=\"po-input\"\n      type=\"number\"\n      [attr.max]=\"max\"\n      [attr.min]=\"min\"\n      [attr.name]=\"name\"\n      [attr.step]=\"step\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (blur)=\"eventOnBlur($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-default-value]=\"null\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\">\n      </po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-error-pattern]=\"getErrorPattern()\">\n  </po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoNumberComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoNumberComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoNumberComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PoNumberComponent.propDecorators = {
        setMin: [{ type: Input, args: ['p-min',] }],
        setMax: [{ type: Input, args: ['p-max',] }],
        step: [{ type: Input, args: ['p-step',] }]
    };
    return PoNumberComponent;
}(PoNumberBaseComponent));
if (false) {
    /**
     * Valor mínimo.
     * @type {?}
     */
    PoNumberComponent.prototype.min;
    /**
     * Valor máximo.
     * @type {?}
     */
    PoNumberComponent.prototype.max;
    /**
     * \@optional
     *
     * \@description
     *
     * Intervalo.
     *
     * \@default 1
     * @type {?}
     */
    PoNumberComponent.prototype.step;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoInputBaseComponent
 *
 * \@description
 * O po-password é um input específico para senhas. Já possui tipo, estilo e ícone predefinidos.
 *
 * \@example
 *
 * <example name="po-password-basic" title="Portinari Password Basic">
 *   <file name="sample-po-password-basic/sample-po-password-basic.component.html"> </file>
 *   <file name="sample-po-password-basic/sample-po-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-password-labs" title="Portinari Password Labs">
 *   <file name="sample-po-password-labs/sample-po-password-labs.component.html"> </file>
 *   <file name="sample-po-password-labs/sample-po-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-password-reset" title="Portinari Password - Reset">
 *   <file name="sample-po-password-reset/sample-po-password-reset.component.html"> </file>
 *   <file name="sample-po-password-reset/sample-po-password-reset.component.ts"> </file>
 * </example>
 */
var PoPasswordComponent = /** @class */ (function (_super) {
    __extends(PoPasswordComponent, _super);
    function PoPasswordComponent(el) {
        var _this = _super.call(this, el) || this;
        _this._hidePasswordPeek = false;
        _this.type = 'password';
        _this.visiblePassword = false;
        return _this;
    }
    Object.defineProperty(PoPasswordComponent.prototype, "hidePasswordPeek", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hidePasswordPeek;
        },
        /**
         * @optional
         *
         * @description
         *
         * Permite esconder a função de espiar a senha digitada.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Permite esconder a função de espiar a senha digitada.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hidePasswordPeek = convertToBoolean(value);
            if (value) {
                this.visiblePassword = false;
                this.type = 'password';
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} c
     * @return {?}
     */
    PoPasswordComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @return {?}
     */
    PoPasswordComponent.prototype.showPassword = /**
     * @return {?}
     */
    function () {
        this.visiblePassword = !this.visiblePassword;
        this.type = this.type === 'password' ? 'text' : 'password';
    };
    PoPasswordComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-password',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <div class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon po-icon-lock\"\n        [class.po-field-icon-disabled]=\"disabled\">\n      </span>\n    </div>\n\n    <input #inp\n      class=\"po-input po-input-icon-left\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-double-icon-right]=\"clean && inp.value && !hidePasswordPeek\"\n      [class.po-input-icon-right]=\"clean || !hidePasswordPeek\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"disabled ? 'password' : type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean\n        class=\"po-icon po-field-icon\"\n        [p-element-ref]=\"inputEl\"\n        (p-change-event)=\"clear($event)\">\n      </po-clean>\n\n      <span *ngIf=\"!hidePasswordPeek && !disabled\"\n        class=\"po-icon po-field-icon\"\n        [ngClass]=\"visiblePassword ? 'po-icon-eye' : 'po-icon-eye-off po-field-icon-disabled'\"\n        (click)=\"showPassword()\">\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-error-pattern]=\"getErrorPattern()\">\n  </po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoPasswordComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoPasswordComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoPasswordComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PoPasswordComponent.propDecorators = {
        hidePasswordPeek: [{ type: Input, args: ['p-hide-password-peek',] }]
    };
    return PoPasswordComponent;
}(PoInputGeneric));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPasswordComponent.prototype._hidePasswordPeek;
    /** @type {?} */
    PoPasswordComponent.prototype.type;
    /** @type {?} */
    PoPasswordComponent.prototype.visiblePassword;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poRadioGroupColumnsDefaultLength = 6;
/** @type {?} */
var poRadioGroupColumnsTotalLength = 12;
/**
 * \@description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 * @abstract
 */
var PoRadioGroupBaseComponent = /** @class */ (function () {
    function PoRadioGroupBaseComponent() {
        this._columns = poRadioGroupColumnsDefaultLength;
        this._disabled = false;
        this._required = false;
        this.mdColumns = poRadioGroupColumnsDefaultLength;
        this.onChangePropagate = null;
        /**
         * Evento ao alterar valor do campo.
         */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoRadioGroupBaseComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a quantidade de colunas para exibição das opções.
         *
         * **Considerações:**
         *  - É possível exibir as opções entre `1` e `4` colunas.
         *  - O número máximo de colunas é invariável nas seguintes resoluções:
         *    + `sm`: `1`
         *    + `md`: `2`
         *
         * @default `2`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a quantidade de colunas para exibição das opções.
         *
         * **Considerações:**
         *  - É possível exibir as opções entre `1` e `4` colunas.
         *  - O número máximo de colunas é invariável nas seguintes resoluções:
         *    + `sm`: `1`
         *    + `md`: `2`
         *
         * \@default `2`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var columns = convertToInt(value, poRadioGroupColumnsDefaultLength);
            this._columns = this.getGridSystemColumns(columns, 4);
            this.mdColumns = this.getGridSystemColumns(columns, 2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRadioGroupBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRadioGroupBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRadioGroupBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Lista de opções que serão exibidas.
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
         */
        set: /**
         * Lista de opções que serão exibidas.
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = value;
            removeDuplicatedOptions(this.options);
        },
        enumerable: true,
        configurable: true
    });
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    /**
     * @param {?} changedValue
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.changeValue = 
    // Função que controla quando deve ser emitido onChange e atualiza o Model
    /**
     * @param {?} changedValue
     * @return {?}
     */
    function (changedValue) {
        if (this.onChangePropagate) {
            this.onChangePropagate(changedValue);
        }
        if (this.value !== changedValue) {
            this.change.emit(changedValue);
        }
        this.value = changedValue;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangePropagate = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.validatorChange = fn;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    };
    /**
     * @param {?} modelValue
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.writeValue = /**
     * @param {?} modelValue
     * @return {?}
     */
    function (modelValue) {
        this.value = modelValue;
        // Busca radio com o valor especificado
        /** @type {?} */
        var element = this.getElementByValue(modelValue);
        if (!element && this.onChangePropagate) {
            this.value = undefined;
            this.onChangePropagate(this.value);
        }
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.checkColumnsRange = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var minColumns = 1;
        return columns >= minColumns && columns <= maxColumns;
    };
    /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.getGridSystemColumns = /**
     * @private
     * @param {?} columns
     * @param {?} maxColumns
     * @return {?}
     */
    function (columns, maxColumns) {
        /** @type {?} */
        var gridSystemColumns = poRadioGroupColumnsTotalLength / columns;
        return this.checkColumnsRange(columns, maxColumns) ? gridSystemColumns : poRadioGroupColumnsDefaultLength;
    };
    /**
     * @private
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.validateModel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    PoRadioGroupBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        columns: [{ type: Input, args: ['p-columns',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        required: [{ type: Input, args: ['p-required',] }],
        options: [{ type: Input, args: ['p-options',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        change: [{ type: Output, args: ['p-change',] }]
    };
    return PoRadioGroupBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype._required;
    /** @type {?} */
    PoRadioGroupBaseComponent.prototype.mdColumns;
    /** @type {?} */
    PoRadioGroupBaseComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype.onChangePropagate;
    /**
     * @type {?}
     * @private
     */
    PoRadioGroupBaseComponent.prototype.validatorChange;
    /**
     * Nome das opções.
     * @type {?}
     */
    PoRadioGroupBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoRadioGroupBaseComponent.prototype.optional;
    /**
     * Evento ao alterar valor do campo.
     * @type {?}
     */
    PoRadioGroupBaseComponent.prototype.change;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoRadioGroupBaseComponent.prototype.getElementByValue = function (value) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoRadioGroupBaseComponent
 *
 * \@example
 *
 * <example name="po-radio-group-basic" title="Portinari Radio Group Basic">
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.html"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-labs" title="Portinari Radio Group Labs">
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.html"> </file>
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator" title="Portinari Radio Group - Translator">
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.html"> </file>
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator-reactive-form" title="Portinari Radio Group - Translator Reactive Form">
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.html"> </file>
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.ts"> </file>
 * </example>
 *
 */
var PoRadioGroupComponent = /** @class */ (function (_super) {
    __extends(PoRadioGroupComponent, _super);
    function PoRadioGroupComponent(differs) {
        var _this = _super.call(this) || this;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    /**
     * @return {?}
     */
    PoRadioGroupComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
        }
    };
    /**
     * @param {?} value
     * @param {?} disabled
     * @return {?}
     */
    PoRadioGroupComponent.prototype.eventClick = /**
     * @param {?} value
     * @param {?} disabled
     * @return {?}
     */
    function (value, disabled) {
        if (!disabled) {
            this.changeValue(value);
        }
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRadioGroupComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
     *
     * focusRadio() {
     *   this.radio.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRadioGroupComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
     *
     * focusRadio() {
     *   this.radio.focus();
     * }
     * ```
     * @return {?}
     */
    PoRadioGroupComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRadioGroupComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
     *
     * focusRadio() {
     *   this.radio.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.radioLabels && !this.disabled) {
            /** @type {?} */
            var radioLabel = this.radioLabels.find((/**
             * @param {?} _
             * @param {?} index
             * @return {?}
             */
            function (_, index) { return !_this.options[index].disabled; }));
            if (radioLabel) {
                radioLabel.nativeElement.focus();
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoRadioGroupComponent.prototype.getElementByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.inputEl.nativeElement.querySelector("input[value='" + value + "']");
    };
    /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    PoRadioGroupComponent.prototype.onKeyUp = /**
     * @param {?} event
     * @param {?} value
     * @return {?}
     */
    function (event, value) {
        /** @type {?} */
        var key = event.keyCode || event.which;
        if (this.isArrowKey(key)) {
            this.changeValue(value);
        }
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    PoRadioGroupComponent.prototype.isArrowKey = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return key >= 37 && key <= 40;
    };
    PoRadioGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-radio-group',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-row po-pt-1 po-pb-1\" #inp>\n    <div *ngFor=\"let option of options\"\n      class=\"po-radio-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\">\n\n      <input #inputRadio\n        class=\"po-radio-group-input\"\n        type=\"radio\"\n        [attr.name]=\"name\"\n        [checked]=\"value === option.value\"\n        [class.po-radio-group-input-checked]=\"value === option.value\"\n        [disabled]=\"option.disabled === true || disabled\"\n        [required]=\"required\"\n        [value]=\"option.value\"\n        (keyup)=\"onKeyUp($event, option.value)\">\n        <label\n          class=\"po-radio-group-label\"\n          [class.po-clickable]=\"!inputRadio.disabled\"\n          [for]=\"name\"\n          (click)=\"eventClick(option.value, option.disabled === true || disabled)\">\n        {{ option.label }}\n      </label>\n    </div>\n  </div>\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoRadioGroupComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoRadioGroupComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoRadioGroupComponent.ctorParameters = function () { return [
        { type: IterableDiffers }
    ]; };
    PoRadioGroupComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }],
        radioLabels: [{ type: ViewChildren, args: ['inputRadio',] }]
    };
    return PoRadioGroupComponent;
}(PoRadioGroupBaseComponent));
if (false) {
    /**
     * Label do campo.
     * @type {?}
     */
    PoRadioGroupComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoRadioGroupComponent.prototype.help;
    /** @type {?} */
    PoRadioGroupComponent.prototype.inputEl;
    /** @type {?} */
    PoRadioGroupComponent.prototype.radioLabels;
    /** @type {?} */
    PoRadioGroupComponent.prototype.differ;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.
 * @abstract
 */
var PoSelectBaseComponent = /** @class */ (function () {
    function PoSelectBaseComponent(element, changeDetector) {
        this.element = element;
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        /**
         * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        this.readyToValidation = false;
        this.element = element;
        this.changeDetector = changeDetector;
    }
    Object.defineProperty(PoSelectBaseComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        /**
         * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface PoSelectOption.
         * Caso esta lista estiver vazia, o model será undefined.
         */
        set: /**
         * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface PoSelectOption.
         * Caso esta lista estiver vazia, o model será undefined.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this._options = options;
            removeDuplicatedOptions(this._options);
            removeUndefinedAndNullOptions(this._options);
            this.onUpdateOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSelectBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSelectBaseComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente para leitura.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será somente para leitura.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._readonly = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSelectBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    PoSelectBaseComponent.prototype.callModelChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoSelectBaseComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.change.emit(value);
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoSelectBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this._required, this._disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
        return null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoSelectBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoSelectBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoSelectBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onValidatorChange = fn;
    };
    /**
     * @private
     * @return {?}
     */
    PoSelectBaseComponent.prototype.validateModel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onValidatorChange) {
            this.onValidatorChange();
        }
    };
    PoSelectBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        name: [{ type: Input, args: ['name',] }],
        help: [{ type: Input, args: ['p-help',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        options: [{ type: Input, args: ['p-options',] }],
        change: [{ type: Output, args: ['p-change',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        readonly: [{ type: Input, args: ['p-readonly',] }],
        required: [{ type: Input, args: ['p-required',] }]
    };
    return PoSelectBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype._options;
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    PoSelectBaseComponent.prototype.onValidatorChange;
    /**
     * Adiciona uma label no componente.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.label;
    /**
     * Nome do componente.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.name;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.help;
    /**
     * Mensagem que aparecerá enquanto nenhuma opção estiver selecionada.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.placeholder;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoSelectBaseComponent.prototype.optional;
    /**
     * Deve ser informada uma função que será disparada quando houver alterações no ngModel.
     * @type {?}
     */
    PoSelectBaseComponent.prototype.change;
    /** @type {?} */
    PoSelectBaseComponent.prototype.ngModelChange;
    /** @type {?} */
    PoSelectBaseComponent.prototype.changeDetector;
    /** @type {?} */
    PoSelectBaseComponent.prototype.onModelChange;
    /** @type {?} */
    PoSelectBaseComponent.prototype.onModelTouched;
    /** @type {?} */
    PoSelectBaseComponent.prototype.readyToValidation;
    /**
     * @type {?}
     * @protected
     */
    PoSelectBaseComponent.prototype.clickoutListener;
    /** @type {?} */
    PoSelectBaseComponent.prototype.element;
    /**
     * @abstract
     * @return {?}
     */
    PoSelectBaseComponent.prototype.onUpdateOptions = function () { };
    /**
     * @abstract
     * @param {?} selectOption
     * @return {?}
     */
    PoSelectBaseComponent.prototype.updateModel = function (selectOption) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoSelectBaseComponent.prototype.writeValue = function (value) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoSelectComponent
 *
 * \@description
 *
 * Esta diretiva permite personalizar o conteúdo dos itens exibidos na lista suspensa do componente.
 *
 * > Quando utilizada em _mobile_ será exibido o componente nativo.
 *
 * Para personalizar o conteúdo de cada item da lista deve-se utilizar a diretiva `p-select-option-template` com `ng-template`
 * dentro da tag `po-select`.
 *
 * Para obter a referência do item atual, use `let-option`, com isso você terá acesso aos valores e poderá personalizar sua exibição.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-select
 *   name="select"
 *   [(ngModel)]="select"
 *   [p-options]="options">
 *     <ng-template p-select-option-template let-option>
 *       <option-template [option]="option"></option-template>
 *     </ng-template>
 * </po-select>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-select
 *   name="select"
 *   [(ngModel)]="select"
 *   [p-options]="options">
 *     <div *p-select-option-template="let option">
 *       <option-template [option]="option"></option-template>
 *     </div>
 * </po-select>
 * ...
 *
 * ```
 */
var PoSelectOptionTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoSelectOptionTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoSelectOptionTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-select-option-template]'
                },] }
    ];
    /** @nocollapse */
    PoSelectOptionTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return PoSelectOptionTemplateDirective;
}());
if (false) {
    /** @type {?} */
    PoSelectOptionTemplateDirective.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poSelectContentOffset = 8;
/** @type {?} */
var poSelectContentPositionDefault = 'bottom';
/**
 * \@docsExtends PoSelectBaseComponent
 *
 * \@example
 *
 * <example name="po-select-basic" title="Portinari Select Basic">
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-labs" title="Portinari Select Labs">
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-customer-registration" title="Portinari Select - Customer registration">
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
 * </example>
 */
var PoSelectComponent = /** @class */ (function (_super) {
    __extends(PoSelectComponent, _super);
    function PoSelectComponent(element, changeDetector, differs, renderer, controlPosition) {
        var _this = _super.call(this, element, changeDetector) || this;
        _this.renderer = renderer;
        _this.controlPosition = controlPosition;
        _this.isMobile = isMobile();
        _this.open = false;
        _this.selectIcon = 'po-icon-arrow-down';
        _this.onScroll = (/**
         * @return {?}
         */
        function () {
            _this.controlPosition.adjustPosition(poSelectContentPositionDefault);
        });
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(PoSelectComponent.prototype, "isInvisibleSelectNative", {
        get: /**
         * @return {?}
         */
        function () {
            return this.readonly && this.isMobile;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} $event
     * @return {?}
     */
    PoSelectComponent.prototype.onKeydown = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var charCode = $event.which || $event.keyCode;
        // Tratamentos para quando o readonly for ativado.
        if (this.readonly) {
            // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
            if (charCode !== PoKeyCodeEnum.tab) {
                this.disableDefaultEventAndToggleButton();
                $event.preventDefault();
            }
            return;
        }
        // Seleciona os itens com as teclas "up" e "down"
        if ((!this.open || $event.altKey) && (charCode === PoKeyCodeEnum.arrowDown || charCode === PoKeyCodeEnum.arrowUp)) {
            this.disableDefaultEventAndToggleButton();
        }
        // Abre o po-select com as teclas "enter" e "espaço"
        if (charCode === PoKeyCodeEnum.enter || charCode === PoKeyCodeEnum.space) {
            this.disableDefaultEventAndToggleButton();
        }
        // Fecha o po-select com a tecla "tab"
        if (this.open && charCode === PoKeyCodeEnum.tab) {
            $event.preventDefault();
            this.toggleButton();
        }
    };
    /**
     * @return {?}
     */
    PoSelectComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
            removeUndefinedAndNullOptions(this.options);
        }
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     * @return {?}
     */
    PoSelectComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.selectElement.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoSelectComponent.prototype.hideDropDown = /**
     * @return {?}
     */
    function () {
        this.selectIcon = 'po-icon-arrow-down';
        this.selector('.po-select-container').classList.remove('po-select-show');
        this.open = false;
        this.changeDetector.markForCheck();
        this.selectElement.nativeElement.focus();
        this.removeListeners();
    };
    /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    PoSelectComponent.prototype.isEqual = /**
     * @param {?} value
     * @param {?} inputValue
     * @return {?}
     */
    function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    /**
     * @param {?} option
     * @return {?}
     */
    PoSelectComponent.prototype.onOptionClick = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        this.updateModel(option);
        this.toggleButton();
    };
    // Altera o valor ao selecionar um item.
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    PoSelectComponent.prototype.onSelectChange = 
    // Altera o valor ao selecionar um item.
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value && this.options && this.options.length) {
            /** @type {?} */
            var optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.updateModel(optionFound);
                this.setScrollPosition(optionFound.value);
            }
        }
    };
    /**
     * @return {?}
     */
    PoSelectComponent.prototype.onUpdateOptions = /**
     * @return {?}
     */
    function () {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    };
    /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    PoSelectComponent.prototype.scrollValue = /**
     * @param {?} index
     * @param {?} clientHeight
     * @return {?}
     */
    function (index, clientHeight) {
        /** @type {?} */
        var heightScrollValue = (index) * this.getSelectItemHeight();
        return this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0;
    };
    /**
     * @param {?} query
     * @return {?}
     */
    PoSelectComponent.prototype.selector = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    /**
     * @return {?}
     */
    PoSelectComponent.prototype.toggleButton = /**
     * @return {?}
     */
    function () {
        this.open ? this.hideDropDown() : this.showDropdown();
    };
    // Atualiza valores
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    PoSelectComponent.prototype.updateModel = 
    // Atualiza valores
    /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        if (this.selectedValue !== option.value) {
            this.selectedValue = option.value;
            this.selectElement.nativeElement.value = option.value;
            this.callModelChange(option.value);
            this.displayValue = option.label;
            this.onChange(option.value);
        }
    };
    // Esconde Content do Select quando for clicado fora
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    PoSelectComponent.prototype.wasClickedOnToggle = 
    // Esconde Content do Select quando for clicado fora
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    };
    // Recebe as alterações do model
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    PoSelectComponent.prototype.writeValue = 
    // Recebe as alterações do model
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var optionFound = this.findOptionValue(value);
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound.value;
            this.displayValue = (optionFound.label);
            this.setScrollPosition(optionFound.value);
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.callModelChange(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    };
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    PoSelectComponent.prototype.disableDefaultEventAndToggleButton = 
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.selectElement.nativeElement.style.display = 'none';
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.selectElement.nativeElement.style.display = 'block';
            _this.toggleButton();
        }));
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoSelectComponent.prototype.findOptionValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        return this.options.find((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return _this.isEqual(option.value, value); }));
    };
    /**
     * @private
     * @return {?}
     */
    PoSelectComponent.prototype.getSelectItemHeight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectItem = this.selector('div.po-select-item');
        return selectItem && selectItem.clientHeight;
    };
    /**
     * @private
     * @return {?}
     */
    PoSelectComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.wasClickedOnToggle(event);
        }));
        this.eventResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.hideDropDown();
        }));
        window.addEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoSelectComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        this.eventResizeListener();
        window.removeEventListener('scroll', this.onScroll, true);
    };
    /**
     * @private
     * @return {?}
     */
    PoSelectComponent.prototype.setPositionDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        this.controlPosition.setElements(this.contentList.nativeElement, poSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
        this.controlPosition.adjustPosition(poSelectContentPositionDefault);
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoSelectComponent.prototype.setScrollPosition = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var ulDropdpwn = this.element.nativeElement.querySelector('ul.po-select-content');
        if (value && this.options && this.options.length) {
            /** @type {?} */
            var optionFound = this.findOptionValue(value);
            if (optionFound) {
                /** @type {?} */
                var index = this.options.indexOf(optionFound);
                ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoSelectComponent.prototype.showDropdown = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.readonly) {
            this.selectElement.nativeElement.focus();
            this.selectIcon = 'po-icon-arrow-up';
            this.selector('.po-select-container').classList.add('po-select-show');
            this.open = true;
            this.changeDetector.markForCheck();
            this.setPositionDropdown();
            this.initializeListeners();
            if (this.options && this.options.length) {
                this.setScrollPosition(this.selectedValue);
            }
        }
    };
    PoSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-select',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <select #select\n    class=\"po-select\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{'po-select-mobile' : isMobile, 'po-invisible': isInvisibleSelectNative}\"\n    [required]=\"required\"\n    (change)=\"onSelectChange($event.target.value)\">\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\n    <option *ngFor=\"let option of options\"\n      [disabled]=\"readonly\"\n      [value]=\"option.value\"\n      (click)=\"onOptionClick(option)\">\n        {{option?.label}}\n    </option>\n  </select>\n\n  <div class=\"po-select-container\">\n    <div #selectButton\n      class=\"po-select-button\"\n      [ngClass]=\"{'po-select-button-disabled' : disabled, 'po-select-button-readonly' : readonly}\"\n      (click)=\"toggleButton()\">\n\n      <span>{{displayValue || placeholder}}</span>\n\n      <div class=\"po-field-icon-container-right\">\n        <span #icon\n          class=\"po-icon {{selectIcon}} po-field-icon\"\n          [ngClass]=\"{'po-field-icon-disabled' : disabled, 'po-field-icon-readonly' : readonly}\"></span>\n      </div>\n    </div>\n\n    <ul #contentList\n      class=\"po-select-content\"\n      [ngClass]=\"{'po-invisible': isMobile}\">\n\n      <li *ngFor=\"let option of options\"\n        [class.po-select-item-selected]=\"selectedValue == option.value\"\n        [value]=\"option.value\"\n        (click)=\"onOptionClick(option)\">\n        <div class=\"po-select-item\">\n\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n          <ng-template #defaultOptionTemplate>\n            <span>{{option?.label}}</span>\n          </ng-template>\n\n          <ng-template #optionTemplate\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{$implicit: option}\">\n          </ng-template>\n\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoSelectComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoSelectComponent; })),
                            multi: true,
                        },
                        PoControlPositionService
                    ]
                }] }
    ];
    /** @nocollapse */
    PoSelectComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IterableDiffers },
        { type: Renderer2 },
        { type: PoControlPositionService }
    ]; };
    PoSelectComponent.propDecorators = {
        selectOptionTemplate: [{ type: ContentChild, args: [PoSelectOptionTemplateDirective, { static: true },] }],
        contentList: [{ type: ViewChild, args: ['contentList', { read: ElementRef, static: true },] }],
        iconElement: [{ type: ViewChild, args: ['icon', { read: ElementRef, static: true },] }],
        selectElement: [{ type: ViewChild, args: ['select', { read: ElementRef, static: true },] }],
        selectButtonElement: [{ type: ViewChild, args: ['selectButton', { read: ElementRef, static: true },] }],
        onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return PoSelectComponent;
}(PoSelectBaseComponent));
if (false) {
    /** @type {?} */
    PoSelectComponent.prototype.displayValue;
    /** @type {?} */
    PoSelectComponent.prototype.isMobile;
    /** @type {?} */
    PoSelectComponent.prototype.modelValue;
    /** @type {?} */
    PoSelectComponent.prototype.open;
    /** @type {?} */
    PoSelectComponent.prototype.selectedValue;
    /** @type {?} */
    PoSelectComponent.prototype.selectIcon;
    /** @type {?} */
    PoSelectComponent.prototype.scrollPosition;
    /**
     * @type {?}
     * @private
     */
    PoSelectComponent.prototype.differ;
    /** @type {?} */
    PoSelectComponent.prototype.eventListenerFunction;
    /** @type {?} */
    PoSelectComponent.prototype.eventResizeListener;
    /** @type {?} */
    PoSelectComponent.prototype.selectOptionTemplate;
    /** @type {?} */
    PoSelectComponent.prototype.contentList;
    /** @type {?} */
    PoSelectComponent.prototype.iconElement;
    /** @type {?} */
    PoSelectComponent.prototype.selectElement;
    /** @type {?} */
    PoSelectComponent.prototype.selectButtonElement;
    /**
     * @type {?}
     * @private
     */
    PoSelectComponent.prototype.onScroll;
    /** @type {?} */
    PoSelectComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoSelectComponent.prototype.controlPosition;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var PoSwitchLabelPosition = {
    /** Posiciona o label do lado esquerdo do switch. */
    Right: 0,
    /** Posiciona o label do lado direito do switch. */
    Left: 1,
};
PoSwitchLabelPosition[PoSwitchLabelPosition.Right] = 'Right';
PoSwitchLabelPosition[PoSwitchLabelPosition.Left] = 'Left';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
var PoSwitchBaseComponent = /** @class */ (function () {
    function PoSwitchBaseComponent() {
        this._disabled = false;
        this.switchValue = false;
        /**
         * Texto exibido quando o valor do componente for `true`.
         *
         * \@default `true`
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o valor do componente for `false`.
         *
         * \@default `false`
         */
        this.labelOff = 'false';
        /**
         * \@optional
         *
         * \@description
         *
         * Posição de exibição do rótulo.
         *
         * > Por padrão exibe à direita.
         */
        this.labelPosition = PoSwitchLabelPosition.Right;
        /**
         * Evento disparado ao alterar valor do campo.
         */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelOn", {
        set: /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            this.labelOn = label || 'true';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelOff", {
        set: /**
         * @param {?} label
         * @return {?}
         */
        function (label) {
            this.labelOff = label || 'false';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSwitchBaseComponent.prototype, "setLabelPosition", {
        set: /**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            this.labelPosition = (position in PoSwitchLabelPosition) ? parseInt((/** @type {?} */ (position)), 10) : PoSwitchLabelPosition.Right;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSwitchBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica se o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    PoSwitchBaseComponent.prototype.changeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(this.switchValue);
        }
    };
    /**
     * @return {?}
     */
    PoSwitchBaseComponent.prototype.eventClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoSwitchBaseComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PoSwitchBaseComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { };
    /**
     * @param {?} value
     * @return {?}
     */
    PoSwitchBaseComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    };
    PoSwitchBaseComponent.propDecorators = {
        name: [{ type: Input, args: ['name',] }],
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        setLabelOn: [{ type: Input, args: ['p-label-on',] }],
        setLabelOff: [{ type: Input, args: ['p-label-off',] }],
        setLabelPosition: [{ type: Input, args: ['p-label-position',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        change: [{ type: Output, args: ['p-change',] }],
        ngModelChange: [{ type: Output, args: ['ngModelChange',] }]
    };
    return PoSwitchBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoSwitchBaseComponent.prototype._disabled;
    /** @type {?} */
    PoSwitchBaseComponent.prototype.propagateChange;
    /** @type {?} */
    PoSwitchBaseComponent.prototype.switchValue;
    /**
     * Nome do componente.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.name;
    /**
     * Rótulo exibido pelo componente.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.label;
    /**
     * Texto de apoio para o campo.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.help;
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * \@default `true`
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.labelOn;
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * \@default `false`
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.labelOff;
    /**
     * \@optional
     *
     * \@description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.labelPosition;
    /**
     * Evento disparado ao alterar valor do campo.
     * @type {?}
     */
    PoSwitchBaseComponent.prototype.change;
    /** @type {?} */
    PoSwitchBaseComponent.prototype.ngModelChange;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoSwitchBaseComponent
 *
 * \@example
 *
 * <example name="po-switch-basic" title="Portinari Switch Basic">
 *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.html"> </file>
 *   <file name="sample-po-switch-basic/sample-po-switch-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-switch-labs" title="Portinari Switch Labs">
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.html"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.ts"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.e2e-spec.ts"> </file>
 *   <file name="sample-po-switch-labs/sample-po-switch-labs.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-switch-order" title="Portinari Switch - Order Summary">
 *   <file name="sample-po-switch-order/sample-po-switch-order.component.html"> </file>
 *   <file name="sample-po-switch-order/sample-po-switch-order.component.ts"> </file>
 * </example>
 *
 * <example name="po-switch-order-reactive-form" title="Portinari Switch - Order Summary Reactive Form">
 *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.html"> </file>
 *   <file name="sample-po-switch-order-reactive-form/sample-po-switch-order-reactive-form.component.ts"> </file>
 * </example>
 */
var PoSwitchComponent = /** @class */ (function (_super) {
    __extends(PoSwitchComponent, _super);
    function PoSwitchComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    /**
     * @return {?}
     */
    PoSwitchComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.changeDetector.detectChanges();
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSwitchComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;
     *
     * focusSwitch() {
     *   this.switch.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSwitchComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;
     *
     * focusSwitch() {
     *   this.switch.focus();
     * }
     * ```
     * @return {?}
     */
    PoSwitchComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSwitchComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoSwitchComponent, { static: true }) switch: PoSwitchComponent;
     *
     * focusSwitch() {
     *   this.switch.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.switchContainer.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    PoSwitchComponent.prototype.getLabelPosition = /**
     * @return {?}
     */
    function () {
        switch (this.labelPosition) {
            case PoSwitchLabelPosition.Left: return 'left';
            case PoSwitchLabelPosition.Right: return 'right';
            default: return 'right';
        }
    };
    /**
     * @return {?}
     */
    PoSwitchComponent.prototype.getSwitchPosition = /**
     * @return {?}
     */
    function () {
        switch (this.labelPosition) {
            case PoSwitchLabelPosition.Left: return 'right';
            case PoSwitchLabelPosition.Right: return 'left';
            default: return 'left';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoSwitchComponent.prototype.onKeyDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.which === 32 || event.keyCode === 32) {
            event.preventDefault();
            this.eventClick();
        }
    };
    PoSwitchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-switch',
                    template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\">\n\n  <div class=\"po-field-container-content po-switch-content\" [attr.name]=\"name\">\n    <div class=\"po-switch-container po-clickable\"\n      #switchContainer\n      [class.po-switch-container-disabled]=\"disabled\"\n      [class.po-switch-container-off]=\"switchValue === false && !disabled\"\n      [class.po-switch-container-on]=\"switchValue === true && !disabled\"\n      [class.po-switch-container-right]=\"getSwitchPosition() === 'right'\"\n      [tabindex]=\"disabled ? -1 : 0\"\n      (click)=\"eventClick()\"\n      (keydown)=\"onKeyDown($event)\">\n\n      <div class=\"po-switch-button\"\n        [class.po-switch-button-on]=\"switchValue === true\"\n        [class.po-switch-button-off]=\"switchValue === false\"\n        [class.po-switch-button-disabled]=\"disabled\">\n\n        <span class=\"po-icon po-icon-{{ switchValue === true ? 'ok' : 'close' }}\"></span>\n      </div>\n    </div>\n\n    <span class=\"po-switch-label po-clickable po-switch-label-{{ getLabelPosition() }}\"\n      (click)=\"eventClick()\">\n        {{ switchValue === true ? labelOn : labelOff }}\n    </span>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoSwitchComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoSwitchComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoSwitchComponent.propDecorators = {
        switchContainer: [{ type: ViewChild, args: ['switchContainer', { static: true },] }]
    };
    return PoSwitchComponent;
}(PoSwitchBaseComponent));
if (false) {
    /** @type {?} */
    PoSwitchComponent.prototype.switchContainer;
    /**
     * @type {?}
     * @private
     */
    PoSwitchComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <po-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-textarea>
 * ```
 * @abstract
 */
var PoTextareaBaseComponent = /** @class */ (function () {
    function PoTextareaBaseComponent() {
        this._autofocus = false;
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        this._rows = 3;
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        this.placeholder = '';
        /**
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
    }
    Object.defineProperty(PoTextareaBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será desabilitado.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "readonly", {
        get: /**
         * @return {?}
         */
        function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será somente leitura.
         *
         * \@default `false`
         * @param {?} readonly
         * @return {?}
         */
        function (readonly) {
            this._readonly = convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
         *
         * \@default `false`
         * @param {?} required
         * @return {?}
         */
        function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "autofocus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autofocus;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * \@default `false`
         * @param {?} focus
         * @return {?}
         */
        function (focus) {
            this._autofocus = convertToBoolean(focus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "minlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         * @param {?} minlength
         * @return {?}
         */
        function (minlength) {
            this._minlength = convertToInt(minlength);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "maxlength", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         * @param {?} maxlength
         * @return {?}
         */
        function (maxlength) {
            this._maxlength = convertToInt(maxlength);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTextareaBaseComponent.prototype, "rows", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rows;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade de linhas que serão exibidas.
         *
         * @default `3`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica a quantidade de linhas que serão exibidas.
         *
         * \@default `3`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._rows = isNaN(parseInt((/** @type {?} */ (value)), 10)) || value < 3 ? 3 : parseInt((/** @type {?} */ (value)), 10);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.callOnChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        this.controlChangeModelEmitter(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.controlChangeModelEmitter = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    };
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.registerOnChange = 
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onChangePropagate = func;
    };
    /**
     * @param {?} func
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.registerOnTouched = /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.onTouched = func;
    };
    /**
     * @param {?} func
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.registerOnValidatorChange = /**
     * @param {?} func
     * @return {?}
     */
    function (func) {
        this.validatorChange = func;
    };
    /**
     * @param {?} abstractControl
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.validate = /**
     * @param {?} abstractControl
     * @return {?}
     */
    function (abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return { required: {
                    valid: false,
                } };
        }
        if (minlengpoailed(this.minlength, abstractControl.value)) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (maxlengpoailed(this.maxlength, abstractControl.value)) {
            return { maxlength: {
                    valid: false,
                } };
        }
    };
    // Função implementada do ControlValueAccessor
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.writeValue = 
    // Função implementada do ControlValueAccessor
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.writeValueModel(value);
    };
    /**
     * @protected
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.validateModel = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    PoTextareaBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        help: [{ type: Input, args: ['p-help',] }],
        placeholder: [{ type: Input, args: ['p-placeholder',] }],
        name: [{ type: Input, args: ['name',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        optional: [{ type: Input, args: ['p-optional',] }],
        readonly: [{ type: Input, args: ['p-readonly',] }],
        required: [{ type: Input, args: ['p-required',] }],
        autofocus: [{ type: Input, args: ['p-focus',] }],
        minlength: [{ type: Input, args: ['p-minlength',] }],
        maxlength: [{ type: Input, args: ['p-maxlength',] }],
        rows: [{ type: Input, args: ['p-rows',] }],
        blur: [{ type: Output, args: ['p-blur',] }],
        enter: [{ type: Output, args: ['p-enter',] }],
        change: [{ type: Output, args: ['p-change',] }],
        changeModel: [{ type: Output, args: ['p-change-model',] }]
    };
    return PoTextareaBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype._autofocus;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype._maxlength;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype._minlength;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype._required;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype._rows;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype.modelLastUpdate;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype.onChangePropagate;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    PoTextareaBaseComponent.prototype.validatorChange;
    /**
     * Label do campo.
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.label;
    /**
     * Texto de apoio do campo.
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.help;
    /**
     * Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido.
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.placeholder;
    /**
     * Nome e Id do componente.
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.name;
    /**
     * \@optional
     *
     * \@description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * \@default `false`
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.optional;
    /**
     * Evento disparado ao sair do campo.
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.blur;
    /**
     * Evento disparado ao entrar do campo.
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.enter;
    /**
     * Evento disparado ao alterar valor e deixar o campo.
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.change;
    /**
     * Evento disparado ao alterar valor do model.
     * @type {?}
     */
    PoTextareaBaseComponent.prototype.changeModel;
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    PoTextareaBaseComponent.prototype.writeValueModel = function (value) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoTextareaBaseComponent
 *
 * \@example
 *
 * <example name="po-textarea-basic" title="Portinari Textarea Basic" >
 *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.html"> </file>
 *  <file name="sample-po-textarea-basic/sample-po-textarea-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-labs" title="Portinari Textarea Labs" >
 *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.html"> </file>
 *  <file name="sample-po-textarea-labs/sample-po-textarea-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-email" title="Portinari Textarea - Email" >
 *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.html"> </file>
 *  <file name="sample-po-textarea-email/sample-po-textarea-email.component.ts"> </file>
 * </example>
 *
 * <example name="po-textarea-email-reactive-form" title="Portinari Textarea - Email Reactive Form" >
 *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.html"> </file>
 *  <file name="sample-po-textarea-email-reactive-form/sample-po-textarea-email-reactive-form.component.ts"> </file>
 * </example>
 *
 */
var PoTextareaComponent = /** @class */ (function (_super) {
    __extends(PoTextareaComponent, _super);
    function PoTextareaComponent() {
        var _this = _super.call(this) || this;
        _this.fireChange = false;
        return _this;
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoTextareaComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoTextareaComponent, { static: true }) textarea: PoTextareaComponent;
     *
     * focusTextarea() {
     *   this.textarea.focus();
     * }
     * ```
     */
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoTextareaComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoTextareaComponent, { static: true }) textarea: PoTextareaComponent;
     *
     * focusTextarea() {
     *   this.textarea.focus();
     * }
     * ```
     * @return {?}
     */
    PoTextareaComponent.prototype.focus = /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoTextareaComponent } from '\@portinari/portinari-ui';
     *
     * ...
     *
     * \@ViewChild(PoTextareaComponent, { static: true }) textarea: PoTextareaComponent;
     *
     * focusTextarea() {
     *   this.textarea.focus();
     * }
     * ```
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PoTextareaComponent.prototype.writeValueModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.inputEl) {
            if (!value) {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
            else {
                this.inputEl.nativeElement.value = value;
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        if (value) {
            this.change.emit(value);
        }
    };
    /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    PoTextareaComponent.prototype.validMaxLength = /**
     * @param {?} maxlength
     * @param {?} value
     * @return {?}
     */
    function (maxlength, value) {
        return (maxlength && value.length > maxlength) ? value.toString().substring(0, maxlength) : value;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoTextareaComponent.prototype.eventOnInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var value = this.validMaxLength(this.maxlength, event.target.value);
        this.callOnChange(value);
        this.inputEl.nativeElement.value = value;
    };
    /**
     * @return {?}
     */
    PoTextareaComponent.prototype.eventOnFocus = /**
     * @return {?}
     */
    function () {
        // Atualiza valor da variável que será usada para verificar se o campo teve alteração
        this.valueBeforeChange = this.inputEl.nativeElement.value;
        // Dispara evento quando o usuário entrar no campo
        // Este evento também é disparado quando o campo inicia com foco.
        this.enter.emit();
    };
    /**
     * @return {?}
     */
    PoTextareaComponent.prototype.eventOnBlur = /**
     * @return {?}
     */
    function () {
        this.blur.emit();
        this.controlChangeEmitter();
    };
    /**
     * @return {?}
     */
    PoTextareaComponent.prototype.controlChangeEmitter = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elementValue = this.inputEl.nativeElement.value;
        if (elementValue !== this.valueBeforeChange) {
            this.change.emit(elementValue);
        }
    };
    PoTextareaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-textarea',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <textarea #inp\n      class=\"po-textarea\"\n      (blur)=\"eventOnBlur()\"\n      (focus)=\"eventOnFocus()\"\n      (input)=\"eventOnInput($event)\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [rows]=\"rows\">\n    </textarea>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoTextareaComponent; })),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoTextareaComponent; })),
                            multi: true,
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoTextareaComponent.ctorParameters = function () { return []; };
    PoTextareaComponent.propDecorators = {
        inputEl: [{ type: ViewChild, args: ['inp', { read: ElementRef, static: true },] }]
    };
    return PoTextareaComponent;
}(PoTextareaBaseComponent));
if (false) {
    /** @type {?} */
    PoTextareaComponent.prototype.inputEl;
    /** @type {?} */
    PoTextareaComponent.prototype.valueBeforeChange;
    /** @type {?} */
    PoTextareaComponent.prototype.fireChange;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoUploadDragDropDirective = /** @class */ (function () {
    function PoUploadDragDropDirective(i18nPipe, notification) {
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.dragLeave = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.fileChange = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.onDragLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.preventDefault();
        event.stopPropagation();
        this.timeout = setTimeout((/**
         * @return {?}
         */
        function () { return _this.dragLeave.emit(); }), 30);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.timeout);
        if (!this.disabled) {
            this.dragOver.emit();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFilesFromDataTransferItems(event);
        this.dragLeave.emit();
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.getFilesFromDataTransferItems = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this.disabled) {
            this.invalidFileType = 0;
            if (this.directoryCompatible) {
                this.getOnlyDirectories(event.dataTransfer.items).then((/**
                 * @return {?}
                 */
                function () {
                    _this.sendFiles(event, _this.files);
                }));
            }
            else {
                /** @type {?} */
                var files = this.getOnlyFiles(event.dataTransfer.files);
                this.sendFiles(event, files);
            }
        }
    };
    // analisa as entradas recursivamente
    // analisa as entradas recursivamente
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.getFilesFromEntry = 
    // analisa as entradas recursivamente
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return __awaiter(this, void 0, void 0, function () {
            var file;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!entry.isFile) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.readFile(entry)];
                    case 1:
                        file = _a.sent();
                        return [2 /*return*/, [file]];
                    case 2:
                        if (!entry.isDirectory) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.readDirectory(entry)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} dataTransferItems
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.getOnlyDirectories = /**
     * @private
     * @param {?} dataTransferItems
     * @return {?}
     */
    function (dataTransferItems) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, e_2, _b, entries, dataTransferItems_1, dataTransferItems_1_1, item, entries_1, entries_1_1, entry, newFiles, e_2_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        entries = [];
                        try {
                            // lista todas as entradas antes de analisá-las
                            for (dataTransferItems_1 = __values(dataTransferItems), dataTransferItems_1_1 = dataTransferItems_1.next(); !dataTransferItems_1_1.done; dataTransferItems_1_1 = dataTransferItems_1.next()) {
                                item = dataTransferItems_1_1.value;
                                entries.push(item.webkitGetAsEntry());
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (dataTransferItems_1_1 && !dataTransferItems_1_1.done && (_a = dataTransferItems_1.return)) _a.call(dataTransferItems_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        this.files = [];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 7, 8, 9]);
                        entries_1 = __values(entries), entries_1_1 = entries_1.next();
                        _c.label = 2;
                    case 2:
                        if (!!entries_1_1.done) return [3 /*break*/, 6];
                        entry = entries_1_1.value;
                        if (!entry.isFile) return [3 /*break*/, 3];
                        this.invalidFileType++;
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.getFilesFromEntry(entry)];
                    case 4:
                        newFiles = _c.sent();
                        this.files = this.files.concat(newFiles);
                        _c.label = 5;
                    case 5:
                        entries_1_1 = entries_1.next();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_2_1 = _c.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (entries_1_1 && !entries_1_1.done && (_b = entries_1.return)) _b.call(entries_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    // return only files. If it is a directory, invalidFileType counts.
    // return only files. If it is a directory, invalidFileType counts.
    /**
     * @private
     * @param {?} fileList
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.getOnlyFiles = 
    // return only files. If it is a directory, invalidFileType counts.
    /**
     * @private
     * @param {?} fileList
     * @return {?}
     */
    function (fileList) {
        var _this = this;
        return Array.from(fileList).reduce((/**
         * @param {?} newFiles
         * @param {?} file
         * @return {?}
         */
        function (newFiles, file) {
            if (file.type) {
                return newFiles.concat(file);
            }
            else {
                _this.invalidFileType++;
            }
            return newFiles;
        }), []);
    };
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.readFile = /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            entry.file((/**
             * @param {?} file
             * @return {?}
             */
            function (file) {
                resolve(file);
            }));
        }));
    };
    /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.readDirectory = /**
     * @private
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        return __awaiter(this, void 0, void 0, function () {
            var dirReader, files, newFiles;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dirReader = entry.createReader();
                        files = [];
                        return [4 /*yield*/, this.readDirectoryEntries(dirReader)];
                    case 1:
                        newFiles = _a.sent();
                        files = files.concat(newFiles);
                        return [2 /*return*/, files];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} dirReader
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.readDirectoryEntries = /**
     * @private
     * @param {?} dirReader
     * @return {?}
     */
    function (dirReader) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            dirReader.readEntries((/**
             * @param {?} entries
             * @return {?}
             */
            function (entries) { return __awaiter(_this, void 0, void 0, function () {
                var e_3, _a, files, entries_2, entries_2_1, entry, itemFiles, e_3_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            files = [];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 6, 7, 8]);
                            entries_2 = __values(entries), entries_2_1 = entries_2.next();
                            _b.label = 2;
                        case 2:
                            if (!!entries_2_1.done) return [3 /*break*/, 5];
                            entry = entries_2_1.value;
                            return [4 /*yield*/, this.getFilesFromEntry(entry)];
                        case 3:
                            itemFiles = _b.sent();
                            files = files.concat(itemFiles);
                            _b.label = 4;
                        case 4:
                            entries_2_1 = entries_2.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_3_1 = _b.sent();
                            e_3 = { error: e_3_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (entries_2_1 && !entries_2_1.done && (_a = entries_2.return)) _a.call(entries_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                            return [7 /*endfinally*/];
                        case 8:
                            resolve(files);
                            return [2 /*return*/];
                    }
                });
            }); }));
        }));
    };
    /**
     * @private
     * @param {?} invalidFiles
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.sendFeedback = /**
     * @private
     * @param {?} invalidFiles
     * @return {?}
     */
    function (invalidFiles) {
        if (invalidFiles) {
            this.setPipeArguments('invalidFileType', invalidFiles);
        }
    };
    /**
     * @private
     * @param {?} event
     * @param {?} files
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.sendFiles = /**
     * @private
     * @param {?} event
     * @param {?} files
     * @return {?}
     */
    function (event, files) {
        if (this.areaElement.contains(event.target)) {
            if (files.length > 0) {
                this.fileChange.emit(files);
            }
            this.sendFeedback(this.invalidFileType);
        }
        else {
            /** @type {?} */
            var invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
            this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
        }
    };
    // método responsável por setar os argumentos do i18nPipe.
    // método responsável por setar os argumentos do i18nPipe.
    /**
     * @private
     * @param {?} literalAttributes
     * @param {?=} args
     * @return {?}
     */
    PoUploadDragDropDirective.prototype.setPipeArguments = 
    // método responsável por setar os argumentos do i18nPipe.
    /**
     * @private
     * @param {?} literalAttributes
     * @param {?=} args
     * @return {?}
     */
    function (literalAttributes, args) {
        /** @type {?} */
        var pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
        this.notification.information(pipeArguments);
    };
    PoUploadDragDropDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-upload-drag-drop]',
                    providers: [PoI18nPipe]
                },] }
    ];
    /** @nocollapse */
    PoUploadDragDropDirective.ctorParameters = function () { return [
        { type: PoI18nPipe },
        { type: PoNotificationService }
    ]; };
    PoUploadDragDropDirective.propDecorators = {
        areaElement: [{ type: Input, args: ['p-area-element',] }],
        directoryCompatible: [{ type: Input, args: ['p-directory-compatible',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        dragLeave: [{ type: Output, args: ['p-drag-leave',] }],
        dragOver: [{ type: Output, args: ['p-drag-over',] }],
        fileChange: [{ type: Output, args: ['p-file-change',] }],
        onDragLeave: [{ type: HostListener, args: ['document:dragleave', ['$event'],] }],
        onDragOver: [{ type: HostListener, args: ['document:dragover', ['$event'],] }],
        onDrop: [{ type: HostListener, args: ['document:drop', ['$event'],] }]
    };
    return PoUploadDragDropDirective;
}());
if (false) {
    /** @type {?} */
    PoUploadDragDropDirective.prototype.timeout;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropDirective.prototype.files;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropDirective.prototype.invalidFileType;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.areaElement;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.directoryCompatible;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.disabled;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.literals;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.dragLeave;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.dragOver;
    /** @type {?} */
    PoUploadDragDropDirective.prototype.fileChange;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropDirective.prototype.i18nPipe;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropDirective.prototype.notification;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoUploadDragDropAreaOverlayComponent = /** @class */ (function () {
    function PoUploadDragDropAreaOverlayComponent(renderer) {
        this.renderer = renderer;
        this.areaElement = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PoUploadDragDropAreaOverlayComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.target) {
            this.setPosition(this.target);
        }
        this.areaElement.emit(this.DragDropAreaFixed.nativeElement);
    };
    /**
     * @private
     * @param {?} targetElement
     * @return {?}
     */
    PoUploadDragDropAreaOverlayComponent.prototype.setPosition = /**
     * @private
     * @param {?} targetElement
     * @return {?}
     */
    function (targetElement) {
        var _this = this;
        /** @type {?} */
        var boundingClientRect = targetElement.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var clientRectKeys = ['bottom', 'left', 'height', 'right', 'top', 'width'];
        clientRectKeys.forEach((/**
         * @param {?} clientRectKey
         * @return {?}
         */
        function (clientRectKey) {
            /** @type {?} */
            var clientRectValue = boundingClientRect[clientRectKey];
            _this.renderer.setStyle(_this.DragDropAreaFixed.nativeElement, clientRectKey, clientRectValue + "px");
        }));
    };
    PoUploadDragDropAreaOverlayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-upload-drag-drop-area-overlay',
                    template: "<div class=\"po-overlay-fixed\">\n\n  <po-upload-drag-drop-area #DragDropAreaFixed\n    class=\"po-upload-drag-drop-area-overlay\"\n    [p-directory-compatible]=\"directoryCompatible\"\n    [p-disabled]=\"disabled\"\n    [p-literals]=\"literals\"\n    [p-overlay]=\"true\">\n  </po-upload-drag-drop-area>\n\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PoUploadDragDropAreaOverlayComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    PoUploadDragDropAreaOverlayComponent.propDecorators = {
        DragDropAreaFixed: [{ type: ViewChild, args: ['DragDropAreaFixed', { read: ElementRef, static: true },] }],
        directoryCompatible: [{ type: Input, args: ['p-directory-compatible',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        target: [{ type: Input, args: ['p-target',] }],
        areaElement: [{ type: Output, args: ['p-area-element',] }]
    };
    return PoUploadDragDropAreaOverlayComponent;
}());
if (false) {
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.DragDropAreaFixed;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.directoryCompatible;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.disabled;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.literals;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.target;
    /** @type {?} */
    PoUploadDragDropAreaOverlayComponent.prototype.areaElement;
    /**
     * @type {?}
     * @private
     */
    PoUploadDragDropAreaOverlayComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoUploadFileRestrictionsComponent = /** @class */ (function () {
    function PoUploadFileRestrictionsComponent(changeDetector) {
        this.changeDetector = changeDetector;
    }
    Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "allowedExtensions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._allowedExtensions;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._allowedExtensions = this.formatAllowedExtensions((/** @type {?} */ (value)));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "maxFileSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxFileSize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxFileSize = formatBytes((/** @type {?} */ (value)));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "minFileSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._minFileSize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._minFileSize = formatBytes((/** @type {?} */ (value)));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoUploadFileRestrictionsComponent.prototype, "language", {
        get: /**
         * @return {?}
         */
        function () {
            return browserLanguage();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoUploadFileRestrictionsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setLiterals();
    };
    /**
     * @private
     * @param {?} allowedExtensions
     * @return {?}
     */
    PoUploadFileRestrictionsComponent.prototype.formatAllowedExtensions = /**
     * @private
     * @param {?} allowedExtensions
     * @return {?}
     */
    function (allowedExtensions) {
        /** @type {?} */
        var conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y' };
        return allowedExtensions ? allowedExtensions
            .join(', ')
            .toUpperCase()
            .replace(/,(?=[^,]*$)/, " " + conjunction[this.language]) : undefined;
    };
    /**
     * @private
     * @return {?}
     */
    PoUploadFileRestrictionsComponent.prototype.setLiterals = /**
     * @private
     * @return {?}
     */
    function () {
        this.literals = __assign({}, poUploadLiteralsDefault[poLocaleDefault], poUploadLiteralsDefault[this.language]);
        this.changeDetector.detectChanges();
    };
    PoUploadFileRestrictionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-upload-file-restrictions',
                    template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\n  {{ literals?.numberOfFilesAllowed | poI18n:maxFiles }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\n  {{ literals?.allowedFormats | poI18n:allowedExtensions }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\n  <span>{{ literals?.allowedSizes }}</span>\n\n  <span *ngIf=\"minFileSize && maxFileSize\">\n    {{ literals?.allowedFileSizeRange | poI18n:[minFileSize, maxFileSize] }}\n  </span>\n\n  <span *ngIf=\"minFileSize && !maxFileSize\">\n    {{ literals?.minFileSizeAllowed | poI18n:minFileSize }}\n  </span>\n\n  <span *ngIf=\"maxFileSize && !minFileSize\">\n    {{ literals?.maxFileSizeAllowed | poI18n:maxFileSize }}\n  </span>\n</p>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PoUploadFileRestrictionsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoUploadFileRestrictionsComponent.propDecorators = {
        allowedExtensions: [{ type: Input, args: ['p-allowed-extensions',] }],
        maxFiles: [{ type: Input, args: ['p-max-files',] }],
        maxFileSize: [{ type: Input, args: ['p-max-file-size',] }],
        minFileSize: [{ type: Input, args: ['p-min-file-size',] }]
    };
    return PoUploadFileRestrictionsComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoUploadFileRestrictionsComponent.prototype._allowedExtensions;
    /**
     * @type {?}
     * @private
     */
    PoUploadFileRestrictionsComponent.prototype._maxFileSize;
    /**
     * @type {?}
     * @private
     */
    PoUploadFileRestrictionsComponent.prototype._minFileSize;
    /** @type {?} */
    PoUploadFileRestrictionsComponent.prototype.literals;
    /** @type {?} */
    PoUploadFileRestrictionsComponent.prototype.maxFiles;
    /**
     * @type {?}
     * @private
     */
    PoUploadFileRestrictionsComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoInputBaseComponent
 *
 * \@description
 *
 * po-url é um input específico para receber URL, com o pattern já configurado.
 *
 * \@example
 *
 * <example name="po-url-basic" title="Portinari Url Basic">
 *   <file name="sample-po-url-basic/sample-po-url-basic.component.html"> </file>
 *   <file name="sample-po-url-basic/sample-po-url-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-url-labs" title="Portinari Url Labs">
 *   <file name="sample-po-url-labs/sample-po-url-labs.component.html"> </file>
 *   <file name="sample-po-url-labs/sample-po-url-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-url-shortener" title="Portinari Url - Shortener">
 *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.html"> </file>
 *   <file name="sample-po-url-shortener/sample-po-url-shortener.component.ts"> </file>
 * </example>
 *
 */
var PoUrlComponent = /** @class */ (function (_super) {
    __extends(PoUrlComponent, _super);
    function PoUrlComponent(el) {
        var _this = _super.call(this, el) || this;
        _this.icon = 'po-icon-world';
        _this.maxlength = 254;
        _this.type = 'url';
        _this.pattern = '^((https|http):\\/\\/)?' + // protocol
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
            '(\\:\\d+)?(\\/[-A-Za-z\\d%_.~+]*)*' + // port and path
            '(\\?[;&A-Za-z\\d%_.~+=-]*)?' + // query string
            '(\\#[-A-Za-z\\d_]*)?$';
        _this.mask = '';
        _this.listener = _this.validateClassesForPattern.bind(_this);
        return _this;
    }
    /**
     * @return {?}
     */
    PoUrlComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Se não tem ngModel ou reactive form adiciona validação com classes css
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (!_this.onChangePropagate) {
                _this.inputEl.nativeElement.addEventListener('keyup', _this.listener);
            }
        }));
    };
    /**
     * @return {?}
     */
    PoUrlComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!this.onChangePropagate) {
            this.inputEl.nativeElement.removeEventListener('keyup', this.listener);
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PoUrlComponent.prototype.extraValidation = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    PoUrlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-url',
                    template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{ icon }}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inp\n      class=\"po-input\"\n      [attr.name]=\"name\"\n      [autocomplete]=\"autocomplete\"\n      [class.po-input-icon-left]=\"icon\"\n      [class.po-input-icon-right]=\"clean\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [readonly]=\"readonly\"\n      [required]=\"required\"\n      [type]=\"type\"\n      (blur)=\"eventOnBlur($event)\"\n      (click)=\"eventOnClick($event)\"\n      (focus)=\"eventOnFocus($event)\"\n      (input)=\"eventOnInput($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <po-clean [p-element-ref]=\"inputEl\" (p-change-event)=\"clear($event)\"></po-clean>\n    </div>\n  </div>\n\n  <po-field-container-bottom\n    [p-error-pattern]=\"getErrorPattern()\">\n  </po-field-container-bottom>\n\n</po-field-container>\n",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoUrlComponent; })),
                            multi: true
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PoUrlComponent; })),
                            multi: true
                        }
                    ]
                }] }
    ];
    /** @nocollapse */
    PoUrlComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return PoUrlComponent;
}(PoInputGeneric));
if (false) {
    /** @type {?} */
    PoUrlComponent.prototype.icon;
    /** @type {?} */
    PoUrlComponent.prototype.maxlength;
    /** @type {?} */
    PoUrlComponent.prototype.type;
    /** @type {?} */
    PoUrlComponent.prototype.pattern;
    /** @type {?} */
    PoUrlComponent.prototype.mask;
    /**
     * @type {?}
     * @private
     */
    PoUrlComponent.prototype.listener;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo dos componentes po-combo, po-checkbox-group, po-datepicker, po-datepicker-range, po-email, po-input, po-lookup,
 * po-number, po-multiselect, po-password, po-radio-group, po-select, po-switch, po-textarea, po-upload e po-url.
 */
var PoFieldModule = /** @class */ (function () {
    function PoFieldModule() {
    }
    PoFieldModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        HttpClientModule,
                        PoButtonGroupModule,
                        PoButtonModule,
                        PoCheckboxGroupModule,
                        PoContainerModule,
                        PoDisclaimerModule,
                        PoFieldContainerModule,
                        PoLoadingModule,
                        PoModalModule,
                        PoProgressModule,
                        PoServicesModule,
                        PoTableModule,
                        PoTooltipModule
                    ],
                    exports: [
                        PoCheckboxGroupModule,
                        PoCleanComponent,
                        PoComboComponent,
                        PoComboOptionTemplateDirective,
                        PoDecimalComponent,
                        PoDatepickerComponent,
                        PoDatepickerRangeComponent,
                        PoEmailComponent,
                        PoInputComponent,
                        PoLoginComponent,
                        PoLookupComponent,
                        PoLookupModalComponent,
                        PoMultiselectComponent,
                        PoNumberComponent,
                        PoPasswordComponent,
                        PoRadioGroupComponent,
                        PoRichTextComponent,
                        PoSelectComponent,
                        PoSelectOptionTemplateDirective,
                        PoSwitchComponent,
                        PoTextareaComponent,
                        PoUploadComponent,
                        PoUrlComponent
                    ],
                    declarations: [
                        PoCalendarComponent$1,
                        PoCleanComponent,
                        PoComboComponent,
                        PoComboOptionTemplateDirective,
                        PoDecimalComponent,
                        PoDatepickerComponent,
                        PoDatepickerRangeComponent,
                        PoEmailComponent,
                        PoInputComponent,
                        PoLoginComponent,
                        PoLookupComponent,
                        PoLookupModalComponent,
                        PoMultiselectComponent,
                        PoMultiselectDropdownComponent,
                        PoMultiselectItemComponent,
                        PoMultiselectSearchComponent,
                        PoNumberComponent,
                        PoPasswordComponent,
                        PoRadioGroupComponent,
                        PoRichTextBodyComponent,
                        PoRichTextComponent,
                        PoRichTextModalComponent,
                        PoRichTextToolbarComponent,
                        PoSelectComponent,
                        PoSelectOptionTemplateDirective,
                        PoSwitchComponent,
                        PoTextareaComponent,
                        PoUploadComponent,
                        PoUploadDragDropComponent,
                        PoUploadDragDropDirective,
                        PoUploadDragDropAreaOverlayComponent,
                        PoUploadDragDropAreaComponent,
                        PoUploadFileRestrictionsComponent,
                        PoUrlComponent
                    ],
                    providers: [],
                    entryComponents: [
                        PoCalendarComponent$1,
                        PoLookupModalComponent,
                        PoRichTextModalComponent
                    ]
                },] }
    ];
    return PoFieldModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoInfoOrientation = {
    /** O valor será exibido na horizontal, ao lado direito em relação ao label. */
    Horizontal: 'horizontal',
    /** Exibe o valor na vertical, ou seja, abaixo do label. */
    Vertical: 'vertical',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poInfoOrientationDefault = PoInfoOrientation.Vertical;
var PoInfoBaseComponent = /** @class */ (function () {
    function PoInfoBaseComponent() {
        this._orientation = poInfoOrientationDefault;
        this.poInfoOrientation = PoInfoOrientation;
    }
    Object.defineProperty(PoInfoBaseComponent.prototype, "labelSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labelSize;
        },
        /**
         * @optional
         *
         * @description
         *
         * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `p-label` quando o componente for
         * utilizado na orientação horizontal.
         *
         * Valores válidos:
         *  - `[1 .. 11]`
         *
         * > A propriedade `p-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `p-label` quando o componente for
         * utilizado na orientação horizontal.
         *
         * Valores válidos:
         *  - `[1 .. 11]`
         *
         * > A propriedade `p-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNaN(parseInt((/** @type {?} */ (value)), 10))) {
                this._labelSize = undefined;
            }
            else {
                value = parseInt((/** @type {?} */ (value)), 10);
                this._labelSize = (value < 1 || value > 11) ? undefined : value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInfoBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o layout de exibição.
         *
         * > Quando definido na horizontal, pode-se utilizar a propriedade `p-label-size` para um maior controle das informações exibidas.
         *
         * @default `vertical`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o layout de exibição.
         *
         * > Quando definido na horizontal, pode-se utilizar a propriedade `p-label-size` para um maior controle das informações exibidas.
         *
         * \@default `vertical`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(PoInfoOrientation).includes(value) ? value : poInfoOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    PoInfoBaseComponent.propDecorators = {
        label: [{ type: Input, args: ['p-label',] }],
        labelSize: [{ type: Input, args: ['p-label-size',] }],
        orientation: [{ type: Input, args: ['p-orientation',] }],
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoInfoBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoInfoBaseComponent.prototype._labelSize;
    /**
     * @type {?}
     * @private
     */
    PoInfoBaseComponent.prototype._orientation;
    /** @type {?} */
    PoInfoBaseComponent.prototype.poInfoOrientation;
    /**
     * Valor do rótulo a ser exibido.
     * @type {?}
     */
    PoInfoBaseComponent.prototype.label;
    /**
     * Valor do conteúdo a ser exibido.
     * @type {?}
     */
    PoInfoBaseComponent.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoInfoBaseComponent
 *
 * \@description
 *
 * Este componente tem como objetivo renderizar valores na tela no estilo label na parte superior e
 * valor na parte inferior. Facilita a exibição de dados pois vem com layout padrão Portinari.
 *
 * \@example
 *
 * <example name="po-info-basic" title="Portinari Info Basic">
 *  <file name="sample-po-info-basic/sample-po-info-basic.component.html"> </file>
 *  <file name="sample-po-info-basic/sample-po-info-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-info-labs" title="Portinari Info Labs">
 *  <file name="sample-po-info-labs/sample-po-info-labs.component.html"> </file>
 *  <file name="sample-po-info-labs/sample-po-info-labs.component.ts"> </file>
 * </example>
 */
var PoInfoComponent = /** @class */ (function (_super) {
    __extends(PoInfoComponent, _super);
    function PoInfoComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoInfoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-info',
                    template: "<div class=\"po-info\" [class.po-row]=\"orientation === poInfoOrientation.Horizontal && labelSize\">\n  <div class=\"po-info-container-title\"\n    [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + labelSize : ''\"\n    [class.po-info-label-horizontal]=\"orientation === poInfoOrientation.Horizontal\"\n    [class.po-text-nowrap]=\"orientation === poInfoOrientation.Horizontal && !labelSize\">\n    <span class=\"po-info-label\">\n      {{ orientation === poInfoOrientation.Horizontal ? label + ':' : label }}\n    </span>\n  </div>\n\n  <div [ngClass]=\"labelSize && orientation === poInfoOrientation.Horizontal ? 'po-sm-' + (12 - labelSize) : ''\"\n    [class.po-info-container-content]=\"orientation !== poInfoOrientation.Horizontal\"\n    [class.po-info-value-horizontal]=\"orientation === poInfoOrientation.Horizontal\">\n    <span class=\"po-info-value\">{{ value }}</span>\n  </div>\n</div>\n"
                }] }
    ];
    return PoInfoComponent;
}(PoInfoBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-info.
 */
var PoInfoModule = /** @class */ (function () {
    function PoInfoModule() {
    }
    PoInfoModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        PoInfoComponent
                    ],
                    exports: [PoInfoComponent],
                    providers: [],
                    schemas: []
                },] }
    ];
    return PoInfoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoTagOrientation = {
    /** A tag será exibida na horizontal, ao lado direito em relação ao label. */
    Horizontal: 'horizontal',
    /** Exibe a tag na vertical, ou seja, abaixo do label. */
    Vertical: 'vertical',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoTagType = {
    /** Erro, perigo, problema ou aviso crítico. */
    Danger: 'danger',
    /** Informativo ou explicativo. */
    Info: 'info',
    /** Confirmação, resultados positivos ou êxito */
    Success: 'success',
    /** Aviso ou advertência. */
    Warning: 'warning',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poTagColors = ((/** @type {?} */ (Object))).values(PoColorPaletteEnum);
/** @type {?} */
var poTagOrientationDefault = PoTagOrientation.Vertical;
/**
 * \@description
 *
 * Este componente permite exibir um valor em forma de um marcador colorido, sendo possível definir uma legenda e realizar customizações
 * na cor, iconografia e tipo.
 *
 * Além disso, é possível definir uma ação que será executada tanto ao *click* quanto através das teclas *enter/space* enquanto navega
 * utilizando a tecla *tab*.
 *
 * Seu uso é recomendado para informações que necessitem de destaque em forma de marcação.
 */
var PoTagBaseComponent = /** @class */ (function () {
    function PoTagBaseComponent() {
        this._orientation = poTagOrientationDefault;
        this.poTagOrientation = PoTagOrientation;
        /**
         * \@optional
         *
         * \@description
         *
         * Ação que será executada ao clicar sobre o `po-tag` e que receberá como parâmetro um objeto contendo o seu valor e tipo.
         */
        this.click = new EventEmitter();
    }
    Object.defineProperty(PoTagBaseComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma cor para a *tag*.
         *
         * Valores válidos:
         *  - <span class="dot po-color-01"></span> `color-01`
         *  - <span class="dot po-color-02"></span> `color-02`
         *  - <span class="dot po-color-03"></span> `color-03`
         *  - <span class="dot po-color-04"></span> `color-04`
         *  - <span class="dot po-color-05"></span> `color-05`
         *  - <span class="dot po-color-06"></span> `color-06`
         *  - <span class="dot po-color-07"></span> `color-07`
         *  - <span class="dot po-color-08"></span> `color-08`
         *  - <span class="dot po-color-09"></span> `color-09`
         *  - <span class="dot po-color-10"></span> `color-10`
         *  - <span class="dot po-color-11"></span> `color-11`
         *  - <span class="dot po-color-12"></span> `color-12`
         *
         * > **Atenção:** A propriedade `p-type` sobrepõe esta definição.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma cor para a *tag*.
         *
         * Valores válidos:
         *  - <span class="dot po-color-01"></span> `color-01`
         *  - <span class="dot po-color-02"></span> `color-02`
         *  - <span class="dot po-color-03"></span> `color-03`
         *  - <span class="dot po-color-04"></span> `color-04`
         *  - <span class="dot po-color-05"></span> `color-05`
         *  - <span class="dot po-color-06"></span> `color-06`
         *  - <span class="dot po-color-07"></span> `color-07`
         *  - <span class="dot po-color-08"></span> `color-08`
         *  - <span class="dot po-color-09"></span> `color-09`
         *  - <span class="dot po-color-10"></span> `color-10`
         *  - <span class="dot po-color-11"></span> `color-11`
         *  - <span class="dot po-color-12"></span> `color-12`
         *
         * > **Atenção:** A propriedade `p-type` sobrepõe esta definição.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._color = poTagColors.includes(value) ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagBaseComponent.prototype, "icon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._icon;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define ou ativa um ícone que será exibido ao lado do valor da *tag*.
         *
         * > Veja os valores válidos na [biblioteca de ícones](guides/icons).
         *
         * Quando `p-type` estiver definida, basta informar um valor igual a `true` para que o ícone seja exibido conforme descrições abaixo:
         * - <span class="po-icon po-icon-ok"></span> - `success`
         * - <span class="po-icon po-icon-warning"></span> - `warning`
         * - <span class="po-icon po-icon-close"></span> - `danger`
         * - <span class="po-icon po-icon-info"></span> - `info`
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define ou ativa um ícone que será exibido ao lado do valor da *tag*.
         *
         * > Veja os valores válidos na [biblioteca de ícones](guides/icons).
         *
         * Quando `p-type` estiver definida, basta informar um valor igual a `true` para que o ícone seja exibido conforme descrições abaixo:
         * - <span class="po-icon po-icon-ok"></span> - `success`
         * - <span class="po-icon po-icon-warning"></span> - `warning`
         * - <span class="po-icon po-icon-close"></span> - `danger`
         * - <span class="po-icon po-icon-info"></span> - `info`
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.type) {
                this._icon = convertToBoolean(value);
            }
            else {
                this._icon = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagBaseComponent.prototype, "inverse", {
        get: /**
         * @return {?}
         */
        function () {
            return this._inverse;
        },
        /**
         * @optional
         *
         * @description
         *
         * Ativa a inversão de cores configuradas no componente, possibilitando uma visualização de status ativo e inativo.
         *
         * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `p-color` ou a cor correspondente ao `p-type`,
         * e a cor do fundo fica branca.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Ativa a inversão de cores configuradas no componente, possibilitando uma visualização de status ativo e inativo.
         *
         * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `p-color` ou a cor correspondente ao `p-type`,
         * e a cor do fundo fica branca.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._inverse = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o *layout* de exibição.
         *
         * @default `vertical`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o *layout* de exibição.
         *
         * \@default `vertical`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(PoTagOrientation).includes(value) ? value : poTagOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagBaseComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return this._type;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o tipo da *tag*.
         *
         * Valores válidos:
         *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
         *  - `warning`: cor amarela que representa aviso ou advertência.
         *  - `danger`: cor vermelha para erro ou aviso crítico.
         *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
         *
         * > Quando esta propriedade for definida, irá sobrepor a definição de `p-color` e `p-icon` somente será exibido caso seja `true`.
         *
         * @default `info`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define o tipo da *tag*.
         *
         * Valores válidos:
         *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
         *  - `warning`: cor amarela que representa aviso ou advertência.
         *  - `danger`: cor vermelha para erro ou aviso crítico.
         *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
         *
         * > Quando esta propriedade for definida, irá sobrepor a definição de `p-color` e `p-icon` somente será exibido caso seja `true`.
         *
         * \@default `info`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._type = ((/** @type {?} */ (Object))).values(PoTagType).includes(value) ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    PoTagBaseComponent.propDecorators = {
        color: [{ type: Input, args: ['p-color',] }],
        icon: [{ type: Input, args: ['p-icon',] }],
        inverse: [{ type: Input, args: ['p-inverse',] }],
        label: [{ type: Input, args: ['p-label',] }],
        orientation: [{ type: Input, args: ['p-orientation',] }],
        type: [{ type: Input, args: ['p-type',] }],
        value: [{ type: Input, args: ['p-value',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoTagBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTagBaseComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    PoTagBaseComponent.prototype._icon;
    /**
     * @type {?}
     * @private
     */
    PoTagBaseComponent.prototype._inverse;
    /**
     * @type {?}
     * @private
     */
    PoTagBaseComponent.prototype._orientation;
    /**
     * @type {?}
     * @private
     */
    PoTagBaseComponent.prototype._type;
    /** @type {?} */
    PoTagBaseComponent.prototype.poTagOrientation;
    /**
     * \@optional
     *
     * \@description
     *
     * Define uma legenda que será exibida acima ou ao lado da *tag*, de acordo com a `p-orientation`.
     * @type {?}
     */
    PoTagBaseComponent.prototype.label;
    /**
     * Texto da tag.
     * @type {?}
     */
    PoTagBaseComponent.prototype.value;
    /**
     * \@optional
     *
     * \@description
     *
     * Ação que será executada ao clicar sobre o `po-tag` e que receberá como parâmetro um objeto contendo o seu valor e tipo.
     * @type {?}
     */
    PoTagBaseComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoTagIcon = {
    /** Ícone fechar. */
    Danger: 'po-icon-close',
    /** Ícone de informação. */
    Info: 'po-icon-info',
    /** Ícone que representa confirmação. */
    Success: 'po-icon-ok',
    /** Ícone com ponto de exclamação. */
    Warning: 'po-icon-warning',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poTagTypeDefault = 'po-tag-' + PoTagType.Info;
/**
 * \@docsExtends PoTagBaseComponent
 *
 * \@example
 *
 * <example name="po-tag-basic" title="Portinari Tag Basic">
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.html"> </file>
 *  <file name="sample-po-tag-basic/sample-po-tag-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-labs" title="Portinari Tag Labs">
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.html"> </file>
 *  <file name="sample-po-tag-labs/sample-po-tag-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tag-bank-account" title="Portinari Tag - Bank Account">
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.html"> </file>
 *  <file name="sample-po-tag-bank-account/sample-po-tag-bank-account.component.ts"> </file>
 * </example>
 */
var PoTagComponent = /** @class */ (function (_super) {
    __extends(PoTagComponent, _super);
    function PoTagComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    PoTagComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.isClickable = this.click.observers.length > 0;
    };
    Object.defineProperty(PoTagComponent.prototype, "iconFromType", {
        get: /**
         * @return {?}
         */
        function () {
            switch (this.type) {
                case PoTagType.Danger: return PoTagIcon.Danger;
                case PoTagType.Info: return PoTagIcon.Info;
                case PoTagType.Success: return PoTagIcon.Success;
                case PoTagType.Warning: return PoTagIcon.Warning;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagComponent.prototype, "iconTypeString", {
        get: /**
         * @return {?}
         */
        function () {
            return typeof this.icon === 'string';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagComponent.prototype, "tagColor", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.type) {
                return this.inverse ? "po-tag-" + this.type + "-inverse" : "po-tag-" + this.type;
            }
            if (this.color && !this.type) {
                return this.inverse ? "po-text-" + this.color : "po-" + this.color;
            }
            if (!this.type && !this.color) {
                return this.inverse ? poTagTypeDefault + "-inverse" : poTagTypeDefault;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTagComponent.prototype, "tagOrientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this.orientation === this.poTagOrientation.Horizontal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTagComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var submittedTagItem = { value: this.value, type: this.type };
        this.click.emit(submittedTagItem);
    };
    /**
     * @param {?} event
     * @param {?} keyCode
     * @return {?}
     */
    PoTagComponent.prototype.onKeyPressed = /**
     * @param {?} event
     * @param {?} keyCode
     * @return {?}
     */
    function (event, keyCode) {
        /** @type {?} */
        var isValidKey = event.keyCode === PoKeyCodeEnum[keyCode];
        if (isValidKey) {
            event.preventDefault();
            event.stopPropagation();
            this.onClick();
        }
    };
    PoTagComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-tag',
                    template: "<div class=\"po-tag-container\" [class.po-tag-container-horizontal]=\"tagOrientation\">\n  <div *ngIf=\"label\" class=\"po-tag-title po-text-nowrap\">\n    <span class=\"po-tag-label\">{{ tagOrientation ? label + ':' : label }}</span>\n  </div>\n\n  <div class=\"po-tag-sub-container\">\n    <div class=\"po-tag\"\n      [class.po-clickable]=\"isClickable\"\n      [class.po-tag-inverse]=\"inverse\"\n      [ngClass]=\"tagColor\"\n      tabindex=\"0\"\n      (click)=\"onClick()\"\n      (keydown)=\"onKeyPressed($event, 'enter')\"\n      (keyup)=\"onKeyPressed($event, 'space')\">\n\n      <span *ngIf=\"icon\" class=\"po-icon\" [ngClass]=\"!type && iconTypeString ? icon : iconFromType\"></span>\n      <span class=\"po-tag-value\">{{value}}</span>\n    </div>\n  </div>\n</div>\n"
                }] }
    ];
    return PoTagComponent;
}(PoTagBaseComponent));
if (false) {
    /** @type {?} */
    PoTagComponent.prototype.isClickable;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-tag`.
 */
var PoTagModule = /** @class */ (function () {
    function PoTagModule() {
    }
    PoTagModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        PoTagComponent
                    ],
                    exports: [
                        PoTagComponent
                    ],
                    providers: [],
                    schemas: []
                },] }
    ];
    return PoTagModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
 *
 * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
 *
 * > Temos uma ferramenta para criação de formulários, onde é possível inicializá-lo através de um JSON.
 * [**Veja aqui**](tools/dynamic-form).
 */
var PoDynamicFormBaseComponent = /** @class */ (function () {
    function PoDynamicFormBaseComponent() {
        this._groupForm = false;
        /**
         * \@optional
         *
         * \@description
         *
         * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
         * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
         *
         * Portanto existem duas maneiras de recuperar o formulário,
         * através de *template reference* e através do *output*, veja os exemplos abaixo:
         *
         * > *template reference*
         *
         * ```html
         *  <po-dynamic-form #dynamicForm>
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
         *  </po-button>
         *
         * ```
         *
         * > *Output*
         *
         * ```html
         *  ...
         *  <po-dynamic-form (p-form)="getForm($event)">
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
         *  </po-button>
         *  ...
         *
         * ```
         *
         * ```ts
         *  ...
         *
         *  export class AppComponent {
         *
         *    dynamicForm: NgForm;
         *
         *    getForm(form: NgForm) {
         *      this.dynamicForm = form;
         *    }
         *
         *  }
         * ```
         *
         * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
         * o formulário pai.
         */
        this.formOutput = new EventEmitter();
    }
    Object.defineProperty(PoDynamicFormBaseComponent.prototype, "groupForm", {
        get: /**
         * @return {?}
         */
        function () {
            return this._groupForm;
        },
        /**
         * @optional
         *
         * @description
         * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
         * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
         *
         * ```html
         * <form #parentForm="ngForm">
         *
         *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
         * </form>
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
         * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
         *
         * ```html
         * <form #parentForm="ngForm">
         *
         *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
         * </form>
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._groupForm = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoDynamicFormBaseComponent.propDecorators = {
        fields: [{ type: Input, args: ['p-fields',] }],
        value: [{ type: Input, args: ['p-value',] }],
        formOutput: [{ type: Output, args: ['p-form',] }],
        groupForm: [{ type: Input, args: ['p-group-form',] }]
    };
    return PoDynamicFormBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDynamicFormBaseComponent.prototype._groupForm;
    /**
     * \@description
     *
     * Coleção de objetos que implementam a interface `PoDynamicFormField`, para definição dos campos que serão criados
     * dinamicamente.
     *
     * > Ex: `[ { property: 'name' } ]`
     *
     * Regras de tipagem e criação dos componentes:
     *
     * - Caso o *type* informado seja *boolean* o componente criado será o `po-switch`.
     * - Caso o *type* informado seja *currency* e não seja informado um *mask* ou *pattern* o componente criado será o `po-decimal`,
     * caso seja informado um *mask* ou *pattern* o componente criado será o `po-input`.
     * - Caso o *type* informado seja *number* e não seja informado um *mask* ou *pattern* o componente criado será o `po-decimal`, caso seja
     * informado um *mask* ou *pattern* o componente criado será o `po-input`.
     * - Caso a lista possua a propriedade `options` e a mesma possua até 3 itens o componente criado será o `po-radio-group`
     * ou `po-checkbox-group` se informar a propriedade `optionsMulti`.
     * - Caso a mesma possua 3 ou mais itens, será criado o componente `po-select` ou, `po-multiselect` se a propriedade `optionsMulti`
     * for verdadeira.
     * - Caso o *type* informado seja *date* ou *datetime* o componente criado será o `po-datepicker`.
     * - Caso seja informado a propriedade `optionsService` o componente criado será o `po-combo`.
     * - Caso o *type* informado seja *time* o componente criado será um `po-input` podendo receber um *mask* para formatar
     * o valor exibido, caso não seja informado um *mask* o componente será criado com a máscara '99:99' por padrão.
     * - Caso a lista possua a propriedade `rows` e esta seja definida com valor maior ou igual a 3 o componente criado será
     * o `po-textarea`, caso o valor da propriedade `rows` seja menor que 3 o componente criado será o `po-input`.
     * - Caso seja informada a propriedade `secret` o componente criado será o `po-password`.
     * - Caso o *type* informado seja *string* o componente criado será o `po-input`.
     *
     * \@default `[]`
     * @type {?}
     */
    PoDynamicFormBaseComponent.prototype.fields;
    /**
     * Objeto que será utilizado como valor para exibir as informações, será recuperado e preenchido através do atributo *property*
     * dos objetos contidos na propridade `p-fields`.
     *
     * Pode iniciar com valor ou apenas com um objeto vazio que será preenchido conforme descrito acima.
     *
     * > Ex: `{ name: 'po' }`
     * @type {?}
     */
    PoDynamicFormBaseComponent.prototype.value;
    /**
     * \@optional
     *
     * \@description
     *
     * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
     * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
     *
     * Portanto existem duas maneiras de recuperar o formulário,
     * através de *template reference* e através do *output*, veja os exemplos abaixo:
     *
     * > *template reference*
     *
     * ```html
     *  <po-dynamic-form #dynamicForm>
     *  </po-dynamic-form>
     *
     *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
     *  </po-button>
     *
     * ```
     *
     * > *Output*
     *
     * ```html
     *  ...
     *  <po-dynamic-form (p-form)="getForm($event)">
     *  </po-dynamic-form>
     *
     *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
     *  </po-button>
     *  ...
     *
     * ```
     *
     * ```ts
     *  ...
     *
     *  export class AppComponent {
     *
     *    dynamicForm: NgForm;
     *
     *    getForm(form: NgForm) {
     *      this.dynamicForm = form;
     *    }
     *
     *  }
     * ```
     *
     * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
     * o formulário pai.
     * @type {?}
     */
    PoDynamicFormBaseComponent.prototype.formOutput;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoDynamicFormBaseComponent
 *
 * \@example
 *
 * <example name="po-dynamic-form-basic" title="Portinari Dynamic Form Basic">
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-form-register" title="Portinari Dynamic Form - Register">
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.html"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.ts"> </file>
 * </example>
 */
var PoDynamicFormComponent = /** @class */ (function (_super) {
    __extends(PoDynamicFormComponent, _super);
    function PoDynamicFormComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PoDynamicFormComponent.prototype, "form", {
        get: /**
         * @return {?}
         */
        function () {
            return this._form || (/** @type {?} */ ({}));
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            // necessario para nao ocorrer o ExpressionChangedAfterItHasBeenCheckedError
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this._form = value;
                _this.emitForm();
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    PoDynamicFormComponent.prototype.emitForm = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.groupForm && this.formOutput.observers.length) {
            this.formOutput.emit(this.form);
        }
    };
    PoDynamicFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-dynamic-form',
                    template: "\n<ng-container *ngIf=\"groupForm; then reuseFormTemplate; else uniqueFormTemplate\"></ng-container>\n\n<ng-template #reuseFormTemplate>\n\n  <po-dynamic-form-fields [p-fields]=\"fields\" [p-value]=\"value\"></po-dynamic-form-fields>\n\n</ng-template>\n\n<ng-template #uniqueFormTemplate>\n\n  <form #dynamicForm=\"ngForm\">\n\n    <po-dynamic-form-fields [p-fields]=\"fields\" [p-value]=\"value\"></po-dynamic-form-fields>\n\n  </form>\n\n</ng-template>\n"
                }] }
    ];
    PoDynamicFormComponent.propDecorators = {
        form: [{ type: ViewChild, args: ['dynamicForm', { static: false },] }]
    };
    return PoDynamicFormComponent;
}(PoDynamicFormBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDynamicFormComponent.prototype._form;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} smColumns
 * @param {?} mdColumns
 * @param {?} lgColumns
 * @param {?} xlColumns
 * @param {?} gridColumns
 * @return {?}
 */
function getGridColumnsClasses(smColumns, mdColumns, lgColumns, xlColumns, gridColumns) {
    /** @type {?} */
    var systemGrid = {
        sm: smColumns || gridColumns || 12,
        md: mdColumns || gridColumns || 6,
        lg: lgColumns || gridColumns || 4,
        xl: xlColumns || gridColumns || 3
    };
    return "po-sm-" + systemGrid.sm + " po-md-" + systemGrid.md + " po-lg-" + systemGrid.lg + " po-xl-" + systemGrid.xl;
}
/**
 * @param {?} field
 * @return {?}
 */
function isVisibleField(field) {
    /** @type {?} */
    var containsVisible = 'visible' in field;
    return containsVisible ? field.visible : true;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoDynamicFieldType = {
    /** Valor booleano. */
    Boolean: 'boolean',
    /** Valor numérico que contém casas decimais e milhar. */
    Currency: 'currency',
    /** Valor para data. */
    Date: 'date',
    /** Valor para data e hora. */
    DateTime: 'datetime',
    /** Utilizado para informar/exibir hora. */
    Time: 'time',
    /** Valor númerico. */
    Number: 'number',
    /** Texto. */
    String: 'string',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoDynamicFormFieldsBaseComponent = /** @class */ (function () {
    function PoDynamicFormFieldsBaseComponent(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this._value = {};
        this.visibleFields = [];
    }
    Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "fields", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fields;
        },
        // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
        set: 
        // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._fields = Array.isArray(value) ? __spread(value) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        // valor que será utilizado para iniciar valor no componente.
        set: 
        // valor que será utilizado para iniciar valor no componente.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} compareTo
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.compareTo = /**
     * @param {?} value
     * @param {?} compareTo
     * @return {?}
     */
    function (value, compareTo) {
        return value === compareTo;
    };
    // retorna um array com os objetos configurados e visiveis.
    // retorna um array com os objetos configurados e visiveis.
    /**
     * @protected
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.getVisibleFields = 
    // retorna um array com os objetos configurados e visiveis.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var visibleFields = [];
        this.fields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            if (_this.existsProperty(visibleFields, field.property)) {
                _this.printError("\"po-dynamic-form\" property \"" + field.property + "\" est\u00E1 duplicado. Interface: PoDynamicFormField.");
                return;
            }
            if (!field['property']) {
                _this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(_this.createField(field));
            }
        }));
        return visibleFields;
    };
    // converte um array em string para um array de objetos que contem label e value.
    // converte um array em string para um array de objetos que contem label e value.
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.convertOptions = 
    // converte um array em string para um array de objetos que contem label e value.
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var everyOptionString = options.every((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return typeof option === 'string'; }));
        if (everyOptionString) {
            return options.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return ({ label: value, value: value }); }));
        }
        return options;
    };
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.createField = 
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var control = this.getComponentControl(field);
        /** @type {?} */
        var options = !!field.options ? this.convertOptions(field.options) : undefined;
        /** @type {?} */
        var componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return __assign({ label: this.titleCasePipe.transform(field.property) }, field, { componentClass: componentClass,
            control: control,
            options: options });
    };
    /**
     * @private
     * @param {?} fields
     * @param {?} property
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.existsProperty = /**
     * @private
     * @param {?} fields
     * @param {?} property
     * @return {?}
     */
    function (fields, property) {
        return fields.some((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            return field.property === property;
        }));
    };
    // recupera o componente de acordo com algumas regras do field.
    // recupera o componente de acordo com algumas regras do field.
    /**
     * @private
     * @param {?=} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.getComponentControl = 
    // recupera o componente de acordo com algumas regras do field.
    /**
     * @private
     * @param {?=} field
     * @return {?}
     */
    function (field) {
        if (field === void 0) { field = (/** @type {?} */ ({})); }
        /** @type {?} */
        var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        return 'input';
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isCheckboxGroup = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isCombo = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var optionsService = field.optionsService;
        return !!optionsService && isTypeof(optionsService, 'string');
    };
    /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isCurrencyType = /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, PoDynamicFieldType.Currency) && (!mask && !pattern);
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isLookup = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var searchService = field.searchService;
        return !!searchService && isTypeof(searchService, 'string');
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isMultiselect = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
        return !optionsService && optionsMulti && !!options && options.length > 3;
    };
    /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isNumberType = /**
     * @private
     * @param {?} field
     * @param {?} type
     * @return {?}
     */
    function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, PoDynamicFieldType.Number) && (!mask && !pattern);
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isPassword = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var secret = field.secret;
        return secret;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isRadioGroup = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var optionsMulti = field.optionsMulti, options = field.options;
        return !optionsMulti && !!options && options.length <= 3;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isSelect = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var optionsMulti = field.optionsMulti, options = field.options;
        return !optionsMulti && !!options && options.length > 3;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.isTextarea = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        var rows = field.rows;
        return rows && rows >= 3;
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    PoDynamicFormFieldsBaseComponent.prototype.printError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        console.error(error);
    };
    PoDynamicFormFieldsBaseComponent.propDecorators = {
        fields: [{ type: Input, args: ['p-fields',] }],
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoDynamicFormFieldsBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDynamicFormFieldsBaseComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    PoDynamicFormFieldsBaseComponent.prototype._value;
    /** @type {?} */
    PoDynamicFormFieldsBaseComponent.prototype.visibleFields;
    /**
     * @type {?}
     * @private
     */
    PoDynamicFormFieldsBaseComponent.prototype.titleCasePipe;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente de criação dos campos dinâmicos.
 */
var PoDynamicFormFieldsComponent = /** @class */ (function (_super) {
    __extends(PoDynamicFormFieldsComponent, _super);
    function PoDynamicFormFieldsComponent(titleCasePipe) {
        return _super.call(this, titleCasePipe) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PoDynamicFormFieldsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fields) {
            this.visibleFields = this.getVisibleFields();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoDynamicFormFieldsComponent.prototype.trackBy = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    PoDynamicFormFieldsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-dynamic-form-fields',
                    template: "<div class=\"po-row\" *ngIf=\"visibleFields && visibleFields.length > 0\">\n  <ng-container *ngFor=\"let field of visibleFields; trackBy: trackBy\">\n\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\">\n    </po-divider>\n\n    <po-datepicker *ngIf=\"compareTo(field.control, 'datepicker')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-max-date]=\"field.maxValue\"\n      [p-min-date]=\"field.minValue\"\n      [p-required]=\"field.required\">\n    </po-datepicker>\n\n    <po-input *ngIf=\"compareTo(field.control, 'input')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-mask]=\"field.mask\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-pattern]=\"field.pattern\"\n      [p-required]=\"field.required\">\n      </po-input>\n\n    <po-number *ngIf=\"compareTo(field.control, 'number')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-min]=\"field.minValue\"\n      [p-max]=\"field.maxValue\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-required]=\"field.required\">\n    </po-number>\n\n    <po-decimal *ngIf=\"compareTo(field.control, 'decimal')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-required]=\"field.required\">\n    </po-decimal>\n\n    <po-select *ngIf=\"compareTo(field.control, 'select')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\">\n    </po-select>\n\n    <po-radio-group *ngIf=\"compareTo(field.control, 'radioGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-columns=\"3\"\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\">\n    </po-radio-group>\n\n    <po-switch *ngIf=\"compareTo(field.control, 'switch')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-label-off]=\"field.booleanFalse\"\n      [p-label-on]=\"field.booleanTrue\">\n    </po-switch>\n\n    <po-combo *ngIf=\"compareTo(field.control, 'combo')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"field.disabled\"\n      [p-filter-service]=\"field.optionsService\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-required]=\"field.required\">\n    </po-combo>\n\n    <po-lookup *ngIf=\"compareTo(field.control, 'lookup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      p-field-label=\"label\"\n      p-field-value=\"value\"\n      [ngClass]=\"field.componentClass\"\n      [p-columns]=\"field.columns\"\n      [p-disabled]=\"field.disabled\"\n      [p-filter-service]=\"field.searchService\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-required]=\"field.required\">\n    </po-lookup>\n\n    <po-checkbox-group *ngIf=\"compareTo(field.control, 'checkboxGroup')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-columns=\"3\"\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\">\n    </po-checkbox-group>\n\n    <po-multiselect *ngIf=\"compareTo(field.control, 'multiselect')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-options]=\"field.options\"\n      [p-required]=\"field.required\">\n    </po-multiselect>\n\n    <po-textarea *ngIf=\"compareTo(field.control, 'textarea')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-required]=\"field.required\"\n      [p-rows]=\"field.rows\">\n    </po-textarea>\n\n    <po-password *ngIf=\"compareTo(field.control, 'password')\"\n      [name]=\"field.property\"\n      [(ngModel)]=\"value[field.property]\"\n      [ngClass]=\"field.componentClass\"\n      p-clean\n      [p-disabled]=\"field.disabled\"\n      [p-help]=\"field.help\"\n      [p-label]=\"field.label\"\n      [p-maxlength]=\"field.maxLength\"\n      [p-minlength]=\"field.minLength\"\n      [p-required]=\"field.required\">\n  </po-password>\n\n  </ng-container>\n</div>\n",
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]
                }] }
    ];
    /** @nocollapse */
    PoDynamicFormFieldsComponent.ctorParameters = function () { return [
        { type: TitleCasePipe }
    ]; };
    return PoDynamicFormFieldsComponent;
}(PoDynamicFormFieldsBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
 *
 */
var PoDynamicViewBaseComponent = /** @class */ (function () {
    function PoDynamicViewBaseComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this._fields = [];
        this._showAllValue = false;
        this._value = {};
        this.visibleFields = [];
    }
    Object.defineProperty(PoDynamicViewBaseComponent.prototype, "fields", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fields;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de objetos que implementam a interface `PoDynamicView`.
         *
         * > Ex: `[ { property: 'age' } ]`
         *
         * Regras de tipagem e formatação dos valores exibidos:
         *
         * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
         * como formato padrão.
         * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
         * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
         * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
         * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
         *
         * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
         *
         * @default `[]`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista de objetos que implementam a interface `PoDynamicView`.
         *
         * > Ex: `[ { property: 'age' } ]`
         *
         * Regras de tipagem e formatação dos valores exibidos:
         *
         * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
         * como formato padrão.
         * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
         * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
         * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
         * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
         *
         * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
         *
         * \@default `[]`
         * @param {?} fields
         * @return {?}
         */
        function (fields) {
            this._fields = Array.isArray(fields) ? __spread(fields) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDynamicViewBaseComponent.prototype, "showAllValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showAllValue;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showAllValue = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDynamicViewBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /**
         * @description
         *
         * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
         * dos objetos contidos na propridade `p-fields`.
         *
         * > Ex: `{ age: '35' }`
         */
        set: /**
         * \@description
         *
         * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
         * dos objetos contidos na propridade `p-fields`.
         *
         * > Ex: `{ age: '35' }`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    // retorna os fields com os valores recuperados do objeto value.
    // retorna os fields com os valores recuperados do objeto value.
    /**
     * @protected
     * @return {?}
     */
    PoDynamicViewBaseComponent.prototype.getConfiguredFields = 
    // retorna os fields com os valores recuperados do objeto value.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var newFields = [];
        this.fields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            if (isVisibleField(field)) {
                newFields.push(_this.createField(field));
            }
        }));
        return newFields;
    };
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    /**
     * @protected
     * @return {?}
     */
    PoDynamicViewBaseComponent.prototype.getMergedFields = 
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var mergedFields = __spread(this.getConfiguredFields());
        this.getValueFields().forEach((/**
         * @param {?} valueField
         * @return {?}
         */
        function (valueField) {
            /** @type {?} */
            var fieldIndex = mergedFields.findIndex((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.property === valueField.property; }));
            /** @type {?} */
            var property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(_this.createField({ property: property }));
            }
        }));
        return mergedFields;
    };
    // retorna o objeto value como fields.
    // retorna o objeto value como fields.
    /**
     * @protected
     * @return {?}
     */
    PoDynamicViewBaseComponent.prototype.getValueFields = 
    // retorna o objeto value como fields.
    /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        return Object.keys(this.value).map((/**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            return _this.createField({ property: property });
        }));
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    PoDynamicViewBaseComponent.prototype.createField = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var property = field.property;
        /** @type {?} */
        var value = this.transformValue(field.type, this.value[property], field.format);
        /** @type {?} */
        var classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return __assign({ property: property,
            value: value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
    };
    /**
     * @private
     * @param {?} type
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    PoDynamicViewBaseComponent.prototype.transformValue = /**
     * @private
     * @param {?} type
     * @param {?} value
     * @param {?} format
     * @return {?}
     */
    function (type, value, format) {
        /** @type {?} */
        var transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    };
    PoDynamicViewBaseComponent.propDecorators = {
        fields: [{ type: Input, args: ['p-fields',] }],
        showAllValue: [{ type: Input, args: ['p-show-all-value',] }],
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoDynamicViewBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype._showAllValue;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype._value;
    /** @type {?} */
    PoDynamicViewBaseComponent.prototype.visibleFields;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.currencyPipe;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.datePipe;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.decimalPipe;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.timePipe;
    /**
     * @type {?}
     * @private
     */
    PoDynamicViewBaseComponent.prototype.titleCasePipe;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoDynamicViewBaseComponent
 *
 * \@example
 *
 * <example name="po-dynamic-view-basic" title="Portinari Dynamic View Basic">
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-view-basic/sample-po-dynamic-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-view-employee" title="Portinari Dynamic View - Employee">
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.html"> </file>
 *  <file name="sample-po-dynamic-view-employee/sample-po-dynamic-view-employee.component.ts"> </file>
 * </example>
 */
var PoDynamicViewComponent = /** @class */ (function (_super) {
    __extends(PoDynamicViewComponent, _super);
    function PoDynamicViewComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) {
        return _super.call(this, currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe) || this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PoDynamicViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fields || changes.value || changes.showAllValue) {
            this.visibleFields = this.getVisibleFields();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoDynamicViewComponent.prototype.getVisibleFields = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.showAllValue) {
            return this.getMergedFields();
        }
        return this.value && this.fields.length ? this.getConfiguredFields() : this.getValueFields();
    };
    PoDynamicViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-dynamic-view',
                    template: "<div class=\"po-row\" *ngIf=\"visibleFields.length\">\n\n  <ng-template ngFor let-field [ngForOf]=\"visibleFields\">\n\n    <po-divider *ngIf=\"field?.divider?.trim()\" class=\"po-sm-12\" [p-label]=\"field.divider\">\n    </po-divider>\n\n    <ng-container *ngTemplateOutlet=\"!field.tag ? poInfo : poTag; context: { $implicit: field }\">\n    </ng-container>\n\n  </ng-template>\n\n</div>\n\n<ng-template #poInfo let-field>\n  <po-info [ngClass]=\"field.cssClass\"\n    [p-label]=\"field.label\"\n    [p-value]=\"field.value\">\n  </po-info>\n</ng-template>\n\n<ng-template #poTag let-field>\n  <po-tag [ngClass]=\"field.cssClass\"\n    [p-color]=\"field.color\"\n    [p-icon]=\"field.icon\"\n    [p-inverse]=\"field.inverse\"\n    [p-label]=\"field.label\"\n    [p-value]=\"field.value\">\n  </po-tag>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    PoDynamicViewComponent.ctorParameters = function () { return [
        { type: CurrencyPipe },
        { type: DatePipe },
        { type: DecimalPipe },
        { type: PoTimePipe },
        { type: TitleCasePipe }
    ]; };
    return PoDynamicViewComponent;
}(PoDynamicViewBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoDynamicModule = /** @class */ (function () {
    function PoDynamicModule() {
    }
    PoDynamicModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PoDividerModule,
                        PoInfoModule,
                        PoFieldModule,
                        PoTagModule,
                        PoTimeModule
                    ],
                    declarations: [
                        PoDynamicFormComponent,
                        PoDynamicFormFieldsComponent,
                        PoDynamicViewComponent
                    ],
                    exports: [
                        PoDynamicFormComponent,
                        PoDynamicViewComponent
                    ],
                    providers: [CurrencyPipe, DatePipe, DecimalPipe, PoTimePipe, TitleCasePipe]
                },] }
    ];
    return PoDynamicModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoGridCellActionComponent = /** @class */ (function () {
    function PoGridCellActionComponent() {
        this.position = '';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    PoGridCellActionComponent.prototype.onKeyDownContent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('onKeyDownContent: ', event);
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            // this.openActions(this.value);
            return;
        }
    };
    PoGridCellActionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-grid-cell-action',
                    template: "<div>\n  <div #contentElement [id]=\"position\"\n    class=\"po-grid-cell-action-content\"\n    tabindex=\"0\"\n    (keydown)=\"onKeyDownContent($event)\">\n    <span>{{ value || '&nbsp;' }}</span>\n  </div>\n</div>\n\n",
                    styles: ["\n  .po-grid-cell-action-content {\n    border-bottom: 1px solid #eceeee;\n    border-left: none;\n    border-right: 1px solid #eceeee;\n    border-top: none;\n    font-family: NunitoSans;\n    font-size: 14px;\n    height: 44px;\n    line-height: 1.71;\n    margin: 0;\n    max-height: 44px;\n    max-width: 56px;\n    min-height: 44px;\n    min-width: 56px;\n    padding: 10px 16px;\n    text-align: center;\n    width: 56px;\n  }\n\n  .po-grid-cell-action-content:focus {\n    border: none;\n    outline: 1px solid #0c9abe;\n  }\n  "]
                }] }
    ];
    /** @nocollapse */
    PoGridCellActionComponent.ctorParameters = function () { return []; };
    PoGridCellActionComponent.propDecorators = {
        position: [{ type: Input, args: ['p-position',] }],
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoGridCellActionComponent;
}());
if (false) {
    /** @type {?} */
    PoGridCellActionComponent.prototype.position;
    /** @type {?} */
    PoGridCellActionComponent.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoGridCellComponent = /** @class */ (function () {
    function PoGridCellComponent(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this._value = '';
        this.edit = false;
        this.editValue = '';
        this.align = 'left';
        this.freeze = false;
        this.tabIndex = -1;
        this.position = '';
        this.readonly = false;
        this.required = false;
        this.valueChange = new EventEmitter();
    }
    Object.defineProperty(PoGridCellComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this._width ? this._width + "px" : '100%';
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._width = value;
            if (this.freeze && !this._width) {
                this._width = 100;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoGridCellComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        // @Input('p-value') value?: string;
        set: 
        // @Input('p-value') value?: string;
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = value;
            this.valueChange.emit(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    PoGridCellComponent.prototype.onKeyDownContent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('onKeyDownContent: ', event);
        // BACKSPACE / DELETE
        if ((!event.ctrlKey) && ((event.keyCode === 8) || (event.keyCode === 46))) {
            if (this.readonly) {
                return;
            }
            event.preventDefault();
            this.value = '';
            return;
        }
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            this.onEditCell(this.value);
            return;
        }
        // A..Z - 0..9
        if ((event.keyCode >= 65) && (event.keyCode <= 90) || (event.keyCode >= 48) && (event.keyCode <= 57)) {
            event.preventDefault();
            this.onEditCell(event.key);
            return;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoGridCellComponent.prototype.dblclick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('dblclick: ', event);
        event.preventDefault();
        this.onEditCell(this.value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoGridCellComponent.prototype.onBlurInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('onBlurInput: ', event);
        this.value = this.editValue;
        this.editValue = undefined;
        this.edit = false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoGridCellComponent.prototype.onKeyDownInput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // console.log('onKeyDownInput: ', event);
        // ENTER
        if (event.keyCode === 13) {
            this.value = this.editValue;
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
        }
        // ESCAPE
        if (event.keyCode === 27) {
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
            event.stopPropagation();
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoGridCellComponent.prototype.onEditCell = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.readonly) {
            return;
        }
        this.editValue = value;
        this.edit = true;
        this.changeDetectorRef.detectChanges();
        this.inputElement.nativeElement.focus();
    };
    PoGridCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-grid-cell',
                    template: "<div>\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\n\n  <ng-template #content>\n    <div #contentElement\n      [id]=\"position\"\n      class=\"po-grid-cell-content po-grid-cell-{{ align }} {{ !value && required ? 'po-grid-cell-required' : '' }}\"\n      (keydown)=\"onKeyDownContent($event)\"\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\n      (dblclick)=dblclick($event)>\n      <span>{{ value || '&nbsp;' }}</span>\n    </div>\n  </ng-template>\n\n  <ng-template #input>\n    <input\n      [id]=\"position\"\n      #inputElement class=\"po-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown.arrowup)=\"$event.stopPropagation()\"\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\n      (keydown.arrowright)=\"$event.stopPropagation()\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (blur)=\"onBlurInput($event)\">\n\n    <!-- <po-input\n      #inputElement class=\"po-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (p-blur)=\"onBlurInput($event)\">\n    </po-input> -->\n  </ng-template>\n</div>\n\n",
                    styles: ["\n  .po-grid-cell-content, .po-grid-cell-input {\n    border-bottom: 1px solid #eceeee;\n    border-left: none;\n    border-right: 1px solid #eceeee;\n    border-top: none;\n    font-family: NunitoSans;\n    font-size: 14px;\n    height: 44px;\n    line-height: 1.71;\n    margin: 0;\n    overflow: hidden;\n    padding: 10px 16px;\n    text-align: left;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  .po-grid-cell-center {\n    text-align: center;\n  }\n\n  .po-grid-cell-right {\n    text-align: right;\n  }\n\n  .po-grid-cell-content:focus {\n    border: none;\n    outline: 1px solid #0c9abe;\n  }\n\n  .po-grid-cell-required {\n    border: 1px dashed red;\n  }\n\n  .po-grid-cell-input {\n    border: 1px solid #0c9abe;\n    box-shadow: 0px 0px 4px 4px rgba(0, 0, 0, 0.10);\n    outline: none;\n    position: relative;\n    min-width: 100%;\n    max-width: 100%;\n    width: 100%;\n  }\n  "]
                }] }
    ];
    /** @nocollapse */
    PoGridCellComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoGridCellComponent.propDecorators = {
        align: [{ type: Input, args: ['p-align',] }],
        freeze: [{ type: Input, args: ['p-freeze',] }],
        tabIndex: [{ type: Input, args: ['p-tab-index',] }],
        position: [{ type: Input, args: ['p-position',] }],
        width: [{ type: Input, args: ['p-width',] }],
        readonly: [{ type: Input, args: ['p-readonly',] }],
        required: [{ type: Input, args: ['p-required',] }],
        valueChange: [{ type: Output, args: ['p-valueChange',] }],
        value: [{ type: Input, args: ['p-value',] }],
        inputElement: [{ type: ViewChild, args: ['inputElement', { static: true },] }],
        contentElement: [{ type: ViewChild, args: ['contentElement', { static: true },] }]
    };
    return PoGridCellComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoGridCellComponent.prototype._width;
    /** @type {?} */
    PoGridCellComponent.prototype._value;
    /** @type {?} */
    PoGridCellComponent.prototype.edit;
    /** @type {?} */
    PoGridCellComponent.prototype.editValue;
    /** @type {?} */
    PoGridCellComponent.prototype.align;
    /** @type {?} */
    PoGridCellComponent.prototype.freeze;
    /** @type {?} */
    PoGridCellComponent.prototype.tabIndex;
    /** @type {?} */
    PoGridCellComponent.prototype.position;
    /** @type {?} */
    PoGridCellComponent.prototype.readonly;
    /** @type {?} */
    PoGridCellComponent.prototype.required;
    /** @type {?} */
    PoGridCellComponent.prototype.valueChange;
    /** @type {?} */
    PoGridCellComponent.prototype.inputElement;
    /** @type {?} */
    PoGridCellComponent.prototype.contentElement;
    /**
     * @type {?}
     * @private
     */
    PoGridCellComponent.prototype.changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * \@example
 *
 * <example name="po-grid-basic" title="Portinari Grid Basic">
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
 * </example>
 */
var PoGridComponent = /** @class */ (function () {
    function PoGridComponent(changeDetectorRef, elRef, renderer) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        this.lastCell = '0-0';
        this.lastRow = 0;
        this.lastColumn = 0;
        this.currencyCell = '0-0';
        this.currencyRow = 0;
        this.currencyColumn = 0;
        this.logger = false;
        this.width = '100%';
        this.widporeeze = 0;
        this.widthActions = 0;
        this._columns = [];
        /**
         * \@description
         *
         * Ações disparadas quando uma linha do grid é manipulada.
         */
        this.rowActions = {};
        /**
         * Lista com os dados que serão exibidos no grid.
         */
        this.data = [];
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.debounceResize();
        }));
    }
    Object.defineProperty(PoGridComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            return this._columns.filter((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.freeze !== true && column.action !== true; }));
        },
        /**
         * Colunas exibidas no grid.
         */
        set: /**
         * Colunas exibidas no grid.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._columns = __spread(value);
            this._columns.forEach((/**
             * @param {?} column
             * @return {?}
             */
            function (column) {
                column.label = column.label || column.property;
                if (column.freeze === true) {
                    column.cssWidth = (column.width || 100) + "px";
                }
                else {
                    column.cssWidth = column.width ? column.width + "px" : '100%';
                }
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoGridComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoGridComponent.prototype.debounceResize = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var widthTableWrapper = _this.tableWrapper.nativeElement.offsetWidth;
            _this.width = widthTableWrapper - (_this.widporeeze + 8) - _this.widthActions + "px";
        }), 100);
    };
    Object.defineProperty(PoGridComponent.prototype, "freezeColumns", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var freezeColumns = this._columns.filter((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.freeze === true; }));
            this.widporeeze = freezeColumns.reduce((/**
             * @param {?} prev
             * @param {?} current
             * @return {?}
             */
            function (prev, current) { return prev + (current.width || 100); }), 0);
            return freezeColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoGridComponent.prototype, "actionColumns", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var actionsColumns = this._columns.filter((/**
             * @param {?} column
             * @return {?}
             */
            function (column) { return column.action === true; }));
            this.widthActions = actionsColumns.length > 0 ? 56 : 0;
            return actionsColumns;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    PoGridComponent.prototype.cancelRow = /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    function (event, row) {
        var _this = this;
        /** @type {?} */
        var el = event.path.find((/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return element.id; }));
        if (!el) {
            return;
        }
        var _a = __read((el.id).split('-'), 1), x = _a[0];
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.selectCell(_this.currencyRow, _this.currencyColumn); }));
        }
    };
    /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    PoGridComponent.prototype.removeRow = /**
     * @param {?} event
     * @param {?} row
     * @return {?}
     */
    function (event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        /** @type {?} */
        var index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if ((this.data.length === 0) || (index === this.data.length)) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    };
    /**
     * @param {?} event
     * @param {?} direction
     * @return {?}
     */
    PoGridComponent.prototype.tableKeydown = /**
     * @param {?} event
     * @param {?} direction
     * @return {?}
     */
    function (event, direction) {
        var _a = __read(event.target.id.split('-'), 2), row = _a[0], col = _a[1];
        row = +row;
        col = +col;
        /** @type {?} */
        var prow = +row;
        /** @type {?} */
        var pcol = +col;
        // event.preventDefault();
        // event.stopPropagation();
        // debugger;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if ((direction === 'up') && (row > 0)) {
            prow--;
        }
        else if ((direction === 'left') && (col > 0)) {
            pcol--;
        }
        else if ((direction === 'right') && (col < this._columns.length - 1)) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === prow + "-" + pcol) {
            // console.log('vazou');
            return;
        }
        // debugger;
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('mudou de linha');
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoGridComponent.prototype.tableClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var el = event.path.find((/**
         * @param {?} element
         * @return {?}
         */
        function (element) { return element.id; }));
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        var _a = __read((el.id).split('-'), 2), row = _a[0], col = _a[1];
        /** @type {?} */
        var prow = +row;
        /** @type {?} */
        var pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('>>>>>>> ', prow - 1);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoGridComponent.prototype.saveRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        // console.log(this.data[row - 1]);
        var _this = this;
        // console.log(this.data[row - 1]);
        /** @type {?} */
        var obj = this.data[row - 1];
        if (!Object.keys(obj).some((/**
         * @param {?} prop
         * @return {?}
         */
        function (prop) { return obj[prop] !== _this.currencyObj[prop]; }))) {
            // console.log('tudo igual');
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        /** @type {?} */
        var requireds = [];
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        }));
        return requireds.length === 0;
    };
    /**
     * @return {?}
     */
    PoGridComponent.prototype.insertRow = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        // this.currencyObj = Object.assign({}, obj);
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoGridComponent.prototype.isEmptyRow = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var obj = this.data[row - 1];
        if (!obj) { // title
            return false;
        }
        /** @type {?} */
        var filled = Object.keys(obj).some((/**
         * @param {?} property
         * @return {?}
         */
        function (property) { return obj[property]; }));
        return !filled;
    };
    /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    PoGridComponent.prototype.selectCell = /**
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (row, col) {
        /** @type {?} */
        var nextCell = this.elRef.nativeElement.querySelector("[id='" + row + "-" + col + "']");
        if (nextCell) {
            this.currencyCell = row + "-" + col;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    };
    PoGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-grid',
                    template: "<div class=\"po-grid-wrapper po-grid-row-wrapper\" #wrapper>\n\n  <div *ngIf=\"logger\">\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br>\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br>\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br>\n    <hr>\n    currencyObj: {{ currencyObj | json }}\n    <hr>\n  </div>\n\n  <div class=\"po-grid\">\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\"\n        #table\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\n        (click)=\"tableClick($event)\"\n        (contextmenu)=\"tableClick($event)\"\n        (dblclick)=\"tableClick($event)\">\n\n        <div class=\"po-grid-cell po-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-normal\"\n          [style.width]=\"width\" [style.max-width]=\"width\" [style.min-width]=\"width\">\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- <div class=\"po-grid-footer-wrapper\">\n    <div class=\"po-grid-footer\">\n      <div class=\"links\"><a href=\"#\">RODAP\u00C9</a></div>\n    </div>\n  </div> -->\n\n</div>\n\n<!-- Coluna com as colunas congeladas -->\n<ng-template #divFreezeColumns>\n  <div class=\"po-grid po-grid-freeze\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head *ngFor=\"let column of freezeColumns; index as i\" class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          p-position=\"{{ '0-' + i }}\"\n          [p-width]=\"column.width\"\n          [p-align]=\"column.align\"\n          [p-title]=\"column.label\">\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <po-grid-cell *ngFor=\"let column of freezeColumns; index as i\" class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ (j + 1) + '-' + i }}\"\n          [p-width]=\"column.width\"\n          [(p-value)]=\"row[column.property]\">\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas congeladas -->\n\n<!-- Coluna com as colunas nornais -->\n<ng-template #divColumns>\n  <div class=\"po-grid po-grid-normal\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head *ngFor=\"let column of columns; index as i\" class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-width]=\"column.width\">\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <po-grid-cell *ngFor=\"let column of columns; index as i\" class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length) }}\"\n          [(p-value)]=\"row[column.property]\"\n          [p-width]=\"column.width\">\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas nornais -->\n\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\n<ng-template #divActionColumns>\n    <div class=\"po-grid po-grid-actions\">\n      <div class=\"po-grid-header-group\">\n        <div class=\"po-grid-row\">\n          <po-grid-head *ngFor=\"let column of actionColumns; index as i\" class=\"po-grid-title\"\n            p-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\n            [p-title]=\"column.label\"\n            [p-align]=\"column.align\">\n          </po-grid-head>\n        </div>\n      </div>\n\n      <div class=\"po-grid-body\">\n        <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n          (keydown.control.delete)=\"removeRow($event, row)\"\n          (keydown.esc)=\"cancelRow($event, row)\">\n          <po-grid-cell-action *ngFor=\"let column of actionColumns; index as i\" class=\"po-grid-cell\"\n            p-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length + columns.length) }}\"\n            [p-value]=\"row[column.property]\">\n          </po-grid-cell-action>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\n",
                    styles: ["\n  .po-grid-wrapper {\n    /* margin: 30px; */\n    overflow: auto;\n    border: 1px solid #eceeee;\n    /* width: 100%; */\n    /* border: 1px solid red; */\n    /* display: table-cell; */\n  }\n\n  .po-grid {\n    display: table;\n    border-right: none;\n    border-bottom: none;\n  }\n\n  .po-grid-cell-normal::-webkit-scrollbar, .po-grid-row-wrapper::-webkit-scrollbar {\n    border-radius: 2px;\n    height: 4px;\n    opacity: 0.5;\n    width: 4px;\n  }\n  .po-grid-cell-normal::-webkit-scrollbar-thumb, .po-grid-row-wrapper::-webkit-scrollbar-thumb {\n    background-color: #0c9abe;\n  }\n\n  .po-grid .fixed {\n    display: table;\n  }\n\n  .po-grid-header-group {\n    display: table-header-group;\n  }\n\n  .po-grid-body {\n    display: table-row-group;\n  }\n\n  .po-grid-row {\n    display: table-row;\n  }\n\n  .po-grid-title, .po-grid-cell {\n    display: table-cell;\n    border: none;\n  }\n\n  .po-grid-cell-freeze {\n    border-right: 2px solid #ceeaf2;\n  }\n\n  .po-grid-cell-action {\n    color: blue;\n    border-left: 2px solid #ceeaf2;\n  }\n\n  .po-grid-freeze, .po-grid-actions {\n    width: 100%;\n  }\n\n  .po-grid-normal {\n    width: 100%;\n  }\n\n  .po-grid-cell-normal {\n    overflow: auto;\n  }\n\n  .po-grid-footer {\n    display: table-footer-group;\n  }\n\n  .po-grid-footer-wrapper {\n    border: 1px solid #eceeee;\n    border-top: none;\n  }\n  "]
                }] }
    ];
    /** @nocollapse */
    PoGridComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    PoGridComponent.propDecorators = {
        tableElement: [{ type: ViewChild, args: ['table', { static: true },] }],
        tableWrapper: [{ type: ViewChild, args: ['wrapper', { static: true },] }],
        rowActions: [{ type: Input, args: ['p-row-actions',] }],
        columns: [{ type: Input, args: ['p-columns',] }],
        data: [{ type: Input, args: ['p-data',] }]
    };
    return PoGridComponent;
}());
if (false) {
    /** @type {?} */
    PoGridComponent.prototype.lastCell;
    /** @type {?} */
    PoGridComponent.prototype.lastRow;
    /** @type {?} */
    PoGridComponent.prototype.lastColumn;
    /** @type {?} */
    PoGridComponent.prototype.currencyCell;
    /** @type {?} */
    PoGridComponent.prototype.currencyRow;
    /** @type {?} */
    PoGridComponent.prototype.currencyColumn;
    /** @type {?} */
    PoGridComponent.prototype.currencyObj;
    /** @type {?} */
    PoGridComponent.prototype.logger;
    /** @type {?} */
    PoGridComponent.prototype.width;
    /** @type {?} */
    PoGridComponent.prototype.widporeeze;
    /** @type {?} */
    PoGridComponent.prototype.widthActions;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype.resizeListener;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype.timeoutResize;
    /** @type {?} */
    PoGridComponent.prototype.tableElement;
    /** @type {?} */
    PoGridComponent.prototype.tableWrapper;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype._columns;
    /**
     * \@description
     *
     * Ações disparadas quando uma linha do grid é manipulada.
     * @type {?}
     */
    PoGridComponent.prototype.rowActions;
    /**
     * Lista com os dados que serão exibidos no grid.
     * @type {?}
     */
    PoGridComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype.changeDetectorRef;
    /**
     * @type {?}
     * @private
     */
    PoGridComponent.prototype.elRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoGridHeadComponent = /** @class */ (function () {
    function PoGridHeadComponent(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.align = 'left';
        this.boolean = false;
        this.position = '';
        this.tabIndex = -1;
    }
    Object.defineProperty(PoGridHeadComponent.prototype, "width", {
        get: /**
         * @return {?}
         */
        function () {
            return this._width ? this._width + "px" : '100%';
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._width = value;
        },
        enumerable: true,
        configurable: true
    });
    PoGridHeadComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-grid-head',
                    template: "<div>\n  <div [id]=\"position\"\n    class=\"po-grid-head-content po-grid-head-{{ align }}\"\n    tabindex=\"{{ title ? 0 : -1 }}\">\n    <span>{{ title || '&nbsp;' }}</span>\n  </div>\n</div>\n\n",
                    styles: ["\n  .po-grid-head-content {\n    border-bottom: 2px solid #ceeaf2;\n    border-left: none;\n    border-right: 1px solid #eceeee;\n    border-top: none;\n    color: #0c9abe;\n    font-family: NunitoSans-bold;\n    font-size: 14px;\n    height: 44px;\n    line-height: 1.71;\n    margin: 0;\n    max-height: 44px;\n    min-height: 44px;\n    overflow: hidden;\n    padding: 10px 16px;\n    text-align: left;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  .po-grid-head-center {\n    text-align: center;\n  }\n\n  .po-grid-head-right {\n    text-align: right;\n  }\n\n  .po-grid-head-content:focus {\n    border: 1px solid #0c9abe;\n    outline: none;\n  }\n  "]
                }] }
    ];
    /** @nocollapse */
    PoGridHeadComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoGridHeadComponent.propDecorators = {
        align: [{ type: Input, args: ['p-align',] }],
        boolean: [{ type: Input, args: ['p-freeze',] }],
        position: [{ type: Input, args: ['p-position',] }],
        tabIndex: [{ type: Input, args: ['p-tab-index',] }],
        width: [{ type: Input, args: ['p-width',] }],
        title: [{ type: Input, args: ['p-title',] }]
    };
    return PoGridHeadComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoGridHeadComponent.prototype._width;
    /** @type {?} */
    PoGridHeadComponent.prototype.align;
    /** @type {?} */
    PoGridHeadComponent.prototype.boolean;
    /** @type {?} */
    PoGridHeadComponent.prototype.position;
    /** @type {?} */
    PoGridHeadComponent.prototype.tabIndex;
    /** @type {?} */
    PoGridHeadComponent.prototype.title;
    /**
     * @type {?}
     * @private
     */
    PoGridHeadComponent.prototype.changeDetectorRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-grid.
 */
var PoGridModule = /** @class */ (function () {
    function PoGridModule() {
    }
    PoGridModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PoFieldModule
                    ],
                    declarations: [
                        PoGridCellActionComponent,
                        PoGridCellComponent,
                        PoGridComponent,
                        PoGridHeadComponent
                    ],
                    exports: [
                        PoGridComponent
                    ]
                },] }
    ];
    return PoGridModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poListViewLiteralsDefault = {
    en: (/** @type {?} */ ({
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    })),
    es: (/** @type {?} */ ({
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    })),
    pt: (/** @type {?} */ ({
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    })),
    ru: (/** @type {?} */ ({
        hideDetails: 'Скрыть детали',
        loadMoreData: 'Загрузить больше результатов',
        noData: 'Данные не найдены',
        selectAll: 'Выбрать все',
        showDetails: 'Посмотреть детали'
    }))
};
/**
 * \@description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
 * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 */
var PoListViewBaseComponent = /** @class */ (function () {
    function PoListViewBaseComponent() {
        this.selectAll = false;
        this.showHeader = false;
        /**
         * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
         *
         * > Caso nenhuma ação for definida o mesmo não ficará visível.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação que será executada ao clicar no título.
         *
         * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
         */
        this.titleAction = new EventEmitter();
    }
    Object.defineProperty(PoListViewBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de ações que serão exibidas no componente.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista de ações que serão exibidas no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._actions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `po-list-view` em *pixels*.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do `po-list-view` em *pixels*.
         * @param {?} height
         * @return {?}
         */
        function (height) {
            this._height = height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "hideSelectAll", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hideSelectAll;
        },
        /**
         * @description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * @default `false`
         */
        set: /**
         * \@description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * \@default `false`
         * @param {?} hideSelectAll
         * @return {?}
         */
        function (hideSelectAll) {
            this._hideSelectAll = convertToBoolean(hideSelectAll);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /** Lista de itens que serão exibidos no componente. */
        set: /**
         * Lista de itens que serão exibidos no componente.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poListViewLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-list-view
         *   [p-literals]="customLiterals">
         * </po-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-list-view
         *   [p-literals]="customLiterals">
         * </po-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poListViewLiteralsDefault[poLocaleDefault], poListViewLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poListViewLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "select", {
        get: /**
         * @return {?}
         */
        function () {
            return this._select;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * \@default `false`
         * @param {?} select
         * @return {?}
         */
        function (select) {
            this._select = convertToBoolean(select);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "showMoreDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._showMoreDisabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showMoreDisabled = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    PoListViewBaseComponent.prototype.onClickAction = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        /** @type {?} */
        var cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    };
    /**
     * @return {?}
     */
    PoListViewBaseComponent.prototype.onShowMore = /**
     * @return {?}
     */
    function () {
        this.showMore.emit();
    };
    /**
     * @param {?} listItem
     * @return {?}
     */
    PoListViewBaseComponent.prototype.runTitleAction = /**
     * @param {?} listItem
     * @return {?}
     */
    function (listItem) {
        /** @type {?} */
        var itemWithPublicProperties = this.deleteInternalAttrs(listItem);
        this.titleAction.emit(itemWithPublicProperties);
    };
    /**
     * @return {?}
     */
    PoListViewBaseComponent.prototype.selectAllListItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.$selected = _this.selectAll;
            }));
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    PoListViewBaseComponent.prototype.selectListItem = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    };
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    PoListViewBaseComponent.prototype.deleteInternalAttrs = /**
     * @private
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var itemCopy = item ? __assign({}, item) : undefined;
        for (var key in itemCopy) {
            if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                delete itemCopy[key];
            }
        }
        return itemCopy;
    };
    /**
     * @private
     * @param {?} items
     * @return {?}
     */
    PoListViewBaseComponent.prototype.checkIfItemsAreSelected = /**
     * @private
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var someCheckedOrIndeterminate = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected || item.$selected === null; });
        /** @type {?} */
        var everyChecked = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.$selected; });
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    PoListViewBaseComponent.prototype.showMainHeader = /**
     * @private
     * @return {?}
     */
    function () {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    };
    PoListViewBaseComponent.propDecorators = {
        actions: [{ type: Input, args: ['p-actions',] }],
        height: [{ type: Input, args: ['p-height',] }],
        hideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
        items: [{ type: Input, args: ['p-items',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        propertyLink: [{ type: Input, args: ['p-property-link',] }],
        propertyTitle: [{ type: Input, args: ['p-property-title',] }],
        select: [{ type: Input, args: ['p-select',] }],
        showMoreDisabled: [{ type: Input, args: ['p-show-more-disabled',] }],
        showMore: [{ type: Output, args: ['p-show-more',] }],
        titleAction: [{ type: Output, args: ['p-title-action',] }]
    };
    return PoListViewBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._hideSelectAll;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._select;
    /**
     * @type {?}
     * @private
     */
    PoListViewBaseComponent.prototype._showMoreDisabled;
    /** @type {?} */
    PoListViewBaseComponent.prototype.popupTarget;
    /** @type {?} */
    PoListViewBaseComponent.prototype.selectAll;
    /** @type {?} */
    PoListViewBaseComponent.prototype.showHeader;
    /**
     * Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será usado como link para o título.
     * @type {?}
     */
    PoListViewBaseComponent.prototype.propertyLink;
    /**
     * Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será exibido como o título de cada item.
     * @type {?}
     */
    PoListViewBaseComponent.prototype.propertyTitle;
    /**
     * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
     *
     * > Caso nenhuma ação for definida o mesmo não ficará visível.
     * @type {?}
     */
    PoListViewBaseComponent.prototype.showMore;
    /**
     * Ação que será executada ao clicar no título.
     *
     * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
     * @type {?}
     */
    PoListViewBaseComponent.prototype.titleAction;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="[{id: 1, name: "Register", email: register\@portinari.com}]">
 *
 *   <ng-template p-list-view-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="[{id: 1, name: "Register", email: register\@portinari.com}]">
 *
 *    <div *p-list-view-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **p-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `p-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * \@Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <po-list-view
 *        [p-items]="items">
 *        <ng-template p-list-view-content-template let-item [p-title]="customTitle">
 *          <div class="po-row">
 *            <po-info class="po-md-12" p-label="Customer" [p-value]="item.customer"></po-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
var PoListViewContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoListViewContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoListViewContentTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-list-view-content-template]'
                },] }
    ];
    /** @nocollapse */
    PoListViewContentTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    PoListViewContentTemplateDirective.propDecorators = {
        title: [{ type: Input, args: ['p-title',] }]
    };
    return PoListViewContentTemplateDirective;
}());
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `string`, que será utilizado como o título de cada item da lista.
     *
     * > Por parâmetro será enviado o item corrente, onde poderá utilizá-lo para recuperar dados sobre o mesmo.
     * @type {?}
     */
    PoListViewContentTemplateDirective.prototype.title;
    /** @type {?} */
    PoListViewContentTemplateDirective.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoListViewComponent
 *
 * \@description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
var PoListViewDetailTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoListViewDetailTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoListViewDetailTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-list-view-detail-template]'
                },] }
    ];
    /** @nocollapse */
    PoListViewDetailTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    PoListViewDetailTemplateDirective.propDecorators = {
        showDetail: [{ type: Input, args: ['p-show-detail',] }]
    };
    return PoListViewDetailTemplateDirective;
}());
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que deve retornar um valor do tipo `boolean`, que será utilizado como a validação para que o detalhe de item
     * da lista inicie aberto ou fechado.
     *
     * @type {?}
     */
    PoListViewDetailTemplateDirective.prototype.showDetail;
    /** @type {?} */
    PoListViewDetailTemplateDirective.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoListViewBaseComponent
 *
 * \@example
 *
 * <example name="po-list-view-basic" title="Portinari List View Basic">
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-labs" title="Portinari List View Labs">
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-hiring-processes" title="Portinari List View - Hiring Processes">
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
var PoListViewComponent = /** @class */ (function (_super) {
    __extends(PoListViewComponent, _super);
    function PoListViewComponent(changeDetector, differs) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    Object.defineProperty(PoListViewComponent.prototype, "hasContentTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "hasDetailTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.listViewDetailTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "displayShowMoreButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "showButtonsActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "showPopupActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.visibleActions && this.visibleActions.length > 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "titleHasAction", {
        get: /**
         * @return {?}
         */
        function () {
            return this.titleAction.observers.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewComponent.prototype, "visibleActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.actions && this.actions.filter((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return action.visible !== false; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoListViewComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.initShowDetail();
    };
    /**
     * @return {?}
     */
    PoListViewComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.checkItemsChange();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoListViewComponent.prototype.checkTitleType = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoListViewComponent.prototype.getItemTitle = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title ?
            this.listViewContentTemplate.title(item) : item[this.propertyTitle];
    };
    /**
     * @return {?}
     */
    PoListViewComponent.prototype.hasItems = /**
     * @return {?}
     */
    function () {
        return this.items && this.items.length > 0;
    };
    /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    PoListViewComponent.prototype.returnBooleanValue = /**
     * @param {?} listViewAction
     * @param {?} item
     * @return {?}
     */
    function (listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function') ? ((/** @type {?} */ (listViewAction))).disabled(item) : listViewAction.disabled;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoListViewComponent.prototype.trackBy = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    PoListViewComponent.prototype.togglePopup = /**
     * @param {?} item
     * @param {?} targetRef
     * @return {?}
     */
    function (item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(item);
    };
    /**
     * @private
     * @return {?}
     */
    PoListViewComponent.prototype.checkItemsChange = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoListViewComponent.prototype.initShowDetail = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.$showDetail = _this.listViewDetailTemplate.showDetail(item); }));
        }
    };
    PoListViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-list-view',
                    template: "\n<div\n  [class.po-list-view-main-container-header]=\"showHeader\"\n  [class.po-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\">\n\n  <div *ngIf=\"showHeader\" class=\"po-list-view-main-header\">\n    <div class=\"po-checkbox-group-item\">\n      <div class=\"po-list-view-main-select\">\n        <input class=\"po-input po-checkbox-group-input\" type=\"checkbox\"\n          [class.po-checkbox-group-input-checked]=\"selectAll\"\n          [class.po-checkbox-group-input-indeterminate]=\"selectAll === null\">\n        <label\n          class=\"po-checkbox-group-label po-clickable\"\n          (click)=\"selectAllListItems()\">\n          {{ literals.selectAll }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-list-view-main-content\">\n    <div class=\"po-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"po-list-view-container-no-data po-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"po-list-view\">\n        <div class=\"po-list-view-container\">\n          <div class=\"po-list-view-header\">\n            <div class=\"po-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"po-list-view-select\">\n                <input class=\"po-input po-checkbox-group-input\" type=\"checkbox\"\n                  [class.po-checkbox-group-input-checked]=\"item.$selected\">\n                <label class=\"po-checkbox-group-label po-clickable\" (click)=\"selectListItem(item)\"></label>\n              </div>\n              <a *ngSwitchCase=\"'externalLink'\"\n                class=\"po-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <a *ngSwitchCase=\"'internalLink'\"\n                class=\"po-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </a>\n              <span *ngSwitchCase=\"'noLink'\"\n                class=\"po-list-view-title-no-link\"\n                [class.po-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\">\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"po-list-view-actions\">\n              <po-button *ngFor=\"let action of visibleActions\"\n                p-small=\"true\"\n                [p-disabled]=\"returnBooleanValue(action, item)\"\n                [p-icon]=\"action.icon\"\n                [p-label]=\"action.label\"\n                [p-type]=\"action.type\"\n                (p-click)=\"onClickAction(action, item)\">\n              </po-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"po-list-view-more-actions\">\n              <span #popupTarget\n                class=\"po-icon po-icon-more po-list-view-more-icon po-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\">\n              </span>\n            </div>\n\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"po-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"po-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\">\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"po-list-view-detail-button\">\n          <span class=\"po-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"po-mb-2 po-text-center\">\n  <po-button\n    [p-disabled]=\"showMoreDisabled\"\n    [p-label]=\"literals.loadMoreData\"\n    (p-click)=\"onShowMore()\">\n  </po-button>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\">\n</po-popup>\n",
                    animations: [
                        trigger('showHideDetail', [
                            state('*', style({ 'overflow-y': 'visible' })),
                            state('void', style({ 'overflow-y': 'hidden' })),
                            transition('* => void', [
                                style({ height: '*', 'overflow-y': 'hidden' }),
                                animate(100, style({ height: 0 }))
                            ]),
                            transition('void => *', [
                                style({ height: '0' }),
                                animate(100, style({ height: '*' }))
                            ])
                        ])
                    ]
                }] }
    ];
    /** @nocollapse */
    PoListViewComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: IterableDiffers }
    ]; };
    PoListViewComponent.propDecorators = {
        listViewContentTemplate: [{ type: ContentChild, args: [PoListViewContentTemplateDirective, { static: true },] }],
        listViewDetailTemplate: [{ type: ContentChild, args: [PoListViewDetailTemplateDirective, { static: true },] }],
        poPopupComponent: [{ type: ViewChild, args: ['popup', { static: true },] }]
    };
    return PoListViewComponent;
}(PoListViewBaseComponent));
if (false) {
    /** @type {?} */
    PoListViewComponent.prototype.listViewContentTemplate;
    /** @type {?} */
    PoListViewComponent.prototype.listViewDetailTemplate;
    /** @type {?} */
    PoListViewComponent.prototype.poPopupComponent;
    /**
     * @type {?}
     * @private
     */
    PoListViewComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoListViewComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-list-view`.
 *
 * > Para o correto funcionamento do componente `po-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 * import { PoModule } from '\@portinari/portinari-ui';
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var PoListViewModule = /** @class */ (function () {
    function PoListViewModule() {
    }
    PoListViewModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                        PoButtonModule,
                        PoPopupModule
                    ],
                    declarations: [
                        PoListViewComponent,
                        PoListViewContentTemplateDirective,
                        PoListViewDetailTemplateDirective
                    ],
                    exports: [
                        PoListViewComponent,
                        PoListViewContentTemplateDirective,
                        PoListViewDetailTemplateDirective
                    ],
                    providers: [],
                    schemas: []
                },] }
    ];
    return PoListViewModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PO_BADGE_COLORS = [
    'color-01',
    'color-02',
    'color-03',
    'color-04',
    'color-05',
    'color-06',
    'color-07',
    'color-08',
    'color-09',
    'color-10',
    'color-11',
    'color-12',
];
/** @type {?} */
var PO_BADGE_COLOR_DEFAULT = 'color-07';
/**
 * \@description
 *
 * \@docsPrivate
 *
 * Componente utilizado no `po-menu` para exibir por exemplo a quantidade de tarefas pendentes.
 */
var PoBadgeBaseComponent = /** @class */ (function () {
    function PoBadgeBaseComponent() {
    }
    Object.defineProperty(PoBadgeBaseComponent.prototype, "color", {
        get: /**
         * @return {?}
         */
        function () {
            return this._color;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a cor de fundo do componente e aceita os valores:
         *
         * <span class="dot po-color-01"></span> `color-01`
         *
         * <span class="dot po-color-02"></span> `color-02`
         *
         * <span class="dot po-color-03"></span> `color-03`
         *
         * <span class="dot po-color-04"></span> `color-04`
         *
         * <span class="dot po-color-05"></span> `color-05`
         *
         * <span class="dot po-color-06"></span> `color-06`
         *
         * <span class="dot po-color-07"></span> `color-07`
         *
         * <span class="dot po-color-08"></span> `color-08`
         *
         * <span class="dot po-color-09"></span> `color-09`
         *
         * <span class="dot po-color-10"></span> `color-10`
         *
         * <span class="dot po-color-11"></span> `color-11`
         *
         * <span class="dot po-color-12"></span> `color-12`
         *
         * @default `color-07`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a cor de fundo do componente e aceita os valores:
         *
         * <span class="dot po-color-01"></span> `color-01`
         *
         * <span class="dot po-color-02"></span> `color-02`
         *
         * <span class="dot po-color-03"></span> `color-03`
         *
         * <span class="dot po-color-04"></span> `color-04`
         *
         * <span class="dot po-color-05"></span> `color-05`
         *
         * <span class="dot po-color-06"></span> `color-06`
         *
         * <span class="dot po-color-07"></span> `color-07`
         *
         * <span class="dot po-color-08"></span> `color-08`
         *
         * <span class="dot po-color-09"></span> `color-09`
         *
         * <span class="dot po-color-10"></span> `color-10`
         *
         * <span class="dot po-color-11"></span> `color-11`
         *
         * <span class="dot po-color-12"></span> `color-12`
         *
         * \@default `color-07`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._color = PO_BADGE_COLORS.includes(value) ? value : PO_BADGE_COLOR_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoBadgeBaseComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        /**
         * @description
         *
         * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
         */
        set: /**
         * \@description
         *
         * Número exibido no componente, caso o mesmo seja maior que 99 o valor exibido será 99+.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._value = convertToInt(value);
            this.setBadgeValue(this._value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoBadgeBaseComponent.prototype.setBadgeValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var validRangeValue = (value || value === 0) && (value >= 0 && value < 100);
        this.badgeValue = validRangeValue ? value.toString() : value > 99 ? '99+' : undefined;
    };
    PoBadgeBaseComponent.propDecorators = {
        color: [{ type: Input, args: ['p-color',] }],
        value: [{ type: Input, args: ['p-value',] }]
    };
    return PoBadgeBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoBadgeBaseComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    PoBadgeBaseComponent.prototype._value;
    /** @type {?} */
    PoBadgeBaseComponent.prototype.badgeValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoBadgeBaseComponent
 *
 * \@docsPrivate
 */
var PoBadgeComponent = /** @class */ (function (_super) {
    __extends(PoBadgeComponent, _super);
    function PoBadgeComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoBadgeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-badge',
                    template: "<div class=\"po-badge po-{{ color }}\">\n  <span class=\"po-badge-value\">{{ badgeValue }}</span>\n</div>\n"
                }] }
    ];
    return PoBadgeComponent;
}(PoBadgeBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-badge.
 */
var PoBadgeModule = /** @class */ (function () {
    function PoBadgeModule() {
    }
    PoBadgeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        PoBadgeComponent
                    ],
                    exports: [
                        PoBadgeComponent
                    ]
                },] }
    ];
    return PoBadgeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poMenuLiteralsDefault = {
    en: { itemNotFound: 'Item not found.' },
    es: { itemNotFound: 'Elemento no encontrado.' },
    pt: { itemNotFound: 'Item não encontrado.' }
};
/**
 * \@description
 *
 * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.
 *
 * O componente po-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como
 * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.
 * @abstract
 */
var PoMenuBaseComponent = /** @class */ (function () {
    function PoMenuBaseComponent(menuService) {
        this.menuService = menuService;
        this._collapsed = false;
        this._filter = false;
        this._maxLevel = 4;
        this._menus = [];
        this.literals = __assign({}, poMenuLiteralsDefault[poLocaleDefault], poMenuLiteralsDefault[browserLanguage()]);
    }
    Object.defineProperty(PoMenuBaseComponent.prototype, "collapsed", {
        get: /**
         * @return {?}
         */
        function () {
            return this._collapsed;
        },
        /**
         * @optional
         *
         * @description
         *
         * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
         *
         * > Utilize esta propriedade para iniciar o menu colapsado.
         *
         * > Ao utilizar os métodos [`colapse`](documentation/po-menu#colapseMethod), [`expand`](documentation/po-menu#expandMethod) e
         * [`toggle`](documentation/po-menu#toggleMethod) o valor desta propriedade não é alterado.
         *
         * **Importante:**
         *
         * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.
         *
         * > Utilize esta propriedade para iniciar o menu colapsado.
         *
         * > Ao utilizar os métodos [`colapse`](documentation/po-menu#colapseMethod), [`expand`](documentation/po-menu#expandMethod) e
         * [`toggle`](documentation/po-menu#toggleMethod) o valor desta propriedade não é alterado.
         *
         * **Importante:**
         *
         * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
         *
         * \@default `false`
         * @param {?} collapsed
         * @return {?}
         */
        function (collapsed) {
            this._collapsed = convertToBoolean(collapsed);
            this.validateCollapseClass();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuBaseComponent.prototype, "menus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._menus;
        },
        /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
        set: /**
         * Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            this._menus = Array.isArray(menus) ? menus : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuBaseComponent.prototype, "maxLevel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxLevel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuBaseComponent.prototype, "filter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._filter;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita um campo para pesquisa no menu.
         * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
         * ou também, pode ser realizada através de um serviço definido na propriedade `p-service`.
         *
         * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Habilita um campo para pesquisa no menu.
         * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,
         * ou também, pode ser realizada através de um serviço definido na propriedade `p-service`.
         *
         * > O campo de pesquisa é desabilitado se o menu estiver colapsado.
         *
         * \@default `false`
         * @param {?} filter
         * @return {?}
         */
        function (filter) {
            this._filter = (/** @type {?} */ (filter)) === '' ? true : convertToBoolean(filter);
            this.filteredItems = __spread(this._menus);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuBaseComponent.prototype, "service", {
        get: /**
         * @return {?}
         */
        function () {
            return this._service;
        },
        /**
         * @optional
         *
         * @description
         *
         * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
         * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
         * serviço implementando a interface `PoMenuFilter`.
         *
         * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
         * [Guia de implementação de API da Portinari](http://tdn.portinari.com/display/public/INT/Guia+de+implementacao+das+APIs+PORTINARI).
         *
         * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
         * no parâmetro `search`, veja exemplo:
         *
         * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
         *
         * ```
         * <po-menu p-service="/api/v1/fnd/menu">
         * </po-menu>
         *
         * Requisição: GET /api/v1/fnd/menu?search=contas
         * ```
         *
         * > É necessário que propriedade `p-filter` esteja habilitada.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do
         * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um
         * serviço implementando a interface `PoMenuFilter`.
         *
         * Caso utilizada uma URL, o serviço deve retornar os dados conforme o
         * [Guia de implementação de API da Portinari](http://tdn.portinari.com/display/public/INT/Guia+de+implementacao+das+APIs+PORTINARI).
         *
         * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado
         * no parâmetro `search`, veja exemplo:
         *
         * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.
         *
         * ```
         * <po-menu p-service="/api/v1/fnd/menu">
         * </po-menu>
         *
         * Requisição: GET /api/v1/fnd/menu?search=contas
         * ```
         *
         * > É necessário que propriedade `p-filter` esteja habilitada.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._service = value || undefined;
            this.configService(this.service);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuBaseComponent.prototype, "params", {
        get: /**
         * @return {?}
         */
        function () {
            return this._params;
        },
        /**
         * @optional
         *
         * @description
         *
         * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
         *
         * Caso utilizado um serviço customizado, implementando a interface `PoMenuFilter`, o valor desta propriedade
         * será passado como parâmetro, na função `getFilteredData`.
         *
         * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
         * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
         *
         * ```
         * <po-menu p-service="/api/v1/fnd/menu" [p-params]="{ company: 1, user: 297767512 }">
         * </po-menu>
         *
         * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
         * ```
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.
         *
         * Caso utilizado um serviço customizado, implementando a interface `PoMenuFilter`, o valor desta propriedade
         * será passado como parâmetro, na função `getFilteredData`.
         *
         * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados
         * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:
         *
         * ```
         * <po-menu p-service="/api/v1/fnd/menu" [p-params]="{ company: 1, user: 297767512 }">
         * </po-menu>
         *
         * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512
         * ```
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._params = value && isTypeof(value, 'object') ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuBaseComponent.prototype, "logo", {
        get: /**
         * @return {?}
         */
        function () {
            return this._logo;
        },
        /**
         * @optional
         *
         * @description
         *
         * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
         *
         * > **Importante:**
         * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
         * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
         * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.
         *
         * > **Importante:**
         * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.
         * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,
         * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuBaseComponent.prototype, "shortLogo", {
        get: /**
         * @return {?}
         */
        function () {
            return this._shortLogo;
        },
        /**
         * @optional
         *
         * @description
         *
         * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
         *
         * > **Importante:**
         * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `p-logo` e na ausência desta o
         * espaço para logomarca será removido.
         * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
         * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
         * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `p-logo`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.
         *
         * > **Importante:**
         * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `p-logo` e na ausência desta o
         * espaço para logomarca será removido.
         * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,
         * caso ultrapassar esses valores a imagem será readequada no espaço disponível.
         * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `p-logo`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._shortLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} service
     * @return {?}
     */
    PoMenuBaseComponent.prototype.configService = /**
     * @private
     * @param {?} service
     * @return {?}
     */
    function (service) {
        if (typeof service === 'string' && service.trim()) {
            // service url
            this.menuService.configProperties(service);
            this.filterService = this.menuService;
        }
        else if (typeof service === 'object' && service.getFilteredData) {
            // custom service
            this.filterService = service;
        }
        else {
            this.filterService = undefined;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    PoMenuBaseComponent.prototype.setMenuExtraProperties = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        this.allowIcons = !!this.menus.length;
        this.allowCollapseMenu = !!this.menus.length;
        this.menus.forEach((/**
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) {
            _this._level = 1;
            _this.allowIcons = _this.allowIcons ? validValue(menuItem.icon) : false;
            _this.allowCollapseMenu = _this.allowCollapseMenu && _this.allowIcons ? validValue(menuItem.shortLabel) : false;
            _this.removeBadgeAlert(menuItem);
            _this.setMenuItemProperties(menuItem);
            if (menuItem.subItems) {
                _this._level++;
                _this.processSubItems(menuItem);
            }
        }));
    };
    /**
     * @protected
     * @param {?} menuItem
     * @return {?}
     */
    PoMenuBaseComponent.prototype.setMenuItemProperties = /**
     * @protected
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        menuItem['id'] = menuItem['id'] || v4();
        menuItem['level'] = this._level;
        menuItem['type'] = this.setMenuType(menuItem);
    };
    /**
     * @protected
     * @param {?} menus
     * @return {?}
     */
    PoMenuBaseComponent.prototype.validateMenus = /**
     * @protected
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        var _this = this;
        menus.forEach((/**
         * @param {?} menu
         * @return {?}
         */
        function (menu) { return _this.validateMenu(menu); }));
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuBaseComponent.prototype.processSubItems = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        var _this = this;
        menu.subItems.forEach((/**
         * @param {?} menuItem
         * @param {?} index
         * @param {?} menuItems
         * @return {?}
         */
        function (menuItem, index, menuItems) {
            /** @type {?} */
            var previousItem = menuItems[index - 1];
            if (previousItem && previousItem.subItems) {
                _this._level = previousItem['level'];
            }
            if (_this._level <= _this.maxLevel) {
                _this.setMenuItemProperties(menuItem);
                if (menuItem.subItems) {
                    _this._level++;
                    _this.processSubItems(menuItem);
                }
            }
            if (!menu['badgeAlert']) {
                menu = _this.setMenuBadgeAlert(menu, menuItem);
            }
        }));
        menu.subItems = Object.assign([], menu.subItems);
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    PoMenuBaseComponent.prototype.removeBadgeAlert = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        var _this = this;
        if (menuItem['badgeAlert']) {
            delete menuItem['badgeAlert'];
        }
        if (menuItem.subItems) {
            menuItem.subItems.forEach((/**
             * @param {?} subItem
             * @return {?}
             */
            function (subItem) { return _this.removeBadgeAlert(subItem); }));
        }
    };
    /**
     * @private
     * @param {?} parent
     * @param {?} child
     * @return {?}
     */
    PoMenuBaseComponent.prototype.setMenuBadgeAlert = /**
     * @private
     * @param {?} parent
     * @param {?} child
     * @return {?}
     */
    function (parent, child) {
        /** @type {?} */
        var childHasSubItems = child.subItems && child.subItems.length;
        /** @type {?} */
        var childHasBadgeAlert = child['badgeAlert'];
        /** @type {?} */
        var childHasBadge = child.badge && convertToInt(child.badge.value) >= 0;
        parent['badgeAlert'] = childHasBadgeAlert || (childHasBadge && !childHasSubItems);
        return parent;
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    PoMenuBaseComponent.prototype.setMenuType = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (menuItem.subItems && menuItem.subItems.length > 0 && this._level < this.maxLevel) {
            return 'subItems';
        }
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    PoMenuBaseComponent.prototype.validateMenu = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        var _this = this;
        if (!menuItem.label || menuItem.label.trim() === '') {
            throw new Error('O atributo PoMenuItem.label não pode ser vazio.');
        }
        else if (menuItem.subItems) {
            menuItem.subItems.forEach((/**
             * @param {?} subItem
             * @return {?}
             */
            function (subItem) {
                _this.validateMenu(subItem);
            }));
        }
    };
    PoMenuBaseComponent.propDecorators = {
        collapsed: [{ type: Input, args: ['p-collapsed',] }],
        menus: [{ type: Input, args: ['p-menus',] }],
        filter: [{ type: Input, args: ['p-filter',] }],
        service: [{ type: Input, args: ['p-service',] }],
        params: [{ type: Input, args: ['p-params',] }],
        logo: [{ type: Input, args: ['p-logo',] }],
        shortLogo: [{ type: Input, args: ['p-short-logo',] }]
    };
    return PoMenuBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._collapsed;
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._filter;
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._level;
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._logo;
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._maxLevel;
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._menus;
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._params;
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._service;
    /**
     * @type {?}
     * @private
     */
    PoMenuBaseComponent.prototype._shortLogo;
    /** @type {?} */
    PoMenuBaseComponent.prototype.allowIcons;
    /** @type {?} */
    PoMenuBaseComponent.prototype.allowCollapseMenu;
    /** @type {?} */
    PoMenuBaseComponent.prototype.filteredItems;
    /** @type {?} */
    PoMenuBaseComponent.prototype.filterService;
    /** @type {?} */
    PoMenuBaseComponent.prototype.literals;
    /** @type {?} */
    PoMenuBaseComponent.prototype.menuService;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoMenuBaseComponent.prototype.validateCollapseClass = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoMenuComponent
 *
 * \@description
 *
 * Esta diretiva permite adicionar um conteúdo personalizado entre a logo e o campo de filtro do cabeçalho do
 * [`po-menu`](/documentation/po-menu).
 *
 * Para personalizar o conteúdo do cabeçalho deve-se utilizar a diretiva `p-menu-header-template` dentro da *tag* do
 * [`po-menu`](/documentation/po-menu). Podendo ser utilizada de duas formas:
 *
 * Com `ng-template`
 * ```
 * ...
 * <po-menu [p-menus]="menus">
 *   <ng-template p-menu-header-template>
 *     ...
 *   </ng-template>
 * </po-menu>
 * ...
 * ```
 *
 * ou com *syntax sugar*
 * ```
 * ...
 * <po-menu [p-menus]="menus">
 *   <div *p-menu-header-template>
 *     ...
 *   </div>
 * </po-menu>
 * ...
 * ```
 *
 * > Quando o menu estiver colapsado ou tela for _mobile_ o conteúdo personalizado não será exibido.
 */
var PoMenuHeaderTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoMenuHeaderTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoMenuHeaderTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-menu-header-template]'
                },] }
    ];
    /** @nocollapse */
    PoMenuHeaderTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return PoMenuHeaderTemplateDirective;
}());
if (false) {
    /** @type {?} */
    PoMenuHeaderTemplateDirective.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a comunicação entre os items do po-menu.
 */
var PoMenuItemsService = /** @class */ (function () {
    function PoMenuItemsService() {
        this.subjectParent = new Subject();
        this.subjectChild = new Subject();
    }
    // Envia informações do click do po-menu-item para o po-menu
    // Envia informações do click do po-menu-item para o po-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    PoMenuItemsService.prototype.sendToParentMenuClicked = 
    // Envia informações do click do po-menu-item para o po-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectChild.next(menu);
    };
    // Recebe do po-menu-item sua informação de click.
    // Recebe do po-menu-item sua informação de click.
    /**
     * @return {?}
     */
    PoMenuItemsService.prototype.receiveFromChildMenuClicked = 
    // Recebe do po-menu-item sua informação de click.
    /**
     * @return {?}
     */
    function () {
        return this.subjectChild.asObservable();
    };
    // Envia para os po-menu-item a resposta do processamento de click de um po-menu-item.
    // Envia para os po-menu-item a resposta do processamento de click de um po-menu-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    PoMenuItemsService.prototype.sendToChildMenuClicked = 
    // Envia para os po-menu-item a resposta do processamento de click de um po-menu-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectParent.next(menu);
    };
    // Recebe do po-menu as informações processadas do click de um po-menu-item.
    // Recebe do po-menu as informações processadas do click de um po-menu-item.
    /**
     * @return {?}
     */
    PoMenuItemsService.prototype.receiveFromParentMenuClicked = 
    // Recebe do po-menu as informações processadas do click de um po-menu-item.
    /**
     * @return {?}
     */
    function () {
        return this.subjectParent.asObservable();
    };
    PoMenuItemsService.decorators = [
        { type: Injectable }
    ];
    return PoMenuItemsService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMenuItemsService.prototype.subjectParent;
    /**
     * @type {?}
     * @private
     */
    PoMenuItemsService.prototype.subjectChild;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a interface `PoMenuFilter`, utilizado para fazer requisições ao serviço informado pelo usuário,
 * caso for uma URL, no componente `po-menu`.
 */
var PoMenuService = /** @class */ (function () {
    function PoMenuService(http) {
        this.http = http;
    }
    Object.defineProperty(PoMenuService.prototype, "url", {
        get: /**
         * @return {?}
         */
        function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @return {?}
     */
    PoMenuService.prototype.configProperties = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this._url = url;
    };
    /**
     * @param {?} search
     * @param {?=} params
     * @return {?}
     */
    PoMenuService.prototype.getFilteredData = /**
     * @param {?} search
     * @param {?=} params
     * @return {?}
     */
    function (search, params) {
        /** @type {?} */
        var filterParams = __assign({ search: search }, params);
        return this.http.get(this.url, { params: filterParams })
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response && response.items; })));
    };
    PoMenuService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoMenuService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoMenuService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMenuService.prototype._url;
    /**
     * @type {?}
     * @private
     */
    PoMenuService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poMenuDebounceTime = 400;
/** @type {?} */
var poMenuMinLength = 3;
/** @type {?} */
var poMenuRootLevel = 1;
/**
 * \@docsExtends PoMenuBaseComponent
 *
 * \@description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
 *
 * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
 * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `PoMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '\@angular/core';
 *
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * \@NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * \@example
 *
 * <example name="po-menu-basic" title="Portinari Menu Basic">
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-labs" title="Portinari Menu Labs">
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-human-resources" title="Portinari Menu - Human Resources">
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
 * </example>
 */
var PoMenuComponent = /** @class */ (function (_super) {
    __extends(PoMenuComponent, _super);
    function PoMenuComponent(changeDetector, viewRef, element, renderer, router, menuItemsService, menuService) {
        var _this = _super.call(this, menuService) || this;
        _this.changeDetector = changeDetector;
        _this.element = element;
        _this.renderer = renderer;
        _this.router = router;
        _this.menuItemsService = menuItemsService;
        _this.filterLoading = false;
        _this.mobileOpened = false;
        _this.noData = false;
        _this.filteringItems = false;
        _this.menuInitialized = false;
        _this.menuPrevious = null;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    Object.defineProperty(PoMenuComponent.prototype, "isActiveItemMenuSubMenu", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuComponent.prototype, "enableCollapse", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isCollapsed && !this.collapsedMobile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuComponent.prototype, "enableCollapseButton", {
        get: /**
         * @return {?}
         */
        function () {
            return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuComponent.prototype, "hasFooter", {
        get: /**
         * @return {?}
         */
        function () {
            return this.allowCollapseMenu && !this.mobileOpened && this.enableCollapseButton || (this.collapsed && !this.collapsedMobile);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuComponent.prototype, "isCollapsed", {
        get: /**
         * @return {?}
         */
        function () {
            return this.allowCollapseMenu && this.collapsed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoMenuComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.filteringItems && this.filter) {
            return;
        }
        /** @type {?} */
        var menuCurrent = JSON.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
            this.validateCollapseClass();
        }
    };
    /**
     * @return {?}
     */
    PoMenuComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    /**
     * @return {?}
     */
    PoMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscribeToMenuItem();
        this.subscribeToRoute();
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var urlRouter = _this.checkingRouterChildrenFragments();
            _this.checkActiveMenuByUrl(urlRouter);
        }));
    };
    /**
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    PoMenuComponent.prototype.activateMenuByUrl = /**
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    function (urlPath, menus) {
        var _this = this;
        if (menus) {
            return menus.some((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) {
                /** @type {?} */
                var formattedLink = getFormattedLink(menu.link);
                if (formattedLink === urlPath) {
                    _this.linkActive = formattedLink;
                    _this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return _this.activateMenuByUrl(urlPath, menu.subItems);
                }
            }));
        }
    };
    /**
     * @param {?} urlPath
     * @return {?}
     */
    PoMenuComponent.prototype.checkActiveMenuByUrl = /**
     * @param {?} urlPath
     * @return {?}
     */
    function (urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    };
    /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     */
    /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     * @return {?}
     */
    PoMenuComponent.prototype.collapse = /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     * @return {?}
     */
    function () {
        this.validateToggleMenu(true);
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    PoMenuComponent.prototype.debounceFilter = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _this = this;
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.filterProcess(filter);
        }), poMenuDebounceTime);
    };
    /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     */
    /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     * @return {?}
     */
    PoMenuComponent.prototype.expand = /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     * @return {?}
     */
    function () {
        this.validateToggleMenu(false);
    };
    /**
     * @return {?}
     */
    PoMenuComponent.prototype.subscribeToMenuItem = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe((/**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            _this.clickMenuItem(menu);
        }));
    };
    /**
     * @return {?}
     */
    PoMenuComponent.prototype.subscribeToRoute = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                /** @type {?} */
                var urlRouter = _this.checkingRouterChildrenFragments();
                _this.checkActiveMenuByUrl(urlRouter);
            }
        }));
    };
    /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     */
    /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     * @return {?}
     */
    PoMenuComponent.prototype.toggle = /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     * @return {?}
     */
    function () {
        this.validateToggleMenu(!this.collapsed);
    };
    /**
     * @return {?}
     */
    PoMenuComponent.prototype.toggleMenuMobile = /**
     * @return {?}
     */
    function () {
        this.mobileOpened = !this.mobileOpened;
        this.collapsedMobile = this.collapsed && this.mobileOpened;
        this.validateCollapseClass(this.collapsedMobile);
        if (isMobile()) {
            return;
        }
        if (this.mobileOpened) {
            this.createResizeListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuComponent.prototype.activateCollapseSubMenuItem = /**
     * @private
     * @return {?}
     */
    function () {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuComponent.prototype.activateMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > poMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
    };
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    PoMenuComponent.prototype.areSubMenus = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        return menus.every((/**
         * @param {?} menu
         * @return {?}
         */
        function (menu) { return menu['level'] > poMenuRootLevel; }));
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuComponent.prototype.checkingRouterChildrenFragments = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? "/" + childrenPrimary.segments.map((/**
         * @param {?} it
         * @return {?}
         */
        function (it) { return it.path; })).join('/') : '';
    };
    /**
     * @private
     * @param {?} activeMenuItem
     * @return {?}
     */
    PoMenuComponent.prototype.clearGroupMenuIfFirstLevel = /**
     * @private
     * @param {?} activeMenuItem
     * @return {?}
     */
    function (activeMenuItem) {
        if (activeMenuItem['level'] === poMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuComponent.prototype.clickMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.mobileOpened = false;
        }
    };
    /**
     * @private
     * @param {?=} menuItem
     * @return {?}
     */
    PoMenuComponent.prototype.convertToMenuItemFiltered = /**
     * @private
     * @param {?=} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (menuItem === void 0) { menuItem = { label: '', link: '' }; }
        var label = menuItem.label, link = menuItem.link;
        /** @type {?} */
        var menuItemFiltered = { label: label, link: link };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuComponent.prototype.createResizeListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.toggleResize();
            _this.resizeListener();
        }));
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuComponent.prototype.executeMenuAction = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (typeof menu.action === 'string') {
            this.parentRef[menu.action](menu);
        }
        else {
            menu.action.call(this.parentRef, menu);
        }
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    PoMenuComponent.prototype.filterItems = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        return __awaiter(this, void 0, void 0, function () {
            var trimFilter, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        trimFilter = filter && filter.trim();
                        if (!trimFilter) return [3 /*break*/, 4];
                        this.filteredItems = [];
                        _a = this;
                        if (!this.filterService) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.filterOnService(trimFilter)];
                    case 1:
                        _b = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _b = this.filterLocalItems(trimFilter);
                        _c.label = 3;
                    case 3:
                        _a.filteredItems = _b;
                        this.filteringItems = true;
                        return [3 /*break*/, 5];
                    case 4:
                        this.filteredItems = __spread(this.menus);
                        this.filteringItems = false;
                        _c.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    PoMenuComponent.prototype.filterLocalItems = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        /** @type {?} */
        var filteredItems = [];
        this.findItems(this.menus, filter.toLowerCase(), filteredItems);
        return filteredItems;
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    PoMenuComponent.prototype.filterProcess = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _this = this;
        this.filterLoading = true;
        this.filterItems(filter).then((/**
         * @return {?}
         */
        function () {
            _this.filterLoading = false;
            _this.showNoData();
            _this.changeDetector.detectChanges();
            _this.menuItemsService.sendToChildMenuClicked({ active: _this.activeMenuItem, grouped: _this.groupedMenuItem });
        })).catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.filterLoading = false;
            Promise.reject(error);
        }));
    };
    /**
     * @private
     * @param {?=} search
     * @return {?}
     */
    PoMenuComponent.prototype.filterOnService = /**
     * @private
     * @param {?=} search
     * @return {?}
     */
    function (search) {
        if (search === void 0) { search = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(search.length >= poMenuMinLength)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.filterService.getFilteredData(search, this.params)
                                .pipe(map((/**
                             * @param {?} menuItemsFiltered
                             * @return {?}
                             */
                            function (menuItemsFiltered) { return menuItemsFiltered.map((/**
                             * @param {?} menuItem
                             * @return {?}
                             */
                            function (menuItem) { return _this.convertToMenuItemFiltered(menuItem); })); })))
                                .toPromise()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, this.filteredItems];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} filter
     * @param {?} filteredItems
     * @return {?}
     */
    PoMenuComponent.prototype.findItems = /**
     * @private
     * @param {?} menus
     * @param {?} filter
     * @param {?} filteredItems
     * @return {?}
     */
    function (menus, filter, filteredItems) {
        var _this = this;
        menus.forEach((/**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            if ((menu.label.toLowerCase().includes(filter) && !menu.subItems) ||
                (menu.subItems && _this.findItems(menu.subItems, filter, filteredItems))) {
                filteredItems.push(menu);
            }
        }));
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} menuItem
     * @return {?}
     */
    PoMenuComponent.prototype.findParent = /**
     * @private
     * @param {?} menus
     * @param {?} menuItem
     * @return {?}
     */
    function (menus, menuItem) {
        /** @type {?} */
        var getParent = (/**
         * @param {?} menuItems
         * @param {?} id
         * @return {?}
         */
        function (menuItems, id) {
            if (menuItems) {
                for (var index = 0; index < menuItems.length; index++) {
                    /** @type {?} */
                    var menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find((/**
                     * @param {?} subItem
                     * @return {?}
                     */
                    function (subItem) { return subItem['id'] === id; }))) {
                        return menu;
                    }
                    /** @type {?} */
                    var found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        });
        return getParent(menus, menuItem['id']);
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} menu
     * @return {?}
     */
    PoMenuComponent.prototype.findRootParent = /**
     * @private
     * @param {?} menus
     * @param {?} menu
     * @return {?}
     */
    function (menus, menu) {
        /** @type {?} */
        var findParent = this.findParent;
        /** @type {?} */
        var getRootParent = (/**
         * @param {?} menuItems
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItems, menuItem) {
            /** @type {?} */
            var parent = findParent(menuItems, menuItem);
            if (parent['level'] !== poMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        });
        return getRootParent(menus, menu);
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    PoMenuComponent.prototype.getActiveMenuParent = /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    function (menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuComponent.prototype.groupMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.collapsed) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem && menu['isOpened']
            && this.isActiveItemMenuSubMenu
            && this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    };
    /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    PoMenuComponent.prototype.isRootMenuEqualGroupedMenu = /**
     * @private
     * @param {?} menus
     * @param {?} activeMenuItem
     * @param {?} groupedMenuItem
     * @return {?}
     */
    function (menus, activeMenuItem, groupedMenuItem) {
        /** @type {?} */
        var activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    };
    /**
     * @private
     * @param {?} childMenu
     * @return {?}
     */
    PoMenuComponent.prototype.openParentMenu = /**
     * @private
     * @param {?} childMenu
     * @return {?}
     */
    function (childMenu) {
        /** @type {?} */
        var parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuComponent.prototype.showNoData = /**
     * @private
     * @return {?}
     */
    function () {
        this.noData = this.filteredItems.length === 0;
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuComponent.prototype.toggleGroupedMenuItem = /**
     * @private
     * @return {?}
     */
    function () {
        this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
    };
    /**
     * @private
     * @param {?=} collapsed
     * @return {?}
     */
    PoMenuComponent.prototype.toggleMenuCollapse = /**
     * @private
     * @param {?=} collapsed
     * @return {?}
     */
    function (collapsed) {
        if (collapsed === void 0) { collapsed = false; }
        this.collapsed = collapsed;
        if (this.groupedMenuItem && this.activeMenuItem) {
            this.groupedMenuItem = this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
        }
        this.updateMenu();
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuComponent.prototype.toggleResize = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.mobileOpened) {
            this.mobileOpened = false;
            this.collapsedMobile = false;
            this.validateCollapseClass(this.collapsedMobile);
        }
    };
    /**
     * @private
     * @param {?} collapsed
     * @return {?}
     */
    PoMenuComponent.prototype.validateToggleMenu = /**
     * @private
     * @param {?} collapsed
     * @return {?}
     */
    function (collapsed) {
        if (!this.allowCollapseMenu) {
            return;
        }
        this.toggleMenuCollapse(collapsed);
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuComponent.prototype.updateMenu = /**
     * @private
     * @return {?}
     */
    function () {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = __spread(this.menus);
        this.menuPrevious = JSON.stringify(this.menus);
        this.validateMenus(this.menus);
    };
    /**
     * @protected
     * @param {?=} collapsedMobile
     * @return {?}
     */
    PoMenuComponent.prototype.validateCollapseClass = /**
     * @protected
     * @param {?=} collapsedMobile
     * @return {?}
     */
    function (collapsedMobile) {
        /** @type {?} */
        var wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
    };
    PoMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-menu',
                    template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n<div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\n  <span class=\"po-icon po-icon-menu\"></span>\n</div>\n\n<div class=\"po-menu\" [ngClass]=\"{ 'po-menu-animation' : mobileOpened }\">\n\n  <div class=\"po-menu-header\">\n    <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\n      <a href=\"./\">\n        <img\n          [ngClass]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\n          [src]=\"enableCollapse ? shortLogo || logo : logo\">\n      </a>\n    </div>\n\n    <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\n      <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n    </div>\n\n    <po-menu-filter *ngIf=\"filter && !enableCollapse\"\n      [p-loading]=\"filterLoading\"\n      (p-filter)=\"debounceFilter($event)\">\n    </po-menu-filter>\n  </div>\n\n  <nav class=\"po-menu-body\">\n\n    <!-- Inner e outer para esconder scroll -->\n    <div class=\"po-menu-outer\">\n      <div class=\"po-menu-inner\">\n\n        <div *ngIf=\"noData\" class=\"po-menu-item-wrapper\">\n          <div class=\"po-menu-item-first\">\n            <div class=\"po-menu-icon-container po-menu-item-no-data\">\n              <span class=\"po-icon po-icon-info po-menu-icon-item po-lg-2\"></span>\n              <div class=\"po-lg-10 po-menu-icon-label\"> {{literals.itemNotFound}} </div>\n            </div>\n          </div>\n        </div>\n\n        <div *ngFor=\"let menu of filteredItems, let menuIndex = index;\" class=\"po-menu-item-wrapper\">\n          <po-menu-item\n            [class.po-menu-item-first]=\"menuIndex === 0\"\n            [p-action]=\"menu.action\"\n            [p-badge-alert]=\"menu.badgeAlert\"\n            [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n            [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n            [p-collapsed-menu]=\"enableCollapse\"\n            [p-icon]=\"allowIcons ? menu.icon : null\"\n            [p-id]=\"menu.id\"\n            [p-label]=\"menu.label\"\n            [p-level]=\"menu.level\"\n            [p-link]=\"menu.link\"\n            [p-short-label]=\"menu.shortLabel\"\n            [p-sub-items]=\"menu.subItems\"\n            [p-type]=\"menu.type\">\n          </po-menu-item>\n        </div>\n      </div>\n    </div>\n  </nav>\n\n  <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\n    <a\n      class=\"po-menu-collapse-button-icon po-clickable\"\n      (click)=\"toggle()\">\n\n      <span class=\"po-icon\"\n        [class.po-icon-menu-close]=\"enableCollapseButton\"\n        [class.po-icon-menu-open]=\"enableCollapse\">\n      </span>\n    </a>\n  </div>\n</div>\n",
                    providers: [PoMenuItemsService, PoMenuService]
                }] }
    ];
    /** @nocollapse */
    PoMenuComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Router },
        { type: PoMenuItemsService },
        { type: PoMenuService }
    ]; };
    PoMenuComponent.propDecorators = {
        menuHeaderTemplate: [{ type: ContentChild, args: [PoMenuHeaderTemplateDirective, { static: true },] }]
    };
    return PoMenuComponent;
}(PoMenuBaseComponent));
if (false) {
    /** @type {?} */
    PoMenuComponent.prototype.menuHeaderTemplate;
    /** @type {?} */
    PoMenuComponent.prototype.activeMenuItem;
    /** @type {?} */
    PoMenuComponent.prototype.collapsedMobile;
    /** @type {?} */
    PoMenuComponent.prototype.filterLoading;
    /** @type {?} */
    PoMenuComponent.prototype.groupedMenuItem;
    /** @type {?} */
    PoMenuComponent.prototype.linkActive;
    /** @type {?} */
    PoMenuComponent.prototype.mobileOpened;
    /** @type {?} */
    PoMenuComponent.prototype.noData;
    /** @type {?} */
    PoMenuComponent.prototype.parentRef;
    /** @type {?} */
    PoMenuComponent.prototype.timeoutFilter;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.filteringItems;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.menuInitialized;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.menuPrevious;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.resizeListener;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.itemSubscription;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.routeSubscription;
    /** @type {?} */
    PoMenuComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoMenuComponent.prototype.menuItemsService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que apresenta o campo de pesquisa no po-menu.
 */
var PoMenuFilterComponent = /** @class */ (function () {
    function PoMenuFilterComponent() {
        // Variável necessária para o po-clean identificar que deve ser criado.
        this.clean = true;
        this.filter = new EventEmitter();
    }
    /**
     * @param {?} search
     * @return {?}
     */
    PoMenuFilterComponent.prototype.filterItems = /**
     * @param {?} search
     * @return {?}
     */
    function (search) {
        this.filter.emit(search);
    };
    PoMenuFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-menu-filter',
                    template: "<div class=\"po-menu-filter-container\">\n\n  <input #inputFilter\n    type=\"text\"\n    class=\"po-menu-filter\"\n    placeholder=\"Pesquisar\"\n    (keyup)=\"filterItems(inputFilter.value)\">\n\n  <div class=\"po-menu-filter-search-icon-container\">\n    <span *ngIf=\"!loading\" class=\"po-icon po-menu-filter-icon po-icon-search\"></span>\n    <po-loading-icon *ngIf=\"loading\" ></po-loading-icon>\n  </div>\n  <div class=\"po-menu-filter-close-icon-container\">\n    <po-clean [p-element-ref]=\"inputFilterElement\" (p-change-event)=\"filterItems(inputFilter.value)\"></po-clean>\n  </div>\n\n</div>\n"
                }] }
    ];
    PoMenuFilterComponent.propDecorators = {
        loading: [{ type: Input, args: ['p-loading',] }],
        inputFilterElement: [{ type: ViewChild, args: ['inputFilter', { read: ElementRef, static: true },] }],
        filter: [{ type: Output, args: ['p-filter',] }]
    };
    return PoMenuFilterComponent;
}());
if (false) {
    /** @type {?} */
    PoMenuFilterComponent.prototype.clean;
    /** @type {?} */
    PoMenuFilterComponent.prototype.loading;
    /** @type {?} */
    PoMenuFilterComponent.prototype.inputFilterElement;
    /** @type {?} */
    PoMenuFilterComponent.prototype.filter;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// valor para que caibam 3 linhas de `label`
/** @type {?} */
var poMenuItemSubItemSize = 98;
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que implementa cada item do po-menu.
 */
var PoMenuItemComponent = /** @class */ (function () {
    function PoMenuItemComponent(menuItemsService) {
        this.menuItemsService = menuItemsService;
        this._isSelected = false;
        this._isSubItem = false;
        this.maxHeight = 0;
    }
    Object.defineProperty(PoMenuItemComponent.prototype, "badgeValue", {
        get: /**
         * @return {?}
         */
        function () {
            return this._badgeValue;
        },
        // Valor do badge.
        set: 
        // Valor do badge.
        /**
         * @param {?} badgeValue
         * @return {?}
         */
        function (badgeValue) {
            this._badgeValue = convertToInt(badgeValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuItemComponent.prototype, "isSelected", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isSelected;
        },
        // Indica se o item está selecionado.
        set: 
        // Indica se o item está selecionado.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isSelected = convertToBoolean(value);
            this.isSelectedSubItem = this.isSelected && this.isSubItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuItemComponent.prototype, "isSubItem", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isSubItem;
        },
        // Indica se o item é um sub item
        set: 
        // Indica se o item é um sub item
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isSubItem = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuItemComponent.prototype, "subItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this._subItems;
        },
        // Lista de sub-items.
        set: 
        // Lista de sub-items.
        /**
         * @param {?} subitems
         * @return {?}
         */
        function (subitems) {
            this._subItems = subitems;
            if (this.isOpened) {
                this.calcMenuSubItemsMaxHeight();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoMenuItemComponent.prototype, "canShowBadge", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoMenuItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    PoMenuItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // subscribe to menu component messages
        this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe((/**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            _this.processMenuItem(menu);
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoMenuItemComponent.prototype.clickMenuItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked({
                link: this.link,
                action: this.action,
                id: this.id,
                icon: this.icon,
                label: this.label,
                level: this.level,
                subItems: this.subItems,
                isSelected: this.isSelected,
                isOpened: this.isOpened,
                shortLabel: this.shortLabel,
                type: this.type
            });
        }
    };
    /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @param {?} activatedByRoute
     * @return {?}
     */
    PoMenuItemComponent.prototype.accordionAnimation = /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @param {?} activatedByRoute
     * @return {?}
     */
    function (menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
        if (this.id === menuOpened['id']) {
            this.maxHeight = this.subItems.length * poMenuItemSubItemSize;
        }
        if (hasSubItemOpened) {
            this.maxHeight = menuOpened['isOpened'] ?
                (this.maxHeight + menuOpened.subItems.length * poMenuItemSubItemSize) :
                (this.maxHeight - menuOpened.subItems.length * poMenuItemSubItemSize);
            if (activatedByRoute) {
                this.maxHeight = this.getMinimumHeight(0, this, menuActive);
            }
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuItemComponent.prototype.activateMenu = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.isSelected = menu && this.id === menu.id;
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuItemComponent.prototype.calcMenuSubItemsMaxHeight = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var subItems = Array.from(_this.menuSubItems.nativeElement.querySelectorAll('.po-menu-item'));
            subItems.forEach((/**
             * @param {?} menuItem
             * @return {?}
             */
            function (menuItem) { return _this.maxHeight += menuItem.offsetHeight; }));
        }));
    };
    /**
     * @private
     * @param {?} minimumHeight
     * @param {?} menuItem
     * @param {?} menuActive
     * @return {?}
     */
    PoMenuItemComponent.prototype.getMinimumHeight = /**
     * @private
     * @param {?} minimumHeight
     * @param {?} menuItem
     * @param {?} menuActive
     * @return {?}
     */
    function (minimumHeight, menuItem, menuActive) {
        minimumHeight += poMenuItemSubItemSize;
        if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
            for (var index = 0; index < menuItem.subItems.length; index++) {
                minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
            }
        }
        return minimumHeight;
    };
    /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?=} activatedByRoute
     * @return {?}
     */
    PoMenuItemComponent.prototype.groupedMenu = /**
     * @private
     * @param {?} menuActive
     * @param {?} menuOpened
     * @param {?=} activatedByRoute
     * @return {?}
     */
    function (menuActive, menuOpened, activatedByRoute) {
        if (activatedByRoute === void 0) { activatedByRoute = false; }
        /** @type {?} */
        var hasSubItemOpened = (menuOpened && this.id !== menuOpened['id']) ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
        this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
        this.isSelected = (menuActive && !this.isOpened) ? this.hasSubItem(this.subItems, menuActive['id']) : false;
        if (!this.isOpened) {
            this.maxHeight = 0;
            return;
        }
        this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
    };
    /**
     * @private
     * @param {?} subItems
     * @param {?} id
     * @return {?}
     */
    PoMenuItemComponent.prototype.hasSubItem = /**
     * @private
     * @param {?} subItems
     * @param {?} id
     * @return {?}
     */
    function (subItems, id) {
        var _this = this;
        if (subItems) {
            return subItems.some((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item['id'] === id ? true : _this.hasSubItem(item.subItems, id);
            }));
        }
    };
    /**
     * @private
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @return {?}
     */
    PoMenuItemComponent.prototype.isMenuOpened = /**
     * @private
     * @param {?} menuOpened
     * @param {?} hasSubItemOpened
     * @return {?}
     */
    function (menuOpened, hasSubItemOpened) {
        if (menuOpened) {
            return (this.id === menuOpened['id']) ? menuOpened['isOpened'] : hasSubItemOpened;
        }
        return false;
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuItemComponent.prototype.processMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.type === 'internalLink') {
            this.activateMenu(menu.active);
            return;
        }
        if (this.type === 'subItems') {
            this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
            return;
        }
    };
    PoMenuItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-menu-item',
                    template: "<!-- menu com link interno -->\n<a *ngIf=\"type === 'internalLink'\" class=\"po-menu-item-link\" [routerLink]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com link externo -->\n<a *ngIf=\"type === 'externalLink'\" class=\"po-menu-item-link\" [href]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu sem link -->\n<a *ngIf=\"type === 'noLink'\" class=\"po-menu-item-link\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com sub itens -->\n<div *ngIf=\"type === 'subItems'\" class=\"po-menu-item-link po-clickable\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate;\"></ng-container>\n  <div #menuSubItems\n    class=\"po-menu-sub-items\"\n    [hidden]=\"collapsedMenu\"\n    [style.maxHeight.px]=\"maxHeight\">\n    <div *ngFor=\"let subItem of subItems\">\n      <po-menu-item\n        p-is-sub-item\n        [p-action]=\"subItem.action\"\n        [p-badge-alert]=\"subItem.badgeAlert\"\n        [p-badge-color]=\"subItem.badge ? subItem.badge.color : undefined\"\n        [p-badge-value]=\"subItem.badge ? subItem.badge.value : undefined\"\n        [p-id]=\"subItem.id\"\n        [p-label]=\"subItem.label\"\n        [p-level]=\"subItem.level\"\n        [p-link]=\"subItem.link\"\n        [p-sub-items]=\"subItem.subItems\"\n        [p-type]=\"subItem.type\">\n      </po-menu-item>\n    </div>\n  </div>\n</div>\n\n<ng-template #menuItemTemplate>\n  <div class=\"po-menu-item\"\n    [class.po-menu-icon-container]=\"level === 1 && icon\"\n    [class.po-menu-item-selected]=\"isSelected\"\n    [class.po-menu-item-level-two]=\"level === 2\"\n    [class.po-menu-item-level-three]=\"level === 3\"\n    [class.po-menu-item-level-four]=\"level === 4\"\n    [class.po-menu-item-grouper-up]=\"type === 'subItems' && isOpened\"\n    [class.po-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\"\n    [class.po-menu-sub-item-selected]=\"isSelectedSubItem\"\n    (click)=\"clickMenuItem($event);\">\n    <po-badge *ngIf=\"canShowBadge\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-align' : 'po-menu-badge-align-collapsed'\"\n      [p-color]=\"badgeColor\"\n      [p-value]=\"badgeValue\">\n    </po-badge>\n    <span *ngIf=\"level === 1 && icon\" class=\"po-icon {{icon}} po-menu-icon-item\"></span>\n    <div *ngIf=\"badgeAlert\"\n      class=\"po-color-07\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-alert' : 'po-menu-badge-alert-collapsed'\">\n    </div>\n    <span *ngIf=\"type === 'subItems' && !collapsedMenu\"\n      class=\"po-icon po-menu-group-icon\"\n      [class.po-icon-arrow-up]=\"isOpened\"\n      [class.po-icon-arrow-down]=\"!isOpened\">\n    </span>\n    <div [class.po-menu-icon-label]=\"level === 1 && icon\">\n      {{ label }}\n    </div>\n    <div *ngIf=\"collapsedMenu\" class=\"po-menu-short-label\">{{ shortLabel }}</div>\n  </div>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    PoMenuItemComponent.ctorParameters = function () { return [
        { type: PoMenuItemsService }
    ]; };
    PoMenuItemComponent.propDecorators = {
        action: [{ type: Input, args: ['p-action',] }],
        badgeAlert: [{ type: Input, args: ['p-badge-alert',] }],
        badgeColor: [{ type: Input, args: ['p-badge-color',] }],
        badgeValue: [{ type: Input, args: ['p-badge-value',] }],
        collapsedMenu: [{ type: Input, args: ['p-collapsed-menu',] }],
        icon: [{ type: Input, args: ['p-icon',] }],
        id: [{ type: Input, args: ['p-id',] }],
        isOpened: [{ type: Input, args: ['p-is-opened',] }],
        isSelected: [{ type: Input, args: ['p-is-selected',] }],
        isSubItem: [{ type: Input, args: ['p-is-sub-item',] }],
        label: [{ type: Input, args: ['p-label',] }],
        level: [{ type: Input, args: ['p-level',] }],
        link: [{ type: Input, args: ['p-link',] }],
        shortLabel: [{ type: Input, args: ['p-short-label',] }],
        subItems: [{ type: Input, args: ['p-sub-items',] }],
        type: [{ type: Input, args: ['p-type',] }],
        menuSubItems: [{ type: ViewChild, args: ['menuSubItems', { static: false },] }]
    };
    return PoMenuItemComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMenuItemComponent.prototype._badgeValue;
    /**
     * @type {?}
     * @private
     */
    PoMenuItemComponent.prototype._isSelected;
    /**
     * @type {?}
     * @private
     */
    PoMenuItemComponent.prototype._isSubItem;
    /**
     * @type {?}
     * @private
     */
    PoMenuItemComponent.prototype._subItems;
    /** @type {?} */
    PoMenuItemComponent.prototype.isSelectedSubItem;
    /** @type {?} */
    PoMenuItemComponent.prototype.maxHeight;
    /**
     * @type {?}
     * @private
     */
    PoMenuItemComponent.prototype.itemSubscription;
    /** @type {?} */
    PoMenuItemComponent.prototype.action;
    /** @type {?} */
    PoMenuItemComponent.prototype.badgeAlert;
    /** @type {?} */
    PoMenuItemComponent.prototype.badgeColor;
    /** @type {?} */
    PoMenuItemComponent.prototype.collapsedMenu;
    /** @type {?} */
    PoMenuItemComponent.prototype.icon;
    /** @type {?} */
    PoMenuItemComponent.prototype.id;
    /** @type {?} */
    PoMenuItemComponent.prototype.isOpened;
    /** @type {?} */
    PoMenuItemComponent.prototype.label;
    /** @type {?} */
    PoMenuItemComponent.prototype.level;
    /** @type {?} */
    PoMenuItemComponent.prototype.link;
    /** @type {?} */
    PoMenuItemComponent.prototype.shortLabel;
    /** @type {?} */
    PoMenuItemComponent.prototype.type;
    /** @type {?} */
    PoMenuItemComponent.prototype.menuSubItems;
    /**
     * @type {?}
     * @private
     */
    PoMenuItemComponent.prototype.menuItemsService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-menu.
 */
var PoMenuModule = /** @class */ (function () {
    function PoMenuModule() {
    }
    PoMenuModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                        PoBadgeModule,
                        PoFieldModule,
                        PoLoadingModule
                    ],
                    declarations: [
                        PoMenuComponent,
                        PoMenuFilterComponent,
                        PoMenuHeaderTemplateDirective,
                        PoMenuItemComponent
                    ],
                    exports: [
                        PoMenuComponent,
                        PoMenuHeaderTemplateDirective
                    ]
                },] }
    ];
    return PoMenuModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
 * em páginas internas, externas da aplicação ou aciona uma ação.
 *
 * O componente `po-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
 * itens de menu como textos, links para redirecionamento, ações e ícones.
 */
var PoMenuPanelBaseComponent = /** @class */ (function () {
    function PoMenuPanelBaseComponent() {
    }
    Object.defineProperty(PoMenuPanelBaseComponent.prototype, "menus", {
        get: /**
         * @return {?}
         */
        function () {
            return this._menus;
        },
        /** Lista dos itens do `po-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
        set: /**
         * Lista dos itens do `po-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         * @param {?} menus
         * @return {?}
         */
        function (menus) {
            this._menus = Array.isArray(menus) ? menus : [];
            this.setMenuExtraProperties(this._menus);
            this.validateMenus(this._menus);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    PoMenuPanelBaseComponent.prototype.setMenuExtraProperties = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        var _this = this;
        menus.forEach((/**
         * @param {?} menuItem
         * @return {?}
         */
        function (menuItem) { return _this.setMenuItemProperties((/** @type {?} */ (menuItem))); }));
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    PoMenuPanelBaseComponent.prototype.setMenuItemProperties = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        menuItem.id = menuItem.id || v4();
        menuItem.type = this.setMenuType(menuItem);
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    PoMenuPanelBaseComponent.prototype.setMenuType = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    };
    /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    PoMenuPanelBaseComponent.prototype.validateMenu = /**
     * @private
     * @param {?} menuItem
     * @return {?}
     */
    function (menuItem) {
        if (!menuItem.label) {
            throw new Error('O atributo PoMenuPanelItem.label não pode ser vazio.');
        }
        if (!menuItem.icon) {
            throw new Error('O atributo PoMenuPanelItem.icon não pode ser vazio.');
        }
    };
    /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    PoMenuPanelBaseComponent.prototype.validateMenus = /**
     * @private
     * @param {?} menus
     * @return {?}
     */
    function (menus) {
        var _this = this;
        menus.forEach((/**
         * @param {?} menu
         * @return {?}
         */
        function (menu) { return _this.validateMenu(menu); }));
    };
    PoMenuPanelBaseComponent.propDecorators = {
        menus: [{ type: Input, args: ['p-menus',] }]
    };
    return PoMenuPanelBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelBaseComponent.prototype._menus;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Serviço que implementa a comunicação entre os items do po-menu-panel.
 */
var PoMenuPanelItemsService = /** @class */ (function () {
    function PoMenuPanelItemsService() {
        this.subjectChild = new Subject();
        this.subjectParent = new Subject();
    }
    // Recebe do po-menu-panel-item sua informação de click.
    // Recebe do po-menu-panel-item sua informação de click.
    /**
     * @return {?}
     */
    PoMenuPanelItemsService.prototype.receiveFromChildMenuClicked = 
    // Recebe do po-menu-panel-item sua informação de click.
    /**
     * @return {?}
     */
    function () {
        return this.subjectChild.asObservable();
    };
    // Recebe do po-menu-panel as informações processadas do click de um po-menu-panel-item.
    // Recebe do po-menu-panel as informações processadas do click de um po-menu-panel-item.
    /**
     * @return {?}
     */
    PoMenuPanelItemsService.prototype.receiveFromParentMenuClicked = 
    // Recebe do po-menu-panel as informações processadas do click de um po-menu-panel-item.
    /**
     * @return {?}
     */
    function () {
        return this.subjectParent.asObservable();
    };
    // Envia informações do click do po-menu-panel-item para o po-menu
    // Envia informações do click do po-menu-panel-item para o po-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    PoMenuPanelItemsService.prototype.sendToParentMenuClicked = 
    // Envia informações do click do po-menu-panel-item para o po-menu
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectChild.next(menu);
    };
    // Envia para os po-menu-panel-item a resposta do processamento de click de um po-menu-panel-item.
    // Envia para os po-menu-panel-item a resposta do processamento de click de um po-menu-panel-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    PoMenuPanelItemsService.prototype.sendToChildMenuClicked = 
    // Envia para os po-menu-panel-item a resposta do processamento de click de um po-menu-panel-item.
    /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.subjectParent.next(menu);
    };
    PoMenuPanelItemsService.decorators = [
        { type: Injectable }
    ];
    return PoMenuPanelItemsService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelItemsService.prototype.subjectChild;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelItemsService.prototype.subjectParent;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoMenuPanelBaseComponent
 *
 * \@description
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '\@angular/core';
 *
 * import { RouterModule, Routes } from '\@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * \@NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * \@example
 *
 * <example name="po-menu-panel-basic" title="Portinari Menu Panel Basic">
 *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.html"> </file>
 *   <file name="sample-po-menu-panel-basic/sample-po-menu-panel-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-panel-labs" title="Portinari Menu Panel Labs">
 *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.html"> </file>
 *   <file name="sample-po-menu-panel-labs/sample-po-menu-panel-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-panel-customer" title="Portinari Menu Panel - Customers">
 *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.html"> </file>
 *   <file name="sample-po-menu-panel-customer/sample-po-menu-panel-customer.component.ts"> </file>
 * </example>
 */
var PoMenuPanelComponent = /** @class */ (function (_super) {
    __extends(PoMenuPanelComponent, _super);
    function PoMenuPanelComponent(viewRef, location, menuItemsService, router) {
        var _this = _super.call(this) || this;
        _this.location = location;
        _this.menuItemsService = menuItemsService;
        _this.router = router;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    PoMenuPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    PoMenuPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
    };
    /**
     * @private
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    PoMenuPanelComponent.prototype.activateMenuByUrl = /**
     * @private
     * @param {?} urlPath
     * @param {?} menus
     * @return {?}
     */
    function (urlPath, menus) {
        var _this = this;
        if (menus) {
            return menus.some((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) {
                if (getFormattedLink(menu.link) === urlPath) {
                    _this.activateMenuItem(menu);
                    return true;
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuPanelComponent.prototype.activateMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.activeMenuItem = menu;
        this.linkActive = getFormattedLink(menu.link);
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, activatedByRoute: true });
    };
    /**
     * @private
     * @param {?} urlPath
     * @return {?}
     */
    PoMenuPanelComponent.prototype.checkActiveMenuByUrl = /**
     * @private
     * @param {?} urlPath
     * @return {?}
     */
    function (urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuPanelComponent.prototype.clickMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (menu.action) {
            callFunction(menu.action, this.parentRef, menu);
        }
        if (menu.type === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu.type === 'internalLink') {
            this.activateMenuItem(menu);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuPanelComponent.prototype.subscribeToRoute = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe((/**
         * @param {?} rounterEvent
         * @return {?}
         */
        function (rounterEvent) {
            if (rounterEvent instanceof NavigationEnd) {
                _this.checkActiveMenuByUrl(_this.location.path());
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuPanelComponent.prototype.subscribeToMenuItem = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemSubscription =
            this.menuItemsService.receiveFromChildMenuClicked().subscribe((/**
             * @param {?} menu
             * @return {?}
             */
            function (menu) { return _this.clickMenuItem(menu); }));
    };
    PoMenuPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-menu-panel',
                    template: "<div class=\"po-menu-panel\">\n  <div class=\"po-menu-panel-logo-container\">\n    <a href=\"./\">\n      <div class=\"po-menu-panel-logo\"></div>\n    </a>\n  </div>\n\n  <nav class=\"po-menu-panel-container\">\n    <div class=\"po-menu-panel-inner\">\n      <div *ngFor=\"let menu of menus, let menuIndex = index;\" class=\"po-menu-panel-item-wrapper\">\n        <po-menu-panel-item\n          [class.po-menu-panel-item-first]=\"menuIndex === 0\"\n          [p-menu-item-internal]=\"menu\">\n        </po-menu-panel-item>\n      </div>\n    </div>\n  </nav>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoMenuPanelComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Location },
        { type: PoMenuPanelItemsService },
        { type: Router }
    ]; };
    return PoMenuPanelComponent;
}(PoMenuPanelBaseComponent));
if (false) {
    /** @type {?} */
    PoMenuPanelComponent.prototype.activeMenuItem;
    /** @type {?} */
    PoMenuPanelComponent.prototype.linkActive;
    /** @type {?} */
    PoMenuPanelComponent.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.routeSubscription;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.itemSubscription;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.location;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.menuItemsService;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que implementa cada item do po-menu-panel.
 */
var PoMenuPanelItemComponent = /** @class */ (function () {
    function PoMenuPanelItemComponent(menuItemsService) {
        this.menuItemsService = menuItemsService;
    }
    /**
     * @return {?}
     */
    PoMenuPanelItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.itemsSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    PoMenuPanelItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // subscribe to menu component messages
        this.subscribeMenuClickedFromParent();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoMenuPanelItemComponent.prototype.clickMenuItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked(this.menuItemInternal);
        }
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuPanelItemComponent.prototype.activateMenu = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.menuItemInternal.isSelected = this.menuItemInternal.id === menu.id;
    };
    /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    PoMenuPanelItemComponent.prototype.processMenuItem = /**
     * @private
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        if (this.menuItemInternal.type === 'internalLink') {
            this.activateMenu(menu.active);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoMenuPanelItemComponent.prototype.subscribeMenuClickedFromParent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.itemsSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe((/**
         * @param {?} menu
         * @return {?}
         */
        function (menu) {
            _this.processMenuItem(menu);
        }));
    };
    PoMenuPanelItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-menu-panel-item',
                    template: "<!-- menu com link interno -->\n<a *ngIf=\"menuItemInternal.type === 'internalLink'\" [routerLink]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu com link externo -->\n<a *ngIf=\"menuItemInternal.type === 'externalLink'\" [href]=\"menuItemInternal.link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<!-- menu sem link -->\n<a *ngIf=\"menuItemInternal.type === 'noLink'\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n\n<ng-template #menuItemTemplate>\n  <div class=\"po-menu-panel-item\"\n    p-tooltip-position=\"right\"\n    [class.po-menu-panel-item-selected]=\"menuItemInternal.isSelected\"\n    [p-tooltip]=\"menuItemInternal.label\"\n    (click)=\"clickMenuItem($event);\">\n    <span class=\"po-icon {{menuItemInternal.icon}}\"></span>\n  </div>\n</ng-template>\n"
                }] }
    ];
    /** @nocollapse */
    PoMenuPanelItemComponent.ctorParameters = function () { return [
        { type: PoMenuPanelItemsService }
    ]; };
    PoMenuPanelItemComponent.propDecorators = {
        menuItemInternal: [{ type: Input, args: ['p-menu-item-internal',] }]
    };
    return PoMenuPanelItemComponent;
}());
if (false) {
    /** @type {?} */
    PoMenuPanelItemComponent.prototype.itemsSubscription;
    /** @type {?} */
    PoMenuPanelItemComponent.prototype.menuItemInternal;
    /**
     * @type {?}
     * @private
     */
    PoMenuPanelItemComponent.prototype.menuItemsService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-menu-panel.
 */
var PoMenuPanelModule = /** @class */ (function () {
    function PoMenuPanelModule() {
    }
    PoMenuPanelModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                        PoFieldModule,
                        PoTooltipModule
                    ],
                    declarations: [
                        PoMenuPanelComponent,
                        PoMenuPanelItemComponent
                    ],
                    exports: [
                        PoMenuPanelComponent
                    ],
                    providers: [
                        PoMenuPanelItemsService
                    ]
                },] }
    ];
    return PoMenuPanelModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarActionComponent = /** @class */ (function () {
    function PoNavbarActionComponent(viewContainerRef, router) {
        this.router = router;
        this.parentRef = viewContainerRef['_view']['component'];
    }
    /**
     * @return {?}
     */
    PoNavbarActionComponent.prototype.click = /**
     * @return {?}
     */
    function () {
        if (this.action) {
            callFunction(this.action, this.parentRef || this);
            return;
        }
        if (this.link) {
            return this.openUrl(this.link);
        }
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    PoNavbarActionComponent.prototype.openUrl = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    };
    PoNavbarActionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-action',
                    template: "<div \n  tabindex=\"0\"\n  class=\"po-navbar-action-content po-clickable\"\n  (click)=\"click()\">\n\n  <span\n    class=\"po-icon {{ icon }}\"\n    [p-tooltip]=\"tooltip\">\n  </span>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoNavbarActionComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Router }
    ]; };
    PoNavbarActionComponent.propDecorators = {
        action: [{ type: Input, args: ['p-action',] }],
        icon: [{ type: Input, args: ['p-icon',] }],
        label: [{ type: Input, args: ['p-label',] }],
        link: [{ type: Input, args: ['p-link',] }],
        tooltip: [{ type: Input, args: ['p-tooltip-text',] }]
    };
    return PoNavbarActionComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoNavbarActionComponent.prototype.parentRef;
    /** @type {?} */
    PoNavbarActionComponent.prototype.action;
    /** @type {?} */
    PoNavbarActionComponent.prototype.icon;
    /** @type {?} */
    PoNavbarActionComponent.prototype.label;
    /** @type {?} */
    PoNavbarActionComponent.prototype.link;
    /** @type {?} */
    PoNavbarActionComponent.prototype.tooltip;
    /**
     * @type {?}
     * @private
     */
    PoNavbarActionComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarActionPopupComponent = /** @class */ (function () {
    function PoNavbarActionPopupComponent() {
    }
    /**
     * @return {?}
     */
    PoNavbarActionPopupComponent.prototype.getLastIconAction = /**
     * @return {?}
     */
    function () {
        if (this.iconActions && this.iconActions.length) {
            return this.iconActions[this.iconActions.length - 1].icon;
        }
    };
    PoNavbarActionPopupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-action-popup',
                    template: "<div tabindex=\"0\" #target\n  class=\"po-navbar-action-popup-content po-clickable\"\n  (click)=\"popup.toggle()\">\n  <span class=\"po-icon {{ getLastIconAction() }}\"></span>\n</div>\n\n<po-popup #popup\n  [p-actions]=\"iconActions\"\n  [p-target]=\"target\">\n</po-popup>\n"
                }] }
    ];
    PoNavbarActionPopupComponent.propDecorators = {
        iconActions: [{ type: Input, args: ['p-icon-actions',] }]
    };
    return PoNavbarActionPopupComponent;
}());
if (false) {
    /** @type {?} */
    PoNavbarActionPopupComponent.prototype.iconActions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarActionsComponent = /** @class */ (function () {
    function PoNavbarActionsComponent() {
    }
    Object.defineProperty(PoNavbarActionsComponent.prototype, "iconActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconActions;
        },
        set: /**
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            this._iconActions = actions.map((/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return (__assign({}, action, { separator: true, url: action.link })); }));
        },
        enumerable: true,
        configurable: true
    });
    PoNavbarActionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-actions',
                    template: "<po-navbar-action *ngFor=\"let iconAction of iconActions\"\n  class=\"po-navbar-action\"\n  [p-action]=\"iconAction.action\"\n  [p-icon]=\"iconAction.icon\"\n  [p-label]=\"iconAction.label\"\n  [p-link]=\"iconAction.link\"\n  [p-tooltip-text]=\"iconAction.tooltip\">\n</po-navbar-action>\n\n<po-navbar-action-popup\n  class=\"po-navbar-action-popup\"\n  [p-icon-actions]=\"iconActions\">\n</po-navbar-action-popup>\n\n\n"
                }] }
    ];
    PoNavbarActionsComponent.propDecorators = {
        iconActions: [{ type: Input, args: ['p-icon-actions',] }]
    };
    return PoNavbarActionsComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoNavbarActionsComponent.prototype._iconActions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarActionsModule = /** @class */ (function () {
    function PoNavbarActionsModule() {
    }
    PoNavbarActionsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoPopupModule,
                        PoTooltipModule
                    ],
                    declarations: [
                        PoNavbarActionComponent,
                        PoNavbarActionPopupComponent,
                        PoNavbarActionsComponent
                    ],
                    exports: [
                        PoNavbarActionsComponent
                    ]
                },] }
    ];
    return PoNavbarActionsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoMenuComponent
 *
 * \@description
 *
 * Interface para os itens de menu do componente po-menu.
 *
 * @record
 */
function PoMenuItem() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Badge do item de menu.
     *
     * Ao adicioná-lo em um subitem (filho) todos os itens ascendentes (pai) serão marcados com um ponto vermelho.
     *
     * > O `po-badge` só será exibido caso o item do menu não possua `subItems` e seu valor seja maior ou igual a 0.
     * @type {?|undefined}
     */
    PoMenuItem.prototype.badge;
    /**
     * Texto do item de menu.
     * @type {?}
     */
    PoMenuItem.prototype.label;
    /**
     * Link para redirecionamento no click do item do menu, podendo ser um link interno ou externo.
     * @type {?|undefined}
     */
    PoMenuItem.prototype.link;
    /**
     * Ação personalizada para clique do item de menu.
     * @type {?|undefined}
     */
    PoMenuItem.prototype.action;
    /**
     * Ícone para o item de menu, os [ícones aceitos](/guides/icons) são os definidos no guia de estilo da Portinari.
     * São exibidos apenas no primeiro nível de menu e serão visíveis apenas se todos os itens de primeiro nível possuírem ícones.
     * O menu colapsado também aparecerá somente se todos os itens de primeiro nível de menu possuírem ícones e textos curtos.
     * @type {?|undefined}
     */
    PoMenuItem.prototype.icon;
    /**
     * Texto curto para o item que aparece quando o menu estiver colapsado.
     * Se colapsado, aparecerá somente se todos os itens de primeiro nível de menu que possuírem ícones e textos curtos.
     * @type {?|undefined}
     */
    PoMenuItem.prototype.shortLabel;
    /**
     * Lista de sub-items, criando novos níveis dentro do menu. O número máximo de níveis do menu é igual a 4.
     * @type {?|undefined}
     */
    PoMenuItem.prototype.subItems;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoMenuComponent
 *
 * \@description
 *
 * Interface do *badge* utilizado no `po-menu`.
 * @record
 */
function PoMenuItemBadge() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Define a cor do *badge* e aceita os valores:
     *
     * <span class="dot po-color-01"></span> `color-01`
     *
     * <span class="dot po-color-02"></span> `color-02`
     *
     * <span class="dot po-color-03"></span> `color-03`
     *
     * <span class="dot po-color-04"></span> `color-04`
     *
     * <span class="dot po-color-05"></span> `color-05`
     *
     * <span class="dot po-color-06"></span> `color-06`
     *
     * <span class="dot po-color-07"></span> `color-07`
     *
     * <span class="dot po-color-08"></span> `color-08`
     *
     * <span class="dot po-color-09"></span> `color-09`
     *
     * <span class="dot po-color-10"></span> `color-10`
     *
     * <span class="dot po-color-11"></span> `color-11`
     *
     * <span class="dot po-color-12"></span> `color-12`
     *
     * \@default `color-07`
     * @type {?|undefined}
     */
    PoMenuItemBadge.prototype.color;
    /**
     * \@description
     *
     * Número exibido no *badge*, caso o mesmo seja maior que **99** o mesmo exibe **99+**.
     * @type {?}
     */
    PoMenuItemBadge.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoMenuComponent
 *
 * \@description
 *
 * Interface do objeto que deve conter na coleção de itens filtrados no componente `po-menu`.
 * @record
 */
function PoMenuItemFiltered() { }
if (false) {
    /**
     * Texto do item de menu.
     * @type {?}
     */
    PoMenuItemFiltered.prototype.label;
    /**
     * Link* para redirecionamento no clique do item do menu, podendo ser um *link* interno ou externo.
     * @type {?}
     */
    PoMenuItemFiltered.prototype.link;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoMenuComponent
 *
 * \@description
 *
 * Interface do serviço utilizado no componente `po-menu`.
 * @record
 */
function PoMenuFilter() { }
if (false) {
    /**
     * Método responsável por retornar um *Observable* que retorne uma lista de objetos que seguem a interface `PoMenuItemFiltered`.
     * Será informado por parâmetro o valor a ser pesquisado e as informações adicionais preenchidas através da propriedade `p-params`.
     *
     * @param {?} search
     * @param {?=} params
     * @return {?}
     */
    PoMenuFilter.prototype.getFilteredData = function (search, params) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poNavbarLiteralsDefault = {
    en: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    })),
    es: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    })),
    pt: (/** @type {?} */ ({
        navbarLinks: 'Navbar links'
    })),
    ru: (/** @type {?} */ ({
        navbarLinks: 'Navbar связи'
    }))
};
/**
 * \@description
 *
 * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 * @abstract
 */
var PoNavbarBaseComponent = /** @class */ (function () {
    function PoNavbarBaseComponent() {
        this._iconActions = [];
        this._items = [];
        this._shadow = false;
    }
    Object.defineProperty(PoNavbarBaseComponent.prototype, "iconActions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconActions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._iconActions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarBaseComponent.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma lista de items do `po-navbar`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define uma lista de items do `po-navbar`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poNavbarLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com a literal usada na propriedade `p-literals`.
         *
         * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
         *
         * ```
         *  const customLiterals: PoNavbarLiterals = {
         *    navbarLinks: 'Itens de navegação'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-navbar
         *   [p-literals]="customLiterals">
         * </po-navbar>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com a literal usada na propriedade `p-literals`.
         *
         * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
         *
         * ```
         *  const customLiterals: PoNavbarLiterals = {
         *    navbarLinks: 'Itens de navegação'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-navbar
         *   [p-literals]="customLiterals">
         * </po-navbar>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poNavbarLiteralsDefault[poLocaleDefault], poNavbarLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poNavbarLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarBaseComponent.prototype, "logo", {
        get: /**
         * @return {?}
         */
        function () {
            return this._logo;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a logo apresentada `po-navbar`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a logo apresentada `po-navbar`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._logo = value;
            if (this.menu) {
                this.validateMenuLogo();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarBaseComponent.prototype, "shadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._shadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplica uma sombra na parte inferior do `po-navbar`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplica uma sombra na parte inferior do `po-navbar`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._shadow = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoNavbarBaseComponent.propDecorators = {
        iconActions: [{ type: Input, args: ['p-icon-actions',] }],
        items: [{ type: Input, args: ['p-items',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        logo: [{ type: Input, args: ['p-logo',] }],
        menu: [{ type: Input, args: ['p-menu',] }],
        shadow: [{ type: Input, args: ['p-shadow',] }]
    };
    return PoNavbarBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._iconActions;
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._items;
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._logo;
    /**
     * @type {?}
     * @private
     */
    PoNavbarBaseComponent.prototype._shadow;
    /**
     * \@optional
     *
     * \@description
     *
     * Caso já possua um menu na aplicação o mesmo deve ser repassado para essa propriedade para que quando entre em modo
     * responsivo os items do `po-navbar` possam ser adicionados no primeiro item do menu definido.
     *
     * > Ao utilizar menu e navbar com logo mantém apenas a logo do navbar.
     *
     * Exemplo:
     *
     * ```
     * <po-navbar
     *  [p-items]="items"
     *  [p-icon-actions]="iconActions"
     *  [p-menu]="userMenu">
     * </po-navbar>
     * <div class="po-wrapper">
     *  <po-menu #userMenu
     *   [p-menus]="[{ label: 'Item 1', link: '/' }]">
     *  </po-menu>
     * </div>
     * ```
     * @type {?}
     */
    PoNavbarBaseComponent.prototype.menu;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoNavbarBaseComponent.prototype.validateMenuLogo = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarItemComponent = /** @class */ (function () {
    function PoNavbarItemComponent() {
        this.click = new EventEmitter();
    }
    Object.defineProperty(PoNavbarItemComponent.prototype, "type", {
        get: /**
         * @return {?}
         */
        function () {
            return isExternalLink(this.link) ? 'externalLink' : 'internalLink';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} label
     * @param {?=} link
     * @return {?}
     */
    PoNavbarItemComponent.prototype.itemClick = /**
     * @param {?=} label
     * @param {?=} link
     * @return {?}
     */
    function (label, link) {
        if (this.action) {
            this.action({ label: label, link: link });
        }
        this.click.emit();
    };
    PoNavbarItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-item',
                    template: "<ng-container [ngSwitch]=\"type\">\n\n  <a *ngSwitchCase=\"'externalLink'\"\n    class=\"po-navbar-item-link\"\n    [class.po-clickable]=\"clickable\"\n    [href]=\"link\" \n    target=\"_blank\"\n    (click)=\"itemClick()\">{{ label }}</a>\n\n  <a *ngSwitchCase=\"'internalLink'\"\n    class=\"po-navbar-item-link\"\n    [class.po-clickable]=\"clickable\"\n    [routerLink]=\"link\"\n    (click)=\"itemClick(label, link)\">{{ label }}</a>\n\n</ng-container>\n"
                }] }
    ];
    PoNavbarItemComponent.propDecorators = {
        action: [{ type: Input, args: ['p-action',] }],
        clickable: [{ type: Input, args: ['p-clickable',] }],
        label: [{ type: Input, args: ['p-label',] }],
        link: [{ type: Input, args: ['p-link',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoNavbarItemComponent;
}());
if (false) {
    /** @type {?} */
    PoNavbarItemComponent.prototype.action;
    /** @type {?} */
    PoNavbarItemComponent.prototype.clickable;
    /** @type {?} */
    PoNavbarItemComponent.prototype.label;
    /** @type {?} */
    PoNavbarItemComponent.prototype.link;
    /** @type {?} */
    PoNavbarItemComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarItemsComponent = /** @class */ (function () {
    function PoNavbarItemsComponent(router) {
        this.router = router;
    }
    /**
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.routeSubscription.unsubscribe();
    };
    /**
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscribeToRoute();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.selectItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.selectedItem = item;
    };
    /**
     * @private
     * @param {?} urlRouter
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.checkActiveItemByUrl = /**
     * @private
     * @param {?} urlRouter
     * @return {?}
     */
    function (urlRouter) {
        this.selectedItem = this.items.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.link === urlRouter; }));
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.checkRouterChildrenFragments = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? "/" + childrenPrimary.segments.map((/**
         * @param {?} it
         * @return {?}
         */
        function (it) { return it.path; })).join('/') : '';
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarItemsComponent.prototype.subscribeToRoute = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.routeSubscription = this.router.events.subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                /** @type {?} */
                var urlRouter = _this.checkRouterChildrenFragments();
                _this.checkActiveItemByUrl(urlRouter);
            }
        }));
    };
    PoNavbarItemsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-items',
                    template: "<nav>\n  <ul class=\"po-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\"\n      class=\"po-navbar-item\"\n      [class.po-navbar-item-selected]=\"selectedItem === item\">\n      <po-navbar-item\n        [p-action]=\"item.action\"\n        [p-clickable]=\"selectedItem !== item\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        (p-click)=\"selectItem(item)\">\n      </po-navbar-item>\n    </li>\n  </ul>\n</nav>\n"
                }] }
    ];
    /** @nocollapse */
    PoNavbarItemsComponent.ctorParameters = function () { return [
        { type: Router }
    ]; };
    PoNavbarItemsComponent.propDecorators = {
        navbarItemsContainer: [{ type: ViewChild, args: ['navbarItemsContainer', { read: ElementRef, static: true },] }],
        allNavbarItems: [{ type: ViewChildren, args: [PoNavbarItemComponent, { read: ElementRef },] }],
        items: [{ type: Input, args: ['p-items',] }]
    };
    return PoNavbarItemsComponent;
}());
if (false) {
    /** @type {?} */
    PoNavbarItemsComponent.prototype.selectedItem;
    /**
     * @type {?}
     * @private
     */
    PoNavbarItemsComponent.prototype.routeSubscription;
    /** @type {?} */
    PoNavbarItemsComponent.prototype.navbarItemsContainer;
    /** @type {?} */
    PoNavbarItemsComponent.prototype.allNavbarItems;
    /** @type {?} */
    PoNavbarItemsComponent.prototype.items;
    /**
     * @type {?}
     * @private
     */
    PoNavbarItemsComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poNavbarNavigationWidth = 88;
/** @type {?} */
var poNavbarMenuMedia = 768;
/** @type {?} */
var poNavbarMatchMedia = "(max-width: " + poNavbarMenuMedia + "px)";
/** @type {?} */
var poNavbarTiming = '250ms ease';
/**
 * \@docsExtends PoNavbarBaseComponent
 */
var PoNavbarComponent = /** @class */ (function (_super) {
    __extends(PoNavbarComponent, _super);
    function PoNavbarComponent(renderer, builder, changeDetector) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.builder = builder;
        _this.changeDetector = changeDetector;
        _this.showItemsNavigation = false;
        _this.offset = 0;
        _this.onMediaQueryChange = (/**
         * @param {?} changed
         * @return {?}
         */
        function (changed) {
            _this.changeNavbarMenuItems(changed.matches, _this.menuItems, _this.items, _this.literals.navbarLinks);
        });
        _this.windowResizeListener = _this.renderer.listen(window, 'resize', _this.displayItemsNavigation.bind(_this));
        return _this;
    }
    Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return this.offset === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableRight", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disableRight && this.offset !== 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoNavbarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.displayItemsNavigation();
        if (this.menu) {
            this.initNavbarMenu();
        }
    };
    /**
     * @return {?}
     */
    PoNavbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
    };
    /**
     * @param {?} orientation
     * @return {?}
     */
    PoNavbarComponent.prototype.navigateItems = /**
     * @param {?} orientation
     * @return {?}
     */
    function (orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.allNavbarItemsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.navbarItems.allNavbarItems.reduce((/**
         * @param {?} previous
         * @param {?} current
         * @return {?}
         */
        function (previous, current) { return previous + current.nativeElement.offsetWidth; }), 0);
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    PoNavbarComponent.prototype.animate = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        /** @type {?} */
        var animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    PoNavbarComponent.prototype.buildTransitionAnimation = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        return this.builder.build([
            animate(poNavbarTiming, keyframes([style({ transform: "translateX(" + -offset + "px)" })]))
        ]);
    };
    /**
     * @private
     * @param {?} isCollapsedMedia
     * @param {?} menuItems
     * @param {?} navbarItems
     * @param {?} label
     * @return {?}
     */
    PoNavbarComponent.prototype.changeNavbarMenuItems = /**
     * @private
     * @param {?} isCollapsedMedia
     * @param {?} menuItems
     * @param {?} navbarItems
     * @param {?} label
     * @return {?}
     */
    function (isCollapsedMedia, menuItems, navbarItems, label) {
        if (isCollapsedMedia) {
            /** @type {?} */
            var subItems = [{ label: label, subItems: navbarItems }];
            this.menu.menus = __spread(subItems, menuItems);
        }
        else {
            this.menu.menus = menuItems;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.calculateLeftNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var calculatedOffset;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        function (navbarItem) {
            /** @type {?} */
            var navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            /** @type {?} */
            var navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= _this.offset) {
                calculatedOffset = navbarItemOffset - (_this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        }));
        return calculatedOffset;
    };
    /**
     * @private
     * @param {?} itemBreakPoint
     * @return {?}
     */
    PoNavbarComponent.prototype.calculateRightNavigation = /**
     * @private
     * @param {?} itemBreakPoint
     * @return {?}
     */
    function (itemBreakPoint) {
        /** @type {?} */
        var calculatedOffset;
        this.navbarItems.allNavbarItems.some((/**
         * @param {?} navbarItem
         * @return {?}
         */
        function (navbarItem) {
            /** @type {?} */
            var offsetLeft = navbarItem.nativeElement.offsetLeft;
            /** @type {?} */
            var finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        }));
        return calculatedOffset;
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.displayItemsNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.initNavbarMenu = /**
     * @private
     * @return {?}
     */
    function () {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        this.menuItems = this.menu.menus;
        if (window.innerWidth < poNavbarMenuMedia) {
            this.changeNavbarMenuItems(true, this.menuItems, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.navbarItemsWidth = /**
     * @private
     * @return {?}
     */
    function () {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.navigateLeft = /**
     * @private
     * @return {?}
     */
    function () {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.navigateRight = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        /** @type {?} */
        var itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    };
    /**
     * @private
     * @return {?}
     */
    PoNavbarComponent.prototype.setOffsetToZero = /**
     * @private
     * @return {?}
     */
    function () {
        this.offset = 0;
    };
    /**
     * @private
     * @param {?} maxAllowedOffset
     * @return {?}
     */
    PoNavbarComponent.prototype.validateMaxOffset = /**
     * @private
     * @param {?} maxAllowedOffset
     * @return {?}
     */
    function (maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    PoNavbarComponent.prototype.validateMenuLogo = /**
     * @protected
     * @return {?}
     */
    function () {
        if (this.menu.logo && this.logo) {
            this.menu.logo = undefined;
            this.menu.changeDetector.detectChanges();
        }
    };
    PoNavbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar',
                    template: "<header class=\"po-navbar\"\n  [ngClass]=\"{'po-navbar-shadow' : shadow}\">\n\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{'po-navbar-logo-menu' : !!menu, 'po-navbar-no-logo' : !logo }\"\n    [p-logo]=\"logo\">\n  </po-navbar-logo>\n\n  <po-navbar-items\n    class=\"po-navbar-items\"\n    [p-items]=\"items\">\n  </po-navbar-items>\n\n  <po-navbar-item-navigation *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\">\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions\n    class=\"po-navbar-actions\"\n    [p-icon-actions]=\"iconActions\">\n  </po-navbar-actions>\n\n</header>\n\n<po-menu *ngIf=\"!menu\"\n  [p-menus]=\"items\">\n</po-menu>"
                }] }
    ];
    /** @nocollapse */
    PoNavbarComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: AnimationBuilder },
        { type: ChangeDetectorRef }
    ]; };
    PoNavbarComponent.propDecorators = {
        navbarItemsElement: [{ type: ViewChild, args: [PoNavbarItemsComponent, { read: ElementRef, static: true },] }],
        navbarItems: [{ type: ViewChild, args: [PoNavbarItemsComponent, { static: true },] }]
    };
    return PoNavbarComponent;
}(PoNavbarBaseComponent));
if (false) {
    /** @type {?} */
    PoNavbarComponent.prototype.disableRight;
    /** @type {?} */
    PoNavbarComponent.prototype.showItemsNavigation;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.mediaQuery;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.offset;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.menuItems;
    /**
     * @type {?}
     * @protected
     */
    PoNavbarComponent.prototype.windowResizeListener;
    /** @type {?} */
    PoNavbarComponent.prototype.navbarItemsElement;
    /** @type {?} */
    PoNavbarComponent.prototype.navbarItems;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.onMediaQueryChange;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.builder;
    /**
     * @type {?}
     * @private
     */
    PoNavbarComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarItemsModule = /** @class */ (function () {
    function PoNavbarItemsModule() {
    }
    PoNavbarItemsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        RouterModule
                    ],
                    declarations: [
                        PoNavbarItemComponent,
                        PoNavbarItemsComponent
                    ],
                    exports: [
                        PoNavbarItemsComponent
                    ]
                },] }
    ];
    return PoNavbarItemsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarLogoComponent = /** @class */ (function () {
    function PoNavbarLogoComponent() {
    }
    PoNavbarLogoComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-logo',
                    template: "<a href=\"./\">\n  <img *ngIf=\"logo\" class=\"po-navbar-logo-image\" alt=\"logo\" [src]=\"logo\">\n</a>\n"
                }] }
    ];
    PoNavbarLogoComponent.propDecorators = {
        logo: [{ type: Input, args: ['p-logo',] }]
    };
    return PoNavbarLogoComponent;
}());
if (false) {
    /** @type {?} */
    PoNavbarLogoComponent.prototype.logo;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarItemNavigationComponent = /** @class */ (function () {
    function PoNavbarItemNavigationComponent() {
        this.click = new EventEmitter();
    }
    PoNavbarItemNavigationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-item-navigation',
                    template: "<po-navbar-item-navigation-icon class=\"po-navbar-item-navigation-icon\"\n  p-icon=\"left\"\n  [p-disabled]=\"disableLeft\"\n  (p-click)=\"click.emit($event)\">\n</po-navbar-item-navigation-icon>\n\n<po-navbar-item-navigation-icon class=\"po-navbar-item-navigation-icon\"\n  p-icon=\"right\"\n  [p-disabled]=\"disableRight\"\n  (p-click)=\"click.emit($event)\">\n</po-navbar-item-navigation-icon>\n"
                }] }
    ];
    PoNavbarItemNavigationComponent.propDecorators = {
        disableLeft: [{ type: Input, args: ['p-disable-left',] }],
        disableRight: [{ type: Input, args: ['p-disable-right',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoNavbarItemNavigationComponent;
}());
if (false) {
    /** @type {?} */
    PoNavbarItemNavigationComponent.prototype.disableLeft;
    /** @type {?} */
    PoNavbarItemNavigationComponent.prototype.disableRight;
    /** @type {?} */
    PoNavbarItemNavigationComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarItemNavigationIconComponent = /** @class */ (function () {
    function PoNavbarItemNavigationIconComponent() {
        this.click = new EventEmitter();
    }
    PoNavbarItemNavigationIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-navbar-item-navigation-icon',
                    template: "<div\n  [ngClass]=\"{'po-navbar-item-navigation-icon-disabled': disabled , 'po-clickable': !disabled }\"\n  tabindex=\"0\"\n  (click)=\"disabled ? undefined : click.emit(icon)\" >\n  <span class=\"po-icon po-icon-arrow-{{icon}}\"></span>\n</div>\n"
                }] }
    ];
    PoNavbarItemNavigationIconComponent.propDecorators = {
        disabled: [{ type: Input, args: ['p-disabled',] }],
        icon: [{ type: Input, args: ['p-icon',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoNavbarItemNavigationIconComponent;
}());
if (false) {
    /** @type {?} */
    PoNavbarItemNavigationIconComponent.prototype.disabled;
    /** @type {?} */
    PoNavbarItemNavigationIconComponent.prototype.icon;
    /** @type {?} */
    PoNavbarItemNavigationIconComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoNavbarItemNavigationModule = /** @class */ (function () {
    function PoNavbarItemNavigationModule() {
    }
    PoNavbarItemNavigationModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        RouterModule
                    ],
                    declarations: [
                        PoNavbarItemNavigationComponent,
                        PoNavbarItemNavigationIconComponent
                    ],
                    exports: [
                        PoNavbarItemNavigationComponent,
                    ]
                },] }
    ];
    return PoNavbarItemNavigationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-navbar`.
 *
 * > Para o correto funcionamento do componente `po-navbar`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 * import { PoModule } from '\@portinari/portinari-ui';
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var PoNavbarModule = /** @class */ (function () {
    function PoNavbarModule() {
    }
    PoNavbarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoNavbarActionsModule,
                        PoNavbarItemsModule,
                        PoNavbarItemNavigationModule,
                        PoMenuModule
                    ],
                    declarations: [
                        PoNavbarComponent,
                        PoNavbarLogoComponent
                    ],
                    exports: [
                        PoNavbarComponent
                    ]
                },] }
    ];
    return PoNavbarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **po-page** é utilizado como container principal para os componentes po-page-header, po-page-content
 * e para as ações dos componentes po-page-edit e po-page-detail.
 *
 * Quando estiver sendo utilizado o componente po-menu junto ao po-page, ambos devem estar no mesmo nível
 * e inseridos em uma div com a classe **po-wrapper**. Esta classe será responsável por fazer os cálculos
 * necessários de alinhamento dos componentes.
 *
 * O componente **po-page** também pode ser utilizado sem o po-menu e neste caso o corpo da página deve ser
 * definido com a altura de 100% para que o po-page maximize seu tamanho.
 * ```
 * html, body {
 *   height:100%;
 * }
 * ```
 */
var  /**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **po-page** é utilizado como container principal para os componentes po-page-header, po-page-content
 * e para as ações dos componentes po-page-edit e po-page-detail.
 *
 * Quando estiver sendo utilizado o componente po-menu junto ao po-page, ambos devem estar no mesmo nível
 * e inseridos em uma div com a classe **po-wrapper**. Esta classe será responsável por fazer os cálculos
 * necessários de alinhamento dos componentes.
 *
 * O componente **po-page** também pode ser utilizado sem o po-menu e neste caso o corpo da página deve ser
 * definido com a altura de 100% para que o po-page maximize seu tamanho.
 * ```
 * html, body {
 *   height:100%;
 * }
 * ```
 */
PoPageBaseComponent = /** @class */ (function () {
    function PoPageBaseComponent() {
    }
    return PoPageBaseComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoPageBaseComponent
 */
var PoPageComponent = /** @class */ (function (_super) {
    __extends(PoPageComponent, _super);
    function PoPageComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoPageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page',
                    template: "<div class=\"po-page\">\n  <ng-content>\n  </ng-content>\n</div>\n"
                }] }
    ];
    return PoPageComponent;
}(PoPageBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **po-page-content** é utilizado como o container para o conteúdo da página.
 */
var  /**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **po-page-content** é utilizado como o container para o conteúdo da página.
 */
PoPageContentBaseComponent = /** @class */ (function () {
    function PoPageContentBaseComponent() {
    }
    return PoPageContentBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @protected
     */
    PoPageContentBaseComponent.prototype.resizeListener;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoPageContentBaseComponent
 */
var PoPageContentComponent = /** @class */ (function (_super) {
    __extends(PoPageContentComponent, _super);
    function PoPageContentComponent(renderer) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.contentOpacity = 0;
        _this.height = '90%';
        _this.overflowY = 'none';
        _this.initializeListeners();
        return _this;
    }
    /**
     * @return {?}
     */
    PoPageContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.recalculateHeaderSize();
    };
    /**
     * @return {?}
     */
    PoPageContentComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @return {?}
     */
    PoPageContentComponent.prototype.recalculateHeaderSize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var pageHeaderElement = document.querySelector('div.po-page-header');
            _this.setHeightContent(pageHeaderElement);
            _this.contentOpacity = 1;
        }));
    };
    /**
     * @param {?} poPageHeader
     * @return {?}
     */
    PoPageContentComponent.prototype.setHeightContent = /**
     * @param {?} poPageHeader
     * @return {?}
     */
    function (poPageHeader) {
        /** @type {?} */
        var bodyHeight = document.body.clientHeight;
        /** @type {?} */
        var pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
        /** @type {?} */
        var newHeight = bodyHeight - pageHeaderHeight;
        this.height = newHeight + "px";
    };
    /**
     * @private
     * @return {?}
     */
    PoPageContentComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.recalculateHeaderSize();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoPageContentComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    PoPageContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page-content',
                    template: "<div class=\"po-page-content\"\n  [style.height]=\"height\"\n  [style.opacity]=\"contentOpacity\"\n  [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoPageContentComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    return PoPageContentComponent;
}(PoPageContentBaseComponent));
if (false) {
    /** @type {?} */
    PoPageContentComponent.prototype.contentOpacity;
    /** @type {?} */
    PoPageContentComponent.prototype.height;
    /** @type {?} */
    PoPageContentComponent.prototype.overflowY;
    /** @type {?} */
    PoPageContentComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-page-default` é utilizado como o container principal para as telas sem um template definido.
 * @abstract
 */
var PoPageDefaultBaseComponent = /** @class */ (function () {
    function PoPageDefaultBaseComponent() {
        this._actions = [];
    }
    Object.defineProperty(PoPageDefaultBaseComponent.prototype, "actions", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
         * @param {?} actions
         * @return {?}
         */
        function (actions) {
            this._actions = Array.isArray(actions) ? actions : [];
            this.setDropdownActions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDefaultBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /** Título da página. */
        set: /**
         * Título da página.
         * @param {?} title
         * @return {?}
         */
        function (title) {
            this._title = title;
            this.poPageContent.recalculateHeaderSize();
        },
        enumerable: true,
        configurable: true
    });
    PoPageDefaultBaseComponent.propDecorators = {
        poPageContent: [{ type: ViewChild, args: [PoPageContentComponent, { static: true },] }],
        actions: [{ type: Input, args: ['p-actions',] }],
        breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
        title: [{ type: Input, args: ['p-title',] }]
    };
    return PoPageDefaultBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDefaultBaseComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoPageDefaultBaseComponent.prototype._title;
    /** @type {?} */
    PoPageDefaultBaseComponent.prototype.poPageContent;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDefaultBaseComponent.prototype.breadcrumb;
    /**
     * @abstract
     * @return {?}
     */
    PoPageDefaultBaseComponent.prototype.setDropdownActions = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageDefaultBaseComponent
 *
 * \@example
 *
 * <example name="po-page-default-basic" title="Portinari Page Default Basic">
 *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.html"> </file>
 *  <file name="sample-po-page-default-basic/sample-po-page-default-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-default-labs" title="Portinari Page Default Labs">
 *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.html"> </file>
 *  <file name="sample-po-page-default-labs/sample-po-page-default-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-default-dashboard" title="Portinari Page Default - Dashboard">
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.html"> </file>
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.component.ts"> </file>
 *  <file name="sample-po-page-default-dashboard/sample-po-page-default-dashboard.service.ts"> </file>
 * </example>
 */
var PoPageDefaultComponent = /** @class */ (function (_super) {
    __extends(PoPageDefaultComponent, _super);
    function PoPageDefaultComponent(viewRef, renderer, router) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.router = router;
        _this.limitPrimaryActions = 3;
        _this.maxWidthMobile = 480;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    PoPageDefaultComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setIsMobile();
        this.setDropdownActions();
        this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onResize(event);
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PoPageDefaultComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.setDropdownActions();
    };
    /**
     * @param {?} action
     * @return {?}
     */
    PoPageDefaultComponent.prototype.actionIsDisabled = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoPageDefaultComponent.prototype.callAction = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @return {?}
     */
    PoPageDefaultComponent.prototype.hasPageHeader = /**
     * @return {?}
     */
    function () {
        return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoPageDefaultComponent.prototype.onResize = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var width = ((/** @type {?} */ (event.target))).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoPageDefaultComponent.prototype.setIsMobile = /**
     * @private
     * @return {?}
     */
    function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    PoPageDefaultComponent.prototype.setDropdownActions = /**
     * @return {?}
     */
    function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    PoPageDefaultComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page-default',
                    template: "<po-page>\n\n  <!-- HEADER -->\n  <po-page-header\n    *ngIf=\"hasPageHeader()\"\n    [p-breadcrumb]=\"breadcrumb\"\n    [p-title]=\"title\">\n\n    <!-- OPERATIONS -->\n    <div class=\"po-page-header-actions\">\n      <po-dropdown *ngIf=\"actions.length > limitPrimaryActions\"\n        p-label=\"Outras a\u00E7\u00F5es\"\n        [p-actions]=\"dropdownActions\">\n      </po-dropdown>\n\n      <po-button *ngIf=\"actions.length === 3 && actions[2] && !isMobile\"\n        [p-disabled]=\"actionIsDisabled(actions[2])\"\n        [p-label]=\"actions[2].label\"\n        (p-click)=\"callAction(actions[2])\">\n      </po-button>\n\n      <po-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\"\n        [p-disabled]=\"actionIsDisabled(actions[1])\"\n        [p-label]=\"actions[1].label\"\n        (p-click)=\"callAction(actions[1])\">\n      </po-button>\n\n      <po-button *ngIf=\"actions[0]\"\n        p-type=\"primary\"\n        [p-disabled]=\"actionIsDisabled(actions[0])\"\n        [p-icon]=\"actions[0].icon\"\n        [p-label]=\"actions[0].label\"\n        (p-click)=\"callAction(actions[0])\">\n      </po-button>\n    </div>\n\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content></ng-content>\n  </po-page-content>\n\n</po-page>\n"
                }] }
    ];
    /** @nocollapse */
    PoPageDefaultComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Renderer2 },
        { type: Router }
    ]; };
    return PoPageDefaultComponent;
}(PoPageDefaultBaseComponent));
if (false) {
    /** @type {?} */
    PoPageDefaultComponent.prototype.limitPrimaryActions;
    /** @type {?} */
    PoPageDefaultComponent.prototype.dropdownActions;
    /** @type {?} */
    PoPageDefaultComponent.prototype.isMobile;
    /**
     * @type {?}
     * @private
     */
    PoPageDefaultComponent.prototype.maxWidthMobile;
    /**
     * @type {?}
     * @private
     */
    PoPageDefaultComponent.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    PoPageDefaultComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoPageDefaultComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poPageDetailLiteralsDefault = {
    en: (/** @type {?} */ ({
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    })),
    es: (/** @type {?} */ ({
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    })),
    pt: (/** @type {?} */ ({
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    })),
    ru: (/** @type {?} */ ({
        back: 'возвращение',
        edit: 'редактировать',
        remove: 'удаление'
    }))
};
/**
 * \@description
 *
 * O componente **po-page-detail** é utilizado como container principal para a tela de detalhamento de um registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o po-page-detail,
 * são elas:
 *  - Voltar (função: back);
 *  - Editar (função: edit);
 *  - Remover (função: remove);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 */
var PoPageDetailBaseComponent = /** @class */ (function () {
    function PoPageDetailBaseComponent() {
    }
    Object.defineProperty(PoPageDetailBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poPageDetailLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-page-detail`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoPageDetailLiterals = {
         *    edit: 'Edição',
         *    remove: 'Exclusão',
         *    back: 'Menu'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoPageDetailLiterals = {
         *    remove: 'Excluir registro permanentemente'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-page-detail
         *   [p-literals]="customLiterals">
         * </po-page-detail>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-page-detail`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoPageDetailLiterals = {
         *    edit: 'Edição',
         *    remove: 'Exclusão',
         *    back: 'Menu'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoPageDetailLiterals = {
         *    remove: 'Excluir registro permanentemente'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-page-detail
         *   [p-literals]="customLiterals">
         * </po-page-detail>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poPageDetailLiteralsDefault[poLocaleDefault], poPageDetailLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poPageDetailLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDetailBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /** Título da página. */
        set: /**
         * Título da página.
         * @param {?} title
         * @return {?}
         */
        function (title) {
            this._title = title;
            this.poPageContent.recalculateHeaderSize();
        },
        enumerable: true,
        configurable: true
    });
    PoPageDetailBaseComponent.propDecorators = {
        poPageContent: [{ type: ViewChild, args: [PoPageContentComponent, { static: true },] }],
        breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        title: [{ type: Input, args: ['p-title',] }]
    };
    return PoPageDetailBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDetailBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoPageDetailBaseComponent.prototype._title;
    /** @type {?} */
    PoPageDetailBaseComponent.prototype.poPageContent;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDetailBaseComponent.prototype.breadcrumb;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description Verifica se existe a função dentro do contexto.
 *
 * @param {?} action Nome da função que será verificada a existência no parentContext.
 *
 * @param {?} parentContext Contexto da qual a função será verificada.
 * @return {?}
 */
function hasAction(action, parentContext) {
    return parentContext && parentContext[action];
}
/**
 * \@description Executa a função cujo o nome foi passado por parâmetro.
 *
 * @param {?} action Nome da função que será executada no parentContext.
 *
 * @param {?} parentContext Contexto da qual a função será executada.
 * @return {?}
 */
function callAction(action, parentContext) {
    if (hasAction(action, parentContext)) {
        parentContext[action]();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageDetailBaseComponent
 *
 * \@example
 *
 * <example name="po-page-detail-basic" title="Portinari Page Detail Basic">
 *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.html"> </file>
 *  <file name="sample-po-page-detail-basic/sample-po-page-detail-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-detail-labs" title="Portinari Page Detail Labs">
 *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.html"> </file>
 *  <file name="sample-po-page-detail-labs/sample-po-page-detail-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-detail-user" title="Portinari Page Detail - User">
 *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.html"> </file>
 *  <file name="sample-po-page-detail-user/sample-po-page-detail-user.component.ts"> </file>
 * </example>
 */
var PoPageDetailComponent = /** @class */ (function (_super) {
    __extends(PoPageDetailComponent, _super);
    function PoPageDetailComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.callActionFn = callAction;
        _this.hasActionFn = hasAction;
        _this.parentContext = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    PoPageDetailComponent.prototype.hasAnyAction = /**
     * @return {?}
     */
    function () {
        return this.hasActionFn('back', this.parentContext) ||
            this.hasActionFn('edit', this.parentContext) ||
            this.hasActionFn('remove', this.parentContext);
    };
    /**
     * @param {?} property
     * @return {?}
     */
    PoPageDetailComponent.prototype.hasEditFn = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        if (property === 'icon') {
            return this.hasActionFn('edit', this.parentContext) ? '' : 'po-icon-delete';
        }
        else if (property === 'type') {
            return this.hasActionFn('edit', this.parentContext) ? 'default' : 'primary';
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} property
     * @return {?}
     */
    PoPageDetailComponent.prototype.hasEditOrRemoveFn = /**
     * @param {?} property
     * @return {?}
     */
    function (property) {
        if (property === 'icon') {
            return this.hasActionFn('edit', this.parentContext) || this.hasActionFn('remove', this.parentContext) ? '' : 'po-icon-arrow-left';
        }
        else if (property === 'type') {
            return this.hasActionFn('edit', this.parentContext) || this.hasActionFn('remove', this.parentContext) ? 'default' : 'primary';
        }
        else {
            return '';
        }
    };
    /**
     * @return {?}
     */
    PoPageDetailComponent.prototype.hasPageHeader = /**
     * @return {?}
     */
    function () {
        return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
    };
    PoPageDetailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page-detail',
                    template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header\n    *ngIf=\"hasPageHeader()\"\n    [p-breadcrumb]=\"breadcrumb\"\n    [p-title]=\"title\">\n\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\n      <po-button *ngIf=\"hasActionFn('back', parentContext)\"\n        [p-icon]=\"hasEditOrRemoveFn('icon')\"\n        [p-label]=\"literals.back\"\n        [p-type]=\"hasEditOrRemoveFn('type')\"\n        (p-click)=\"callActionFn('back', parentContext)\">\n      </po-button>\n\n      <po-button *ngIf=\"hasActionFn('remove', parentContext)\"\n        [p-icon]=\"hasEditFn('icon')\"\n        [p-label]=\"literals.remove\"\n        [p-type]=\"hasEditFn('type')\"\n        (p-click)=\"callActionFn('remove', parentContext)\">\n      </po-button>\n\n      <po-button *ngIf=\"hasActionFn('edit', parentContext)\"\n        p-icon=\"po-icon-edit\"\n        p-type=\"primary\"\n        [p-label]=\"literals.edit\"\n        (p-click)=\"callActionFn('edit', parentContext)\">\n      </po-button>\n    </div>\n\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content>\n    </ng-content>\n  </po-page-content>\n\n</po-page>\n"
                }] }
    ];
    /** @nocollapse */
    PoPageDetailComponent.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    return PoPageDetailComponent;
}(PoPageDetailBaseComponent));
if (false) {
    /** @type {?} */
    PoPageDetailComponent.prototype.callActionFn;
    /** @type {?} */
    PoPageDetailComponent.prototype.hasActionFn;
    /** @type {?} */
    PoPageDetailComponent.prototype.parentContext;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poPageEditLiteralsDefault = {
    en: (/** @type {?} */ ({
        cancel: 'Cancel',
        save: 'Save',
        saveNew: 'Save and New'
    })),
    es: (/** @type {?} */ ({
        cancel: 'Cancelar',
        save: 'Guardar',
        saveNew: 'Guardar y Nuevo'
    })),
    pt: (/** @type {?} */ ({
        cancel: 'Cancelar',
        save: 'Salvar',
        saveNew: 'Salvar e Novo'
    })),
    ru: (/** @type {?} */ ({
        cancel: 'отменить',
        save: 'экономить',
        saveNew: 'Сохранить и новый'
    }))
};
/**
 * \@description
 *
 * O componente **po-page-edit** é utilizado como container principal para tela de edição ou adição de um
 * registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o po-page-edit,
 * são elas:
 *  - Cancelar (função: cancel);
 *  - Salvar e Novo (função: saveNew);
 *  - Salvar (função: save);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 *
 * Os botões "Salvar" e "Salvar e Novo" podem ser habilitados/desabilitados utilizando a propriedade p-disable-submit.
 * Esta propriedade pode ser utilizada para desabilitar os botões caso exista um formulário inválido na página ou alguma
 * regra de negócio não tenha sido atendida.
 */
var PoPageEditBaseComponent = /** @class */ (function () {
    function PoPageEditBaseComponent() {
    }
    Object.defineProperty(PoPageEditBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poPageEditLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-page-edit`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoPageEditLiterals = {
         *    cancel: 'Voltar',
         *    save: 'Confirmar',
         *    saveNew: 'Confirmar e criar um novo'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoPageEditLiterals = {
         *    cancel: 'Cancelar processo'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-page-edit
         *   [p-literals]="customLiterals">
         * </po-page-edit>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-page-edit`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoPageEditLiterals = {
         *    cancel: 'Voltar',
         *    save: 'Confirmar',
         *    saveNew: 'Confirmar e criar um novo'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoPageEditLiterals = {
         *    cancel: 'Cancelar processo'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-page-edit
         *   [p-literals]="customLiterals">
         * </po-page-edit>
         * ```
         *
         *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poPageEditLiteralsDefault[poLocaleDefault], poPageEditLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poPageEditLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageEditBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /** Título da página. */
        set: /**
         * Título da página.
         * @param {?} title
         * @return {?}
         */
        function (title) {
            this._title = title;
            this.poPageContent.recalculateHeaderSize();
        },
        enumerable: true,
        configurable: true
    });
    PoPageEditBaseComponent.propDecorators = {
        poPageContent: [{ type: ViewChild, args: [PoPageContentComponent, { static: true },] }],
        breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
        disableSubmit: [{ type: Input, args: ['p-disable-submit',] }],
        literals: [{ type: Input, args: ['p-literals',] }],
        title: [{ type: Input, args: ['p-title',] }]
    };
    return PoPageEditBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageEditBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoPageEditBaseComponent.prototype._title;
    /** @type {?} */
    PoPageEditBaseComponent.prototype.poPageContent;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageEditBaseComponent.prototype.breadcrumb;
    /**
     * Desabilita botões de submissão (save e saveNew)
     * @type {?}
     */
    PoPageEditBaseComponent.prototype.disableSubmit;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageEditBaseComponent
 *
 * \@example
 *
 * <example name="po-page-edit-basic" title="Portinari Page Edit Basic">
 *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.html"> </file>
 *  <file name="sample-po-page-edit-basic/sample-po-page-edit-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-edit-labs" title="Portinari Page Edit Labs">
 *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.html"> </file>
 *  <file name="sample-po-page-edit-labs/sample-po-page-edit-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-edit-user" title="Portinari Page Edit - User">
 *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.html"> </file>
 *  <file name="sample-po-page-edit-user/sample-po-page-edit-user.component.ts"> </file>
 * </example>
 */
var PoPageEditComponent = /** @class */ (function (_super) {
    __extends(PoPageEditComponent, _super);
    function PoPageEditComponent(viewRef) {
        var _this = _super.call(this) || this;
        _this.hasAction = hasAction;
        _this.callAction = callAction;
        _this.parentContext = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @param {?} icon
     * @return {?}
     */
    PoPageEditComponent.prototype.getIcon = /**
     * @param {?} icon
     * @return {?}
     */
    function (icon) {
        if (icon === 'cancel') {
            return this.isPrimaryAction('cancel') ? 'po-icon-close' : '';
        }
        if (icon === 'saveNew') {
            return this.isPrimaryAction('saveNew') ? 'po-icon-ok' : '';
        }
        return '';
    };
    /**
     * @param {?} type
     * @return {?}
     */
    PoPageEditComponent.prototype.getType = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        /** @type {?} */
        var isCancelPrimaryAction = type === 'cancel' && this.isPrimaryAction('cancel');
        /** @type {?} */
        var isSaveNewPrimaryAction = type === 'saveNew' && this.isPrimaryAction('saveNew');
        return isCancelPrimaryAction || isSaveNewPrimaryAction ? 'primary' : 'default';
    };
    /**
     * @return {?}
     */
    PoPageEditComponent.prototype.hasAnyAction = /**
     * @return {?}
     */
    function () {
        return hasAction('cancel', this.parentContext) || hasAction('saveNew', this.parentContext) || hasAction('save', this.parentContext);
    };
    /**
     * @return {?}
     */
    PoPageEditComponent.prototype.hasPageHeader = /**
     * @return {?}
     */
    function () {
        return !!(this.title || this.hasAnyAction() || (this.breadcrumb && this.breadcrumb.items.length));
    };
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    PoPageEditComponent.prototype.isPrimaryAction = /**
     * @private
     * @param {?} action
     * @return {?}
     */
    function (action) {
        /** @type {?} */
        var hasSaveAction = !hasAction('save', this.parentContext);
        if (action === 'saveNew') {
            return hasSaveAction;
        }
        if (action === 'cancel') {
            return !hasAction('saveNew', this.parentContext) && hasSaveAction;
        }
        return false;
    };
    PoPageEditComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page-edit',
                    template: "<po-page>\n  <!-- HEADER -->\n  <po-page-header\n    *ngIf=\"hasPageHeader()\"\n    [p-breadcrumb]=\"breadcrumb\"\n    [p-title]=\"title\">\n\n    <!-- OPERATIONS -->\n    <div *ngIf=\"hasAnyAction()\" class=\"po-page-header-actions\">\n      <po-button\n        *ngIf=\"hasAction('cancel', parentContext)\"\n        [p-icon]=\"getIcon('cancel')\"\n        [p-label]=\"literals.cancel\"\n        [p-type]=\"getType('cancel')\"\n        (p-click)=\"callAction('cancel', parentContext)\">\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasAction('saveNew', parentContext)\"\n        [p-disabled]=\"disableSubmit\"\n        [p-icon]=\"getIcon('saveNew')\"\n        [p-label]=\"literals.saveNew\"\n        [p-type]=\"getType('saveNew')\"\n        (p-click)=\"callAction('saveNew', parentContext)\">\n      </po-button>\n\n      <po-button\n        *ngIf=\"hasAction('save', parentContext)\"\n        p-icon=\"po-icon-ok\"\n        p-type=\"primary\"\n        [p-disabled]=\"disableSubmit\"\n        [p-label]=\"literals.save\"\n        (p-click)=\"callAction('save', parentContext)\">\n      </po-button>\n    </div>\n\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content>\n    </ng-content>\n  </po-page-content>\n\n</po-page>\n"
                }] }
    ];
    /** @nocollapse */
    PoPageEditComponent.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    return PoPageEditComponent;
}(PoPageEditBaseComponent));
if (false) {
    /** @type {?} */
    PoPageEditComponent.prototype.hasAction;
    /** @type {?} */
    PoPageEditComponent.prototype.callAction;
    /** @type {?} */
    PoPageEditComponent.prototype.parentContext;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * O componente **po-page-header** é responsável pelo título da página e container dos botões de ações dos componentes
 * po-page-list e po-page-base.
 */
var PoPageHeaderBaseComponent = /** @class */ (function () {
    function PoPageHeaderBaseComponent() {
    }
    Object.defineProperty(PoPageHeaderBaseComponent.prototype, "breadcrumb", {
        get: /**
         * @return {?}
         */
        function () {
            return this._breadcrumb;
        },
        /** Objeto com propriedades do breadcrumb. */
        set: /**
         * Objeto com propriedades do breadcrumb.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._breadcrumb = value;
        },
        enumerable: true,
        configurable: true
    });
    PoPageHeaderBaseComponent.propDecorators = {
        breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
        title: [{ type: Input, args: ['p-title',] }]
    };
    return PoPageHeaderBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageHeaderBaseComponent.prototype._breadcrumb;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageHeaderBaseComponent.prototype.title;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 * \@docsExtends PoPageHeaderBaseComponent
 */
var PoPageHeaderComponent = /** @class */ (function (_super) {
    __extends(PoPageHeaderComponent, _super);
    function PoPageHeaderComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoPageHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page-header',
                    template: "<div class=\"po-page-header\">\n  <!-- Breadcrumb -->\n  <div class=\"po-page-header-breadcrumb\" *ngIf=\"breadcrumb && breadcrumb.items.length\">\n    <po-breadcrumb\n      [p-favorite-service]=\"breadcrumb.favorite\"\n      [p-items]=\"breadcrumb.items\"\n      [p-params-service]=\"breadcrumb.params\">\n    </po-breadcrumb>\n  </div> \n\n  <!-- Titulo -->\n  <h1 class=\"po-page-header-title\" *ngIf=\"title\">\n    {{ title }}\n  </h1>\n\n  <!-- Opera\u00E7\u00F5es -->\n  <ng-content></ng-content>\n</div>\n"
                }] }
    ];
    return PoPageHeaderComponent;
}(PoPageHeaderBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poPageListLiteralsDefault = {
    en: (/** @type {?} */ ({
        otherActions: 'Other actions'
    })),
    es: (/** @type {?} */ ({
        otherActions: 'Otras acciones'
    })),
    pt: (/** @type {?} */ ({
        otherActions: 'Outras ações'
    })),
    ru: (/** @type {?} */ ({
        otherActions: 'Другие действия'
    }))
};
/**
 * \@description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 * @abstract
 */
var PoPageListBaseComponent = /** @class */ (function (_super) {
    __extends(PoPageListBaseComponent, _super);
    function PoPageListBaseComponent(languageService) {
        var _this = _super.call(this) || this;
        _this.language = languageService.getShortLanguage();
        return _this;
    }
    Object.defineProperty(PoPageListBaseComponent.prototype, "disclaimerGroup", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disclaimerGroup;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!value) {
                value = (/** @type {?} */ ({}));
            }
            this._disclaimerGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageListBaseComponent.prototype, "literals", {
        get: /**
         * @return {?}
         */
        function () {
            return this._literals || poPageListLiteralsDefault[this.language];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-page-list
         *   [p-literals]="customLiterals">
         * </po-page-list>
         * ```
         *
         * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Objeto com as literais usadas no `po-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-page-list
         *   [p-literals]="customLiterals">
         * </po-page-list>
         * ```
         *
         * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = __assign({}, poPageListLiteralsDefault[poLocaleDefault], poPageListLiteralsDefault[this.language], value);
            }
            else {
                this._literals = poPageListLiteralsDefault[this.language];
            }
        },
        enumerable: true,
        configurable: true
    });
    PoPageListBaseComponent.propDecorators = {
        breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
        disclaimerGroup: [{ type: Input, args: ['p-disclaimer-group',] }],
        filter: [{ type: Input, args: ['p-filter',] }],
        literals: [{ type: Input, args: ['p-literals',] }]
    };
    return PoPageListBaseComponent;
}(PoPageDefaultBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageListBaseComponent.prototype._disclaimerGroup;
    /**
     * @type {?}
     * @private
     */
    PoPageListBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @protected
     */
    PoPageListBaseComponent.prototype.language;
    /**
     * @type {?}
     * @protected
     */
    PoPageListBaseComponent.prototype.resizeListener;
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que implementa as propriedades da interface `PoBreadcrumb`.
     * @type {?}
     */
    PoPageListBaseComponent.prototype.breadcrumb;
    /**
     * \@description
     *
     * Objeto que implementa as propriedades da interface `PoPageFilter`.
     * @type {?}
     */
    PoPageListBaseComponent.prototype.filter;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageListBaseComponent
 *
 * \@example
 *
 * <example name="po-page-list-basic" title="Portinari Page List Basic">
 *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.html"> </file>
 *  <file name="sample-po-page-list-basic/sample-po-page-list-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-list-labs" title="Portinari Page List Labs">
 *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.html"> </file>
 *  <file name="sample-po-page-list-labs/sample-po-page-list-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-list-hiring-processes" title="Portinari Page List - Hiring Processes">
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.html"> </file>
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-page-list-hiring-processes/sample-po-page-list-hiring-processes.service.ts"> </file>
 * </example>
 */
var PoPageListComponent = /** @class */ (function (_super) {
    __extends(PoPageListComponent, _super);
    function PoPageListComponent(viewRef, languageService, renderer, router) {
        var _this = _super.call(this, languageService) || this;
        _this.renderer = renderer;
        _this.router = router;
        _this.limitPrimaryActions = 3;
        _this.isRecalculate = true;
        _this.maxWidthMobile = 480;
        _this.callFunction = callFunction;
        _this.parentRef = viewRef['_view']['component'];
        _this.initializeListeners();
        return _this;
    }
    /**
     * @return {?}
     */
    PoPageListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.advancedSearch = this.initializeFixedLiterals();
    };
    /**
     * @return {?}
     */
    PoPageListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setIsMobile();
        this.setDropdownActions();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PoPageListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.setDropdownActions();
    };
    /**
     * @return {?}
     */
    PoPageListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeListeners();
    };
    /**
     * @param {?} action
     * @return {?}
     */
    PoPageListComponent.prototype.actionIsDisabled = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        return isTypeof(action.disabled, 'function') ? action.disabled(action) : action.disabled;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PoPageListComponent.prototype.callAction = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item.url) {
            this.router.navigate([item.url]);
        }
        else if (item.action) {
            callFunction(item.action, this.parentRef);
        }
    };
    /**
     * @return {?}
     */
    PoPageListComponent.prototype.hasPageHeader = /**
     * @return {?}
     */
    function () {
        return !!(this.title || (this.actions && this.actions.length) || (this.breadcrumb && this.breadcrumb.items.length));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    PoPageListComponent.prototype.onResize = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var width = ((/** @type {?} */ (event.target))).innerWidth;
        if (width < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
            this.setDropdownActions();
        }
        else {
            this.isMobile = false;
            this.limitPrimaryActions = 3;
            this.setDropdownActions();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoPageListComponent.prototype.setIsMobile = /**
     * @private
     * @return {?}
     */
    function () {
        if (window.innerWidth < this.maxWidthMobile) {
            this.isMobile = true;
            this.limitPrimaryActions = 2;
        }
    };
    /**
     * @return {?}
     */
    PoPageListComponent.prototype.setDropdownActions = /**
     * @return {?}
     */
    function () {
        if (this.actions.length > this.limitPrimaryActions) {
            this.dropdownActions = this.actions.slice(this.limitPrimaryActions - 1);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    PoPageListComponent.prototype.callActionFilter = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.callFunction(this.filter[field], this.parentRef);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    PoPageListComponent.prototype.onkeypress = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (key === 13) {
            this.callActionFilter('action');
        }
    };
    /**
     * @param {?} newModel
     * @return {?}
     */
    PoPageListComponent.prototype.changeModel = /**
     * @param {?} newModel
     * @return {?}
     */
    function (newModel) {
        this.parentRef[this.filter.ngModel] = newModel;
    };
    // Recebe evento change do disclaimer e recalcula tela
    // Recebe evento change do disclaimer e recalcula tela
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    PoPageListComponent.prototype.onChangeDisclaimerGroup = 
    // Recebe evento change do disclaimer e recalcula tela
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        if ((disclaimers && disclaimers.length && this.isRecalculate) || (disclaimers.length === 0 && !this.isRecalculate)) {
            this.poPageContent.recalculateHeaderSize();
            this.isRecalculate = !this.isRecalculate;
        }
        if (this.disclaimerGroup && this.disclaimerGroup.change) {
            this.disclaimerGroup.change(disclaimers);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoPageListComponent.prototype.initializeFixedLiterals = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var literal = {
            pt: {
                advancedSearch: 'Busca avançada'
            },
            en: {
                advancedSearch: 'Advanced search'
            },
            es: {
                advancedSearch: 'Búsqueda avanzada'
            }
        };
        return literal[this.language].advancedSearch;
    };
    /**
     * @private
     * @return {?}
     */
    PoPageListComponent.prototype.initializeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.onResize(event);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    PoPageListComponent.prototype.removeListeners = /**
     * @private
     * @return {?}
     */
    function () {
        this.resizeListener();
    };
    PoPageListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page-list',
                    template: "<po-page>\n\n  <!-- HEADER -->\n  <po-page-header\n    *ngIf=\"hasPageHeader()\"\n    [class.po-page-list-header-padding]=\"filter && !actions.length\"\n    [p-breadcrumb]=\"breadcrumb\"\n    [p-title]=\"title\">\n\n    <!-- OPERATIONS -->\n    <div class=\"po-page-list-operations\">\n      <div class=\"po-page-list-actions\"\n        [class.po-page-list-actions-padding]=\"filter\">\n        <po-button *ngIf=\"actions[0]\"\n          p-type=\"primary\"\n          [p-disabled]=\"actionIsDisabled(actions[0])\"\n          [p-icon]=\"actions[0].icon\"\n          [p-label]=\"actions[0].label\"\n          (p-click)=\"callAction(actions[0])\">\n        </po-button>\n\n        <po-button *ngIf=\"actions[1] && (actions.length === 2 || !isMobile)\"\n          [p-disabled]=\"actionIsDisabled(actions[1])\"\n          [p-label]=\"actions[1].label\"\n          (p-click)=\"callAction(actions[1])\">\n        </po-button>\n\n        <po-button *ngIf=\"actions.length == 3 && actions[2] && !isMobile\"\n          [p-disabled]=\"actionIsDisabled(actions[2])\"\n          [p-label]=\"actions[2].label\"\n          (p-click)=\"callAction(actions[2])\">\n        </po-button>\n\n        <po-dropdown *ngIf=\"actions.length > limitPrimaryActions\"\n          [p-actions]=\"dropdownActions\"\n          [p-label]=\"literals.otherActions\">\n        </po-dropdown>\n      </div>\n\n      <!-- FILTER -->\n      <div class=\"po-page-list-filter-wrapper\" *ngIf=\"filter\">\n\n        <div class=\"po-field-container-content po-page-filter-content\">\n          <div class=\"po-field-icon-container-right\">\n            <span class=\"po-icon po-icon-search po-field-icon\"\n              (click)=\"callActionFilter('action')\">\n            </span>\n          </div>\n\n          <input class=\"po-input po-input-icon-right\"\n            name=\"model\"\n            type=\"text\"\n            [ngModel]=\"parentRef[filter.ngModel]\"\n            [placeholder]=\"filter.placeholder || ''\"\n            (keypress)=\"onkeypress($event.keyCode)\"\n            (ngModelChange)=\"changeModel($event)\">\n        </div>\n\n        <div class=\"po-page-list-filter-search\" *ngIf=\"filter.advancedAction\">\n          <span class=\"po-page-list-filter-search-link\"\n            tabindex=\"0\"\n            (click)=\"callActionFilter('advancedAction')\"\n            (keydown.enter)=\"callActionFilter('advancedAction')\">\n              {{advancedSearch}}\n          </span>\n        </div>\n\n      </div>\n    </div>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group *ngIf=\"!!disclaimerGroup\"\n      [class.po-page-list-disclaimer-group]=\"!!disclaimerGroup?.disclaimers?.length\"\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\n      [p-hide-remove-all]=\"disclaimerGroup?.hideRemoveAll\"\n      [p-title]=\"disclaimerGroup?.title\"\n      (p-change)=\"onChangeDisclaimerGroup($event)\">\n    </po-disclaimer-group>\n\n  </po-page-header>\n\n  <!-- CONTENT -->\n  <po-page-content>\n    <ng-content></ng-content>\n  </po-page-content>\n\n</po-page>\n"
                }] }
    ];
    /** @nocollapse */
    PoPageListComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: PoLanguageService },
        { type: Renderer2 },
        { type: Router }
    ]; };
    PoPageListComponent.propDecorators = {
        poPageContent: [{ type: ViewChild, args: [PoPageContentComponent, { static: true },] }]
    };
    return PoPageListComponent;
}(PoPageListBaseComponent));
if (false) {
    /** @type {?} */
    PoPageListComponent.prototype.advancedSearch;
    /** @type {?} */
    PoPageListComponent.prototype.dropdownActions;
    /** @type {?} */
    PoPageListComponent.prototype.isMobile;
    /** @type {?} */
    PoPageListComponent.prototype.limitPrimaryActions;
    /** @type {?} */
    PoPageListComponent.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    PoPageListComponent.prototype.isRecalculate;
    /**
     * @type {?}
     * @private
     */
    PoPageListComponent.prototype.maxWidthMobile;
    /** @type {?} */
    PoPageListComponent.prototype.callFunction;
    /** @type {?} */
    PoPageListComponent.prototype.poPageContent;
    /** @type {?} */
    PoPageListComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    PoPageListComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo dos componentes po-page-default, po-page-edit, po-page-list, po-page-login e po-page-detail.
 */
var PoPageModule = /** @class */ (function () {
    function PoPageModule() {
    }
    PoPageModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        RouterModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoDisclaimerGroupModule,
                        PoDropdownModule,
                        PoFieldModule,
                        PoLanguageModule,
                        PoModalModule
                    ],
                    declarations: [
                        PoPageComponent,
                        PoPageContentComponent,
                        PoPageDefaultComponent,
                        PoPageDetailComponent,
                        PoPageEditComponent,
                        PoPageHeaderComponent,
                        PoPageListComponent
                    ],
                    exports: [
                        PoPageDetailComponent,
                        PoPageDefaultComponent,
                        PoPageEditComponent,
                        PoPageListComponent
                    ]
                },] }
    ];
    return PoPageModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para o conjunto de círculos que faz a passagem de itens do `po-slide`.
 */
var PoSlideCirclesComponent = /** @class */ (function () {
    function PoSlideCirclesComponent() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new EventEmitter();
    }
    PoSlideCirclesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-slide-circles',
                    template: "<div class=\"po-slide-circles\">\n  <ng-container *ngFor=\"let item of items; let index = index;\">\n    <div\n      class=\"po-slide-circle\"\n      [class.po-slide-active-circle]=\"index === currentSlideIndex\"\n      (click)=\"click.emit(index)\">\n    </div>\n  </ng-container>\n</div>\n"
                }] }
    ];
    PoSlideCirclesComponent.propDecorators = {
        currentSlideIndex: [{ type: Input, args: ['p-current-slide-index',] }],
        items: [{ type: Input, args: ['p-items',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoSlideCirclesComponent;
}());
if (false) {
    /**
     * Index do slide atual.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.currentSlideIndex;
    /**
     * Itens do slide.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.items;
    /**
     * Evento emitido ao clicar em um controle.
     * @type {?}
     */
    PoSlideCirclesComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poSlideIntervalDefault = 4000;
/**
 * \@description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 * @abstract
 */
var PoSlideBaseComponent = /** @class */ (function () {
    function PoSlideBaseComponent() {
        this._interval = poSlideIntervalDefault;
    }
    Object.defineProperty(PoSlideBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * @default `336`
         */
        set: /**
         * \@optional
         *
         * \@description
         * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
         *
         * \@default `336`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = convertToInt(value);
            this.setSlideHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideBaseComponent.prototype, "interval", {
        get: /**
         * @return {?}
         */
        function () {
            return this._interval;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * @default `4000`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
         *
         * \@default `4000`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._interval = convertToInt(value, poSlideIntervalDefault);
            this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideBaseComponent.prototype, "slides", {
        get: /**
         * @return {?}
         */
        function () {
            return this._slides;
        },
        /**
         * @description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `PoSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         */
        set: /**
         * \@description
         *
         * Array de imagens ou dados para o slide, pode ser de três formas:
         *
         * - Array implementando objetos da interface `PoSlideItem`:
         * ```
         * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
         * ```
         * - Array de `strings` com os caminhos das imagens:
         * ```
         * ['/assets/image-1', '/assets/image-2' ]
         * ```
         * - Array com lista de itens (para utilizar template):
         * ```
         * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
         * ```
         *
         * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._slides = value;
            this.setSlideItems(value);
            if (value && value.length) {
                this.startSlide();
            }
        },
        enumerable: true,
        configurable: true
    });
    PoSlideBaseComponent.propDecorators = {
        height: [{ type: Input, args: ['p-height',] }],
        interval: [{ type: Input, args: ['p-interval',] }],
        slides: [{ type: Input, args: ['p-slides',] }]
    };
    return PoSlideBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoSlideBaseComponent.prototype._interval;
    /**
     * @type {?}
     * @private
     */
    PoSlideBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoSlideBaseComponent.prototype._slides;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    PoSlideBaseComponent.prototype.setSlideHeight = function (height) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoSlideBaseComponent.prototype.cancelInterval = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoSlideBaseComponent.prototype.setSlideItems = function (value) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoSlideBaseComponent.prototype.startSlide = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoSlideBaseComponent.prototype.startInterval = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoSlideComponent
 *
 * \@description
 *
 * Esta diretiva permite a customização de um slide.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item do slide corrente.
 *  - Índice: `index` determina o índice do slide corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-slide
 *   [p-slides]="[{ id: 1, name: 'Register', email: 'register\@portinari.com' }]">
 *
 *   <ng-template p-slide-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="item.id"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-slide>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-slide
 *    [p-slides]="[{ id: 1, name: 'Register', email: 'register\@portinari.com' }]">
 *
 *    <div *p-slide-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-slide>
 * ...
 *
 * ```
 */
var PoSlideContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoSlideContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoSlideContentTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[p-slide-content-template]'
                },] }
    ];
    /** @nocollapse */
    PoSlideContentTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return PoSlideContentTemplateDirective;
}());
if (false) {
    /** @type {?} */
    PoSlideContentTemplateDirective.prototype.templateRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para cada item do po-slide.
 */
var PoSlideItemComponent = /** @class */ (function () {
    function PoSlideItemComponent() {
        this.isIEOrEdge = isIEOrEdge();
    }
    /**
     * @return {?}
     */
    PoSlideItemComponent.prototype.setLinkType = /**
     * @return {?}
     */
    function () {
        if (!this.template && this.link) {
            return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    };
    PoSlideItemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-slide-item',
                    template: "<div #slideItem\n  class=\"po-slide-item\"\n  [class.po-slide-item-background-image]=\"!template && isIEOrEdge\"\n  [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\"\n  [ngSwitch]=\"setLinkType()\">\n\n  <!-- slide com link interno -->\n  <a\n    *ngSwitchCase=\"'internalLink'\" \n    class=\"po-slide-item-link\" \n    [routerLink]=\"link\">\n    <ng-container \n      [ngTemplateOutlet]=\"slideItemImage\" \n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\">\n    </ng-container>\n  </a>\n  <!-- slide com link externo -->\n  <a \n    *ngSwitchCase=\"'externalLink'\"\n    class=\"po-slide-item-link\" \n    [href]=\"link\">\n    <ng-container \n      [ngTemplateOutlet]=\"slideItemImage\" \n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\">\n    </ng-container>\n  </a>\n  <!-- slide sem link -->\n  <a \n    *ngSwitchCase=\"'noLink'\"\n    [ngClass]=\"action ? 'po-slide-item-link' : 'po-slide-item-no-link'\"\n    (click)=\"action ? action(data) : undefined\">\n    <ng-container \n      [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\"\n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data }}\">\n    </ng-container>\n  </a>\n\n</div>\n\n<ng-template #slideItemTemplate let-item='item'; let-index='index'>\n  <div\n    *ngIf=\"template\"\n    class=\"po-slide-item-content\">\n    <ng-template\n      [ngTemplateOutlet]=\"template.templateRef\"\n      [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\">\n    </ng-template>\n  </div>\n</ng-template>\n\n<ng-template #slideItemImage let-item='item'>\n  <img\n    *ngIf=\"item.image && !isIEOrEdge\"\n    class=\"po-slide-image\"\n    [alt]=\"item.alt\"\n    [src]=\"item.image\"\n    [style.height.px]=\"imageHeight\">\n</ng-template>\n"
                }] }
    ];
    PoSlideItemComponent.propDecorators = {
        itemElement: [{ type: ViewChild, args: ['slideItem', { static: true },] }],
        action: [{ type: Input, args: ['p-action',] }],
        alt: [{ type: Input, args: ['p-alt',] }],
        data: [{ type: Input, args: ['p-data',] }],
        image: [{ type: Input, args: ['p-image',] }],
        imageHeight: [{ type: Input, args: ['p-image-height',] }],
        template: [{ type: Input, args: ['p-template',] }],
        link: [{ type: Input, args: ['p-link',] }]
    };
    return PoSlideItemComponent;
}());
if (false) {
    /** @type {?} */
    PoSlideItemComponent.prototype.itemElement;
    /** @type {?} */
    PoSlideItemComponent.prototype.isIEOrEdge;
    /**
     * Ação executada ao clicar em uma imagem
     * @type {?}
     */
    PoSlideItemComponent.prototype.action;
    /**
     * Texto alternativo quando a imagem não é encontrada
     * @type {?}
     */
    PoSlideItemComponent.prototype.alt;
    /**
     * Dados para o template customizado
     * @type {?}
     */
    PoSlideItemComponent.prototype.data;
    /**
     * Caminho da imagem
     * @type {?}
     */
    PoSlideItemComponent.prototype.image;
    /**
     * Altura da imagem
     * @type {?}
     */
    PoSlideItemComponent.prototype.imageHeight;
    /**
     * Template customizado
     * @type {?}
     */
    PoSlideItemComponent.prototype.template;
    /**
     * Link executado ao clicar em uma imagem
     * @type {?}
     */
    PoSlideItemComponent.prototype.link;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poSlideDefaultHeight = 336;
/** @type {?} */
var poSlideIntervalMin = 1000;
/** @type {?} */
var poSlideMinHeight = 192;
/** @type {?} */
var poSlideTiming = '250ms ease';
/**
 * \@docsExtends PoSlideBaseComponent
 *
 * \@example
 * <example name="po-slide-basic" title="Portinari Slide Basic">
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-labs" title="Portinari Slide Labs">
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-useful-articles" title="Portinari Slide - Useful articles">
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-landscapes" title="Portinari Slide - Landscapes">
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
 * </example>
 */
var PoSlideComponent = /** @class */ (function (_super) {
    __extends(PoSlideComponent, _super);
    function PoSlideComponent(builder) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.isLoaded = false;
        _this.currentSlideIndex = 0;
        _this.slideItems = [];
        return _this;
    }
    Object.defineProperty(PoSlideComponent.prototype, "hasElements", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "isImageSlide", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !this.slideContentTemplate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "offset", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.currentSlideIndex * this.slideItemWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSlideComponent.prototype, "hasSlides", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.slides && !!this.slides.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        if (this.slide) {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        }
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    PoSlideComponent.prototype.goToItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.nextControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.previous = /**
     * @return {?}
     */
    function () {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = ((this.currentSlideIndex - 1) + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    };
    /**
     * @return {?}
     */
    PoSlideComponent.prototype.previousControl = /**
     * @return {?}
     */
    function () {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    };
    /**
     * @param {?} height
     * @return {?}
     */
    PoSlideComponent.prototype.setSlideHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        this.setHeight(height);
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    PoSlideComponent.prototype.animate = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        if (this.hasElements) {
            /** @type {?} */
            var animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    };
    /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    PoSlideComponent.prototype.buildTransitionAnimation = /**
     * @private
     * @param {?} offset
     * @return {?}
     */
    function (offset) {
        return this.builder.build([
            animate(poSlideTiming, keyframes([style({ transform: "translateX(-" + offset + "px)" })]))
        ]);
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    PoSlideComponent.prototype.createArrayForTemplate = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        this.slideItems = __spread(slides);
    };
    /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    PoSlideComponent.prototype.createArrayFromSlides = /**
     * @private
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        var _this = this;
        /** @type {?} */
        var isStringArray = slides.every((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return typeof item === 'string'; }));
        if (isStringArray) {
            slides.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return _this.slideItems.push({ image: "" + element }); }));
        }
        else {
            this.slideItems = __spread((/** @type {?} */ (slides)));
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    PoSlideComponent.prototype.setDefaultHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height <= poSlideMinHeight || !height && this.isImageSlide) {
            this.slide.nativeElement.style.height = poSlideDefaultHeight + "px";
            this.imageHeight = poSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    };
    /**
     * @private
     * @param {?} height
     * @return {?}
     */
    PoSlideComponent.prototype.setHeight = /**
     * @private
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height && height > poSlideMinHeight) {
            this.slide.nativeElement.style.height = height + "px";
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoSlideComponent.prototype.setSlideItemWidth = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    };
    /**
     * @protected
     * @return {?}
     */
    PoSlideComponent.prototype.cancelInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        clearInterval(this.setInterval);
    };
    /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    PoSlideComponent.prototype.setSlideItems = /**
     * @protected
     * @param {?} slides
     * @return {?}
     */
    function (slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    };
    /**
     * @protected
     * @return {?}
     */
    PoSlideComponent.prototype.startSlide = /**
     * @protected
     * @return {?}
     */
    function () {
        this.setSlideHeight(this.height);
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    };
    /**
     * @protected
     * @return {?}
     */
    PoSlideComponent.prototype.startInterval = /**
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval = this.hasSlides && this.hasElements ? setInterval((/**
         * @return {?}
         */
        function () { _this.next(); }), this.interval) : undefined;
    };
    PoSlideComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-slide',
                    template: "<div class=\"po-slide-wrapper\">\n  <div class=\"po-slide-outer\">\n    <div class=\"po-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index;\">\n        <po-slide-item\n          [p-action]=\"item.action\"\n          [p-data]=\"item\"\n          [p-image]=\"item.image\"\n          [p-image-height]=\"imageHeight\"\n          [p-template]=\"slideContentTemplate\"\n          [p-alt]=\"item.alt\"\n          [p-link]=\"item.link\">\n        </po-slide-item>\n      </ng-container>\n    </div>\n\n    <po-slide-control *ngIf=\"hasSlides && slides.length > 1\" \n      p-control=\"previous\"\n      (p-click)=\"previousControl()\">\n    </po-slide-control>\n\n    <po-slide-control *ngIf=\"hasSlides && slides.length > 1\"\n      p-control=\"next\"\n      (p-click)=\"nextControl()\">\n    </po-slide-control>\n\n  </div>\n\n  <po-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [p-current-slide-index]=\"currentSlideIndex\"\n    [p-items]=\"slideItems\"\n    (p-click)=\"goToItem($event)\">\n  </po-slide-circles>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoSlideComponent.ctorParameters = function () { return [
        { type: AnimationBuilder }
    ]; };
    PoSlideComponent.propDecorators = {
        slideContentTemplate: [{ type: ContentChild, args: [PoSlideContentTemplateDirective, { static: true },] }],
        slide: [{ type: ViewChild, args: ['slide', { static: true },] }],
        itemsElements: [{ type: ViewChildren, args: [PoSlideItemComponent,] }],
        onResize: [{ type: HostListener, args: ['window:resize',] }]
    };
    return PoSlideComponent;
}(PoSlideBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.isLoaded;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.player;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.setInterval;
    /** @type {?} */
    PoSlideComponent.prototype.currentSlideIndex;
    /** @type {?} */
    PoSlideComponent.prototype.imageHeight;
    /** @type {?} */
    PoSlideComponent.prototype.slideItems;
    /** @type {?} */
    PoSlideComponent.prototype.slideItemWidth;
    /** @type {?} */
    PoSlideComponent.prototype.slideContentTemplate;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.slide;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.itemsElements;
    /**
     * @type {?}
     * @private
     */
    PoSlideComponent.prototype.builder;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para a seta que controla a passagem de itens do `po-slide`.
 */
var PoSlideControlComponent = /** @class */ (function () {
    function PoSlideControlComponent() {
        /**
         * Evento emitido ao clicar em um controle.
         */
        this.click = new EventEmitter();
    }
    PoSlideControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-slide-control',
                    template: "<div class=\"po-slide-control-{{control}}\">\n  <div class=\"po-slide-arrow-circle\" (click)=\"click.emit();\">\n    <div class=\"po-slide-arrow po-slide-arrow-{{control}}\"></div>\n  </div>\n</div>\n"
                }] }
    ];
    PoSlideControlComponent.propDecorators = {
        control: [{ type: Input, args: ['p-control',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoSlideControlComponent;
}());
if (false) {
    /**
     * Tipo de controle que aceita os valores: 'previous' e 'next'.
     * @type {?}
     */
    PoSlideControlComponent.prototype.control;
    /**
     * Evento emitido ao clicar em um controle.
     * @type {?}
     */
    PoSlideControlComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente `po-slide`.
 *
 * > Para o correto funcionamento do componente `po-slide`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '\@angular/platform-browser/animations';
 * import { PoModule } from '\@portinari/portinari-ui';
 * ...
 *
 * \@NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var PoSlideModule = /** @class */ (function () {
    function PoSlideModule() {
    }
    PoSlideModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        RouterModule,
                        PoContainerModule
                    ],
                    declarations: [
                        PoSlideCirclesComponent,
                        PoSlideComponent,
                        PoSlideControlComponent,
                        PoSlideContentTemplateDirective,
                        PoSlideItemComponent,
                    ],
                    exports: [
                        PoSlideComponent,
                        PoSlideContentTemplateDirective
                    ],
                    providers: [],
                    schemas: []
                },] }
    ];
    return PoSlideModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoStepperStatus = {
    /** Define o estado do *step* como ativo. */
    Active: 'active',
    /** Define o estado do *step* como padrão. */
    Default: 'default',
    /** Define o estado do *step* como desabilitado. */
    Disabled: 'disabled',
    /** Define o estado do *step* como concluído. */
    Done: 'done',
    /** Define o estado do *step* com erro. */
    Error: 'error',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
var PoStepComponent = /** @class */ (function () {
    function PoStepComponent(elementRef) {
        this.elementRef = elementRef;
        this._status = PoStepperStatus.Disabled;
        // ID do step
        this.id = uuid();
    }
    Object.defineProperty(PoStepComponent.prototype, "status", {
        get: /**
         * @return {?}
         */
        function () {
            return this._status;
        },
        // Estado de exibição do `po-step`.
        set: 
        // Estado de exibição do `po-step`.
        /**
         * @param {?} status
         * @return {?}
         */
        function (status) {
            this._status = status;
            this.setDisplayOnActiveOrError();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoStepComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setDisplayOnActiveOrError();
    };
    /**
     * @protected
     * @return {?}
     */
    PoStepComponent.prototype.setDisplayOnActiveOrError = /**
     * @protected
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display =
            (this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error) ? '' : 'none';
    };
    PoStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-step',
                    template: "<ng-content></ng-content>\n"
                }] }
    ];
    /** @nocollapse */
    PoStepComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PoStepComponent.propDecorators = {
        canActiveNextStep: [{ type: Input, args: ['p-can-active-next-step',] }],
        label: [{ type: Input, args: ['p-label',] }],
        status: [{ type: Input, args: ['p-status',] }]
    };
    return PoStepComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoStepComponent.prototype._status;
    /** @type {?} */
    PoStepComponent.prototype.id;
    /**
     * \@optional
     *
     * \@description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <po-step p-label="Step 1" [p-can-active-next-step]="validate.bind(this)">
     * ...
     * </po-step>
     * ```
     * @type {?}
     */
    PoStepComponent.prototype.canActiveNextStep;
    /**
     * Título que será exibido descrevendo o passo (*step*).
     * @type {?}
     */
    PoStepComponent.prototype.label;
    /**
     * @type {?}
     * @private
     */
    PoStepComponent.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poMediumStepSize = 32;
/** @type {?} */
var poLargeStepSize = 48;
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir os círculos dos *steps*.
 */
var PoStepperCircleComponent = /** @class */ (function () {
    function PoStepperCircleComponent() {
    }
    Object.defineProperty(PoStepperCircleComponent.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this.status === PoStepperStatus.Active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperCircleComponent.prototype, "isDefault", {
        get: /**
         * @return {?}
         */
        function () {
            return this.status === PoStepperStatus.Default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperCircleComponent.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.status === PoStepperStatus.Disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperCircleComponent.prototype, "isDone", {
        get: /**
         * @return {?}
         */
        function () {
            return this.status === PoStepperStatus.Done;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperCircleComponent.prototype, "isError", {
        get: /**
         * @return {?}
         */
        function () {
            return this.status === PoStepperStatus.Error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperCircleComponent.prototype, "isLargeStep", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size >= poLargeStepSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperCircleComponent.prototype, "isMediumStep", {
        get: /**
         * @return {?}
         */
        function () {
            return this.size >= poMediumStepSize && !this.isLargeStep;
        },
        enumerable: true,
        configurable: true
    });
    PoStepperCircleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-stepper-circle',
                    template: "<div class=\"po-stepper-circle\"\n  [class.po-stepper-circle-with-icon]=\"icons\"\n  [style.height.px]=\"size\"\n  [style.width.px]=\"size\"\n  [tabindex]=\"isDisabled ? -1 : 0\">\n\n  <span class=\"po-stepper-circle-content\"\n    [class.po-icon]=\"icons\"\n    [class.po-icon-exclamation]=\"icons && isError\"\n    [class.po-icon-info]=\"icons && (isActive || isDefault || isDisabled)\"\n    [class.po-icon-ok]=\"icons && isDone\"\n    [class.po-stepper-circle-content-lg]=\"isLargeStep\"\n    [class.po-stepper-circle-content-md]=\"isMediumStep\">\n\n    {{ !icons ? content: '' }}\n  </span>\n</div>\n"
                }] }
    ];
    PoStepperCircleComponent.propDecorators = {
        content: [{ type: Input, args: ['p-content',] }],
        icons: [{ type: Input, args: ['p-icons',] }],
        size: [{ type: Input, args: ['p-size',] }],
        status: [{ type: Input, args: ['p-status',] }]
    };
    return PoStepperCircleComponent;
}());
if (false) {
    /** @type {?} */
    PoStepperCircleComponent.prototype.content;
    /** @type {?} */
    PoStepperCircleComponent.prototype.icons;
    /** @type {?} */
    PoStepperCircleComponent.prototype.size;
    /** @type {?} */
    PoStepperCircleComponent.prototype.status;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PoStepperOrientation = {
    /** Define a exibição do componente na horizontal. */
    Horizontal: 'horizontal',
    /** Define a exibição do componente na vertical. */
    Vertical: 'vertical',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poStepperOrientationDefault = PoStepperOrientation.Horizontal;
/**
 * \@description
 *
 * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * \@ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * poStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-stepper` por página.
 */
var PoStepperBaseComponent = /** @class */ (function () {
    function PoStepperBaseComponent() {
        this._orientation = poStepperOrientationDefault;
        this._sequential = true;
        this._step = 1;
        this._steps = [];
        /**
         * Ação que será executada quando o usuário mudar o passo do `po-stepper`.
         */
        this.onChangeStep = new EventEmitter();
    }
    Object.defineProperty(PoStepperBaseComponent.prototype, "orientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a orientação de exibição do `po-stepper`.
         *
         * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
         *
         * @default `PoStepperOrientation.Horizontal`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a orientação de exibição do `po-stepper`.
         *
         * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
         *
         * \@default `PoStepperOrientation.Horizontal`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._orientation = ((/** @type {?} */ (Object))).values(PoStepperOrientation).includes(value) ? value : poStepperOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperBaseComponent.prototype, "step", {
        get: /**
         * @return {?}
         */
        function () {
            return this._step;
        },
        /**
         * @optional
         *
         * @description
         *
         * Controla o passo atual do `po-stepper`.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
         *
         * @default `1`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Controla o passo atual do `po-stepper`.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
         *
         * \@default `1`
         * @param {?} step
         * @return {?}
         */
        function (step) {
            if (step >= 1 && step <= this.steps.length) {
                this._step = step;
                this._steps[this._step - 1].status = PoStepperStatus.Active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperBaseComponent.prototype, "steps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._steps;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
         * @param {?} steps
         * @return {?}
         */
        function (steps) {
            this._steps = Array.isArray(steps) ? steps : [];
            this._steps.forEach((/**
             * @param {?} step
             * @return {?}
             */
            function (step) { return step.status = PoStepperStatus.Default; }));
            this.step = 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperBaseComponent.prototype, "sequential", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sequential;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o `po-stepper` será sequencial ou aleatório.
         *
         * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define se o `po-stepper` será sequencial ou aleatório.
         *
         * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
         *
         * \@default `true`
         * @param {?} sequential
         * @return {?}
         */
        function (sequential) {
            this._sequential = convertToBoolean(sequential);
        },
        enumerable: true,
        configurable: true
    });
    PoStepperBaseComponent.propDecorators = {
        orientation: [{ type: Input, args: ['p-orientation',] }],
        step: [{ type: Input, args: ['p-step',] }],
        steps: [{ type: Input, args: ['p-steps',] }],
        stepIcons: [{ type: Input, args: ['p-step-icons',] }],
        stepSize: [{ type: Input, args: ['p-step-size',] }],
        sequential: [{ type: Input, args: ['p-sequential',] }],
        onChangeStep: [{ type: Output, args: ['p-change-step',] }]
    };
    return PoStepperBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoStepperBaseComponent.prototype._orientation;
    /**
     * @type {?}
     * @private
     */
    PoStepperBaseComponent.prototype._sequential;
    /**
     * @type {?}
     * @private
     */
    PoStepperBaseComponent.prototype._step;
    /**
     * @type {?}
     * @private
     */
    PoStepperBaseComponent.prototype._steps;
    /**
     *
     * \@optional
     *
     * \@description
     *
     * <a id="stepIconsProperty"></a>
     *
     * Habilita a exibição de ícone ao invés de número no centro do círculo dos *steps*.
     *
     * \@default `false`
     * @type {?}
     */
    PoStepperBaseComponent.prototype.stepIcons;
    /**
     * \@optional
     *
     * \@description
     *
     * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.
     *
     * O valor informado deve ser entre `24` e `64`.
     *
     * > Valores que não se enquadrarem a esta regra serão ignorados, mantendo-se o valor *default*.
     *
     * \@default `24`
     * @type {?}
     */
    PoStepperBaseComponent.prototype.stepSize;
    /**
     * Ação que será executada quando o usuário mudar o passo do `po-stepper`.
     * @type {?}
     */
    PoStepperBaseComponent.prototype.onChangeStep;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoStepperBaseComponent
 *
 * \@example
 *
 * <example name="po-stepper-basic" title="Portinari Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="Portinari Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="Portinari Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 */
var PoStepperComponent = /** @class */ (function (_super) {
    __extends(PoStepperComponent, _super);
    function PoStepperComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    Object.defineProperty(PoStepperComponent.prototype, "currentStepIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.step - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperComponent.prototype, "stepList", {
        get: /**
         * @return {?}
         */
        function () {
            return this.usePoSteps && this.poSteps || this.steps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperComponent.prototype, "usePoSteps", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.poSteps.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoStepperComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.activeFirstStep();
        this.poSteps.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.controlStepsStatus(0, _this.poSteps.first);
        }));
    };
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param index {number} Índice do `po-step` que se deseja ativar.
     */
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {?} index {number} Índice do `po-step` que se deseja ativar.
     * @return {?}
     */
    PoStepperComponent.prototype.active = /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {?} index {number} Índice do `po-step` que se deseja ativar.
     * @return {?}
     */
    function (index) {
        if (!this.usePoSteps) {
            return;
        }
        /** @type {?} */
        var stepsArray = this.getPoSteps();
        /** @type {?} */
        var step = stepsArray[index];
        /** @type {?} */
        var isDisabledStep = step.status === PoStepperStatus.Disabled;
        /** @type {?} */
        var isErrorStep = step.status === PoStepperStatus.Error;
        if (!isDisabledStep || isErrorStep) {
            this.changeStep(index, step);
        }
    };
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    PoStepperComponent.prototype.first = /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    function () {
        if (!this.usePoSteps) {
            return;
        }
        /** @type {?} */
        var firstStep = this.poSteps.first;
        /** @type {?} */
        var firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    };
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    PoStepperComponent.prototype.next = /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    function () {
        if (!this.usePoSteps) {
            return;
        }
        var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var nextIndex = stepIndex + 1;
        /** @type {?} */
        var nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    };
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    PoStepperComponent.prototype.previous = /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     * @return {?}
     */
    function () {
        if (!this.usePoSteps) {
            return;
        }
        var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var previousIndex = stepIndex - 1;
        /** @type {?} */
        var previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    };
    /**
     * @param {?} stepIndex
     * @param {?=} step
     * @return {?}
     */
    PoStepperComponent.prototype.changeStep = /**
     * @param {?} stepIndex
     * @param {?=} step
     * @return {?}
     */
    function (stepIndex, step) {
        /** @type {?} */
        var isDifferentStep = (!this.currentActiveStep || step.id !== this.currentActiveStep.id);
        if (this.usePoSteps && isDifferentStep && this.allowNextStep(stepIndex)) {
            this.controlStepsStatus(stepIndex, step);
            this.onChangeStep.emit(step);
        }
        else if (!this.usePoSteps && stepIndex !== this.currentStepIndex && this.allowNextStep(stepIndex)) {
            // if para tratamento do modelo antigo do po-stepper
            this.onChangeStep.emit(stepIndex + 1);
        }
    };
    /**
     * @param {?} step
     * @return {?}
     */
    PoStepperComponent.prototype.onStepActive = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        this.currentActiveStep = step;
        this.previousActiveStep = this.poSteps.find((/**
         * @param {?} stepChild
         * @return {?}
         */
        function (stepChild) { return stepChild.status === PoStepperStatus.Active && stepChild.id !== step.id; }));
        this.setPreviousStepAsDone();
    };
    /**
     * @param {?} step
     * @return {?}
     */
    PoStepperComponent.prototype.trackByFn = /**
     * @param {?} step
     * @return {?}
     */
    function (step) {
        return step.id;
    };
    /**
     * @private
     * @return {?}
     */
    PoStepperComponent.prototype.activeFirstStep = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hasStepActive = this.poSteps.some((/**
         * @param {?} poStep
         * @return {?}
         */
        function (poStep) { return poStep.status === PoStepperStatus.Active; }));
        if (this.usePoSteps && !hasStepActive) {
            this.changeStep(0, this.poSteps.first);
        }
    };
    /**
     * @private
     * @param {?} nextStepIndex
     * @return {?}
     */
    PoStepperComponent.prototype.allowNextStep = /**
     * @private
     * @param {?} nextStepIndex
     * @return {?}
     */
    function (nextStepIndex) {
        if (!this.sequential) {
            return true;
        }
        if (this.usePoSteps) {
            return this.isBeforeStep(nextStepIndex) || this.canActiveNextStep(this.currentActiveStep);
        }
        return this.steps.slice(this.step, nextStepIndex).every((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.status === PoStepperStatus.Done; }));
    };
    /**
     * @private
     * @param {?=} currentActiveStep
     * @return {?}
     */
    PoStepperComponent.prototype.canActiveNextStep = /**
     * @private
     * @param {?=} currentActiveStep
     * @return {?}
     */
    function (currentActiveStep) {
        if (currentActiveStep === void 0) { currentActiveStep = (/** @type {?} */ ({})); }
        if (!currentActiveStep.canActiveNextStep) {
            return true;
        }
        /** @type {?} */
        var canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        currentActiveStep.status = this.getStepperStatusByCanActive(canActiveNextStep);
        return canActiveNextStep;
    };
    /**
     * @private
     * @param {?} stepIndex
     * @param {?} step
     * @return {?}
     */
    PoStepperComponent.prototype.controlStepsStatus = /**
     * @private
     * @param {?} stepIndex
     * @param {?} step
     * @return {?}
     */
    function (stepIndex, step) {
        if (this.usePoSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    };
    /**
     * @private
     * @param {?} canActiveNextStep
     * @return {?}
     */
    PoStepperComponent.prototype.getStepperStatusByCanActive = /**
     * @private
     * @param {?} canActiveNextStep
     * @return {?}
     */
    function (canActiveNextStep) {
        return canActiveNextStep ? PoStepperStatus.Done : PoStepperStatus.Error;
    };
    /**
     * @private
     * @param {?=} step
     * @return {?}
     */
    PoStepperComponent.prototype.getStepsAndIndex = /**
     * @private
     * @param {?=} step
     * @return {?}
     */
    function (step) {
        if (step === void 0) { step = (/** @type {?} */ ({})); }
        /** @type {?} */
        var steps = this.getPoSteps();
        /** @type {?} */
        var stepIndex = steps.findIndex((/**
         * @param {?} poStep
         * @return {?}
         */
        function (poStep) { return poStep.id === step.id; }));
        return { steps: steps, stepIndex: stepIndex };
    };
    /**
     * @private
     * @return {?}
     */
    PoStepperComponent.prototype.getPoSteps = /**
     * @private
     * @return {?}
     */
    function () {
        return this.poSteps.toArray();
    };
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    PoStepperComponent.prototype.isBeforeStep = /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    function (stepIndex) {
        var _this = this;
        /** @type {?} */
        var currentActiveStepIndex = (/**
         * @return {?}
         */
        function () { return _this.getPoSteps().findIndex((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.id === _this.currentActiveStep.id; })); });
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    };
    /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    PoStepperComponent.prototype.setFinalSteppersAsDisabled = /**
     * @private
     * @param {?} stepIndex
     * @return {?}
     */
    function (stepIndex) {
        this.getPoSteps()
            .filter((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        function (step, index) { return step && index >= stepIndex + 2; }))
            .forEach((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return step.status = PoStepperStatus.Disabled; }));
    };
    /**
     * @private
     * @param {?} step
     * @return {?}
     */
    PoStepperComponent.prototype.setStepAsActive = /**
     * @private
     * @param {?} step
     * @return {?}
     */
    function (step) {
        step.status = PoStepperStatus.Active;
    };
    /**
     * @private
     * @param {?} currentStep
     * @return {?}
     */
    PoStepperComponent.prototype.setNextStepAsDefault = /**
     * @private
     * @param {?} currentStep
     * @return {?}
     */
    function (currentStep) {
        var _a = this.getStepsAndIndex(currentStep), steps = _a.steps, stepIndex = _a.stepIndex;
        /** @type {?} */
        var nextIndex = stepIndex + 1;
        if (nextIndex < this.poSteps.length) {
            steps[nextIndex].status = PoStepperStatus.Default;
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoStepperComponent.prototype.setPreviousStepAsDone = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveStep) {
            this.previousActiveStep.status = PoStepperStatus.Done;
        }
    };
    PoStepperComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-stepper',
                    template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n\n  <div class=\"po-stepper-container\">\n    <po-stepper-step *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index+1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\">\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoStepperComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoStepperComponent.propDecorators = {
        poSteps: [{ type: ContentChildren, args: [PoStepComponent,] }]
    };
    return PoStepperComponent;
}(PoStepperBaseComponent));
if (false) {
    /** @type {?} */
    PoStepperComponent.prototype.poSteps;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.currentActiveStep;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.previousActiveStep;
    /**
     * @type {?}
     * @private
     */
    PoStepperComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por exibir as legendas dos *steps*.
 */
var PoStepperLabelComponent = /** @class */ (function () {
    function PoStepperLabelComponent() {
    }
    PoStepperLabelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-stepper-label',
                    template: "<div class=\"po-stepper-label\">\n  {{ content }}\n</div>\n"
                }] }
    ];
    PoStepperLabelComponent.propDecorators = {
        content: [{ type: Input, args: ['p-content',] }]
    };
    return PoStepperLabelComponent;
}());
if (false) {
    /** @type {?} */
    PoStepperLabelComponent.prototype.content;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poStepperStepSizeDefault = 24;
/** @type {?} */
var poStepperStepSizeMax = 64;
/** @type {?} */
var poStepLiteralsDefault = {
    en: { label: 'Step' },
    es: { label: 'Paso' },
    pt: { label: 'Passo' }
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente que representa um *step* contendo as ligações das laterais (`po-stepper-step-bar`) e a label.
 */
var PoStepperStepComponent = /** @class */ (function () {
    function PoStepperStepComponent() {
        this._stepIcons = false;
        this._stepSize = poStepperStepSizeDefault;
        this.literals = __assign({}, poStepLiteralsDefault[poLocaleDefault], poStepLiteralsDefault[browserLanguage()]);
        // Evento que será emitido quando o status do *step* estiver ativo (`PoStepperStatus.Active`).
        this.activated = new EventEmitter();
        // Evento que será emitido ao clicar no *step*.
        this.click = new EventEmitter();
        // Evento que será emitido ao focar no *step* e pressionar a tecla *enter*.
        this.enter = new EventEmitter();
    }
    Object.defineProperty(PoStepperStepComponent.prototype, "label", {
        get: /**
         * @return {?}
         */
        function () {
            return this._label;
        },
        // Label do *step*.
        set: 
        // Label do *step*.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._label = isTypeof(value, 'string') ? value : this.literals.label + " " + this.circleContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "status", {
        get: /**
         * @return {?}
         */
        function () {
            return this._status;
        },
        // Define o estado de exibição.
        set: 
        // Define o estado de exibição.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._status = ((/** @type {?} */ (value))) ? value : undefined;
            if (this.status === PoStepperStatus.Active) {
                this.activated.emit();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "stepIcons", {
        get: /**
         * @return {?}
         */
        function () {
            return this._stepIcons;
        },
        set: /**
         * @param {?} stepIcons
         * @return {?}
         */
        function (stepIcons) {
            this._stepIcons = convertToBoolean(stepIcons);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "stepSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._stepSize;
        },
        // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
        // O valor informado deve ser entre `24` e `64`.
        set: 
        // Tamanho do `step` em *pixels*, possibilitando um maior destaque.
        // O valor informado deve ser entre `24` e `64`.
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._stepSize = (value >= poStepperStepSizeDefault && value <= poStepperStepSizeMax) ? value : poStepperStepSizeDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "halfStepSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this.stepSize / 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "isVerticalOrientation", {
        get: /**
         * @return {?}
         */
        function () {
            return this.orientation === PoStepperOrientation.Vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperStepComponent.prototype, "marginHorizontalBar", {
        get: /**
         * @return {?}
         */
        function () {
            return this.isVerticalOrientation ? undefined : this.halfStepSize;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} status
     * @return {?}
     */
    PoStepperStepComponent.prototype.getStatusClass = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        switch (status) {
            case PoStepperStatus.Active:
                return 'po-stepper-step-active';
            case PoStepperStatus.Disabled:
                return 'po-stepper-step-disabled';
            case PoStepperStatus.Done:
                return 'po-stepper-step-done';
            case PoStepperStatus.Error:
                return 'po-stepper-step-error';
            default:
                return 'po-stepper-step-default';
        }
    };
    /**
     * @return {?}
     */
    PoStepperStepComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.status !== PoStepperStatus.Disabled) {
            this.click.emit();
        }
    };
    /**
     * @return {?}
     */
    PoStepperStepComponent.prototype.onEnter = /**
     * @return {?}
     */
    function () {
        if (this.status !== PoStepperStatus.Disabled) {
            this.enter.emit();
        }
    };
    PoStepperStepComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-stepper-step',
                    template: "<div class=\"po-stepper-step\"\n  [ngClass]=\"getStatusClass(status)\"\n  (click)=\"onClick()\"\n  (keydown.enter)=\"onEnter()\">\n\n  <div class=\"po-stepper-step-container\" [style.width.px]=\"isVerticalOrientation ? stepSize : undefined\">\n\n    <div\n      [class.po-stepper-step-bar-top]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-left]=\"!isVerticalOrientation\"\n      [style.margin-right.px]=\"marginHorizontalBar\">\n    </div>\n\n    <po-stepper-circle\n      [p-content]=\"circleContent\"\n      [p-icons]=\"stepIcons\"\n      [p-size]=\"stepSize\"\n      [p-status]=\"status\">\n    </po-stepper-circle>\n\n    <div\n      [class.po-stepper-step-bar-bottom]=\"isVerticalOrientation\"\n      [class.po-stepper-step-bar-right]=\"!isVerticalOrientation\"\n      [style.margin-left.px]=\"marginHorizontalBar\">\n    </div>\n\n  </div>\n\n  <po-stepper-label\n    class=\"po-stepper-step-label-position\"\n    [p-content]=\"label\">\n  </po-stepper-label>\n</div>\n"
                }] }
    ];
    PoStepperStepComponent.propDecorators = {
        circleContent: [{ type: Input, args: ['p-circle-content',] }],
        label: [{ type: Input, args: ['p-label',] }],
        orientation: [{ type: Input, args: ['p-orientation',] }],
        status: [{ type: Input, args: ['p-status',] }],
        stepIcons: [{ type: Input, args: ['p-step-icons',] }],
        stepSize: [{ type: Input, args: ['p-step-size',] }],
        activated: [{ type: Output, args: ['p-activated',] }],
        click: [{ type: Output, args: ['p-click',] }],
        enter: [{ type: Output, args: ['p-enter',] }]
    };
    return PoStepperStepComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoStepperStepComponent.prototype._label;
    /**
     * @type {?}
     * @private
     */
    PoStepperStepComponent.prototype._status;
    /**
     * @type {?}
     * @private
     */
    PoStepperStepComponent.prototype._stepIcons;
    /**
     * @type {?}
     * @private
     */
    PoStepperStepComponent.prototype._stepSize;
    /** @type {?} */
    PoStepperStepComponent.prototype.literals;
    /** @type {?} */
    PoStepperStepComponent.prototype.circleContent;
    /** @type {?} */
    PoStepperStepComponent.prototype.orientation;
    /** @type {?} */
    PoStepperStepComponent.prototype.activated;
    /** @type {?} */
    PoStepperStepComponent.prototype.click;
    /** @type {?} */
    PoStepperStepComponent.prototype.enter;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente po-stepper
 */
var PoStepperModule = /** @class */ (function () {
    function PoStepperModule() {
    }
    PoStepperModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                    ],
                    declarations: [
                        PoStepComponent,
                        PoStepperCircleComponent,
                        PoStepperComponent,
                        PoStepperLabelComponent,
                        PoStepperStepComponent
                    ],
                    exports: [
                        PoStepComponent,
                        PoStepperComponent
                    ]
                },] }
    ];
    return PoStepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente responsável por manipular os botões de aba.
 */
var PoTabButtonComponent = /** @class */ (function () {
    function PoTabButtonComponent(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new EventEmitter();
    }
    Object.defineProperty(PoTabButtonComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        // Ativa o botão
        set: 
        // Ativa o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._active = value;
            this.emitActivated();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTabButtonComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        // Oculta o botão
        set: 
        // Oculta o botão
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hide = convertToBoolean(value);
            this.setDisplayOnHide();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    PoTabButtonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    };
    /**
     * @return {?}
     */
    PoTabButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoTabButtonComponent.prototype.emitActivated = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.active) {
            this.activated.emit(this);
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoTabButtonComponent.prototype.setDisplayOnHide = /**
     * @private
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    };
    PoTabButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-tab-button',
                    template: "<div\n  class=\"po-tab-button-md\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [class.po-tab-button-active]=\"active\"\n  [class.po-tab-button-disabled]=\"disabled\"\n  [class.po-tab-button-sm]=\"small\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\">\n\n  <span class=\"po-tab-button-label po-text-ellipsis\">\n    {{label}}\n  </span>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoTabButtonComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PoTabButtonComponent.propDecorators = {
        active: [{ type: Input, args: ['p-active',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        hide: [{ type: Input, args: ['p-hide',] }],
        id: [{ type: Input, args: ['p-id',] }],
        label: [{ type: Input, args: ['p-label',] }],
        small: [{ type: Input, args: ['p-small',] }],
        activated: [{ type: Output, args: ['p-activated',] }],
        changeState: [{ type: Output, args: ['p-change-state',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoTabButtonComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTabButtonComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    PoTabButtonComponent.prototype._hide;
    /** @type {?} */
    PoTabButtonComponent.prototype.disabled;
    /** @type {?} */
    PoTabButtonComponent.prototype.id;
    /** @type {?} */
    PoTabButtonComponent.prototype.label;
    /** @type {?} */
    PoTabButtonComponent.prototype.small;
    /** @type {?} */
    PoTabButtonComponent.prototype.activated;
    /** @type {?} */
    PoTabButtonComponent.prototype.changeState;
    /** @type {?} */
    PoTabButtonComponent.prototype.click;
    /**
     * @type {?}
     * @private
     */
    PoTabButtonComponent.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-tab` renderiza uma aba na qual envolve um conteúdo HTML.
 *
 * Com este componente é possível atribuir um rótulo para auxiliar na identificação do conteúdo, ativar para que o mesmo seja exibido,
 * desabilitar para impossibilitar o acesso, bem como ocultar para indisponibilizar a aba.
 *
 * > Para controlar a navegação entre diversas abas, utilizar o componente [`po-tabs`](/documentation/po-tabs).
 * @abstract
 */
var PoTabBaseComponent = /** @class */ (function () {
    function PoTabBaseComponent() {
        this._active = false;
        this._disabled = false;
        this._hide = false;
        // ID da aba
        this.id = uuid();
        /**
         * Método disparado ao clicar na aba.
         */
        this.click = new EventEmitter();
    }
    Object.defineProperty(PoTabBaseComponent.prototype, "active", {
        get: /**
         * @return {?}
         */
        function () {
            return this._active;
        },
        /**
         * @optional
         *
         * @description
         *
         * Ativa a aba exibindo seu conteúdo.
         *
         * > Sugere-se utilizar na aba de conteúdo inicial.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Ativa a aba exibindo seu conteúdo.
         *
         * > Sugere-se utilizar na aba de conteúdo inicial.
         *
         * \@default `false`
         * @param {?} active
         * @return {?}
         */
        function (active) {
            this._active = convertToBoolean(active);
            this.setDisplayOnActive();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTabBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a aba.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a aba.
         *
         * \@default `false`
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this._disabled = convertToBoolean(disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTabBaseComponent.prototype, "hide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hide;
        },
        /**
         * @optional
         *
         * @description
         *
         * Oculta a aba.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Oculta a aba.
         *
         * \@default `false`
         * @param {?} hide
         * @return {?}
         */
        function (hide) {
            this._hide = convertToBoolean(hide);
        },
        enumerable: true,
        configurable: true
    });
    PoTabBaseComponent.propDecorators = {
        active: [{ type: Input, args: ['p-active',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        hide: [{ type: Input, args: ['p-hide',] }],
        label: [{ type: Input, args: ['p-label',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoTabBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTabBaseComponent.prototype._active;
    /**
     * @type {?}
     * @private
     */
    PoTabBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoTabBaseComponent.prototype._hide;
    /** @type {?} */
    PoTabBaseComponent.prototype.id;
    /**
     * Rótulo da aba.
     * @type {?}
     */
    PoTabBaseComponent.prototype.label;
    /**
     * Método disparado ao clicar na aba.
     * @type {?}
     */
    PoTabBaseComponent.prototype.click;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    PoTabBaseComponent.prototype.setDisplayOnActive = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoTabBaseComponent
 */
var PoTabComponent = /** @class */ (function (_super) {
    __extends(PoTabComponent, _super);
    function PoTabComponent(elementRef) {
        var _this = _super.call(this) || this;
        _this.elementRef = elementRef;
        return _this;
    }
    /**
     * @return {?}
     */
    PoTabComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.setDisplayOnActive();
    };
    /**
     * @protected
     * @return {?}
     */
    PoTabComponent.prototype.setDisplayOnActive = /**
     * @protected
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.style.display = this.active ? '' : 'none';
    };
    PoTabComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-tab',
                    template: "<ng-content></ng-content>\n"
                }] }
    ];
    /** @nocollapse */
    PoTabComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return PoTabComponent;
}(PoTabBaseComponent));
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTabComponent.prototype.elementRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente para agrupamento de componentes `po-tab-button` que os rendereiza em uma um caixa de diálogo
 * no formato de lista.
 */
var PoTabDropdownComponent = /** @class */ (function () {
    function PoTabDropdownComponent() {
        // Lista de abas
        this.tabs = [];
        // Evento que será emitido ao ativar uma aba
        this.activated = new EventEmitter();
        // Evento que será emitido a aba for desabilitada ou ocultada
        this.changeState = new EventEmitter();
        // Evento de click
        this.click = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PoTabDropdownComponent.prototype.getContainerClass = /**
     * @return {?}
     */
    function () {
        return this.small ? 'po-tab-dropdown-container-sm' : 'po-tab-dropdown-container';
    };
    /**
     * @return {?}
     */
    PoTabDropdownComponent.prototype.togglePopover = /**
     * @return {?}
     */
    function () {
        this.popover.isHidden ? this.popover.open() : this.popover.close();
    };
    PoTabDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-tab-dropdown',
                    template: "<div #tabDrop\n  class=\"po-tab-dropdown-content po-tab-button-md\"\n  [attr.tabindex]=\"0\"\n  [class.po-tab-button-sm]=\"small\"\n  (keyup.enter)=\"togglePopover()\">\n  <div class=\"po-tab-button-label\">\n    {{ label }}\n    <span class=\"po-icon\" [ngClass]=\"(popover.isHidden ? 'po-icon-arrow-down' : 'po-icon-arrow-up')\">\n    </span>\n  </div>\n</div>\n\n<po-popover #popover\n  p-hide-arrow\n  p-position=\"bottom\"\n  [p-target]=\"tabDropdown\">\n\n  <div [ngClass]=\"getContainerClass()\">\n    <po-tab-button *ngFor=\"let tab of tabs\"\n      class=\"po-tab-dropdown-button\"\n      [class.po-tab-dropdown-button-active]=\"tab.active\"\n      [p-active]=\"tab.active\"\n      [p-disabled]=\"tab.disabled\"\n      [p-hide]=\"tab.hide\"\n      [p-id]=\"tab.id\"\n      [p-label]=\"tab.label\"\n      [p-small]=\"small\"\n      (p-activated)=\"activated.emit(tab)\"\n      (p-change-state)=\"changeState.emit(tab)\"\n      (p-click)=\"popover.close();click.emit(tab);\">\n    </po-tab-button>\n  </div>\n\n</po-popover>\n"
                }] }
    ];
    PoTabDropdownComponent.propDecorators = {
        popover: [{ type: ViewChild, args: ['popover', { static: true },] }],
        tabDropdown: [{ type: ViewChild, args: ['tabDrop', { read: ElementRef, static: true },] }],
        label: [{ type: Input, args: ['p-label',] }],
        small: [{ type: Input, args: ['p-small',] }],
        tabs: [{ type: Input, args: ['p-tabs',] }],
        activated: [{ type: Output, args: ['p-activated',] }],
        changeState: [{ type: Output, args: ['p-change-state',] }],
        click: [{ type: Output, args: ['p-click',] }]
    };
    return PoTabDropdownComponent;
}());
if (false) {
    /** @type {?} */
    PoTabDropdownComponent.prototype.popover;
    /** @type {?} */
    PoTabDropdownComponent.prototype.tabDropdown;
    /** @type {?} */
    PoTabDropdownComponent.prototype.label;
    /** @type {?} */
    PoTabDropdownComponent.prototype.small;
    /** @type {?} */
    PoTabDropdownComponent.prototype.tabs;
    /** @type {?} */
    PoTabDropdownComponent.prototype.activated;
    /** @type {?} */
    PoTabDropdownComponent.prototype.changeState;
    /** @type {?} */
    PoTabDropdownComponent.prototype.click;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-tabs` é responsável por agrupar [abas](/documentation/po-tab) dispostas numa linha horizontal,
 * ideal para facilitar a organização de conteúdos.
 *
 * Em dispositivos móveis o componente exibirá tadas as abas de maneira linear gerando um *scroll* na horizontal. Já em telas telas com
 * resoluções maiores, o componente exibirá até cinco abas normalmente, porém, à partir de seis abas o componente automaticamente torna
 * visível apenas as quatro primeiras, agrupando as subsequentes na quinta aba rotulada de **Mais**.
 *
 * > As abas que estiverem agrupadas serão dispostas numa cascata suspensa que será exibida ao clicar no botão **Mais**.
 *
 * É possível realizar a navegação entre as abas através da tecla TAB do teclado.
 * Caso uma aba estiver desabilitada, não receberá foco de navegação.
 *
 * #### Boas práticas
 *
 * - Evite utilizar uma quantidade excessiva de abas, pois irá gerar um *scroll* muito longo no `dropdown`;
 * - Evite `labels` extensos para as `tabs` pois podem quebrar seu *layout*, use `labels` diretos, curtos e intuitivos.
 */
var PoTabsBaseComponent = /** @class */ (function () {
    function PoTabsBaseComponent() {
        this._small = false;
    }
    Object.defineProperty(PoTabsBaseComponent.prototype, "small", {
        get: /**
         * @return {?}
         */
        function () {
            return this._small;
        },
        /**
         * @optinal
         *
         * @description
         *
         * Diminui o tamanho das abas.
         *
         * @default `false`
         */
        set: /**
         * \@optinal
         *
         * \@description
         *
         * Diminui o tamanho das abas.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._small = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoTabsBaseComponent.propDecorators = {
        small: [{ type: Input, args: ['p-small',] }]
    };
    return PoTabsBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoTabsBaseComponent.prototype._small;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poTabsMaxNumberOfTabs = 5;
/**
 * \@docsExtends PoTabsBaseComponent
 *
 * \@example
 *
 * <example name="po-tabs-basic" title="Portinari Tabs Basic">
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.html"> </file>
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-labs" title="Portinari Tabs Labs">
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.html"> </file>
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-travel" title="Portinari Tabs - Travel">
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.html"> </file>
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-business-conf" title="Portinari Tabs - Business Conference">
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.html"> </file>
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.ts"> </file>
 * </example>
 */
var PoTabsComponent = /** @class */ (function (_super) {
    __extends(PoTabsComponent, _super);
    function PoTabsComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        _this.maxNumberOfTabs = poTabsMaxNumberOfTabs;
        return _this;
    }
    Object.defineProperty(PoTabsComponent.prototype, "isMobileDevice", {
        get: /**
         * @return {?}
         */
        function () {
            return isMobile();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTabsComponent.prototype, "isShowTabDropdown", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.isMobileDevice && this.visibleTabs.length > this.maxNumberOfTabs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTabsComponent.prototype, "overflowedTabs", {
        // tabs que serão apresentadas na aba "Mais"
        get: 
        // tabs que serão apresentadas na aba "Mais"
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.visibleTabs.filter((/**
             * @param {?} _tab
             * @param {?} index
             * @return {?}
             */
            function (_tab, index) { return index > (_this.maxNumberOfTabs - 2); }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTabsComponent.prototype, "visibleTabs", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tabs.filter((/**
             * @param {?} tab
             * @return {?}
             */
            function (tab) { return !tab.hide; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoTabsComponent.prototype.closePopover = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
        if (containsPopoverVisible) {
            this.tabDropdown.popover.close();
        }
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    PoTabsComponent.prototype.isVisibleTab = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        if (this.isMobileDevice) {
            return true;
        }
        /** @type {?} */
        var visibleTabIndex = this.visibleTabs.findIndex((/**
         * @param {?} visibleTab
         * @return {?}
         */
        function (visibleTab) { return visibleTab.id === tab.id; }));
        return (this.visibleTabs.length <= this.maxNumberOfTabs) || (visibleTabIndex < (this.maxNumberOfTabs - 1));
    };
    // Função disparada quando alguma tab ficar ativa
    // Função disparada quando alguma tab ficar ativa
    /**
     * @param {?} tab
     * @return {?}
     */
    PoTabsComponent.prototype.onTabActive = 
    // Função disparada quando alguma tab ficar ativa
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        this.previousActiveTab = this.tabs.find((/**
         * @param {?} tabChild
         * @return {?}
         */
        function (tabChild) { return tabChild.active && tabChild.id !== tab.id; }));
        this.deactivateTab();
    };
    // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
    // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
    /**
     * @param {?} tab
     * @return {?}
     */
    PoTabsComponent.prototype.onTabChangeState = 
    // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    };
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    /**
     * @param {?} tab
     * @return {?}
     */
    PoTabsComponent.prototype.selectedTab = 
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        this.changeDetector.detectChanges();
    };
    /**
     * @param {?} _i
     * @param {?} tab
     * @return {?}
     */
    PoTabsComponent.prototype.trackByFn = /**
     * @param {?} _i
     * @param {?} tab
     * @return {?}
     */
    function (_i, tab) {
        return tab.id;
    };
    // ativa a previousActiveTab ou primeira tab encontrada.
    // ativa a previousActiveTab ou primeira tab encontrada.
    /**
     * @private
     * @return {?}
     */
    PoTabsComponent.prototype.activeDistinctTab = 
    // ativa a previousActiveTab ou primeira tab encontrada.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    };
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    /**
     * @private
     * @return {?}
     */
    PoTabsComponent.prototype.activeFirstTab = 
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    /**
     * @private
     * @return {?}
     */
    function () {
        this.tabs.some((/**
         * @param {?} tabChild
         * @return {?}
         */
        function (tabChild) {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        }));
    };
    // desativa previousActiveTab e dispara a detecção de mudança.
    // desativa previousActiveTab e dispara a detecção de mudança.
    /**
     * @private
     * @return {?}
     */
    PoTabsComponent.prototype.deactivateTab = 
    // desativa previousActiveTab e dispara a detecção de mudança.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    };
    PoTabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-tabs',
                    template: "<div class=\"po-tabs-container\"\n  [class.po-tabs-container-mobile]=\"isMobileDevice\">\n  <div class=\"po-tabs-header\">\n\n    <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\n      <po-tab-button *ngIf=\"isVisibleTab(tab)\"\n        class=\"po-tab-button\"\n        [class.po-tab-button-mobile]=\"isMobileDevice\"\n        [p-active]=\"tab.active\"\n        [p-disabled]=\"tab.disabled\"\n        [p-hide]=\"tab.hide\"\n        [p-id]=\"tab.id\"\n        [p-label]=\"tab.label\"\n        [p-small]=\"small\"\n        (keyup.enter)=\"closePopover()\"\n        (p-activated)=\"onTabActive(tab)\"\n        (p-change-state)=\"onTabChangeState(tab)\"\n        (p-click)=\"selectedTab(tab)\">\n      </po-tab-button>\n    </ng-container>\n\n    <po-tab-dropdown #tabDropdown\n      *ngIf=\"isShowTabDropdown\"\n      class=\"po-tab-button po-tab-dropdown\"\n      p-label=\"Mais\"\n      [p-small]=\"small\"\n      [p-tabs]=\"overflowedTabs\"\n      (p-activated)=\"onTabActive($event)\"\n      (p-change-state)=\"onTabChangeState($event)\"\n      (p-click)=\"selectedTab($event)\">\n    </po-tab-dropdown>\n  </div>\n</div>\n\n<div class=\"po-tabs-content\">\n  <ng-content></ng-content>\n</div>\n\n"
                }] }
    ];
    /** @nocollapse */
    PoTabsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoTabsComponent.propDecorators = {
        tabs: [{ type: ContentChildren, args: [PoTabComponent,] }],
        tabDropdown: [{ type: ViewChild, args: ['tabDropdown', { static: true },] }]
    };
    return PoTabsComponent;
}(PoTabsBaseComponent));
if (false) {
    /** @type {?} */
    PoTabsComponent.prototype.maxNumberOfTabs;
    /**
     * @type {?}
     * @private
     */
    PoTabsComponent.prototype.previousActiveTab;
    /** @type {?} */
    PoTabsComponent.prototype.tabs;
    /** @type {?} */
    PoTabsComponent.prototype.tabDropdown;
    /**
     * @type {?}
     * @private
     */
    PoTabsComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Módulo do componente po-tabs
 */
var PoTabsModule = /** @class */ (function () {
    function PoTabsModule() {
    }
    PoTabsModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoPopoverModule
                    ],
                    declarations: [
                        PoTabButtonComponent,
                        PoTabComponent,
                        PoTabDropdownComponent,
                        PoTabsComponent
                    ],
                    entryComponents: [
                        PoTabButtonComponent,
                        PoTabDropdownComponent
                    ],
                    exports: [
                        PoTabComponent,
                        PoTabsComponent
                    ]
                },] }
    ];
    return PoTabsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var poToolbarActionsIconDefault = 'po-icon-more';
/**
 * \@docsPrivate
 *
 * \@usedBy PoToolbarComponent
 *
 * \@description
 *
 * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
 */
var PoToolbarActionsComponent = /** @class */ (function () {
    function PoToolbarActionsComponent() {
        this._actionsIcon = poToolbarActionsIconDefault;
    }
    Object.defineProperty(PoToolbarActionsComponent.prototype, "actionsIcon", {
        get: /**
         * @return {?}
         */
        function () {
            return this._actionsIcon;
        },
        /** Define o ícone das ações. */
        set: /**
         * Define o ícone das ações.
         * @param {?} icon
         * @return {?}
         */
        function (icon) {
            this._actionsIcon = isTypeof(icon, 'string') ? icon : poToolbarActionsIconDefault;
        },
        enumerable: true,
        configurable: true
    });
    PoToolbarActionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-toolbar-actions',
                    template: "<div class=\"po-toolbar-actions po-clickable\" (click)=\"popup.toggle()\">\n  <span #toolbarActions class=\"po-icon {{ actionsIcon }} po-toolbar-icon\"></span>\n</div>\n\n<po-popup #popup\n  [p-actions]=\"actions\"\n  [p-target]=\"toolbarActions\">\n</po-popup>\n",
                    providers: [PoControlPositionService]
                }] }
    ];
    PoToolbarActionsComponent.propDecorators = {
        actions: [{ type: Input, args: ['p-actions',] }],
        actionsIcon: [{ type: Input, args: ['p-actions-icon',] }]
    };
    return PoToolbarActionsComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoToolbarActionsComponent.prototype._actionsIcon;
    /**
     * Define uma lista de ações.
     * @type {?}
     */
    PoToolbarActionsComponent.prototype.actions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-toolbar` é um cabeçalho para o título da aplicação e informações de usuário e notificações quando houver necessidade.
 */
var PoToolbarBaseComponent = /** @class */ (function () {
    function PoToolbarBaseComponent() {
        /**
         * Se falso, oculta o ícone de notificações.
         */
        this.showNotification = true;
    }
    Object.defineProperty(PoToolbarBaseComponent.prototype, "notificationNumber", {
        get: /**
         * @return {?}
         */
        function () {
            return this._notificationNumber;
        },
        /**
         * @optional
         *
         * @description
         *
         * Número de notificações.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Número de notificações.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._notificationNumber = convertToInt(value, 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoToolbarBaseComponent.prototype, "isShowProfile", {
        get: /**
         * @return {?}
         */
        function () {
            return !!(this.profile || this.profileActions);
        },
        enumerable: true,
        configurable: true
    });
    PoToolbarBaseComponent.propDecorators = {
        actions: [{ type: Input, args: ['p-actions',] }],
        actionsIcon: [{ type: Input, args: ['p-actions-icon',] }],
        profile: [{ type: Input, args: ['p-profile',] }],
        profileActions: [{ type: Input, args: ['p-profile-actions',] }],
        showNotification: [{ type: Input, args: ['p-show-notification',] }],
        title: [{ type: Input, args: ['p-title',] }],
        notificationActions: [{ type: Input, args: ['p-notification-actions',] }],
        notificationNumber: [{ type: Input, args: ['p-notification-number',] }]
    };
    return PoToolbarBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoToolbarBaseComponent.prototype._notificationNumber;
    /**
     * \@optional
     *
     * \@description
     *
     * Define uma lista de ações que serão exibidas ao clicar no ícone declarado em `p-actions-icon`.
     * @type {?}
     */
    PoToolbarBaseComponent.prototype.actions;
    /**
     * \@optional
     *
     * \@description
     *
     * Define um [ícone](/guides/icons) para a propriedade `p-actions`.
     *
     * > Caso não haja ações definidas em `p-actions`, o ícone não será exibido.
     *
     * \@default `po-icon-more`
     * @type {?}
     */
    PoToolbarBaseComponent.prototype.actionsIcon;
    /**
     * Define o objeto que será o cabeçalho da lista de ações com as informações do perfil.
     * @type {?}
     */
    PoToolbarBaseComponent.prototype.profile;
    /**
     * Define uma lista de ações que serão exibidas ao clicar no ícone do perfil.
     * @type {?}
     */
    PoToolbarBaseComponent.prototype.profileActions;
    /**
     * Se falso, oculta o ícone de notificações.
     * @type {?}
     */
    PoToolbarBaseComponent.prototype.showNotification;
    /**
     * Título do *toolbar* e aplicação.
     * @type {?}
     */
    PoToolbarBaseComponent.prototype.title;
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de ações da notificação.
     * @type {?}
     */
    PoToolbarBaseComponent.prototype.notificationActions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoToolbarBaseComponent
 *
 * \@example
 *
 * <example name="po-toolbar-basic" title="Portinari Toolbar Basic">
 *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.html"> </file>
 *  <file name="sample-po-toolbar-basic/sample-po-toolbar-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-toolbar-labs" title="Portinari Toolbar Labs">
 *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.html"> </file>
 *  <file name="sample-po-toolbar-labs/sample-po-toolbar-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-toolbar-logged" title="Portinari Toolbar - Logged">
 *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.html"> </file>
 *  <file name="sample-po-toolbar-logged/sample-po-toolbar-logged.component.ts"> </file>
 * </example>
 */
var PoToolbarComponent = /** @class */ (function (_super) {
    __extends(PoToolbarComponent, _super);
    function PoToolbarComponent(titleService, viewRef) {
        var _this = _super.call(this) || this;
        _this.titleService = titleService;
        _this.parentRef = viewRef['_view']['component'];
        return _this;
    }
    /**
     * @return {?}
     */
    PoToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setTitle(this.title);
    };
    /**
     * @private
     * @param {?} newTitle
     * @return {?}
     */
    PoToolbarComponent.prototype.setTitle = /**
     * @private
     * @param {?} newTitle
     * @return {?}
     */
    function (newTitle) {
        this.titleService.setTitle(newTitle);
    };
    PoToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-toolbar',
                    template: "<div class=\"po-toolbar\">\n  <div class=\"po-toolbar-title\"> {{title}} </div>\n\n  <div class=\"po-toolbar-group-icon\">\n    <po-toolbar-actions *ngIf=\"actions && actions.length\"\n      [p-actions]=\"actions\"\n      [p-actions-icon]=\"actionsIcon\">\n    </po-toolbar-actions>\n\n    <po-toolbar-notification *ngIf=\"showNotification && notificationActions\"\n      [p-notification-actions]=\"notificationActions\"\n      [p-notification-number]=\"notificationNumber\">\n    </po-toolbar-notification>\n\n    <po-toolbar-profile *ngIf=\"isShowProfile\"\n      [p-profile]=\"profile\"\n      [p-profile-actions]=\"profileActions\">\n    </po-toolbar-profile>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoToolbarComponent.ctorParameters = function () { return [
        { type: Title },
        { type: ViewContainerRef }
    ]; };
    return PoToolbarComponent;
}(PoToolbarBaseComponent));
if (false) {
    /** @type {?} */
    PoToolbarComponent.prototype.parentRef;
    /**
     * @type {?}
     * @private
     */
    PoToolbarComponent.prototype.titleService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@usedBy PoToolbarComponent
 *
 * \@description
 *
 * O componente `po-toolbar-notification` tem como objetivo notificar o usuário de novas ações da aplicação que necessitam de atenção,
 * como por exemplo um alerta de nova mensagem.
 *
 * O mesmo também permite que a cada nova notificação seja incrementado e exibido, ou não, este número em uma *tag* ao lado do
 * ícone de notificações.
 */
var PoToolbarNotificationComponent = /** @class */ (function () {
    function PoToolbarNotificationComponent() {
        this._notificationNumber = 0;
    }
    Object.defineProperty(PoToolbarNotificationComponent.prototype, "notificationNumber", {
        get: /**
         * @return {?}
         */
        function () {
            return this._notificationNumber;
        },
        /** Define o número de notificações. */
        set: /**
         * Define o número de notificações.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._notificationNumber = Number.isInteger(value) ? value : 0;
        },
        enumerable: true,
        configurable: true
    });
    PoToolbarNotificationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-toolbar-notification',
                    template: "<div class=\"po-toolbar-notification po-clickable\" (click)=\"popup.toggle()\">\n  <span #notification class=\"po-icon po-icon-notification po-toolbar-icon\"></span>\n  <div *ngIf=\"notificationNumber\" class=\"po-toolbar-notification-badge\">\n    {{ notificationNumber }}\n  </div>\n</div>\n\n<po-popup #popup\n  [p-actions]=\"notificationActions\"\n  [p-target]=\"notification\">\n</po-popup>\n",
                    providers: [PoControlPositionService]
                }] }
    ];
    PoToolbarNotificationComponent.propDecorators = {
        notificationActions: [{ type: Input, args: ['p-notification-actions',] }],
        notificationNumber: [{ type: Input, args: ['p-notification-number',] }]
    };
    return PoToolbarNotificationComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoToolbarNotificationComponent.prototype._notificationNumber;
    /**
     * Define uma lista de ações.
     * @type {?}
     */
    PoToolbarNotificationComponent.prototype.notificationActions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoToolbarProfileComponent
 *
 * \@description
 *
 * Componente `po-toolbar-profile`.
 */
var PoToolbarProfileComponent = /** @class */ (function () {
    function PoToolbarProfileComponent() {
    }
    Object.defineProperty(PoToolbarProfileComponent.prototype, "profileAvatar", {
        get: /**
         * @return {?}
         */
        function () {
            return this.profile ? this.profile.avatar : undefined;
        },
        enumerable: true,
        configurable: true
    });
    PoToolbarProfileComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-toolbar-profile',
                    template: "<div #profileElement class=\"po-toolbar-profile po-clickable\" (click)=\"popup.toggle()\">\n  <po-avatar p-size=\"xs\" [p-src]=\"profileAvatar\"></po-avatar>\n</div>\n\n<po-popup #popup\n  [p-actions]=\"profileActions\"\n  [p-target]=\"profileElement\">\n\n  <div p-popup-header-template\n    *ngIf=\"profile?.title\"\n    class=\"po-toolbar-profile-item-header\">\n\n    <po-avatar\n      class=\"po-toolbar-profile-item-avatar\"\n      p-size=\"sm\"\n      [p-src]=\"profileAvatar\">\n    </po-avatar>\n\n    <div>\n      <div class=\"po-toolbar-profile-item-header-title\">\n        {{ profile.title }}\n      </div>\n\n      <div *ngIf=\"profile.subtitle\" class=\"po-toolbar-profile-item-header-subtitle\">\n        {{ profile.subtitle }}\n      </div>\n    </div>\n  </div>\n\n</po-popup>\n",
                    providers: [PoControlPositionService]
                }] }
    ];
    PoToolbarProfileComponent.propDecorators = {
        profile: [{ type: Input, args: ['p-profile',] }],
        profileActions: [{ type: Input, args: ['p-profile-actions',] }]
    };
    return PoToolbarProfileComponent;
}());
if (false) {
    /**
     * Objeto que implementa a interface `PoToolbarProfile`.
     * @type {?}
     */
    PoToolbarProfileComponent.prototype.profile;
    /**
     * Define uma lista de ações.
     * @type {?}
     */
    PoToolbarProfileComponent.prototype.profileActions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-toolbar
 *
 */
var PoToolbarModule = /** @class */ (function () {
    function PoToolbarModule() {
    }
    PoToolbarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoAvatarModule,
                        PoPopupModule
                    ],
                    declarations: [
                        PoToolbarActionsComponent,
                        PoToolbarComponent,
                        PoToolbarNotificationComponent,
                        PoToolbarProfileComponent
                    ],
                    exports: [
                        PoToolbarComponent
                    ],
                    providers: [],
                    schemas: []
                },] }
    ];
    return PoToolbarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * O componente `po-widget` é recomendado para exibição de *dashboards*, podendo ser utilizado
 * para incluir vários tipos de conteúdo como: gráficos, tabelas, grids e imagens.
 *
 * Além da exibição de conteúdos, este componente possibilita adicionar ações e um link
 * para ajuda, como também possibilita ser utilizado com ou sem sombra.
 *
 * Para controlar sua largura, é possível utilizar o [Grid System](/guides/grid-system) para um maior
 * controle de seu redimensionamento, assim possibilitando o tratamento para diferentes resoluções.
 * @abstract
 */
var PoWidgetBaseComponent = /** @class */ (function () {
    function PoWidgetBaseComponent() {
        this._disabled = false;
        this._noShadow = false;
        this._primary = false;
        this.containerHeight = 'auto';
        /**
         * Ação que será executada quando o usuário clicar sobre a área total do `po-widget`.
         */
        this.click = new EventEmitter();
        /**
         * Função que será disparada com o valor do `p-disabled` quando esta propriedade for alterada.
         */
        this.onDisabled = new EventEmitter();
        /**
         * Função que será chamada na primeira ação.
         */
        this.primaryAction = new EventEmitter();
        /**
         * Função que será chamada na segunda ação.
         */
        this.secondaryAction = new EventEmitter();
        /**
         * Função chamada ao clicar no ícone de configuração
         */
        this.setting = new EventEmitter();
        /**
         * Função que será chamada ao clicar no título.
         */
        this.titleAction = new EventEmitter();
    }
    Object.defineProperty(PoWidgetBaseComponent.prototype, "background", {
        get: /**
         * @return {?}
         */
        function () {
            return this._background;
        },
        /**
         * @optional
         *
         * @description
         *
         * Aplicação de imagem de fundo.
         * > Se a imagem escolhida intervir na legibilidade do texto contido no `p-widget`,
         * pode-se utilizar a propriedade `p-primary` em conjunto para que os textos fiquem na cor branca.
         *
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Aplicação de imagem de fundo.
         * > Se a imagem escolhida intervir na legibilidade do texto contido no `p-widget`,
         * pode-se utilizar a propriedade `p-primary` em conjunto para que os textos fiquem na cor branca.
         *
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._background = (value && typeof value === 'string') ? value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoWidgetBaseComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita todas as ações do componente.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita todas as ações do componente.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = convertToBoolean(value);
            this.onDisabled.emit(this.disabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoWidgetBaseComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `po-widget`.
         * A altura mínima para o `po-widget` depende do que será exibido através das propriedades `p-primary-label`,
         * `p-setting`, `p-help` e `p-title`.
         * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Define a altura do `po-widget`.
         * A altura mínima para o `po-widget` depende do que será exibido através das propriedades `p-primary-label`,
         * `p-setting`, `p-help` e `p-title`.
         * > Caso não seja informado valor, a propriedade irá assumir o tamanho do conteúdo.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = parseInt((/** @type {?} */ (value)), 10);
            this.setHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoWidgetBaseComponent.prototype, "help", {
        get: /**
         * @return {?}
         */
        function () {
            return this._help;
        },
        /**
         * @optional
         *
         * @description
         *
         * Link de ajuda
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Link de ajuda
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._help = isTypeof(value, 'string') ? value : '';
            this.setHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoWidgetBaseComponent.prototype, "noShadow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._noShadow;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita a sombra do `po-widget`.
         *
         * @default `true`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Desabilita a sombra do `po-widget`.
         *
         * \@default `true`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._noShadow = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
            this.setHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoWidgetBaseComponent.prototype, "primary", {
        get: /**
         * @return {?}
         */
        function () {
            return this._primary;
        },
        /**
         * @optional
         *
         * @description
         *
         * Opção para que o `po-widget` fique em destaque.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Opção para que o `po-widget` fique em destaque.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._primary = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoWidgetBaseComponent.prototype, "primaryLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this._primaryLabel;
        },
        /**
         * @optional
         *
         * @description
         *
         * Descrição da primeira ação.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Descrição da primeira ação.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._primaryLabel = isTypeof(value, 'string') ? value : '';
            this.setHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoWidgetBaseComponent.prototype, "title", {
        get: /**
         * @return {?}
         */
        function () {
            return this._title;
        },
        /**
         * @optional
         *
         * @description
         *
         * Título do `po-widget`.
         *
         * @default `false`
         */
        set: /**
         * \@optional
         *
         * \@description
         *
         * Título do `po-widget`.
         *
         * \@default `false`
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._title = isTypeof(value, 'string') ? value : '';
            this.setHeight(this.height);
        },
        enumerable: true,
        configurable: true
    });
    PoWidgetBaseComponent.propDecorators = {
        background: [{ type: Input, args: ['p-background',] }],
        disabled: [{ type: Input, args: ['p-disabled',] }],
        height: [{ type: Input, args: ['p-height',] }],
        help: [{ type: Input, args: ['p-help',] }],
        noShadow: [{ type: Input, args: ['p-no-shadow',] }],
        primary: [{ type: Input, args: ['p-primary',] }],
        primaryLabel: [{ type: Input, args: ['p-primary-label',] }],
        secondaryLabel: [{ type: Input, args: ['p-secondary-label',] }],
        title: [{ type: Input, args: ['p-title',] }],
        click: [{ type: Output, args: ['p-click',] }],
        onDisabled: [{ type: Output, args: ['p-on-disabled',] }],
        primaryAction: [{ type: Output, args: ['p-primary-action',] }],
        secondaryAction: [{ type: Output, args: ['p-secondary-action',] }],
        setting: [{ type: Output, args: ['p-setting',] }],
        titleAction: [{ type: Output, args: ['p-title-action',] }]
    };
    return PoWidgetBaseComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoWidgetBaseComponent.prototype._background;
    /**
     * @type {?}
     * @private
     */
    PoWidgetBaseComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    PoWidgetBaseComponent.prototype._height;
    /**
     * @type {?}
     * @private
     */
    PoWidgetBaseComponent.prototype._help;
    /**
     * @type {?}
     * @private
     */
    PoWidgetBaseComponent.prototype._noShadow;
    /**
     * @type {?}
     * @private
     */
    PoWidgetBaseComponent.prototype._primary;
    /**
     * @type {?}
     * @private
     */
    PoWidgetBaseComponent.prototype._primaryLabel;
    /**
     * @type {?}
     * @private
     */
    PoWidgetBaseComponent.prototype._title;
    /** @type {?} */
    PoWidgetBaseComponent.prototype.containerHeight;
    /**
     * Descrição da segunda ação.
     * @type {?}
     */
    PoWidgetBaseComponent.prototype.secondaryLabel;
    /**
     * Ação que será executada quando o usuário clicar sobre a área total do `po-widget`.
     * @type {?}
     */
    PoWidgetBaseComponent.prototype.click;
    /**
     * Função que será disparada com o valor do `p-disabled` quando esta propriedade for alterada.
     * @type {?}
     */
    PoWidgetBaseComponent.prototype.onDisabled;
    /**
     * Função que será chamada na primeira ação.
     * @type {?}
     */
    PoWidgetBaseComponent.prototype.primaryAction;
    /**
     * Função que será chamada na segunda ação.
     * @type {?}
     */
    PoWidgetBaseComponent.prototype.secondaryAction;
    /**
     * Função chamada ao clicar no ícone de configuração
     * @type {?}
     */
    PoWidgetBaseComponent.prototype.setting;
    /**
     * Função que será chamada ao clicar no título.
     * @type {?}
     */
    PoWidgetBaseComponent.prototype.titleAction;
    /**
     * @abstract
     * @param {?} height
     * @return {?}
     */
    PoWidgetBaseComponent.prototype.setHeight = function (height) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoWidgetBaseComponent
 *
 * \@example
 *
 * <example name="po-widget-basic" title="Portinari Widget Basic">
 *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.html"> </file>
 *  <file name="sample-po-widget-basic/sample-po-widget-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-labs" title="Portinari Widget Labs">
 *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.html"> </file>
 *  <file name="sample-po-widget-labs/sample-po-widget-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-finance-dashboard" title="Portinari Widget - Finance dashboard">
 *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.html"> </file>
 *  <file name="sample-po-widget-finance-dashboard/sample-po-widget-finance-dashboard.component.ts"> </file>
 * </example>
 *
 * <example name="po-widget-card" title="Portinari Widget - Card">
 *  <file name="sample-po-widget-card/sample-po-widget-card.component.html"> </file>
 *  <file name="sample-po-widget-card/sample-po-widget-card.component.ts"> </file>
 * </example>
 *
 */
var PoWidgetComponent = /** @class */ (function (_super) {
    __extends(PoWidgetComponent, _super);
    function PoWidgetComponent(viewRef) {
        return _super.call(this) || this;
    }
    Object.defineProperty(PoWidgetComponent.prototype, "showTitleAction", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.titleAction.observers[0];
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setHeight(this.height);
    };
    /**
     * @return {?}
     */
    PoWidgetComponent.prototype.hasTitleHelpOrSetting = /**
     * @return {?}
     */
    function () {
        return !!this.title || !!this.help || !!this.setting.observers[0];
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoWidgetComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            this.click.emit(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoWidgetComponent.prototype.openHelp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            event.stopPropagation();
            window.open(this.help, '_blank');
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoWidgetComponent.prototype.runPrimaryAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.primaryAction.emit();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoWidgetComponent.prototype.runSecondaryAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.secondaryAction.emit();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoWidgetComponent.prototype.runTitleAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.titleAction.emit();
        }
    };
    /**
     * @param {?} height
     * @return {?}
     */
    PoWidgetComponent.prototype.setHeight = /**
     * @param {?} height
     * @return {?}
     */
    function (height) {
        if (height) {
            /** @type {?} */
            var bodyHeight = height;
            /** @type {?} */
            var hasSettingOrHelp = this.setting.observers.length > 0 || this.help;
            /** @type {?} */
            var footerBorder = 1;
            /** @type {?} */
            var footerHeight = 40;
            /** @type {?} */
            var settingHeight = 37;
            /** @type {?} */
            var shadowHeight = 2;
            /** @type {?} */
            var titleHeight = 50;
            if (this.noShadow) {
                bodyHeight -= shadowHeight;
            }
            if (hasSettingOrHelp && !this.title) {
                bodyHeight -= settingHeight;
            }
            if (this.title) {
                bodyHeight -= titleHeight;
            }
            if (this.primaryLabel) {
                bodyHeight -= footerHeight + footerBorder;
            }
            this.containerHeight = bodyHeight + "px";
        }
        else {
            this.containerHeight = "auto";
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PoWidgetComponent.prototype.settingOutput = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            event.stopPropagation();
            this.setting.emit();
        }
    };
    PoWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-widget',
                    template: "<div\n  [class.po-clickable]=\"click.observers.length\"\n  [class.po-widget]=\"!primary\"\n  [class.po-widget-disabled]=\"disabled\"\n  [class.po-widget-primary]=\"primary\"\n  [class.po-widget-no-shadow]=\"noShadow\"\n  [style.background-image]=\"background ? 'url(' + background + ')' : undefined\"\n  (click)=\"onClick($event)\">\n\n  <div *ngIf=\"hasTitleHelpOrSetting()\" class=\"po-widget-header\">\n\n    <span\n      *ngIf=\"showTitleAction; else noTitleAction\"\n      class=\"po-widget-title-action\"\n      (click)=\"runTitleAction($event)\">\n      {{ title }}\n    </span>\n    <ng-template #noTitleAction>{{ title }}</ng-template>\n\n    <div *ngIf=\"setting.observers[0] || help\" class=\"po-pull-right\">\n      <span id=\"settingAction\"\n        *ngIf=\"setting.observers[0]\"\n        class=\"po-clickable po-icon po-icon-settings\"\n        (click)=\"settingOutput($event)\">\n      </span>\n      <span id=\"helpLink\"\n        *ngIf=\"help\"\n        class=\"po-clickable po-icon po-icon-help\"\n        (click)=\"openHelp($event)\">\n      </span>\n    </div>\n  </div>\n\n  <po-container\n    p-no-border\n    [p-height]=\"containerHeight\">\n    <div class=\"po-widget-body\">\n      <ng-content></ng-content>\n    </div>\n  </po-container>\n\n  <div *ngIf=\"primaryLabel\" class=\"po-widget-footer\">\n\n    <div class=\"po-widget-xl\" *ngIf=\"!secondaryLabel\">\n      <a class=\"po-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"po-widget-action\" id='primaryAct' (click)=\"runPrimaryAction($event)\">{{ primaryLabel }}</a>\n    </div>\n    <div class=\"po-widget-md\" *ngIf=\"secondaryLabel\">\n      <a class=\"po-widget-action\" id='secondaryAct' (click)=\"runSecondaryAction($event)\">{{ secondaryLabel }}</a>\n    </div>\n\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    PoWidgetComponent.ctorParameters = function () { return [
        { type: ViewContainerRef }
    ]; };
    return PoWidgetComponent;
}(PoWidgetBaseComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do componente po-widget
 */
var PoWidgetModule = /** @class */ (function () {
    function PoWidgetModule() {
    }
    PoWidgetModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        PoContainerModule
                    ],
                    exports: [
                        PoWidgetComponent
                    ],
                    declarations: [PoWidgetComponent]
                },] }
    ];
    return PoWidgetModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoComponentsModule = /** @class */ (function () {
    function PoComponentsModule() {
    }
    PoComponentsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [
                        PoAccordionModule,
                        PoAvatarModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoButtonGroupModule,
                        PoCalendarModule,
                        PoChartModule,
                        PoContainerModule,
                        PoDisclaimerGroupModule,
                        PoDisclaimerModule,
                        PoDividerModule,
                        PoDropdownModule,
                        PoDynamicModule,
                        PoFieldModule,
                        PoGridModule,
                        PoInfoModule,
                        PoListViewModule,
                        PoLoadingModule,
                        PoMenuModule,
                        PoMenuPanelModule,
                        PoModalModule,
                        PoNavbarModule,
                        PoPageModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoProgressModule,
                        PoSlideModule,
                        PoStepperModule,
                        PoTableModule,
                        PoTabsModule,
                        PoTagModule,
                        PoToolbarModule,
                        PoWidgetModule
                    ],
                    exports: [
                        PoAccordionModule,
                        PoAvatarModule,
                        PoBreadcrumbModule,
                        PoButtonModule,
                        PoButtonGroupModule,
                        PoCalendarModule,
                        PoChartModule,
                        PoContainerModule,
                        PoDisclaimerGroupModule,
                        PoDisclaimerModule,
                        PoDividerModule,
                        PoDropdownModule,
                        PoDynamicModule,
                        PoFieldModule,
                        PoGridModule,
                        PoInfoModule,
                        PoListViewModule,
                        PoLoadingModule,
                        PoMenuModule,
                        PoMenuPanelModule,
                        PoModalModule,
                        PoNavbarModule,
                        PoPageModule,
                        PoPopoverModule,
                        PoPopupModule,
                        PoProgressModule,
                        PoSlideModule,
                        PoStepperModule,
                        PoTableModule,
                        PoTabsModule,
                        PoTagModule,
                        PoToolbarModule,
                        PoWidgetModule
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];
    return PoComponentsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoDirectivesModule = /** @class */ (function () {
    function PoDirectivesModule() {
    }
    PoDirectivesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [
                        PoTooltipModule
                    ],
                    exports: [
                        PoTooltipModule
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];
    return PoDirectivesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoGuardsModule = /** @class */ (function () {
    function PoGuardsModule() {
    }
    PoGuardsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [],
                    exports: [],
                    providers: [],
                    bootstrap: []
                },] }
    ];
    return PoGuardsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var NO_ERROR_HEADER_PARAM = 'X-Portinari-No-Error';
/**
 * \@description
 *
 * O serviço Portinari Http Interceptor realiza o tratamento de requisições HTTP conforme o padrão do
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) para adaptá-lo
 * ao modelo do PO.
 *
 * Ao analisar o objeto `_messages` retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
 * Os retornos de erros com códigos 4xx e 5xx são tratados automaticamente, sem a necessidade de incluir o `_messages`.
 *
 * Também existe a possibilidade de não apresentar a notificação quando houver algum erro com códigos 4xx e 5xx,
 * utilizando o parâmetro `X-Portinari-No-Error` que foi definido conforme o
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) (em Cabeçalhos Customizados).
 * O parâmetro `X-Portinari-No-Error` deve ser informado no cabeçalho da requisição com o valor `'true'` para funcionar corretamente,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Portinari-No-Error': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviço deve seguir o
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395)
 * (em Mensagens de sucesso para coleções), exemplo:
 *  - _messages: lista de mensagens de erro ou informativo resultante do serviço.
 *    - type: success, warning, error, e information;
 *    - code: título ou código da mensagem;
 *    - message: texto da mensagem;
 *    - detailedMessage: detalhamento do erro ou informativo;
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * @abstract
 */
var  /**
 * \@description
 *
 * O serviço Portinari Http Interceptor realiza o tratamento de requisições HTTP conforme o padrão do
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) para adaptá-lo
 * ao modelo do PO.
 *
 * Ao analisar o objeto `_messages` retornado pela requisição, o serviço exibirá notificações com mensagens na tela.
 * Os retornos de erros com códigos 4xx e 5xx são tratados automaticamente, sem a necessidade de incluir o `_messages`.
 *
 * Também existe a possibilidade de não apresentar a notificação quando houver algum erro com códigos 4xx e 5xx,
 * utilizando o parâmetro `X-Portinari-No-Error` que foi definido conforme o
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395) (em Cabeçalhos Customizados).
 * O parâmetro `X-Portinari-No-Error` deve ser informado no cabeçalho da requisição com o valor `'true'` para funcionar corretamente,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Portinari-No-Error': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * O `Content-Type` deve ser `application/json` e a estrutura de mensagem recebida pelo serviço deve seguir o
 * [**Guia de implementação das APIs TOTVS**](http://tdn.totvs.com/pages/viewpage.action?pageId=484701395)
 * (em Mensagens de sucesso para coleções), exemplo:
 *  - _messages: lista de mensagens de erro ou informativo resultante do serviço.
 *    - type: success, warning, error, e information;
 *    - code: título ou código da mensagem;
 *    - message: texto da mensagem;
 *    - detailedMessage: detalhamento do erro ou informativo;
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 * Ao realizar requisições utilize o `HttpClient`, conforme exemplo abaixo:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class UserService {
 *
 *   constructor(private http: HttpClient) { }
 *
 *   getUsers() {
 *     return this.http.get('/api/users');
 *   }
 *
 *   ...
 *
 * }
 * ```
 *
 * @abstract
 */
PoHttpInterceptorBaseService = /** @class */ (function () {
    function PoHttpInterceptorBaseService(notification, dialog) {
        this.notification = notification;
        this.dialog = dialog;
        this.notificationTypes = ['success', 'warning', 'error', 'information'];
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var cloneRequest = request.clone();
        request = request.headers.has(NO_ERROR_HEADER_PARAM) ? this.cloneRequestWithoutNoErrorHeaderParam(request) : request;
        return next.handle(request).pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response instanceof HttpResponse) {
                _this.processResponse(response);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.processErrorResponse(error, cloneRequest);
        })));
    };
    /**
     * @param {?} response
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.processResponse = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        var _this = this;
        if (response.body && response.body._messages) {
            /** @type {?} */
            var messages = response.body._messages;
            if (messages instanceof Array) {
                messages.forEach((/**
                 * @param {?} message
                 * @return {?}
                 */
                function (message) {
                    _this.showNotification(message);
                }));
            }
            else {
                this.showNotification(messages);
            }
        }
    };
    /**
     * @param {?} response
     * @param {?} request
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.processErrorResponse = /**
     * @param {?} response
     * @param {?} request
     * @return {?}
     */
    function (response, request) {
        /** @type {?} */
        var errorResponse = response.status !== 0
            ? response.error
            : { code: 0, message: 'Servidor não está respondendo.', detailedMessage: response.message };
        /** @type {?} */
        var hasNoErrorParam = this.hasNoErrorParam(request);
        // not show the notification when has NoError parameter on header of request.
        if (errorResponse && errorResponse.message && !hasNoErrorParam) {
            this.showNotification(__assign({}, errorResponse, { type: 'error' }));
        }
    };
    /**
     * @private
     * @param {?} request
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.cloneRequestWithoutNoErrorHeaderParam = /**
     * @private
     * @param {?} request
     * @return {?}
     */
    function (request) {
        return request && request.clone({ headers: request.headers.delete(NO_ERROR_HEADER_PARAM) });
    };
    /**
     * @private
     * @param {?} request
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.hasNoErrorParam = /**
     * @private
     * @param {?} request
     * @return {?}
     */
    function (request) {
        /** @type {?} */
        var noErrorParam = request && request.headers.get(NO_ERROR_HEADER_PARAM);
        return noErrorParam && noErrorParam.toString().toLocaleLowerCase() === 'true';
    };
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.showNotification = /**
     * @private
     * @param {?} response
     * @return {?}
     */
    function (response) {
        /** @type {?} */
        var typeNotification = this.notificationTypes.includes(response.type) ? response.type : 'information';
        /** @type {?} */
        var notificationAction = this.generateNotificationAction(response);
        this.notification[typeNotification]({
            message: response.message,
            actionLabel: notificationAction.label,
            action: notificationAction.action
        });
    };
    /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.generateNotificationAction = /**
     * @private
     * @param {?} errorResponse
     * @return {?}
     */
    function (errorResponse) {
        /** @type {?} */
        var notificationAction;
        /** @type {?} */
        var notificationLabel;
        /** @type {?} */
        var notificationMessage = errorResponse.message.concat(" " + errorResponse.detailedMessage);
        if (errorResponse.details && errorResponse.details instanceof Array) {
            errorResponse.details.forEach((/**
             * @param {?} detailError
             * @return {?}
             */
            function (detailError) {
                notificationMessage += "\n" + detailError.message;
            }));
        }
        if (errorResponse.helpUrl && !(errorResponse.detailedMessage || errorResponse.details)) {
            notificationLabel = 'Ajuda';
            notificationAction = this.generateUrlHelpFunction(errorResponse.helpUrl);
        }
        else if (errorResponse.detailedMessage || errorResponse.details) {
            notificationLabel = 'Detalhes';
            notificationAction = this.generateDialogDetailFunction(errorResponse, notificationMessage);
        }
        return { label: notificationLabel, action: notificationAction };
    };
    /**
     * @private
     * @param {?} helpUrl
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.generateUrlHelpFunction = /**
     * @private
     * @param {?} helpUrl
     * @return {?}
     */
    function (helpUrl) {
        return (/**
         * @return {?}
         */
        function () { window.open(helpUrl, '_blank'); });
    };
    /**
     * @private
     * @param {?} errorResponse
     * @param {?} notificationMessage
     * @return {?}
     */
    PoHttpInterceptorBaseService.prototype.generateDialogDetailFunction = /**
     * @private
     * @param {?} errorResponse
     * @param {?} notificationMessage
     * @return {?}
     */
    function (errorResponse, notificationMessage) {
        var _this = this;
        return (/**
         * @return {?}
         */
        function () {
            _this.dialog.alert({
                title: errorResponse.code,
                message: notificationMessage,
                ok: errorResponse.helpUrl ? _this.generateUrlHelpFunction(errorResponse.helpUrl) : undefined
            });
        });
    };
    return PoHttpInterceptorBaseService;
}());
if (false) {
    /** @type {?} */
    PoHttpInterceptorBaseService.prototype.notificationTypes;
    /**
     * @type {?}
     * @private
     */
    PoHttpInterceptorBaseService.prototype.notification;
    /**
     * @type {?}
     * @private
     */
    PoHttpInterceptorBaseService.prototype.dialog;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoHttpInterceptorBaseService
 *
 * \@example
 * <example name='po-http-interceptor-labs' title='Portinari Http Interceptor Labs'>
 *  <file name='sample-po-http-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-interceptor-labs.component.html'> </file>
 * </example>
 */
var PoHttpInterceptorService = /** @class */ (function (_super) {
    __extends(PoHttpInterceptorService, _super);
    function PoHttpInterceptorService(notification, dialog) {
        return _super.call(this, notification, dialog) || this;
    }
    PoHttpInterceptorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoHttpInterceptorService.ctorParameters = function () { return [
        { type: PoNotificationService },
        { type: PoDialogService }
    ]; };
    return PoHttpInterceptorService;
}(PoHttpInterceptorBaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoHttpInterceptorModule = /** @class */ (function () {
    function PoHttpInterceptorModule() {
    }
    PoHttpInterceptorModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        PoHttpInterceptorService,
                        PoDialogService,
                        PoNotificationService,
                        {
                            provide: HTTP_INTERCEPTORS,
                            useClass: PoHttpInterceptorService,
                            multi: true
                        }
                    ]
                },] }
    ];
    return PoHttpInterceptorModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * Serviço responsável por efetuar o controle de interação com o serviço de interceptor `PoHttpRequestInterceptorService`
 * gerenciando o seu estado.
 */
var PoHttpRequesControltService = /** @class */ (function () {
    function PoHttpRequesControltService() {
        this.controlHttpRequest = new Subject();
    }
    /**
     * @return {?}
     */
    PoHttpRequesControltService.prototype.getControlHttpRequest = /**
     * @return {?}
     */
    function () {
        return this.controlHttpRequest.asObservable();
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    PoHttpRequesControltService.prototype.send = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = 0; }
        this.controlHttpRequest.next(value);
    };
    PoHttpRequesControltService.decorators = [
        { type: Injectable }
    ];
    return PoHttpRequesControltService;
}());
if (false) {
    /** @type {?} */
    PoHttpRequesControltService.prototype.controlHttpRequest;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var noCountPendingRequests = 'X-Portinari-No-Count-Pending-Requests';
/** @type {?} */
var screenLock = 'X-Portinari-Screen-Lock';
/**
 * \@description
 *
 * O serviço Portinari Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-Portinari-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Portinari-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-Portinari-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-Portinari-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '\@angular/common/http';
 *
 * ...
 *
 * \@Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-Portinari-No-Count-Pending-Requests': true, 'X-Portinari-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * \@example
 * <example name='po-http-request-interceptor-labs' title='Portinari Http Request Interceptor Labs'>
 *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
var PoHttpRequestInterceptorService = /** @class */ (function () {
    function PoHttpRequestInterceptorService(controlHttpRequest, poComponentInjector) {
        this.controlHttpRequest = controlHttpRequest;
        this.poComponentInjector = poComponentInjector;
        this.loadingOverlayComponent = undefined;
        this.pendingRequests = 0;
        this.overlayRequests = 0;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        /** @type {?} */
        var requestClone = request.clone();
        request = this.requestCloneWithoutHeaderParam([noCountPendingRequests, screenLock], request);
        this.setCountPendingRequests(true, requestClone);
        this.setCountOverlayRequests(true, requestClone);
        return next.handle(request).pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response instanceof HttpResponse) {
                _this.setCountPendingRequests(false, requestClone);
                _this.setCountOverlayRequests(false, requestClone);
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.setCountPendingRequests(false, requestClone);
            _this.setCountOverlayRequests(false, requestClone);
            return throwError(error);
        })));
    };
    /**
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.getCountPendingRequests = /**
     * @return {?}
     */
    function () {
        return this.controlHttpRequest.getControlHttpRequest();
    };
    /**
     * @private
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.buildLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.loadingOverlayComponent) {
            this.loadingOverlayComponent = this.poComponentInjector.createComponentInApplication(PoLoadingOverlayComponent);
            this.loadingOverlayComponent.instance.screenLock = true;
            this.loadingOverlayComponent.instance.changeDetector.detectChanges();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.destroyLoading = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.loadingOverlayComponent) {
            this.poComponentInjector.destroyComponentInApplication(this.loadingOverlayComponent);
            this.loadingOverlayComponent = undefined;
        }
    };
    /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.requestCloneWithoutHeaderParam = /**
     * @private
     * @param {?} headersParams
     * @param {?} request
     * @return {?}
     */
    function (headersParams, request) {
        /** @type {?} */
        var isRequestClone = false;
        headersParams.forEach((/**
         * @param {?} headerParam
         * @return {?}
         */
        function (headerParam) {
            if (request.headers.has(headerParam)) {
                request.headers.delete(headerParam);
                isRequestClone = true;
            }
        }));
        return isRequestClone ? request.clone({ headers: request.headers }) : request;
    };
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.setCountPendingRequests = /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    function (isIncrement, request) {
        /** @type {?} */
        var hasCountPendingRequestHeaderParam = request.headers.has(noCountPendingRequests);
        /** @type {?} */
        var headerParam = request.headers.get(noCountPendingRequests);
        if (hasCountPendingRequestHeaderParam && (headerParam.toString().toLowerCase() === 'true')) {
            return;
        }
        this.pendingRequests += isIncrement ? 1 : -1;
        this.controlHttpRequest.send(this.pendingRequests);
    };
    /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    PoHttpRequestInterceptorService.prototype.setCountOverlayRequests = /**
     * @private
     * @param {?} isIncrement
     * @param {?} request
     * @return {?}
     */
    function (isIncrement, request) {
        /** @type {?} */
        var hasOverlayRequestHeaderParam = request.headers.has(screenLock);
        if (hasOverlayRequestHeaderParam) {
            /** @type {?} */
            var headerParam = request.headers.get(screenLock);
            if (headerParam.toString().toLowerCase() === 'false') {
                return;
            }
            this.overlayRequests += isIncrement ? 1 : -1;
            this.overlayRequests > 0 ? this.buildLoading() : this.destroyLoading();
        }
    };
    PoHttpRequestInterceptorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PoHttpRequestInterceptorService.ctorParameters = function () { return [
        { type: PoHttpRequesControltService },
        { type: PoComponentInjectorService }
    ]; };
    /** @nocollapse */ PoHttpRequestInterceptorService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PoHttpRequestInterceptorService_Factory() { return new PoHttpRequestInterceptorService(ɵɵinject(PoHttpRequesControltService), ɵɵinject(PoComponentInjectorService)); }, token: PoHttpRequestInterceptorService, providedIn: "root" });
    return PoHttpRequestInterceptorService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.loadingOverlayComponent;
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.pendingRequests;
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.overlayRequests;
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.controlHttpRequest;
    /**
     * @type {?}
     * @private
     */
    PoHttpRequestInterceptorService.prototype.poComponentInjector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoHttpRequestModule = /** @class */ (function () {
    function PoHttpRequestModule() {
    }
    PoHttpRequestModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        PoHttpRequesControltService,
                        PoHttpRequestInterceptorService,
                        PoComponentInjectorService,
                        {
                            provide: HTTP_INTERCEPTORS,
                            useClass: PoHttpRequestInterceptorService,
                            multi: true
                        }
                    ],
                    entryComponents: [PoLoadingOverlayComponent, PoLoadingComponent]
                },] }
    ];
    return PoHttpRequestModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoInterceptorsModule = /** @class */ (function () {
    function PoInterceptorsModule() {
    }
    PoInterceptorsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [
                        PoHttpInterceptorModule,
                        PoHttpRequestModule
                    ],
                    exports: [
                        PoHttpInterceptorModule,
                        PoHttpRequestModule
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];
    return PoInterceptorsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoPipesModule = /** @class */ (function () {
    function PoPipesModule() {
    }
    PoPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [
                        PoTimeModule
                    ],
                    exports: [
                        PoTimeModule
                    ],
                    providers: [],
                    bootstrap: []
                },] }
    ];
    return PoPipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PoModule = /** @class */ (function () {
    function PoModule() {
    }
    PoModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [
                        PoComponentsModule,
                        PoDirectivesModule,
                        PoGuardsModule,
                        PoInterceptorsModule,
                        PoPipesModule,
                        PoServicesModule
                    ],
                    exports: [
                        PoComponentsModule,
                        PoDirectivesModule,
                        PoInterceptorsModule,
                        PoGuardsModule,
                        PoPipesModule,
                        PoServicesModule
                    ],
                    providers: [PoNotificationService],
                    bootstrap: []
                },] }
    ];
    return PoModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * PoBreadcrumb, PoBreadcrumbComponent, PoBreadcrumbBaseComponent,
 * PoPageDefaultComponent, PoPageDetailComponent, PoPageEditComponent, PoPageListComponent
 *
 * \@description
 *
 * Interface que define cada item do componente **po-breadcrumb**.
 * @record
 */
function PoBreadcrumbItem() { }
if (false) {
    /**
     * Ação executada ao clicar no item.
     *
     * > A função atribuída a esta propriedade receberá o _label_ do item como parâmetro para execução.
     * @type {?|undefined}
     */
    PoBreadcrumbItem.prototype.action;
    /**
     * Rótulo do item.
     * @type {?}
     */
    PoBreadcrumbItem.prototype.label;
    /**
     * Url do item.
     *
     * > Caso o item também contenha uma *action* definida, a preferência de execução será do *link*.
     *
     * > Para o correto funcionamento, é necessário que haja uma rota referenciando seu valor.
     * **[Veja um exemplo de como criar rotas aqui](/guides/getting-started)**.
     *
     * > Esta propriedade é necessária para que a propriedade `p-favorite-service` consiga favoritar ou desfavoritar.
     * @type {?|undefined}
     */
    PoBreadcrumbItem.prototype.link;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * PoPageDefaultComponent, PoPageDetailComponent, PoPageEditComponent, PoPageListComponent, PoPageDynamicSearchBaseComponent
 *
 * \@description
 *
 * Interface que define o `po-breadcrumb`.
 * @record
 */
function PoBreadcrumb() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Permite definir uma URL para favoritar ou desfavoritar.
     *
     * > Para maiores informações verificar a propriedade `p-favorite-service` do componente `po-breadcrumb`.
     *
     * @type {?|undefined}
     */
    PoBreadcrumb.prototype.favorite;
    /**
     * \@description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     * @type {?}
     */
    PoBreadcrumb.prototype.items;
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto que possibilita o envio de parâmetros adicionais à requisição.
     * @type {?|undefined}
     */
    PoBreadcrumb.prototype.params;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoChartComponent
 *
 * \@description
 *
 * Interface que define o objeto da série `PoChartType.Donut`.
 *
 * \@docsExtends PoCircularChartSeries
 * @record
 */
function PoDonutChartSeries() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Define o texto que será exibido ao passar o mouse por cima das séries do *chart*.
     *
     * > Caso não seja informado um valor para o *tooltip*, será exibido: `categoria: valor proporcional ao total em porcentagem`.
     * @type {?|undefined}
     */
    PoDonutChartSeries.prototype.tooltip;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoChartComponent
 *
 * \@description
 *
 * Interface que define o objeto da série `PoChartType.Pie`.
 *
 * \@docsExtends PoCircularChartSeries
 * @record
 */
function PoPieChartSeries() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Define o texto que será exibido ao passar o mouse por cima das séries do *chart*.
     *
     * > Caso não seja informado um valor para o *tooltip*, será exibido: `categoria: valor`.
     * @type {?|undefined}
     */
    PoPieChartSeries.prototype.tooltip;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy
 *
 * PoPageListComponent
 *
 * \@description
 *
 * Interface que representa o objeto `po-disclaimer-group`.
 * @record
 */
function PoDisclaimerGroup() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Função que será disparada quando a lista de *disclaimers* for modificada.
     * Será passado por parâmetro a nova lista de *disclaimers*.
     * @type {?|undefined}
     */
    PoDisclaimerGroup.prototype.change;
    /**
     *
     * \@description
     *
     * Lista de *disclaimers*.
     *
     * Exemplo:
     * ```
     *  disclaimers: [
     *    { property: 'type', label: 'Hotel', value: 'hotel' },
     *    { property: 'cost', label: '$500,00', value: '500'  },
     *    { property: 'dates', label: '10/05/2018 - 15/05/2018', value: '10/05/2018|15/05/2018'  }
     *   ]
     * ```
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
     *
     * Exemplo:
     * ```
     * this.disclaimerGroup.disclaimers = [...this.disclaimers];
     * ```
     * @type {?}
     */
    PoDisclaimerGroup.prototype.disclaimers;
    /**
     * \@optional
     *
     * \@description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * \@default `false`
     * @type {?|undefined}
     */
    PoDisclaimerGroup.prototype.hideRemoveAll;
    /**
     * \@optional
     *
     * \@description
     *
     * Título do grupo de *disclaimers*.
     * @type {?}
     */
    PoDisclaimerGroup.prototype.title;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoDisclaimerGroupComponent, PoPageListComponent
 *
 * \@description
 *
 * Interface que representa o objeto `po-disclaimer`.
 * @record
 */
function PoDisclaimer() { }
if (false) {
    /**
     * Se verdadeiro, oculta o botão para fechar o *disclaimer*.
     * @type {?|undefined}
     */
    PoDisclaimer.prototype.hideClose;
    /**
     * Texto de exibição do objeto.
     * @type {?|undefined}
     */
    PoDisclaimer.prototype.label;
    /**
     * Nome da propriedade vinculada ao objeto *disclaimer*.
     * @type {?|undefined}
     */
    PoDisclaimer.prototype.property;
    /**
     * Valor do objeto.
     * @type {?}
     */
    PoDisclaimer.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Interface do componente po-dropdown
 *
 * \@docsExtends PoPopupAction
 *
 * \@usedBy PoDropdownComponent
 * @record
 */
function PoDropdownAction() { }

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoDynamicFormComponent, PoAdvancedFilterComponent
 *
 * \@docsExtends PoDynamicField
 *
 * \@description
 *
 * Interface para definição das propriedades dos campos de entrada que serão criados dinamicamente.
 * @record
 */
function PoDynamicFormField() { }
if (false) {
    /**
     * Define as colunas para utilização da busca avançada. Usada somente em conjunto com a propriedade `searchService`,
     * essa propriedade deve receber um array de objetos que implementam a interface [`PoLookupColumn`](/documentation/po-lookup).
     *
     * > Caso sejam informadas colunas, deve-se obrigatoriamente conter colunas definidas como *label* e *value* para valores
     * de tela e do model respectivamente.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.columns;
    /**
     * Define a obrigatoriedade do campo.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.required;
    /**
     * Lista de opções que serão exibidos em um componente, podendo selecionar uma opção.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.options;
    /**
     * Permite que o usuário faça múltipla seleção dentro da lista de opções.
     *
     * > Caso utilizar a propriedade `optionsService` esta propriedade será ignorada.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.optionsMulti;
    /**
     * Serviço que será utilizado para buscar os itens e preencher a lista de opções dinamicamente.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.optionsService;
    /**
     * Serviço que será utilizado para realizar a busca avançada. Pode ser utilizado em conjunto com a propriedade `columns`.
     *
     * **Importante:**
     * > Caso utilizar a propriedade `optionsService` esta propriedade será ignorada.
     * > Para que funcione corretamente, é importante que o serviço siga o
     * [guia de API da PORTINARI](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444).
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.searchService;
    /**
     * Máscara para o campo.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.mask;
    /**
     * Regex para validação do campo.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.pattern;
    /**
     * Tamanho mínimo de caracteres.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.minLength;
    /**
     * Tamanho máximo de caracteres.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.maxLength;
    /**
     * Desabilita o campo caso informar o valor *true*.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.disabled;
    /**
     * Texto de ajuda.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.help;
    /**
     * Texto exibido quando o valor do componente for *true*.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.booleanTrue;
    /**
     * Texto exibido quando o valor do componente for *false*.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.booleanFalse;
    /**
     * Valor máximo a ser informado no componente, podendo ser utilizado quando o tipo de dado por *number*, *date* ou *dateTime*.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.maxValue;
    /**
     * Valor mínimo a ser informado no componente, podendo ser utilizado quando o tipo de dado por *number*, *date* ou *dateTime*.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.minValue;
    /**
     * Quantidade de linhas exibidas no po-textarea
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.rows;
    /**
     * Esconde a informação estilo *password*, pode ser utilizado quando o tipo de dado for *string*.
     * @type {?|undefined}
     */
    PoDynamicFormField.prototype.secret;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoDynamicViewComponent
 *
 * \@docsExtends PoDynamicField
 *
 * \@description
 *
 * Interface para definição das propriedades dos campos de visualização que serão criados dinamicamente.
 * @record
 */
function PoDynamicViewField() { }
if (false) {
    /**
     * Indica se o campo será um `po-tag`.
     *
     * \@default `false`
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.tag;
    /**
     * Define uma cor para o campo do tipo *tag*.
     *
     * Valores válidos:
     *  - <span class="dot po-color-01"></span> `color-01`
     *  - <span class="dot po-color-02"></span> `color-02`
     *  - <span class="dot po-color-03"></span> `color-03`
     *  - <span class="dot po-color-04"></span> `color-04`
     *  - <span class="dot po-color-05"></span> `color-05`
     *  - <span class="dot po-color-06"></span> `color-06`
     *  - <span class="dot po-color-07"></span> `color-07`
     *  - <span class="dot po-color-08"></span> `color-08`
     *  - <span class="dot po-color-09"></span> `color-09`
     *  - <span class="dot po-color-10"></span> `color-10`
     *  - <span class="dot po-color-11"></span> `color-11`
     *  - <span class="dot po-color-12"></span> `color-12`
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.color;
    /**
     * Define um ícone que será exibido ao lado do valor para o campo do tipo *tag*.
     *
     * > Veja os valores válidos na [biblioteca de ícones](guides/icons).
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.icon;
    /**
     * Possibilita a inversão de cores para o campo do tipo `tag`,
     * tornando possível uma visualização de status ativo e inativo.
     *
     * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `color` ou a cor default,
     * e a cor do fundo fica branca.
     *
     * \@default `false`
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.inverse;
    /**
     * Formato de exibição do valor do campo.
     *
     * Aplicado para casos específicos de acordo com o tipo do campo.
     *
     * **types**:
     * - `currency`: Aceita valores definidos para a propriedade `currencyCode` do
     *  [**CurrencyPipe**](https://angular.io/api/common/CurrencyPipe)
     * + Exemplos: 'BRL', 'USD'.
     * - `date`: Aceita valores definidos para a propriedade `format` do [**DatePipe**](https://angular.io/api/common/DatePipe)
     * e também aceita os caracteres de dia(dd), mês(MM ou mm) e ano (yyyy ou yy),
     * caso não seja informado um formato o mesmo será 'dd/MM/yyyy'. Exemplos: 'dd/MM/yyyy', 'dd-MM-yy', 'mm/dd/yyyy'.
     * - `time`: Aceita apenas os caracteres de hora(HH), minutos(mm), segundos(ss) e
     *  milisegundos(f-ffffff), os milisegundos são opcionais, caso não seja informado um formato o mesmo será
     * 'HH:mm:ss'. Exemplos: 'HH:mm', 'HH:mm:ss.ffffff', 'HH:mm:ss.ff', 'mm:ss.fff'.
     * - `number`: Aceita valores definidos para a propriedade `digitsInfo` do [**DecimalPipe**](https://angular.io/api/common/DecimalPipe)
     *  para formatação, e caso não seja informado, o número será exibido na sua forma original.
     *
     *  + Exemplo: com o valor de entrada: `50` e a valor para formatação: `'1.2-5'` o resultado será: `50.00`.
     * @type {?|undefined}
     */
    PoDynamicViewField.prototype.format;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Interface para as ações do componente po-checkbox-group.
 *
 * \@usedBy PoCheckboxGroupComponent
 * @record
 */
function PoCheckboxGroupOption() { }
if (false) {
    /**
     * Texto exibido para o usuário ao lado do checkbox.
     * @type {?}
     */
    PoCheckboxGroupOption.prototype.label;
    /**
     * Valor retornado no model.
     *
     * É possível usar os valores ```true``` e ```false```, caso a propriedade ```p-indeterminate``` esteja setada como ```true```
     * passa a aceitar ```null``` também, por padrão esse valor sempre será setado como ```false```.
     * @type {?}
     */
    PoCheckboxGroupOption.prototype.value;
    /**
     * Desabilita o checkbox, por padrão as opções sempre estarão habilitadas para o usuário.
     *
     * Mesmo desabilitado o desenvolvedor pode alterar o valor do item via código, mas não será permitido ao
     * usuário alterar a condição do checkbox.
     * @type {?|undefined}
     */
    PoCheckboxGroupOption.prototype.disabled;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoComboComponent
 *
 * \@description
 *
 * Interface para os serviços que serão utilizados no po-combo.
 * @record
 */
function PoComboFilter() { }
if (false) {
    /**
     * Método responsável por retornar um Observable que contém uma coleção de objetos que seguem a interface PoComboOption,
     * será informado por parametro o campo, de acordo com o fieldLabel, e o valor a ser pesquisado.
     *
     * @param {?} params {any} Objeto contendo a propriedade e o valor responsável por realizar o filtro.
     * @param {?=} filterParams {any} Valor informado através da propriedade `p-filter-params`.
     * @return {?}
     */
    PoComboFilter.prototype.getFilteredData = function (params, filterParams) { };
    /**
     * Método responsável por retornar um Observable que contém apenas o objeto filtrado que seguem a interface PoComboOption,
     * será informado por parametro valor a ser pesquisado.
     *
     * @param {?} value {string | number} Valor responsável por realizar a busca de um único objeto.
     * @param {?=} filterParams {any} Valor informado através da propriedade `p-filter-params`.
     * @return {?}
     */
    PoComboFilter.prototype.getObjectByValue = function (value, filterParams) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoComboComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-combo`.
 * @record
 */
function PoComboLiterals() { }
if (false) {
    /**
     * Texto exibido quando não houver itens na lista ou se, a pesquisa do filtro não retornar nenhum item.
     * @type {?|undefined}
     */
    PoComboLiterals.prototype.noData;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoComboComponent
 *
 * \@description
 *
 * Interface dos itens da coleção que será exibida no dropdown do po-combo.
 * @record
 */
function PoComboOption() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     * Label exibido nos itens da lista.
     *
     * > Caso não informar o `label`, será utilizado o valor informado na propriedade `value`.
     * @type {?|undefined}
     */
    PoComboOption.prototype.label;
    /**
     * Valor do objeto que será atribuído ao model.
     * @type {?}
     */
    PoComboOption.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoDatepickerRangeComponent
 *
 * \@description
 *
 * Interface para definição do objeto com a data inicial e final usadas no `po-datepicker-range`.
 *
 * > Os formatos de data permitidos seguem os padrões definidos na
 * [descrição do componente](/documentation/po-datepicker-range#accepted-formats).
 * @record
 */
function PoDatepickerRange() { }
if (false) {
    /**
     * Data inicial
     * @type {?}
     */
    PoDatepickerRange.prototype.start;
    /**
     * Data final
     * @type {?}
     */
    PoDatepickerRange.prototype.end;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoDatepickerRangeComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-datepicker-range`.
 * @record
 */
function PoDatepickerRangeLiterals() { }
if (false) {
    /**
     * Data em formato inválido.
     * @type {?|undefined}
     */
    PoDatepickerRangeLiterals.prototype.invalidFormat;
    /**
     * Data inicial maior que data final.
     * @type {?|undefined}
     */
    PoDatepickerRangeLiterals.prototype.startDateGreaterThanEndDate;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoLookupComponent
 *
 * \@description
 *
 * Interface para configuração das colunas do po-lookup.
 * @record
 */
function PoLookupColumn() { }
if (false) {
    /**
     * Indica que a coluna será utilizada como valor do campo e como filtro dentro da modal.
     *
     * Se houver mais de uma configuração habilitada, é exibido os valores no campo concatenados separados
     * por um traço("-"). Por exemplo: "Joinville - SC".
     *
     * Importante
     * Esta configuração se torna obsoleta caso o atributo "p-lookup-description" for configurado no componente.
     * @type {?|undefined}
     */
    PoLookupColumn.prototype.fieldLabel;
    /**
     * Formato de exibição do valor da coluna:
     * - Formato para moeda (currency). Exemplos: 'BRL', 'USD'.
     * - Formato para data (date): aceita apenas os caracteres de dia(dd), mês(MM ou mm) e ano (yyyy ou yy),
     * valor padrão é 'dd/MM/yyyy'. Exemplos: 'dd/MM/yyyy', 'dd-MM-yy', 'mm/dd/yyyy'.
     * @type {?|undefined}
     */
    PoLookupColumn.prototype.format;
    /**
     * Texto para título da coluna.
     *
     * Caso não seja informado, será utilizado como *label* o valor da propriedade *property* com a primeira letra em maiúsculo.
     * @type {?|undefined}
     */
    PoLookupColumn.prototype.label;
    /**
     * Nome identificador da coluna.
     * @type {?|undefined}
     */
    PoLookupColumn.prototype.property;
    /**
     * Tipo da coluna:
     * - string (padrão): textos
     * - number: valores numéricos
     * - date: data
     * - currency: valores monetários
     * @type {?|undefined}
     */
    PoLookupColumn.prototype.type;
    /**
     * A largura da coluna pode ser informada em pixels ou porcentagem. Exemplo: '100px' ou '20%'
     * @type {?|undefined}
     */
    PoLookupColumn.prototype.width;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoLookupComponent
 *
 * \@description
 *
 * Define o tipo de busca utilizado no po-lookup.
 * @record
 */
function PoLookupFilter() { }
if (false) {
    /**
     * **Deprecated**
     *
     * Método responsável por enviar um filtro para o serviço e receber os dados.
     *
     * Os parâmetros page e pageSize seguem o guia de implementação das APIs TOTVS, são utilizados para controlar a busca dos dados em cada
     * requisição do botão 'Carregar mais resultados'.
     *
     * Este método deve retornar um *Observable* com a resposta da API no formato da interface `PoLookupResponseApi`.
     *
     * > Este método está depreciado, deve-se utilizar a método `getFilteredItems`.
     *
     *
     * @deprecated 4.x.x
     *
     * @param {?} filter
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} filterParams
     * @return {?}
     */
    PoLookupFilter.prototype.getFilteredData = function (filter, page, pageSize, filterParams) { };
    /**
     * Método que será disparado ao filtrar a lista de itens ou carregar mais resultados no componente, deve-se retornar
     * um *Observable* com a resposta da API no formato da interface `PoLookupResponseApi`.
     *
     * > Esta propriedade será priorizada se houver também o método `getFilteredData`.
     *
     * @param {?} params
     * @return {?}
     */
    PoLookupFilter.prototype.getFilteredItems = function (params) { };
    /**
     * Método responsável por enviar um valor que será buscado no serviço.
     *
     * @param {?} value
     * @param {?=} filterParams
     * @return {?}
     */
    PoLookupFilter.prototype.getObjectByValue = function (value, filterParams) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoLookupComponent
 *
 * \@description
 *
 * Interface do objeto enviado como parâmetro na função `getFilteredItems`.
 * @record
 */
function PoLookupFilteredItemsParams() { }
if (false) {
    /**
     * Conteúdo utilizado para filtrar a lista de itens.
     * @type {?|undefined}
     */
    PoLookupFilteredItemsParams.prototype.filter;
    /**
     * Controla a paginação dos dados e recebe valor automaticamente a cada clique no botão 'Carregar mais resultados'.
     * @type {?|undefined}
     */
    PoLookupFilteredItemsParams.prototype.page;
    /**
     * Quantidade de itens retornados cada vez que o serviço é chamado, por padrão é 10.
     * @type {?|undefined}
     */
    PoLookupFilteredItemsParams.prototype.pageSize;
    /**
     * Valor informado através da propriedade `p-filter-params`.
     * @type {?|undefined}
     */
    PoLookupFilteredItemsParams.prototype.filterParams;
    /**
     * Coluna que está sendo ordenada na tabela.
     *
     * - Coluna decrescente será informada da seguinte forma: `-<colunaOrdenada>`, por exemplo `-name`.
     * - Coluna ascendente será informada da seguinte forma: `<colunaOrdenada>`, por exemplo `name`.
     * @type {?|undefined}
     */
    PoLookupFilteredItemsParams.prototype.order;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoLookupComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-lookup`.
 * @record
 */
function PoLookupLiterals() { }
if (false) {
    /**
     * Texto exibido no label do botão de ação primária da modal.
     * @type {?|undefined}
     */
    PoLookupLiterals.prototype.modalPrimaryActionLabel;
    /**
     * Texto exibido no label do botão de ação secundária da modal.
     * @type {?|undefined}
     */
    PoLookupLiterals.prototype.modalSecondaryActionLabel;
    /**
     * Texto exibido no placeholder do input da modal.
     * @type {?|undefined}
     */
    PoLookupLiterals.prototype.modalPlaceholder;
    /**
     * Texto exibido quando não existem colunas definidas para a tabela.
     * @type {?|undefined}
     */
    PoLookupLiterals.prototype.modalTableNoColumns;
    /**
     * Texto exibido quando não existem itens para serem exibidos na tabela.
     * @type {?|undefined}
     */
    PoLookupLiterals.prototype.modalTableNoData;
    /**
     * Texto exibido enquanto uma requisição está sendo executada para carregar dados na tabela.
     * @type {?|undefined}
     */
    PoLookupLiterals.prototype.modalTableLoadingData;
    /**
     * Label do `button` que deve carregar mais resultados na tabela, ou seja, exibir mais itens.
     * @type {?|undefined}
     */
    PoLookupLiterals.prototype.modalTableLoadMoreData;
    /**
     * Texto exibido no título da modal.
     * @type {?|undefined}
     */
    PoLookupLiterals.prototype.modalTitle;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoResponseApi
 *
 * \@usedBy PoLookupComponent
 * @record
 */
function PoLookupResponseApi() { }

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoMultiselectComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-multiselect`.
 * @record
 */
function PoMultiselectLiterals() { }
if (false) {
    /**
     * Texto exibido quando não houver dados encontrados na busca.
     * @type {?|undefined}
     */
    PoMultiselectLiterals.prototype.noData;
    /**
     * Texto do *placeholder* do campo de busca.
     * @type {?|undefined}
     */
    PoMultiselectLiterals.prototype.placeholderSearch;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoMultiselectComponent
 *
 * \@description
 *
 * Interface dos itens da coleção que será exibida no dropdown do po-multiselect.
 * @record
 */
function PoMultiselectOption() { }
if (false) {
    /**
     * Label exibido nos itens da lista.
     * @type {?}
     */
    PoMultiselectOption.prototype.label;
    /**
     * Valor do objeto que será atribuído ao model.
     * @type {?}
     */
    PoMultiselectOption.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoRadioGroupComponent
 *
 * \@description
 *
 * Interface para as ações do componente po-radio-group.
 * @record
 */
function PoRadioGroupOption() { }
if (false) {
    /**
     * Texto do radio.
     * @type {?}
     */
    PoRadioGroupOption.prototype.label;
    /**
     * Valor do radio.
     * @type {?}
     */
    PoRadioGroupOption.prototype.value;
    /**
     * Desabilita o radio.
     * @type {?|undefined}
     */
    PoRadioGroupOption.prototype.disabled;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoSelectComponent
 *
 * \@description
 *
 * Interface da coleções de itens que deve ser informado no componente po-select
 * @record
 */
function PoSelectOption() { }
if (false) {
    /**
     * Label a ser utilizada nos itens da lista.
     * @type {?}
     */
    PoSelectOption.prototype.label;
    /**
     * Valor do objeto que será atribuído ao model.
     * @type {?}
     */
    PoSelectOption.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoUploadComponent
 *
 * \@description
 *
 * Interface que define as restrições dos arquivos a serem selecionados com base em regras predefinidas
 * para o seu tamanho, extensão e quantidade.
 * @record
 */
function PoUploadFileRestrictions() { }
if (false) {
    /**
     * Extensões permitidas de arquivos que serão enviados ao servidor, devendo ser informada uma coleção de extensões, por exemplo:
     * ```
     *  allowedExtensions = ['.png', '.jpg', '.pdf'];
     * ```
     * @type {?|undefined}
     */
    PoUploadFileRestrictions.prototype.allowedExtensions;
    /**
     * Quantidade máxima de arquivos para o *upload*.
     *
     * > Esta propriedade será válida somente se a propriedade `p-multiple` estiver habilitada e seu valor for maior do que zero.
     * @type {?|undefined}
     */
    PoUploadFileRestrictions.prototype.maxFiles;
    /**
     * Tamanho máximo do arquivo a ser enviado ao servidor.
     *
     * Deve ser informado um valor em *bytes*, por exemplo: `31457280` (30MB).
     *
     * > Por padrão o valor é `30 MB`.
     * @type {?|undefined}
     */
    PoUploadFileRestrictions.prototype.maxFileSize;
    /**
     * Tamanho mínimo em *bytes* do arquivo que será enviado ao servidor.
     *
     * > Por padrão o valor é `0`.
     * @type {?|undefined}
     */
    PoUploadFileRestrictions.prototype.minFileSize;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoUploadComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-upload`.
 * @record
 */
function PoUploadLiterals() { }
if (false) {
    /**
     * @deprecated 3.X.X
     * \@description
     *
     * **Deprecated**
     *
     * Texto exibido no label para cancelar o envio.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.cancel;
    /**
     * @deprecated 3.X.X
     * \@description
     *
     * **Deprecated**
     *
     * Texto exibido no label para excluir o arquivo.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.deleteFile;
    /**
     * Texto indicativo para a área onde os arquivos devem ser arrastados quando utilizada a propriedade `p-drag-drop`.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.dragFilesHere;
    /**
     * Texto indicativo para a área onde os diretórios devem ser arrastados quando utilizada a propriedade `p-drag-drop`.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.dragFoldersHere;
    /**
     * Texto indicativo para a área onde os arquivos devem ser soltos quando utilizada a propriedade `p-drag-drop`
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.dropFilesHere;
    /**
     * Texto indicativo para a área onde os diretórios devem ser soltos quando utilizada a propriedade `p-drag-drop`.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.dropFoldersHere;
    /**
     * Parâmetro *files* para o texto de exibição quando arrastado um arquivo para um local inválido com a opção de *dragDrop*.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.files;
    /**
     * Parâmetro *folders* para o texto de exibição quando arrastado um arquivo para um local inválido com a opção de *dragDrop*.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.folders;
    /**
     * Texto exibido caso o usuário arrastar um arquivo para um local inválido ao utilizar a opção de *dragDrop*.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.invalidDropArea;
    /**
     * Texto exibido no label do botão de seleção dos arquivos.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.selectFile;
    /**
     * Texto exibido no label do botão de seleção dos arquivos ao utilizar a propriedade `p-multiple`.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.selectFiles;
    /**
     * Texto exibido no label do botão de seleção dos arquivos ao utilizar a propriedade `p-directory`.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.selectFolder;
    /**
     * Texto utilizado para indicar a possibilidade de seleção de arquivos na área onde podem ser arrastados os arquivos
     * ao utilizar a opção de *dragDrop*.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.selectFilesOnComputer;
    /**
     * Texto utilizado para indicar a possibilidade de seleção de diretório na área onde podem ser arrastados os arquivos
     * ao utilizar a opção de *dragDrop*.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.selectFolderOnComputer;
    /**
     * Texto exibido no label do botão para iniciar o envio dos arquivos.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.startSending;
    /**
     * @deprecated 3.X.X
     * \@description
     *
     * **Deprecated**
     *
     * Texto exibido no label para tentar novamente.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.tryAgain;
    /**
     * Texto a ser exibido quando ocorrer erro no envio do arquivo.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.errorOccurred;
    /**
     * Texto a ser exibido quando o envio do arquivo for realizado com sucesso.
     * @type {?|undefined}
     */
    PoUploadLiterals.prototype.sentWithSuccess;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoGridComponent
 *
 * \@description
 *
 * Ações executadas durante a manipulação das linhas do grid.
 * @record
 */
function PoGridRowActions() { }
if (false) {
    /**
     * Método executado após uma linha do grid ser removida.
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.afterRemove;
    /**
     * \@description
     *
     * Método executado após uma linha do grid ser salva, ao ser executado, o método irá receber um objeto com os dados atualizados.
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.afterSave;
    /**
     * \@description
     *
     * Método executado antes de uma nova linha ser inserida no grid, se o método retornar algo diferente de `true` a ação
     * será cancelada e a linha não será inserida.
     *
     * Ao ser executado o método irá receber a referência do objeto que será inserido, dessa forma é possível informar valores
     * para esse objeto.
     *
     * ```
     *  rowActions: PoGridRowActions = {
     *    beforeInsert: this.onBeforeInsert.bind(this);
     *    ...
     *  };
     *
     *  // Inicia a linha já com as propriedades `name` e `created` preenchidas.
     *  onBeforeInsert(row: any) {
     *    row.name = 'Fulano';
     *    row.created = '2018-20-12';
     *    ...
     *
     *    return true;
     *  }
     * ```
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.beforeInsert;
    /**
     * \@description
     *
     * Método executado antes de uma linha ser removida do grid, ao ser executado, o método irá receber uma cópia do objeto
     * com os dados da linha que será removida, se o método retornar algo diferente de `true` a ação será cancelada e a linha
     * não será removida.
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.beforeRemove;
    /**
     * \@description
     *
     * Método executado antes de uma linha ser atualizada, ao ser executado, o método irá receber um objeto com os dados atualizados
     * e um objeto com uma cópia dos dados originais, se o método retornar algo diferente de `true` a ação será cancelada e
     * a linha não será atualizada permanecendo em edição / inserção.
     *
     * > Caso não seja permitido a atualização da linha, a sugestão é que seja apresentada uma mensagem ao usuário informando
     * > o motivo.
     *
     * ```
     *  rowActions: PoGridRowActions = {
     *    beforeSave: this.onBeforeSave.bind(this);
     *    ...
     *  };
     *
     *  onBeforeSave(updatedRow: any, originalRow: any) {
     *    // Verifica se a propriedade `name` foi alterada.
     *    if (updatedRow.name !== originalRow.name) {
     *      return false;
     *    }
     *
     *    // Verifica se é menor de idade
     *    if (updatedRow.age < 18) {
     *      return false;
     *    }
     *    ...
     *
     *    updatedRow.updated = '2018-20-12';
     *
     *    return true;
     *  }
     * ```
     * @type {?|undefined}
     */
    PoGridRowActions.prototype.beforeSave;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoListViewComponent
 *
 * \@description
 *
 * Interface que define as ações do componente `po-list-view`.
 * @record
 */
function PoListViewAction() { }
if (false) {
    /**
     * Rótulo da ação.
     * @type {?}
     */
    PoListViewAction.prototype.label;
    /**
     * Ação que será executada, sendo possível passar o nome ou a referência da função.
     * @type {?|undefined}
     */
    PoListViewAction.prototype.action;
    /**
     * \@description
     *
     * Ícone que será exibido ao lado esquerdo do rótulo.
     *
     * > Veja os valores válidos na [Biblioteca de ícones](/guides/icons).
     * @type {?|undefined}
     */
    PoListViewAction.prototype.icon;
    /**
     * Atribui uma linha separadora acima do item.
     *
     * > Pode ser utilizado apenas com 3 ou mais ações.
     * @type {?|undefined}
     */
    PoListViewAction.prototype.separator;
    /**
     * Função que deve retornar um booleano para habilitar ou desabilitar a ação para o registro selecionado.
     *
     * Também é possível informar diretamente um valor booleano que vai habilitar ou desabilitar a ação para todos os registros.
     * @type {?|undefined}
     */
    PoListViewAction.prototype.disabled;
    /**
     * \@description
     *
     * Define a cor do item, sendo `default` o padrão.
     *
     * Valores válidos:
     *  - `default`
     *  - `danger`
     * @type {?|undefined}
     */
    PoListViewAction.prototype.type;
    /**
     * URL utilizada no redirecionamento das páginas.
     *
     * > Pode ser utilizado apenas com 3 ou mais ações.
     * @type {?|undefined}
     */
    PoListViewAction.prototype.url;
    /**
     * Define se a ação está selecionada.
     *
     * > Pode ser utilizado apenas com 3 ou mais ações.
     * @type {?|undefined}
     */
    PoListViewAction.prototype.selected;
    /**
     * \@description
     *
     * Define se a ação será visível.
     *
     * > Caso o valor não seja especificado a ação será visível.
     * @type {?|undefined}
     */
    PoListViewAction.prototype.visible;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoListViewComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-list-view`.
 * @record
 */
function PoListViewLiterals() { }
if (false) {
    /**
     * Rótulo do botão que oculta os detalhes do item.
     * @type {?|undefined}
     */
    PoListViewLiterals.prototype.hideDetails;
    /**
     * Rótulo do botão que deve carregar mais resultados.
     * @type {?|undefined}
     */
    PoListViewLiterals.prototype.loadMoreData;
    /**
     * Rótulo exibido quando não existem itens para serem exibidos na lista.
     * @type {?|undefined}
     */
    PoListViewLiterals.prototype.noData;
    /**
     * Rótulo do `checkbox` da opção de selecionar todos.
     * @type {?|undefined}
     */
    PoListViewLiterals.prototype.selectAll;
    /**
     * Rótulo do botão que exibe os detalhes do item.
     * @type {?|undefined}
     */
    PoListViewLiterals.prototype.showDetails;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoMenuPanelComponent
 *
 * \@description
 *
 * Interface para os itens de menu do componente `po-menu-panel`.
 *
 * @record
 */
function PoMenuPanelItem() { }
if (false) {
    /**
     * Ação personalizada para clique do item de menu.
     * @type {?|undefined}
     */
    PoMenuPanelItem.prototype.action;
    /**
     * Ícone para o item de menu, os [ícones aceitos](/guides/icons) são os definidos no guia de estilo da Portinari.
     * @type {?}
     */
    PoMenuPanelItem.prototype.icon;
    /**
     * Texto do item de menu.
     * @type {?}
     */
    PoMenuPanelItem.prototype.label;
    /**
     * Link para redirecionamento no click do item do menu, podendo ser um link interno ou externo.
     * @type {?|undefined}
     */
    PoMenuPanelItem.prototype.link;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoNavbarComponent
 *
 * \@description
 *
 * Interface para lista de ações dos ícones do componente.
 * @record
 */
function PoNavbarIconAction() { }
if (false) {
    /**
     * Ação que será executada, deve-se passar a referência da função.
     *
     * > Para que a função seja executada no contexto do elemento filho o mesmo deve ser passado utilizando *bind*.
     *
     * Exemplo: `action: this.myFunction.bind(this)`
     * @type {?|undefined}
     */
    PoNavbarIconAction.prototype.action;
    /**
     * \@description
     *
     * Ícone exibido.
     *
     * > Veja os valores válidos na [Biblioteca de ícones](/guides/icons).
     * @type {?|undefined}
     */
    PoNavbarIconAction.prototype.icon;
    /**
     * Rótulo da ação, será exibido quando o mesmo for aberto no popup.
     * @type {?}
     */
    PoNavbarIconAction.prototype.label;
    /**
     * link utilizado no redirecionamento das páginas.
     * @type {?|undefined}
     */
    PoNavbarIconAction.prototype.link;
    /**
     * Mensagem exibida ao passar o mouse no ícone quando o mesmo estiver na navbar.
     * @type {?|undefined}
     */
    PoNavbarIconAction.prototype.tooltip;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoNavbarComponent
 *
 * \@description
 *
 * Interface para lista de items do componente.
 * @record
 */
function PoNavbarItem() { }
if (false) {
    /**
     * Ação que será executada, deve-se passar a referência da função.
     *
     * > Para que a função seja executada no contexto do elemento filho o mesmo deve ser passado utilizando *bind*.
     *
     * Exemplo: `action: this.myFunction.bind(this)`
     * @type {?|undefined}
     */
    PoNavbarItem.prototype.action;
    /**
     * Rótulo do item.
     * @type {?}
     */
    PoNavbarItem.prototype.label;
    /**
     * Link utilizado no redirecionamento das páginas.
     * @type {?|undefined}
     */
    PoNavbarItem.prototype.link;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * Interface para as ações dos componentes po-page-default e po-page-list.
 *
 * > As propriedades `selected`, `separator`, `type` e `visible` serão vistas a partir da terceira ação e somente quando
 * definir quatro ações ou mais.
 *
 * \@docsExtends PoPopupAction
 *
 * \@usedBy PoPageDefaultComponent, PoPageListComponent
 * @record
 */
function PoPageAction() { }

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageComponent
 *
 * \@description
 *
 * Interface para o atributo `filter` do componente `po-page`.
 * @record
 */
function PoPageDefault() { }
if (false) {
    /**
     * Array de objetos que implementam a interface `PoPageAction`.
     * @type {?|undefined}
     */
    PoPageDefault.prototype.actions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDetailComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-page-detail`.
 * @record
 */
function PoPageDetailLiterals() { }
if (false) {
    /**
     * Label da ação `back`.
     * @type {?|undefined}
     */
    PoPageDetailLiterals.prototype.back;
    /**
     * Label da ação `edit`.
     * @type {?|undefined}
     */
    PoPageDetailLiterals.prototype.edit;
    /**
     * Label da ação `remove`.
     * @type {?|undefined}
     */
    PoPageDetailLiterals.prototype.remove;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageEditComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-page-edit`.
 * @record
 */
function PoPageEditLiterals() { }
if (false) {
    /**
     * Label da ação `cancel`.
     * @type {?|undefined}
     */
    PoPageEditLiterals.prototype.cancel;
    /**
     * Label da ação `save`.
     * @type {?|undefined}
     */
    PoPageEditLiterals.prototype.save;
    /**
     * Label da ação `saveNew`.
     * @type {?|undefined}
     */
    PoPageEditLiterals.prototype.saveNew;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageListComponent
 *
 * \@description
 *
 * Interface para o atributo `filter` do componente `po-page-list`.
 * @record
 */
function PoPageFilter() { }
if (false) {
    /**
     * Nome da ação ou a referência da mesma a ser executada.
     * @type {?|undefined}
     */
    PoPageFilter.prototype.action;
    /**
     * \@description
     *
     * Nome da ação ou a referência da mesma a ser executada quando for disparado o
     * evento de *click* através do rótulo **Busca Avançada**.
     * @type {?|undefined}
     */
    PoPageFilter.prototype.advancedAction;
    /**
     * Nome do `ngModel` do campo de filtro.
     * @type {?|undefined}
     */
    PoPageFilter.prototype.ngModel;
    /**
     * Texto de instrução exibido dentro do campo de filtro.
     * @type {?|undefined}
     */
    PoPageFilter.prototype.placeholder;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageListComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-page-list`.
 * @record
 */
function PoPageListLiterals() { }
if (false) {
    /**
     * Legenda do `po-dropdown` de ações.
     * @type {?|undefined}
     */
    PoPageListLiterals.prototype.otherActions;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageComponent
 *
 * \@description
 *
 * Interface para o atributo `filter` do componente `po-page`.
 * @record
 */
function PoPage() { }
if (false) {
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?|undefined}
     */
    PoPage.prototype.breadcrumb;
    /**
     * Título da página.
     * @type {?|undefined}
     */
    PoPage.prototype.title;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPopupComponent
 *
 * \@description
 *
 * Interface para lista de ações do componente.
 * @record
 */
function PoPopupAction() { }
if (false) {
    /**
     * Rótulo da ação.
     * @type {?}
     */
    PoPopupAction.prototype.label;
    /**
     * Ação que será executada, sendo possível passar o nome ou a referência da função.
     *
     * > Para que a função seja executada no contexto do elemento filho o mesmo deve ser passado utilizando *bind*.
     *
     * Exemplo: `action: this.myFunction.bind(this)`
     * @type {?|undefined}
     */
    PoPopupAction.prototype.action;
    /**
     * \@description
     *
     * Ícone que será exibido ao lado esquerdo do rótulo.
     *
     * > Veja os valores válidos na [Biblioteca de ícones](/guides/icons).
     * @type {?|undefined}
     */
    PoPopupAction.prototype.icon;
    /**
     * Atribui uma linha separadora acima do item.
     * @type {?|undefined}
     */
    PoPopupAction.prototype.separator;
    /**
     * Função que deve retornar um booleano para habilitar ou desabilitar a ação para o registro selecionado.
     *
     * Também é possível informar diretamente um valor booleano que vai habilitar ou desabilitar a ação para todos os registros.
     * @type {?|undefined}
     */
    PoPopupAction.prototype.disabled;
    /**
     * \@description
     *
     * Define a cor do item, sendo `default` o padrão.
     *
     * Valores válidos:
     *  - `default`
     *  - `danger`
     * @type {?|undefined}
     */
    PoPopupAction.prototype.type;
    /**
     * URL utilizada no redirecionamento das páginas.
     * @type {?|undefined}
     */
    PoPopupAction.prototype.url;
    /**
     * Define se a ação está selecionada.
     * @type {?|undefined}
     */
    PoPopupAction.prototype.selected;
    /**
     * \@description
     *
     * Define se a ação será visível.
     *
     * > Caso o valor não seja especificado a ação será visível.
     * @type {?|undefined}
     */
    PoPopupAction.prototype.visible;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoSlideComponent
 *
 * \@description
 *
 * Interface que define cada objeto do `PoSlideItem`.
 * @record
 */
function PoSlideItem() { }
if (false) {
    /**
     * Ação executada ao clicar no slide caso não tenha link definido.
     * @type {?|undefined}
     */
    PoSlideItem.prototype.action;
    /**
     * Define o caminho da imagem.
     * @type {?}
     */
    PoSlideItem.prototype.image;
    /**
     * Texto que aparece quando a imagem não é encontrada.
     * @type {?|undefined}
     */
    PoSlideItem.prototype.alt;
    /**
     * Link interno ou externo que será aberto ao clicar no slide.
     * @type {?|undefined}
     */
    PoSlideItem.prototype.link;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoStepperComponent
 *
 * \@description
 *
 * Interface para definição dos *steps* do componente `po-stepper` quando utilizada a propriedade `p-steps`.
 * @record
 */
function PoStepperItem() { }
if (false) {
    /**
     * Texto do item do stepper.
     * @type {?}
     */
    PoStepperItem.prototype.label;
    /**
     * Define o estado de exibição do *step*.
     * @type {?|undefined}
     */
    PoStepperItem.prototype.status;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoTabComponent
 *
 * \@description
 *
 * Interface que define o `po-tab`.
 * @record
 */
function PoTab() { }
if (false) {
    /**
     * \@optional
     *
     * \@description
     *
     * Ativa a aba exibindo seu conteúdo.
     *
     * > Sugere-se utilizar na aba de conteúdo inicial.
     * @type {?|undefined}
     */
    PoTab.prototype.active;
    /**
     * \@optional
     *
     * \@description
     *
     * Método disparado ao clicar na aba.
     * @type {?|undefined}
     */
    PoTab.prototype.click;
    /**
     * \@optional
     *
     * \@description
     *
     * Desabilita a aba impossibilitando que fique ativa.
     * @type {?|undefined}
     */
    PoTab.prototype.disabled;
    /**
     * \@optional
     *
     * \@description
     *
     * Oculta a aba.
     * @type {?|undefined}
     */
    PoTab.prototype.hide;
    /**
     * Rótulo da aba.
     * @type {?}
     */
    PoTab.prototype.label;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPopupAction
 *
 * \@usedBy PoToolbarComponent
 * @record
 */
function PoToolbarAction() { }

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoToolbarComponent
 *
 * \@description
 *
 * Interface que define o perfil do `PoToolbarComponent`.
 * @record
 */
function PoToolbarProfile() { }
if (false) {
    /**
     * Define o caminho da imagem do perfil.
     * @type {?|undefined}
     */
    PoToolbarProfile.prototype.avatar;
    /**
     * Define um texto com menor destaque ao lado da imagem do perfil, como por exemplo o e-mail de usuário.
     * @type {?|undefined}
     */
    PoToolbarProfile.prototype.subtitle;
    /**
     * Define um texto com maior destaque ao lado da imagem do perfil, como por exemplo o nome de usuário.
     * @type {?}
     */
    PoToolbarProfile.prototype.title;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Interface que representa a estrutura de uma resposta de sucesso HTTP.
 *
 * > Utilizada apenas quando a resposta incluir uma coleção de itens.
 * @record
 */
function PoResponseApi() { }
if (false) {
    /**
     * Lista de itens retornados.
     * @type {?}
     */
    PoResponseApi.prototype.items;
    /**
     * Indica se existe uma próxima página com mais registros para aquela coleção de itens.
     * @type {?}
     */
    PoResponseApi.prototype.hasNext;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoDialogService
 *
 * \@description
 *
 * Interface para definição das literais usadas no serviço `po-dialog` para o tipo alerta.
 * @record
 */
function PoDialogAlertLiterals() { }
if (false) {
    /**
     * Rótulo do botão de "Ok".
     * @type {?|undefined}
     */
    PoDialogAlertLiterals.prototype.ok;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoDialogService
 *
 * \@description
 *
 * Interface para definição das literais usadas no serviço `po-dialog` para o tipo confirmação.
 * @record
 */
function PoDialogConfirmLiterals() { }
if (false) {
    /**
     * Rótulo do botão de "Cancelar".
     * @type {?|undefined}
     */
    PoDialogConfirmLiterals.prototype.cancel;
    /**
     * Rótulo do botão de "Confirmar".
     * @type {?|undefined}
     */
    PoDialogConfirmLiterals.prototype.confirm;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@usedBy PoDialogService
 *
 * \@description
 *
 * Interface para o título e a mensagem do serviço po-dialog.
 * @record
 */
function PoDialogOptions() { }
if (false) {
    /**
     * Título da caixa de diálogo.
     * @type {?}
     */
    PoDialogOptions.prototype.title;
    /**
     * Mensagem da caixa de diálogo.
     * @type {?}
     */
    PoDialogOptions.prototype.message;
}
/**
 * \@usedBy PoDialogService
 *
 * \@docsExtends PoDialogOptions
 *
 * \@description
 *
 * Interface com as propriedades da caixa de diálogo de alerta do serviço po-dialog.
 * @record
 */
function PoDialogAlertOptions() { }
if (false) {
    /**
     * Ação executada ao fechar o alerta pelo botão "Ok".
     * @type {?|undefined}
     */
    PoDialogAlertOptions.prototype.ok;
    /**
     * Objeto com as literais usadas no `po-dialog` do tipo alerta.
     *
     * Para customizar o *label*, pode ser enviado o objeto da seguinte forma:
     *
     * ```typescript
     * this.poDialog.alert({
     *   literals: { ok: 'Close' },
     *   title: 'Info message',
     *   message: 'Message body dialog'
     * });
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     * @type {?|undefined}
     */
    PoDialogAlertOptions.prototype.literals;
}
/**
 * \@usedBy PoDialogService
 *
 * \@docsExtends PoDialogOptions
 *
 * \@description
 *
 * Interface com as propriedades da caixa de diálogo de confirmação do serviço po-dialog.
 * @record
 */
function PoDialogConfirmOptions() { }
if (false) {
    /**
     * Ação de confirmação da caixa de diálogo.
     * @type {?}
     */
    PoDialogConfirmOptions.prototype.confirm;
    /**
     * Ação de cancelamento da caixa de diálogo.
     * @type {?|undefined}
     */
    PoDialogConfirmOptions.prototype.cancel;
    /**
     * Objeto com as literais usadas no `po-dialog` do tipo confirmação.
     *
     * Para customizar os *labels*, pode ser enviado o objeto da seguinte forma:
     *
     * ```typescript
     * this.poDialog.confirm({
     *   literals: { cancel: 'No', confirm: 'Yes' },
     *   title: 'Confirm',
     *   message: 'Message body dialog',
     *   confirm: () => this.confirmOperation()
     * });
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     * @type {?|undefined}
     */
    PoDialogConfirmOptions.prototype.literals;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * <a id="poI18nConfig"></a>
 *
 * Interface para a configuração do módulo `PoI18nModule`.
 *
 * \@usedBy PoI18nModule
 * @record
 */
function PoI18nConfig() { }
if (false) {
    /**
     * Configurações padrões.
     * @type {?|undefined}
     */
    PoI18nConfig.prototype.default;
    /**
     * Deve ser atribuído a esta propriedade um objeto que contenha os contextos com os
     * idiomas suportados e suas respectivas traduções literais,
     * como também informar a propriedade `url` onde pode ser informado o serviço que retorne as literais traduzidas.
     *
     * Portanto podemos utilizar constantes, onde devemos informar o nome do contexto recebendo um objeto com os
     * idiomas suportados e o arquivo de literais, por exemplo:
     * ```
     *  import { generalEn } from './i18n/general-en';
     *  import { generalPt } from './i18n/general-pt';
     * ...
     *  general: {
     *    pt: generalPt,
     *    en: generalEn
     *  }
     * ...
     * ```
     *
     * E como informado, podemos utilizar a propriedade `url` que deve receber a URL do serviço que
     * retorne as literais traduzidas, por exemplo:
     * ```
     *   hcm: {
     *     url: 'http://localhost:3000/api/translations/hcm/'
     *   }
     * ```
     *
     * Ao optar por utilizar um serviço, deverá ser definida a URL específica do contexto,
     * como nos exemplos abaixo:
     * ```
     *  http://server:port/api/translations/crm
     *  http://server:port/api/translations/general
     * ```
     *
     * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
     * - `language`: o idioma será sempre passado por parâmetro, sendo recomendado a utilização do padrão suportado
     * pelos navegadores (`pt-br`, `en-us`);
     * - `literals`: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
     * serviço deve retornar todas as literais do idioma.
     *
     * Exemplos de requisição:
     * ```
     *  http://server:port/api/translations/crm?language=pt-br
     *  http://server:port/api/translations/crm?language=pt-br&literals=add,remove,text
     * ```
     *
     * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.
     *
     * Existe também a possibilidade de utilizar ambos, onde será feito a busca das literais nas constantes e depois efetua
     * a busca no serviço, com isso as constantes podem servir como *backup* caso o serviço esteja indisponível, por exemplo:
     *
     * ```
     *  import { generalEn } from './i18n/general-en';
     *  import { generalPt } from './i18n/general-pt';
     * ...
     *  general: {
     *    pt: generalPt,
     *    en: generalEn,
     *    url: 'http://localhost:3000/api/translations/hcm/'
     *  }
     * ...
     * ```
     * > Caso a constante contenha alguma literal que o serviço não possua será utilizado a literal da constante.
     * @type {?}
     */
    PoI18nConfig.prototype.contexts;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * <a id="poI18nConfigDefault"></a>
 *
 * Interface para a configuração padrão do módulo PoI18nModule.
 *
 * \@usedBy PoI18nModule
 * @record
 */
function PoI18nConfigDefault() { }
if (false) {
    /**
     * Idioma que será buscado por padrão pelo serviço.
     *
     * Esta definição somente será utilizada se não tiver sido definido o idioma através do método
     * [`setLanguage()`](documentation/po-i18n#setLanguage). Caso nenhum dos dois tenha sido configurado, será utilizado
     * o idioma do navegador.
     * @type {?|undefined}
     */
    PoI18nConfigDefault.prototype.language;
    /**
     * Define o contexto que será buscado por padrão pelo serviço.
     *
     * > Caso não seja especificado será usado o primeiro contexto da lista de contextos.
     * @type {?|undefined}
     */
    PoI18nConfigDefault.prototype.context;
    /**
     * Define se as literais buscadas no serviço deverão ser armazenadas no cache do
     * navegador, lembrando que cada navegador possui sua própria limitação de cache.
     *
     * Para contextos com grande quantidade de literais, recomenda-se o uso de constantes ao invés de serviços, desta forma
     * não será usado o cache do navegador.
     *
     * Por padrão não utiliza.
     * @type {?|undefined}
     */
    PoI18nConfigDefault.prototype.cache;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Interface para o método `getLiterals()` do serviço PoI18nService.
 *
 * \@usedBy PoI18nService
 * @record
 */
function PoI18nLiterals() { }
if (false) {
    /**
     * Contexto utilizado na busca das literais.
     * @type {?|undefined}
     */
    PoI18nLiterals.prototype.context;
    /**
     * Idioma a ser buscado.
     * @type {?|undefined}
     */
    PoI18nLiterals.prototype.language;
    /**
     * Lista das literais.
     * @type {?|undefined}
     */
    PoI18nLiterals.prototype.literals;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var I18N_CONFIG = new InjectionToken('I18N_CONFIG');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O serviço `PoI18nService` possibilita utilizar múltiplos idiomas e contextos na aplicação.
 *
 * > Antes da utilização do serviço, é necessário realizar a
 * [importação e configuração do módulo `PoI18nModule`](/documentation/po-i18n#i18n-config).
 *
 * **Utilização do serviço `PoI18nService`:**
 *
 * Para utilizar o serviço basta importá-lo nos componentes que necessitarem de literais e fazer a injeção de
 * dependência no construtor:
 * ```
 *  import { PoI18nService } from '\@portinari/portinari-ui';
 *  ...
 *  constructor(private poI18nService: PoI18nService) { }
 *  ...
 * ```
 *
 * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo
 * método `getLiterals()`.
 *
 * > O método `getLiterals()` pode receber um objeto do tipo da interface `PoI18nLiterals` como parâmetro,
 * porém, nenhuma das propriedades são obrigatórias. Caso nenhum parâmetro seja passado, serão buscadas
 * todas as literais do contexto definido com padrão, no idioma definido como padrão.
 *
 * Exemplos de requisição:
 * ```
 * literals = {};
 * literalsEn = {};
 * literalsCrm = {};
 *
 * constructor(private poI18nService: PoI18nService) {
 *   poI18nService.getLiterals()
 *     .subscribe((literals) => {
 *       this.literals = literals;
 *     });
 *
 *   poI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
 *     .subscribe((literals) => {
 *       this.literalsCrm = literals;
 *     });
 *
 *   poI18nService.getLiterals({language: 'en-us'})
 *     .subscribe((literals) => {
 *       this.literalsEn = literals;
 *     });
 * }
 * ```
 *
 * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
 * seguinte código:
 *
 * <pre ngNonBindable>
 * {{ literals?.add }}
 * {{ literals?.remove }}
 * </pre>
 *
 * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o *pipe* `poI18n`.
 * É possível informar propriedades do componente como `name` e `nickname` ou
 * informar o valor diretamente com "" ou número, conforme o exemplo abaixo:
 *
 * <pre ngNonBindable>
 * {{ literals?.people | poI18n:[120] }}
 * {{ literals?.greeting | poI18n:[name, nickname] }}
 * {{ literals?.greeting | poI18n:["Brad", "Green"] }}
 * </pre>
 *
 * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
 *
 * ### Teste unitário
 *
 * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `PoI18nService`:
 *
 * ```
 * import { async, TestBed } from '\@angular/core/testing';
 * import { HttpClientTestingModule } from '\@angular/common/http/testing';
 *
 * import { PoI18nModule } from '\@portinari/portinari-ui';
 *
 * import { AppComponent } from './app.component';
 *
 * describe('AppComponent', () => {
 *   const anotherPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const generalPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const config = {
 *     default: {
 *       language: 'pt-BR',
 *       context: 'general',
 *       cache: false
 *     },
 *     contexts: {
 *       general: {
 *         'pt-br': generalPT
 *       },
 *       another: {
 *         'pt-br': anotherPT
 *       }
 *     }
 *   };
 *
 *   beforeEach(async(() => {
 *     TestBed.configureTestingModule({
 *       declarations: [
 *         AppComponent
 *       ],
 *       imports: [
 *         HttpClientTestingModule,
 *         PoI18nModule.config(config)
 *       ]
 *     }).compileComponents();
 *   }));
 *
 *   it('should create the app', async(() => {
 *     const fixture = TestBed.createComponent(AppComponent);
 *     const app = fixture.debugElement.componentInstance;
 *
 *     expect(app).toBeTruthy();
 *   }));
 *
 * });
 * ```
 */
var PoI18nBaseService = /** @class */ (function () {
    function PoI18nBaseService(config, http, languageService) {
        this.config = config;
        this.http = http;
        this.languageService = languageService;
        this.varI18n = {};
        this.useCache = false;
        this.servicesContext = {};
        this.setConfig(config);
    }
    /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/po-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`PoI18nConfigDefault`](documentation/po-i18n#poI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     */
    /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/po-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`PoI18nConfigDefault`](documentation/po-i18n#poI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     * @return {?}
     */
    PoI18nBaseService.prototype.getLanguage = /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/po-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`PoI18nConfigDefault`](documentation/po-i18n#poI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     * @return {?}
     */
    function () {
        return this.languageService.getLanguage();
    };
    /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/po-i18n#get-language).
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     */
    /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/po-i18n#get-language).
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     * @return {?}
     */
    PoI18nBaseService.prototype.getShortLanguage = /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/po-i18n#get-language).
     *
     * **Retorno:**
     *
     * `string` com a sigla do idioma padrão.
     * @return {?}
     */
    function () {
        return this.languageService.getShortLanguage();
    };
    /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param language {string} Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     */
    /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param {?} language {string} Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param {?=} reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     * @return {?}
     */
    PoI18nBaseService.prototype.setLanguage = /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param {?} language {string} Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param {?=} reload {boolean} Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     * @return {?}
     */
    function (language, reload) {
        if (!isLanguage(language)) {
            return;
        }
        this.languageService.setLanguage(language);
        if (reload) {
            reloadCurrentPage();
        }
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    PoI18nBaseService.prototype.setConfig = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        // Seta as configurações padrões definidas no importação do módulo
        if (config['default']) {
            this.languageService.setLanguageDefault(config['default']['language']);
            this.contextDefault = (config['default']['context']) ? config['default']['context'] : '';
            this.useCache = (config['default']['cache']) ? config['default']['cache'] : false;
        }
        // Carrega a lista dos contextos e as contantes informadas
        if (config['contexts']) {
            this.setVarI18n(config['contexts']);
            // Se nenhum contexto foi definido como padrão,
            // então define o primeiro contexto
            if (!this.contextDefault) {
                for (var context in config['contexts']) {
                    if (this.config['contexts'].hasOwnProperty(context)) {
                        this.contextDefault = context;
                        break;
                    }
                }
            }
        }
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    PoI18nBaseService.prototype.getLiterals = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        /** @type {?} */
        var language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();
        /** @type {?} */
        var context = (options['context']) ? options['context'] : this.contextDefault;
        /** @type {?} */
        var literals = (options['literals']) ? options['literals'] : [];
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            if (_this.servicesContext[context]) {
                // Faz o processo de busca de um contexto que contém serviço
                _this.getLiteralsFromContextService(language, context, literals, observer);
            }
            else {
                // Faz o processo de busca de um contexto que utiliza constante
                _this.getLiteralsFromContextConstant(language, context, literals, observer);
            }
        }));
    };
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    PoI18nBaseService.prototype.getLiteralsFromContextService = 
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    function (language, context, literals, observer, translations, languageAlternative) {
        if (translations === void 0) { translations = {}; }
        if (languageAlternative === void 0) { languageAlternative = null; }
        // Idioma usado para tentar buscar as literais faltantes
        /** @type {?} */
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // realiza a busca no localStorage e em seguida no serviço
        this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
    };
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    PoI18nBaseService.prototype.getLiteralsLocalStorageAndCache = 
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?} translations
     * @param {?=} languageAlternative
     * @return {?}
     */
    function (language, context, literals, observer, translations, languageAlternative) {
        var _this = this;
        if (languageAlternative === void 0) { languageAlternative = null; }
        /** @type {?} */
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        /** @type {?} */
        var translationTemp;
        // Verifica se usa cache
        if (this.useCache) {
            translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
            if (this.countObject(translationTemp) > 0) {
                this.updateVarI18n(language, context, translationTemp);
                translations = this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
        }
        // Busca do Serviço
        this.getHttpService(this.servicesContext[context], languageSearch, literals)
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response) {
                _this.updateLocalStorage(language, context, response);
                _this.updateVarI18n(language, context, response);
                translationTemp = _this.searchInVarI18n(language, context, literals);
                translations = _this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
            // Se não encontrou todas as literais pesquisadas no idioma
            // Então refaz o processo procurando em português
            if (literals.length > _this.countObject(translations)) {
                if (languageAlternative === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = _this.completeFaultLiterals(language, context, literals, translations);
                    _this.updateLocalStorage(language, context, translations);
                    _this.updateVarI18n(language, context, translations);
                    observer.next(translations);
                }
                else {
                    _this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                }
            }
        }));
    };
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @return {?}
     */
    PoI18nBaseService.prototype.getLiteralsFromContextConstant = 
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} observer
     * @param {?=} translations
     * @return {?}
     */
    function (language, context, literals, observer, translations) {
        if (translations === void 0) { translations = {}; }
        translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma, procura em português
            if (literals.length > this.countObject(translations)) {
                if (language === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
            }
        }
        else {
            // Se não encontrar nenhuma literal, procura em português
            if (this.countObject(translations) === 0 && language !== 'pt-br') {
                this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
            }
            // caso não informar literais e não houver tradução
            observer.next(translations);
            observer.complete();
        }
    };
    // Busca pelas literais no local storage
    // Busca pelas literais no local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    PoI18nBaseService.prototype.searchInLocalStorage = 
    // Busca pelas literais no local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    function (language, context, literals) {
        /** @type {?} */
        var translations = {};
        if (literals.length > 0) {
            for (var i = 0; i < literals.length; i++) {
                /** @type {?} */
                var literal = literals[i];
                /** @type {?} */
                var translation = localStorage.getItem(language + '-' + context + '-' + literal);
                if (translation) {
                    translations[literal] = translation;
                }
            }
        }
        return translations;
    };
    // Busca pelas literais na variável do serviço
    // Busca pelas literais na variável do serviço
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    PoI18nBaseService.prototype.searchInVarI18n = 
    // Busca pelas literais na variável do serviço
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @return {?}
     */
    function (language, context, literals) {
        /** @type {?} */
        var translations = {};
        if (this.varI18n[language] && this.varI18n[language][context]) {
            /** @type {?} */
            var content = this.varI18n[language][context];
            if (literals.length > 0) {
                // Busca as literais desejadas
                for (var i = 0; i < literals.length; i++) {
                    /** @type {?} */
                    var literal = literals[i];
                    if (content.hasOwnProperty(literal)) {
                        translations[literal] = content[literal];
                    }
                }
            }
            else {
                // Atribui todas as literais
                translations = __assign({}, content);
            }
        }
        return translations;
    };
    // Atualiza o local storage
    // Atualiza o local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    PoI18nBaseService.prototype.updateLocalStorage = 
    // Atualiza o local storage
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function (language, context, data) {
        if (this.useCache) {
            for (var literal in data) {
                if (data.hasOwnProperty(literal)) {
                    localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
                }
            }
        }
    };
    // Atualiza a variável local com as literais com os objetos passados na configuração
    // Atualiza a variável local com as literais com os objetos passados na configuração
    /**
     * @private
     * @param {?} contexts
     * @return {?}
     */
    PoI18nBaseService.prototype.setVarI18n = 
    // Atualiza a variável local com as literais com os objetos passados na configuração
    /**
     * @private
     * @param {?} contexts
     * @return {?}
     */
    function (contexts) {
        // Percorre os contextos
        for (var context in contexts) {
            if (contexts.hasOwnProperty(context)) {
                /** @type {?} */
                var contextContent = contexts[context];
                // Percorre os idiomas dentro do contexto
                for (var language in contextContent) {
                    if (contextContent.hasOwnProperty(language)) {
                        /** @type {?} */
                        var languageContent = contextContent[language];
                        if (language === 'url') {
                            this.servicesContext[context] = languageContent;
                        }
                        else {
                            this.updateVarI18n(language, context, languageContent);
                        }
                    }
                }
            }
        }
    };
    // Atualiza a variável local com as literais idioma e contexto
    // Atualiza a variável local com as literais idioma e contexto
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    PoI18nBaseService.prototype.updateVarI18n = 
    // Atualiza a variável local com as literais idioma e contexto
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} data
     * @return {?}
     */
    function (language, context, data) {
        var _a;
        language = language.toLowerCase();
        if (!this.varI18n[language]) {
            this.varI18n[language] = (_a = {}, _a[context] = {}, _a);
        }
        if (!this.varI18n[language][context]) {
            this.varI18n[language][context] = {};
        }
        // Cria ou atualiza o contexto dentro do storage
        this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
    };
    /**
     * @private
     * @param {?} url
     * @param {?} language
     * @param {?} literals
     * @return {?}
     */
    PoI18nBaseService.prototype.getHttpService = /**
     * @private
     * @param {?} url
     * @param {?} language
     * @param {?} literals
     * @return {?}
     */
    function (url, language, literals) {
        /** @type {?} */
        var param = '?language=' + language;
        if (literals.length > 0) {
            param += '&literals=' + literals.join();
        }
        // Remove a barra final do endereço
        url = (url.lastIndexOf('/') === url.length - 1) ? url.substr(0, url.length - 1) : url;
        return this.http.get(url + param);
    };
    // Completa com o nome da literais, as que não foram encontradas
    // Completa com o nome da literais, as que não foram encontradas
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} translations
     * @return {?}
     */
    PoI18nBaseService.prototype.completeFaultLiterals = 
    // Completa com o nome da literais, as que não foram encontradas
    /**
     * @private
     * @param {?} language
     * @param {?} context
     * @param {?} literals
     * @param {?} translations
     * @return {?}
     */
    function (language, context, literals, translations) {
        for (var i = 0; i < literals.length; i++) {
            /** @type {?} */
            var literal = literals[i];
            if (!translations[literal]) {
                translations[literal] = literal;
            }
        }
        return translations;
    };
    // Conta os atributos do objeto
    // Conta os atributos do objeto
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    PoI18nBaseService.prototype.countObject = 
    // Conta os atributos do objeto
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Object.keys(obj).length;
    };
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    /**
     * @private
     * @param {?} objPermanent
     * @param {?} obj
     * @return {?}
     */
    PoI18nBaseService.prototype.mergeObject = 
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    /**
     * @private
     * @param {?} objPermanent
     * @param {?} obj
     * @return {?}
     */
    function (objPermanent, obj) {
        return __assign({}, obj, objPermanent);
    };
    /** @nocollapse */
    PoI18nBaseService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [I18N_CONFIG,] }] },
        { type: HttpClient, decorators: [{ type: Inject, args: [HttpClient,] }] },
        { type: PoLanguageService }
    ]; };
    return PoI18nBaseService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoI18nBaseService.prototype.varI18n;
    /**
     * @type {?}
     * @private
     */
    PoI18nBaseService.prototype.contextDefault;
    /**
     * @type {?}
     * @private
     */
    PoI18nBaseService.prototype.useCache;
    /**
     * @type {?}
     * @private
     */
    PoI18nBaseService.prototype.servicesContext;
    /**
     * @type {?}
     * @private
     */
    PoI18nBaseService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    PoI18nBaseService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    PoI18nBaseService.prototype.languageService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoI18nBaseService
 */
var PoI18nService = /** @class */ (function (_super) {
    __extends(PoI18nService, _super);
    function PoI18nService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoI18nService.decorators = [
        { type: Injectable }
    ];
    return PoI18nService;
}(PoI18nBaseService));
// Função usada para retornar instância para o módulo po-i18n.module
/**
 * @param {?} config
 * @param {?} http
 * @param {?} languageService
 * @return {?}
 */
function returnPoI18nService(config, http, languageService) {
    return new PoI18nService(config, http, languageService);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço `PoI18nService` para controle de idiomas com PO.
 *
 * Para utilização do serviço de idiomas `PoI18nService`, deve-se importar este módulo mesmo já havendo importado
 * o módulo `PoModule`. Na importação deve ser invocado o método `config`, informando um objeto que deve implementar
 * a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig) para configuração.
 *
 * <a id="i18n-config"></a>
 * **Exemplo de configuração do módulo do i18n:**
 * ```
 * import { PoI18nConfig } from '\@portinari/portinari-ui';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: PoI18nConfig = {
 *   default: {
 *     language: 'pt-BR',
 *     context: 'general',
 *     cache: true
 *   },
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt,
 *       'en-US': generalEn
 *     },
 *     hcm: {
 *       url: 'http://10.1.1.1/api/translations/hcm/'
 *     }
 *   }
 * };
 *
 * \@NgModule({
 *   declarations: [],
 *   imports: [
 *     PoModule,
 *     PoI18nModule.config(i18nConfig)
 *   ],
 *   bootstrap: [AppComponent]
 * })
 * ```
 *
 * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou
 * de um objeto. Exemplo:
 *
 * Arquivo general-pt.ts
 * ```
 * export const generalPt = {
 *  add: 'Adicionar',
 *  greeting: 'Prazer, {0} {1}',
 *  people: '{0} Pessoas,
 *  remove: 'Remover'
 * }
 * ```
 *
 * Arquivo general-en.ts
 * ```
 * export const generalEn = {
 *  add: 'Add',
 *  greeting: 'Nice to meet you, {0} {1}',
 *  people: '{0} People,
 *  remove: 'Remove'
 * }
 * ```
 *
 * **Exemplo de configuração de contextos usando constantes externas:**
 * ```
 * import { PoI18nConfig } from '\@portinari/portinari-ui';
 *
 * import { generalEn } from './i18n/general-en';
 * import { generalPt } from './i18n/general-pt';
 *
 * const i18nConfig: PoI18nConfig = {
 *   contexts: {
 *     general: {
 *       'pt-BR': generalPt, // constantes em arquivos separados
 *       'en-US': generalEn // constantes em arquivos separados
 *     },
 *     crm: {
 *       url: 'http://10.0.0.1:3000/api/translations/crm'
 *     }
 *   },
 *   default: {}
 * }
 * ```
 *
 * **Exemplo de configuração de um contexto utilizando serviço:**
 *
 * Ao optar por utilizar um serviço para configuração de contexto, deverá ser definida a URL
 * específica do contexto, como nos exemplos abaixo:
 *
 *  - http://10.0.0.1:3000/api/translations/crm
 *  - http://10.0.0.1:3000/api/translations/general
 *
 * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:
 * - **language**: o idioma será sempre passado por parâmetro e é recomendado utilizar uma das linguagens
 * suportadas pelo PO (`pt-br`, `en-us` ou `es-es`).
 * - **literals**: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o
 * serviço deve retornar todas as literais do idioma.
 *
 * Exemplos de requisição:
 *
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br
 *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text
 *
 * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.
 *
 * Além dos contextos, é possível definir as configurações *default* do sistema na configuração do
 * módulo utilizando a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig):
 *
 * **Exemplo de padrões definidos:**
 * ```
 * const i18nConfig: PoI18nConfig = {
 *   contexts: {
 *     general: { }
 *   },
 *   default: {
 *    language: 'pt-BR',
 *    context: 'general',
 *    cache: true
 *   }
 * }
 * ```
 *
 * **Importante:**
 *
 * Recomenda-se que as definições *default* sejam realizadas apenas uma vez na aplicação,
 * preferencialmente no módulo `AppModule`.
 *
 * **i18n com *Lazy loading***
 *
 * Para aplicações que utilizem a abordagem de módulos com carregamento *lazy loading*, caso seja
 * definida outra configuração do `PoI18nModule`, deve-se atentar os seguintes detalhes:
 *
 * - Caso existam literais comuns na aplicação, estas devem ser reimportadas;
 * - Não defina outra *default language* para este módulo. Caso for definida, será sobreposta para
 * toda a aplicação;
 * - Caso precise de módulos carregados via *lazy loading* com linguagens diferentes, utilize o
 * método [`setLanguage()`](documentation/po-i18n#setLanguage) disponibilizado pelo `PoI18nService`
 * para definir a linguagem da aplicação e dos módulos com as linguagens diferentes.
 */
var PoI18nModule = /** @class */ (function () {
    function PoI18nModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    PoI18nModule.config = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: PoI18nModule,
            providers: [
                {
                    provide: I18N_CONFIG,
                    useValue: config
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initializeLanguageDefault,
                    multi: true,
                    deps: [I18N_CONFIG, PoLanguageService]
                },
                {
                    provide: PoI18nService,
                    useFactory: returnPoI18nService,
                    deps: [I18N_CONFIG, HttpClient, PoLanguageService]
                }
            ]
        };
    };
    PoI18nModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        HttpClientModule,
                        PoLanguageModule
                    ]
                },] }
    ];
    return PoI18nModule;
}());
/**
 * @param {?} config
 * @param {?} languageService
 * @return {?}
 */
function initializeLanguageDefault(config, languageService) {
    // tslint:disable-next-line:prefer-immediate-return
    /** @type {?} */
    var setDefaultLanguage = (/**
     * @return {?}
     */
    function () {
        if (config.default.language) {
            languageService.setLanguageDefault(config.default.language);
        }
    });
    return setDefaultLanguage;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoNotificationService
 *
 * \@description
 *
 * Interface para uso do serviço po-notification.
 * @record
 */
function PoNotification() { }
if (false) {
    /**
     * Ação para a notificação.
     * @type {?|undefined}
     */
    PoNotification.prototype.action;
    /**
     * Label do botão quando houver uma ação definida.
     * @type {?|undefined}
     */
    PoNotification.prototype.actionLabel;
    /**
     * Mensagem a ser exibida na notificação.
     * @type {?}
     */
    PoNotification.prototype.message;
    /**
     * \@description
     *
     * Posição da notificação na página que pode ser ```Top``` (topo) ou ```Bottom```(rodapé).
     *
     * \@default `Bottom`
     * @type {?|undefined}
     */
    PoNotification.prototype.orientation;
    /**
     * Define em milissegundos o tempo de duração que a notificação ficará disponível em tela.
     * @type {?|undefined}
     */
    PoNotification.prototype.duration;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PoAccordionComponent, PoAccordionItemComponent, PoAccordionModule, PoAvatarComponent, PoAvatarModule, PoBreadcrumbComponent, PoBreadcrumbModule, PoButtonComponent, PoButtonGroupComponent, PoButtonGroupModule, PoButtonGroupToggle, PoButtonModule, PoCalendarComponent, PoCalendarModule, PoChartComponent, PoChartModule, PoChartType, PoCheckboxGroupComponent, PoComboComponent, PoComboFilterMode, PoComponentInjectorModule, PoComponentInjectorService, PoComponentsModule, PoContainerComponent, PoContainerModule, PoDatepickerComponent, PoDatepickerRangeComponent, PoDecimalComponent, PoDialogModule, PoDialogService, PoDialogType, PoDirectivesModule, PoDisclaimerGroupComponent, PoDisclaimerGroupModule, PoDisclaimerModule, PoDividerComponent, PoDividerModule, PoDropdownComponent, PoDropdownModule, PoDynamicFieldType, PoDynamicFormComponent, PoDynamicModule, PoDynamicViewComponent, PoEmailComponent, PoFieldModule, PoGridComponent, PoGridModule, PoGuardsModule, PoHttpInterceptorModule, PoHttpInterceptorService, PoHttpRequestInterceptorService, PoHttpRequestModule, PoI18nModule, PoI18nPipe, PoI18nService, PoInfoComponent, PoInfoModule, PoInfoOrientation, PoInputComponent, PoInterceptorsModule, PoListViewComponent, PoListViewContentTemplateDirective, PoListViewDetailTemplateDirective, PoListViewModule, PoLoadingModule, PoLoadingOverlayComponent, PoLoginComponent, PoLookupComponent, PoMenuComponent, PoMenuModule, PoMenuPanelComponent, PoMenuPanelModule, PoModalComponent, PoModalModule, PoModule, PoMultiselectComponent, PoMultiselectFilterMode, PoNavbarComponent, PoNavbarModule, PoNotificationModule, PoNotificationService, PoNumberComponent, PoPageDefaultComponent, PoPageDetailComponent, PoPageEditComponent, PoPageListComponent, PoPageModule, PoPasswordComponent, PoPipesModule, PoPopoverComponent, PoPopoverModule, PoPopupComponent, PoPopupModule, PoProgressComponent, PoProgressModule, PoProgressStatus, PoRadioGroupComponent, PoRichTextComponent, PoSelectComponent, PoSelectOptionTemplateDirective, PoServicesModule, PoSlideComponent, PoSlideModule, PoStepComponent, PoStepperComponent, PoStepperModule, PoStepperOrientation, PoStepperStatus, PoSwitchComponent, PoSwitchLabelPosition, PoTabComponent, PoTableColumnSortType, PoTableComponent, PoTableModule, PoTableRowTemplateDirective, PoTabsComponent, PoTabsModule, PoTagComponent, PoTagModule, PoTagOrientation, PoTagType, PoTextareaComponent, PoTimeModule, PoTimePipe, PoToasterOrientation, PoToasterType, PoToolbarComponent, PoToolbarModule, PoTooltipDirective, PoTooltipModule, PoUploadComponent, PoUrlComponent, PoWidgetComponent, PoWidgetModule, initializeLanguageDefault, returnPoI18nService, PoAccordionBaseComponent as ɵa, PoAccordionService as ɵb, PoChartDonutComponent as ɵba, PoChartCircular as ɵbb, PoChartDynamicTypeComponent as ɵbc, PoChartPieComponent as ɵbd, PoContainerBaseComponent as ɵbe, PoDisclaimerComponent as ɵbf, PoDisclaimerBaseComponent as ɵbg, PoDisclaimerGroupBaseComponent as ɵbh, PoDisclaimerRemoveComponent as ɵbi, PoDividerBaseComponent as ɵbj, PoPopupBaseComponent as ɵbk, PoDropdownBaseComponent as ɵbl, PoInfoBaseComponent as ɵbm, PoCheckboxGroupModule as ɵbn, PoFieldContainerModule as ɵbo, PoFieldContainerBottomComponent as ɵbp, PoFieldContainerComponent as ɵbq, PoCheckboxGroupBaseComponent as ɵbr, PoModalBaseComponent as ɵbs, PoModalService as ɵbt, PoProgressBaseComponent as ɵbu, PoProgressBarComponent as ɵbv, PoI18nBasePipe as ɵbw, PoColorPaletteModule as ɵbx, PoColorPaletteService as ɵby, PoControlPositionModule as ɵbz, PoAccordionItemBodyComponent as ɵc, PoDateTimeModule as ɵca, PoDialogComponent as ɵcb, PoDialogBaseService as ɵcc, PoToasterComponent as ɵcd, PoToasterBaseComponent as ɵce, PoPopoverBaseComponent as ɵcf, PoTableBaseComponent as ɵcg, PoTableColumnIconComponent as ɵch, PoTableColumnLabelComponent as ɵci, PoTableColumnLinkComponent as ɵcj, PoTableColumnManagerComponent as ɵck, PoTableDetailComponent as ɵcl, PoTableIconComponent as ɵcm, PoTableShowSubtitleComponent as ɵcn, PoTableSubtitleCircleComponent as ɵco, PoTableSubtitleFooterComponent as ɵcp, PoCleanComponent as ɵcq, PoCleanBaseComponent as ɵcr, PoComboBaseComponent as ɵcs, PoComboFilterService as ɵct, PoComboOptionTemplateDirective as ɵcu, PoInputBaseComponent as ɵcv, PoDatepickerBaseComponent as ɵcw, PoDatepickerRangeBaseComponent as ɵcx, PoInputGeneric as ɵcy, PoLookupBaseComponent as ɵcz, PoAccordionItemHeaderComponent as ɵd, PoLookupFilterService as ɵda, PoLookupModalService as ɵdb, PoLookupModalComponent as ɵdc, PoLookupModalBaseComponent as ɵdd, PoMultiselectBaseComponent as ɵde, PoNumberBaseComponent as ɵdf, PoRadioGroupBaseComponent as ɵdg, PoRichTextBaseComponent as ɵdh, PoRichTextBodyComponent as ɵdi, PoSelectBaseComponent as ɵdj, PoSwitchBaseComponent as ɵdk, PoTextareaBaseComponent as ɵdl, PoUploadBaseComponent as ɵdm, PoUploadService as ɵdn, PoUploadBaseService as ɵdo, PoUploadDragDropComponent as ɵdp, PoUploadDragDropAreaComponent as ɵdq, PoNotificationBaseService as ɵdr, PoCalendarComponent$1 as ɵds, PoCalendarService$1 as ɵdt, PoCalendarLangService$1 as ɵdu, PoMultiselectDropdownComponent as ɵdv, PoMultiselectItemComponent as ɵdw, PoMultiselectSearchComponent as ɵdx, PoRichTextModalComponent as ɵdy, PoRichTextToolbarComponent as ɵdz, PoAvatarBaseComponent as ɵe, PoUploadDragDropDirective as ɵea, PoUploadDragDropAreaOverlayComponent as ɵeb, PoUploadFileRestrictionsComponent as ɵec, PoTagBaseComponent as ɵed, PoDynamicFormBaseComponent as ɵee, PoDynamicFormFieldsComponent as ɵef, PoDynamicFormFieldsBaseComponent as ɵeg, PoDynamicViewBaseComponent as ɵeh, PoGridCellActionComponent as ɵei, PoGridCellComponent as ɵej, PoGridHeadComponent as ɵek, PoListViewBaseComponent as ɵel, PoBadgeModule as ɵem, PoBadgeComponent as ɵen, PoBadgeBaseComponent as ɵeo, PoMenuBaseComponent as ɵep, PoMenuService as ɵeq, PoMenuItemsService as ɵer, PoMenuHeaderTemplateDirective as ɵes, PoMenuFilterComponent as ɵet, PoMenuItemComponent as ɵeu, PoMenuPanelBaseComponent as ɵev, PoMenuPanelItemsService as ɵew, PoMenuPanelItemComponent as ɵex, PoNavbarActionsModule as ɵey, PoNavbarActionComponent as ɵez, PoBreadcrumbBaseComponent as ɵf, PoNavbarActionPopupComponent as ɵfa, PoNavbarActionsComponent as ɵfb, PoNavbarItemsModule as ɵfc, PoNavbarItemComponent as ɵfd, PoNavbarItemsComponent as ɵfe, PoNavbarItemNavigationModule as ɵff, PoNavbarItemNavigationComponent as ɵfg, PoNavbarItemNavigationIconComponent as ɵfh, PoNavbarBaseComponent as ɵfi, PoNavbarLogoComponent as ɵfj, PoPageComponent as ɵfk, PoPageBaseComponent as ɵfl, PoPageContentComponent as ɵfm, PoPageContentBaseComponent as ɵfn, PoPageDefaultBaseComponent as ɵfo, PoPageDetailBaseComponent as ɵfp, PoPageEditBaseComponent as ɵfq, PoPageHeaderComponent as ɵfr, PoPageHeaderBaseComponent as ɵfs, PoPageListBaseComponent as ɵft, PoSlideCirclesComponent as ɵfu, PoSlideBaseComponent as ɵfv, PoSlideContentTemplateDirective as ɵfw, PoSlideItemComponent as ɵfx, PoSlideControlComponent as ɵfy, PoStepperCircleComponent as ɵfz, PoBreadcrumbDropdownComponent as ɵg, PoStepperBaseComponent as ɵga, PoStepperLabelComponent as ɵgb, PoStepperStepComponent as ɵgc, PoTabButtonComponent as ɵgd, PoTabBaseComponent as ɵge, PoTabDropdownComponent as ɵgf, PoTabsBaseComponent as ɵgg, PoToolbarActionsComponent as ɵgh, PoToolbarBaseComponent as ɵgi, PoToolbarNotificationComponent as ɵgj, PoToolbarProfileComponent as ɵgk, PoWidgetBaseComponent as ɵgl, PoHttpInterceptorBaseService as ɵgm, PoHttpRequesControltService as ɵgn, PoI18nBaseService as ɵgo, I18N_CONFIG as ɵgp, PoBreadcrumbFavoriteComponent as ɵh, PoBreadcrumbFavoriteService as ɵi, PoBreadcrumbItemComponent as ɵj, PoLanguageModule as ɵk, PoLanguageService as ɵl, PoLoadingComponent as ɵm, PoLoadingBaseComponent as ɵn, PoLoadingIconComponent as ɵo, PoLoadingOverlayBaseComponent as ɵp, PoButtonBaseComponent as ɵq, PoTooltipBaseDirective as ɵr, PoControlPositionService as ɵs, PoButtonGroupBaseComponent as ɵt, PoCalendarBaseComponent as ɵu, PoDateService as ɵv, PoCalendarLangService as ɵw, PoCalendarService as ɵx, PoDateService as ɵy, PoChartBaseComponent as ɵz };
//# sourceMappingURL=portinari-portinari-ui.js.map
